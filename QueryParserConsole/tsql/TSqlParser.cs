//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\dev\ConsoleAntlrSQL\ConsoleAntlrSQL\TSqlParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConsoleAntlrSQL {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TSqlParser : Parser {
	public const int
		ADD=1, ALL=2, ALTER=3, AND=4, ANY=5, AS=6, ASC=7, AUTHORIZATION=8, BACKSLASH=9, 
		BACKUP=10, BEGIN=11, BETWEEN=12, BREAK=13, BROWSE=14, BULK=15, BY=16, 
		CASCADE=17, CASE=18, CHECK=19, CHECKPOINT=20, CLOSE=21, CLUSTERED=22, 
		COALESCE=23, COLLATE=24, COLUMN=25, COMMIT=26, COMPUTE=27, CONSTRAINT=28, 
		CONTAINS=29, CONTAINSTABLE=30, CONTINUE=31, CONVERT=32, CREATE=33, CROSS=34, 
		CURRENT=35, CURRENT_DATE=36, CURRENT_TIME=37, CURRENT_TIMESTAMP=38, CURRENT_USER=39, 
		CURSOR=40, DATABASE=41, DBCC=42, DEALLOCATE=43, DECLARE=44, DEFAULT=45, 
		DELETE=46, DENY=47, DESC=48, DISK=49, DISTINCT=50, DISTRIBUTED=51, DOUBLE=52, 
		DOUBLE_BACK_SLASH=53, DOUBLE_FORWARD_SLASH=54, DROP=55, DUMP=56, ELSE=57, 
		END=58, ERRLVL=59, ESCAPE=60, EXCEPT=61, EXECUTE=62, EXISTS=63, EXIT=64, 
		EXTERNAL=65, FETCH=66, FILE=67, FILLFACTOR=68, FOR=69, FOREIGN=70, FREETEXT=71, 
		FREETEXTTABLE=72, FROM=73, FULL=74, FUNCTION=75, GOTO=76, GRANT=77, GROUP=78, 
		HAVING=79, HOLDLOCK=80, IDENTITY=81, IDENTITY_INSERT=82, IDENTITYCOL=83, 
		IF=84, IN=85, INDEX=86, INNER=87, INSERT=88, INTERSECT=89, INTO=90, IS=91, 
		JOIN=92, KEY=93, KILL=94, LEFT=95, LIKE=96, LINENO=97, LOAD=98, MERGE=99, 
		NATIONAL=100, NEGOTIATE=101, NOCHECK=102, NONCLUSTERED=103, NOT=104, NULL_=105, 
		NULLIF=106, OF=107, OFF=108, OFFSETS=109, ON=110, OPEN=111, OPENDATASOURCE=112, 
		OPENQUERY=113, OPENROWSET=114, OPENJSON=115, OPENXML=116, OPTION=117, 
		OR=118, ORDER=119, OUTER=120, OVER=121, PERCENT=122, PIVOT=123, PLAN=124, 
		PRECISION=125, PRIMARY=126, PRINT=127, PROC=128, PROCEDURE=129, PUBLIC=130, 
		RAISERROR=131, RAW=132, READ=133, READTEXT=134, RECONFIGURE=135, REFERENCES=136, 
		REPLICATION=137, RESTORE=138, RESTRICT=139, RETURN=140, REVERT=141, REVOKE=142, 
		RIGHT=143, ROLLBACK=144, ROWCOUNT=145, ROWGUIDCOL=146, RULE=147, SAVE=148, 
		SCHEMA=149, SECURITYAUDIT=150, SELECT=151, SEMANTICKEYPHRASETABLE=152, 
		SEMANTICSIMILARITYDETAILSTABLE=153, SEMANTICSIMILARITYTABLE=154, SESSION_USER=155, 
		SET=156, SETUSER=157, SHUTDOWN=158, SOME=159, STATISTICS=160, SYSTEM_USER=161, 
		TABLE=162, TABLESAMPLE=163, TEXTSIZE=164, THEN=165, TO=166, TOP=167, TRAN=168, 
		TRANSACTION=169, TRIGGER=170, TRUNCATE=171, TSEQUAL=172, UNION=173, UNIQUE=174, 
		UNPIVOT=175, UPDATE=176, UPDATETEXT=177, USE=178, USER=179, VALUES=180, 
		VARYING=181, VIEW=182, WAITFOR=183, WHEN=184, WHERE=185, WHILE=186, WITH=187, 
		WITHIN=188, WRITETEXT=189, DOLLAR_PARTITION=190, ABSOLUTE=191, AT_KEYWORD=192, 
		ACCENT_SENSITIVITY=193, ACCESS=194, ACTION=195, ACTIVATION=196, ACTIVE=197, 
		ADDRESS=198, AES_128=199, AES_192=200, AES_256=201, AFFINITY=202, AFTER=203, 
		AGGREGATE=204, ALGORITHM=205, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=206, 
		ALLOW_SNAPSHOT_ISOLATION=207, ALLOWED=208, ANSI_NULL_DEFAULT=209, ANSI_NULLS=210, 
		ANSI_PADDING=211, ANSI_WARNINGS=212, APPLICATION_LOG=213, APPLY=214, ARITHABORT=215, 
		ASSEMBLY=216, AUDIT=217, AUDIT_GUID=218, AUTO=219, AUTO_CLEANUP=220, AUTO_CLOSE=221, 
		AUTO_CREATE_STATISTICS=222, AUTO_SHRINK=223, AUTO_UPDATE_STATISTICS=224, 
		AUTO_UPDATE_STATISTICS_ASYNC=225, AUTOGROW_ALL_FILES=226, AUTOGROW_SINGLE_FILE=227, 
		AVAILABILITY=228, AVG=229, BACKUP_PRIORITY=230, BEGIN_DIALOG=231, BIGINT=232, 
		BINARY_KEYWORD=233, BINARY_BASE64=234, BINARY_CHECKSUM=235, BINDING=236, 
		BLOB_STORAGE=237, BROKER=238, BROKER_INSTANCE=239, BULK_LOGGED=240, CALLER=241, 
		CAP_CPU_PERCENT=242, CAST=243, TRY_CAST=244, CATALOG=245, CATCH=246, CHANGE=247, 
		CHANGE_RETENTION=248, CHANGE_TRACKING=249, CHECKSUM=250, CHECKSUM_AGG=251, 
		CLEANUP=252, COLLECTION=253, COLUMN_MASTER_KEY=254, COLUMNSTORE=255, COMMITTED=256, 
		COMPATIBILITY_LEVEL=257, CONCAT=258, CONCAT_NULL_YIELDS_NULL=259, CONTENT=260, 
		CONTROL=261, COOKIE=262, COUNT=263, COUNT_BIG=264, COUNTER=265, CPU=266, 
		CREATE_NEW=267, CREATION_DISPOSITION=268, CREDENTIAL=269, CRYPTOGRAPHIC=270, 
		CUME_DIST=271, CURSOR_CLOSE_ON_COMMIT=272, CURSOR_DEFAULT=273, DATA=274, 
		DATE_CORRELATION_OPTIMIZATION=275, DATEADD=276, DATEDIFF=277, DATENAME=278, 
		DATEPART=279, DAYS=280, DB_CHAINING=281, DB_FAILOVER=282, DECRYPTION=283, 
		DEFAULT_DOUBLE_QUOTE=284, DEFAULT_FULLTEXT_LANGUAGE=285, DEFAULT_LANGUAGE=286, 
		DEFINITION=287, DELAY=288, DELAYED_DURABILITY=289, DELETED=290, DENSE_RANK=291, 
		DEPENDENTS=292, DES=293, DESCRIPTION=294, DESX=295, DHCP=296, DIALOG=297, 
		DIRECTORY_NAME=298, DISABLE=299, DISABLE_BROKER=300, DISABLED=301, DISK_DRIVE=302, 
		DOCUMENT=303, DYNAMIC=304, ELEMENTS=305, EMERGENCY=306, EMPTY=307, ENABLE=308, 
		ENABLE_BROKER=309, ENCRYPTED_VALUE=310, ENCRYPTION=311, ENDPOINT_URL=312, 
		ERROR_BROKER_CONVERSATIONS=313, EXCLUSIVE=314, EXECUTABLE=315, EXIST=316, 
		EXPAND=317, EXPIRY_DATE=318, EXPLICIT=319, FAIL_OPERATION=320, FAILOVER_MODE=321, 
		FAILURE=322, FAILURE_CONDITION_LEVEL=323, FAST=324, FAST_FORWARD=325, 
		FILEGROUP=326, FILEGROWTH=327, FILENAME=328, FILEPATH=329, FILESTREAM=330, 
		FILTER=331, FIRST=332, FIRST_VALUE=333, FOLLOWING=334, FORCE=335, FORCE_FAILOVER_ALLOW_DATA_LOSS=336, 
		FORCED=337, FORMAT=338, FORWARD_ONLY=339, FULLSCAN=340, FULLTEXT=341, 
		GB=342, GETDATE=343, GETUTCDATE=344, GLOBAL=345, GO_BATCH=346, GO=347, 
		GROUP_MAX_REQUESTS=348, GROUPING=349, GROUPING_ID=350, HADR=351, HASH=352, 
		HEALTH_CHECK_TIMEOUT=353, HIGH=354, HONOR_BROKER_PRIORITY=355, HOURS=356, 
		IDENTITY_VALUE=357, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=358, IMMEDIATE=359, 
		IMPERSONATE=360, IMPORTANCE=361, INCLUDE_NULL_VALUES=362, INCREMENTAL=363, 
		INITIATOR=364, INPUT=365, INSENSITIVE=366, INSERTED=367, INT=368, IP=369, 
		ISOLATION=370, JOB=371, JSON=372, KB=373, KEEP=374, KEEPFIXED=375, KEY_SOURCE=376, 
		KEYS=377, KEYSET=378, LAG=379, LAST=380, LAST_VALUE=381, LEAD=382, LEVEL=383, 
		LIST=384, LISTENER=385, LISTENER_URL=386, LOB_COMPACTION=387, LOCAL=388, 
		LOCATION=389, LOCK=390, LOCK_ESCALATION=391, LOGIN=392, LOOP=393, LOW=394, 
		MANUAL=395, MARK=396, MATERIALIZED=397, MAX=398, MAX_CPU_PERCENT=399, 
		MAX_DOP=400, MAX_FILES=401, MAX_IOPS_PER_VOLUME=402, MAX_MEMORY_PERCENT=403, 
		MAX_PROCESSES=404, MAX_QUEUE_READERS=405, MAX_ROLLOVER_FILES=406, MAXDOP=407, 
		MAXRECURSION=408, MAXSIZE=409, MB=410, MEDIUM=411, MEMORY_OPTIMIZED_DATA=412, 
		MESSAGE=413, MIN=414, MIN_ACTIVE_ROWVERSION=415, MIN_CPU_PERCENT=416, 
		MIN_IOPS_PER_VOLUME=417, MIN_MEMORY_PERCENT=418, MINUTES=419, MIRROR_ADDRESS=420, 
		MIXED_PAGE_ALLOCATION=421, MODE=422, MODIFY=423, MOVE=424, MULTI_USER=425, 
		NAME=426, NESTED_TRIGGERS=427, NEW_ACCOUNT=428, NEW_BROKER=429, NEW_PASSWORD=430, 
		NEWNAME=431, NEXT=432, NO=433, NO_TRUNCATE=434, NO_WAIT=435, NOCOUNT=436, 
		NODES=437, NOEXPAND=438, NON_TRANSACTED_ACCESS=439, NORECOMPUTE=440, NORECOVERY=441, 
		NOTIFICATIONS=442, NOWAIT=443, NTILE=444, NUMANODE=445, NUMBER=446, NUMERIC_ROUNDABORT=447, 
		OBJECT=448, OFFLINE=449, OFFSET=450, OLD_ACCOUNT=451, ONLINE=452, ONLY=453, 
		OPEN_EXISTING=454, OPTIMISTIC=455, OPTIMIZE=456, OUT=457, OUTPUT=458, 
		OVERRIDE=459, OWNER=460, OWNERSHIP=461, PAGE_VERIFY=462, PARAMETERIZATION=463, 
		PARTITION=464, PARTITIONS=465, PARTNER=466, PATH=467, PERCENT_RANK=468, 
		PERCENTILE_CONT=469, PERCENTILE_DISC=470, POISON_MESSAGE_HANDLING=471, 
		POOL=472, PORT=473, PRECEDING=474, PRIMARY_ROLE=475, PRIOR=476, PRIORITY=477, 
		PRIORITY_LEVEL=478, PRIVATE=479, PRIVATE_KEY=480, PRIVILEGES=481, PROCEDURE_NAME=482, 
		PROPERTY=483, PROVIDER=484, PROVIDER_KEY_NAME=485, QUERY=486, QUEUE=487, 
		QUEUE_DELAY=488, QUOTED_IDENTIFIER=489, RANGE=490, RANK=491, RC2=492, 
		RC4=493, RC4_128=494, READ_COMMITTED_SNAPSHOT=495, READ_ONLY=496, READ_ONLY_ROUTING_LIST=497, 
		READ_WRITE=498, READONLY=499, READWRITE=500, REBUILD=501, RECEIVE=502, 
		RECOMPILE=503, RECOVERY=504, RECURSIVE_TRIGGERS=505, RELATIVE=506, REMOTE=507, 
		REMOTE_SERVICE_NAME=508, REMOVE=509, REORGANIZE=510, REPEATABLE=511, REPLICA=512, 
		REQUEST_MAX_CPU_TIME_SEC=513, REQUEST_MAX_MEMORY_GRANT_PERCENT=514, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=515, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=516, RESERVE_DISK_SPACE=517, 
		RESOURCE=518, RESOURCE_MANAGER_LOCATION=519, RESTRICTED_USER=520, RETENTION=521, 
		ROBUST=522, ROOT=523, ROUTE=524, ROW=525, ROW_NUMBER=526, ROWGUID=527, 
		ROWS=528, SAMPLE=529, SCHEMABINDING=530, SCOPED=531, SCROLL=532, SCROLL_LOCKS=533, 
		SEARCH=534, SECONDARY=535, SECONDARY_ONLY=536, SECONDARY_ROLE=537, SECONDS=538, 
		SECRET=539, SECURABLES=540, SECURITY=541, SECURITY_LOG=542, SEEDING_MODE=543, 
		SELF=544, SEMI_SENSITIVE=545, SEND=546, SENT=547, SEQUENCE=548, SERIALIZABLE=549, 
		SESSION_TIMEOUT=550, SETERROR=551, SHARE=552, SHOWPLAN=553, SIGNATURE=554, 
		SIMPLE=555, SINGLE_USER=556, SIZE=557, SMALLINT=558, SNAPSHOT=559, SPATIAL_WINDOW_MAX_CELLS=560, 
		STANDBY=561, START_DATE=562, STATIC=563, STATS_STREAM=564, STATUS=565, 
		STATUSONLY=566, STDEV=567, STDEVP=568, STOPLIST=569, STRING_AGG=570, STUFF=571, 
		SUBJECT=572, SUBSCRIBE=573, SUBSCRIPTION=574, SUM=575, SUSPEND=576, SYMMETRIC=577, 
		SYNCHRONOUS_COMMIT=578, SYNONYM=579, SYSTEM=580, TAKE=581, TARGET_RECOVERY_TIME=582, 
		TB=583, TEXTIMAGE_ON=584, THROW=585, TIES=586, TIME=587, TIMEOUT=588, 
		TIMER=589, TINYINT=590, TORN_PAGE_DETECTION=591, TRACKING=592, TRANSFORM_NOISE_WORDS=593, 
		TRIPLE_DES=594, TRIPLE_DES_3KEY=595, TRUSTWORTHY=596, TRY=597, TSQL=598, 
		TWO_DIGIT_YEAR_CUTOFF=599, TYPE=600, TYPE_WARNING=601, UNBOUNDED=602, 
		UNCOMMITTED=603, UNKNOWN=604, UNLIMITED=605, UNMASK=606, UOW=607, USING=608, 
		VALID_XML=609, VALIDATION=610, VALUE=611, VAR=612, VARBINARY_KEYWORD=613, 
		VARP=614, VIEW_METADATA=615, VIEWS=616, WAIT=617, WELL_FORMED_XML=618, 
		WITHOUT_ARRAY_WRAPPER=619, WORK=620, WORKLOAD=621, XML=622, XMLDATA=623, 
		XMLNAMESPACES=624, XMLSCHEMA=625, XSINIL=626, ZONE=627, DOLLAR_ACTION=628, 
		ABORT_AFTER_WAIT=629, ABSENT=630, ADMINISTER=631, AES=632, ALLOW_CONNECTIONS=633, 
		ALLOW_MULTIPLE_EVENT_LOSS=634, ALLOW_SINGLE_EVENT_LOSS=635, ANONYMOUS=636, 
		APPEND=637, APPLICATION=638, ASYMMETRIC=639, ASYNCHRONOUS_COMMIT=640, 
		AUTHENTICATE=641, AUTHENTICATION=642, AUTOMATED_BACKUP_PREFERENCE=643, 
		AUTOMATIC=644, AVAILABILITY_MODE=645, BEFORE=646, BLOCK=647, BLOCKERS=648, 
		BLOCKSIZE=649, BLOCKING_HIERARCHY=650, BUFFER=651, BUFFERCOUNT=652, CACHE=653, 
		CALLED=654, CERTIFICATE=655, CHANGETABLE=656, CHANGES=657, CHECK_POLICY=658, 
		CHECK_EXPIRATION=659, CLASSIFIER_FUNCTION=660, CLUSTER=661, COMPRESSION=662, 
		CONNECT=663, CONNECTION=664, CONFIGURATION=665, CONTAINMENT=666, CONTEXT=667, 
		CONTINUE_AFTER_ERROR=668, CONTRACT=669, CONTRACT_NAME=670, CONVERSATION=671, 
		COPY_ONLY=672, CYCLE=673, DATA_COMPRESSION=674, DATA_SOURCE=675, DATABASE_MIRRORING=676, 
		DATASPACE=677, DDL=678, DEFAULT_DATABASE=679, DEFAULT_SCHEMA=680, DIAGNOSTICS=681, 
		DIFFERENTIAL=682, DTC_SUPPORT=683, ENABLED=684, ENDPOINT=685, ERROR=686, 
		EVENT=687, EVENTDATA=688, EVENT_RETENTION_MODE=689, EXECUTABLE_FILE=690, 
		EXPIREDATE=691, EXTENSION=692, EXTERNAL_ACCESS=693, FAILOVER=694, FAILURECONDITIONLEVEL=695, 
		FAN_IN=696, FILE_SNAPSHOT=697, FORCESEEK=698, FORCE_SERVICE_ALLOW_DATA_LOSS=699, 
		GET=700, GOVERNOR=701, HASHED=702, HEALTHCHECKTIMEOUT=703, IIF=704, IO=705, 
		INCLUDE=706, INCREMENT=707, INFINITE=708, INIT=709, INSTEAD=710, ISNULL=711, 
		KERBEROS=712, KEY_PATH=713, KEY_STORE_PROVIDER_NAME=714, LANGUAGE=715, 
		LIBRARY=716, LIFETIME=717, LINKED=718, LINUX=719, LISTENER_IP=720, LISTENER_PORT=721, 
		LOCAL_SERVICE_NAME=722, LOG=723, MASK=724, MATCHED=725, MASTER=726, MAX_MEMORY=727, 
		MAXTRANSFER=728, MAXVALUE=729, MAX_DISPATCH_LATENCY=730, MAX_DURATION=731, 
		MAX_EVENT_SIZE=732, MAX_SIZE=733, MAX_OUTSTANDING_IO_PER_VOLUME=734, MEDIADESCRIPTION=735, 
		MEDIANAME=736, MEMBER=737, MEMORY_PARTITION_MODE=738, MESSAGE_FORWARDING=739, 
		MESSAGE_FORWARD_SIZE=740, MINVALUE=741, MIRROR=742, MUST_CHANGE=743, NOFORMAT=744, 
		NOINIT=745, NONE=746, NOREWIND=747, NOSKIP=748, NOUNLOAD=749, NO_CHECKSUM=750, 
		NO_COMPRESSION=751, NO_EVENT_LOSS=752, NOTIFICATION=753, NTLM=754, OLD_PASSWORD=755, 
		ON_FAILURE=756, OPERATIONS=757, PAGE=758, PARAM_NODE=759, PARTIAL=760, 
		PASSWORD=761, PERMISSION_SET=762, PER_CPU=763, PER_DB=764, PER_NODE=765, 
		PERSISTED=766, PLATFORM=767, POLICY=768, PREDICATE=769, PROCESS=770, PROFILE=771, 
		PYTHON=772, R=773, READ_WRITE_FILEGROUPS=774, REGENERATE=775, RELATED_CONVERSATION=776, 
		RELATED_CONVERSATION_GROUP=777, REQUIRED=778, RESET=779, RESOURCES=780, 
		RESTART=781, RESUME=782, RETAINDAYS=783, RETURNS=784, REWIND=785, ROLE=786, 
		RSA_512=787, RSA_1024=788, RSA_2048=789, RSA_3072=790, RSA_4096=791, SAFETY=792, 
		SAFE=793, SCHEDULER=794, SCHEME=795, SCRIPT=796, SERVER=797, SERVICE=798, 
		SERVICE_BROKER=799, SERVICE_NAME=800, SESSION=801, SETTINGS=802, SHRINKLOG=803, 
		SID=804, SKIP_KEYWORD=805, SOFTNUMA=806, SOURCE=807, SPECIFICATION=808, 
		SPLIT=809, SQL=810, SQLDUMPERFLAGS=811, SQLDUMPERPATH=812, SQLDUMPERTIMEOUT=813, 
		STATE=814, STATS=815, START=816, STARTED=817, STARTUP_STATE=818, STOP=819, 
		STOPPED=820, STOP_ON_ERROR=821, SUPPORTED=822, SWITCH=823, TAPE=824, TARGET=825, 
		TCP=826, TRACE=827, TRACK_CAUSALITY=828, TRANSFER=829, UNCHECKED=830, 
		UNLOCK=831, UNSAFE=832, URL=833, USED=834, VERBOSELOGGING=835, VISIBILITY=836, 
		WAIT_AT_LOW_PRIORITY=837, WINDOWS=838, WITHOUT=839, WITNESS=840, XACT_ABORT=841, 
		VARCHAR=842, NVARCHAR=843, SPACE=844, COMMENT=845, LINE_COMMENT=846, DOUBLE_QUOTE_ID=847, 
		SINGLE_QUOTE=848, SQUARE_BRACKET_ID=849, LOCAL_ID=850, DECIMAL=851, ID=852, 
		STRING=853, BINARY=854, FLOAT=855, REAL=856, EQUAL=857, GREATER=858, LESS=859, 
		EXCLAMATION=860, PLUS_ASSIGN=861, MINUS_ASSIGN=862, MULT_ASSIGN=863, DIV_ASSIGN=864, 
		MOD_ASSIGN=865, AND_ASSIGN=866, XOR_ASSIGN=867, OR_ASSIGN=868, DOUBLE_BAR=869, 
		DOT=870, UNDERLINE=871, AT=872, SHARP=873, DOLLAR=874, LR_BRACKET=875, 
		RR_BRACKET=876, COMMA=877, SEMI=878, COLON=879, DOUBLE_COLON=880, STAR=881, 
		DIVIDE=882, MODULE=883, PLUS=884, MINUS=885, BIT_NOT=886, BIT_OR=887, 
		BIT_AND=888, BIT_XOR=889, IPV4_ADDR=890, IPV6_ADDR=891, ANSI_DEFAULTS=892, 
		ANSI_NULL_DFLT_OFF=893, ANSI_NULL_DFLT_ON=894, ARITHIGNORE=895, FMTONLY=896, 
		FORCEPLAN=897, IMPLICIT_TRANSACTIONS=898, NOEXEol=899, PARSEONLY=900, 
		REMOTE_PROC_TRANSACTIONS=901, SHOWPLAN_ALL=902, SHOWPLAN_TEXT=903, SHOWPLAN_XML=904, 
		VERSION=905;
	public const int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_batch_level_statement = 2, RULE_sql_clauses = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_create_application_role = 26, RULE_drop_aggregate = 27, RULE_drop_application_role = 28, 
		RULE_alter_assembly = 29, RULE_alter_assembly_start = 30, RULE_alter_assembly_clause = 31, 
		RULE_alter_assembly_from_clause = 32, RULE_alter_assembly_from_clause_start = 33, 
		RULE_alter_assembly_drop_clause = 34, RULE_alter_assembly_drop_multiple_files = 35, 
		RULE_alter_assembly_drop = 36, RULE_alter_assembly_add_clause = 37, RULE_alter_asssembly_add_clause_start = 38, 
		RULE_alter_assembly_client_file_clause = 39, RULE_alter_assembly_file_name = 40, 
		RULE_alter_assembly_file_bits = 41, RULE_alter_assembly_as = 42, RULE_alter_assembly_with_clause = 43, 
		RULE_alter_assembly_with = 44, RULE_client_assembly_specifier = 45, RULE_assembly_option = 46, 
		RULE_network_file_share = 47, RULE_network_computer = 48, RULE_network_file_start = 49, 
		RULE_file_path = 50, RULE_file_directory_path_separator = 51, RULE_local_file = 52, 
		RULE_local_drive = 53, RULE_multiple_local_files = 54, RULE_multiple_local_file_start = 55, 
		RULE_create_assembly = 56, RULE_drop_assembly = 57, RULE_alter_asymmetric_key = 58, 
		RULE_alter_asymmetric_key_start = 59, RULE_asymmetric_key_option = 60, 
		RULE_asymmetric_key_option_start = 61, RULE_asymmetric_key_password_change_option = 62, 
		RULE_create_asymmetric_key = 63, RULE_drop_asymmetric_key = 64, RULE_alter_authorization = 65, 
		RULE_authorization_grantee = 66, RULE_entity_to = 67, RULE_colon_colon = 68, 
		RULE_alter_authorization_start = 69, RULE_alter_authorization_for_sql_database = 70, 
		RULE_alter_authorization_for_azure_dw = 71, RULE_alter_authorization_for_parallel_dw = 72, 
		RULE_class_type = 73, RULE_class_type_for_sql_database = 74, RULE_class_type_for_azure_dw = 75, 
		RULE_class_type_for_parallel_dw = 76, RULE_class_type_for_grant = 77, 
		RULE_drop_availability_group = 78, RULE_alter_availability_group = 79, 
		RULE_alter_availability_group_start = 80, RULE_alter_availability_group_options = 81, 
		RULE_ip_v4_failover = 82, RULE_ip_v6_failover = 83, RULE_create_or_alter_broker_priority = 84, 
		RULE_drop_broker_priority = 85, RULE_alter_certificate = 86, RULE_alter_column_encryption_key = 87, 
		RULE_create_column_encryption_key = 88, RULE_drop_certificate = 89, RULE_drop_column_encryption_key = 90, 
		RULE_drop_column_master_key = 91, RULE_drop_contract = 92, RULE_drop_credential = 93, 
		RULE_drop_cryptograhic_provider = 94, RULE_drop_database = 95, RULE_drop_database_audit_specification = 96, 
		RULE_drop_database_encryption_key = 97, RULE_drop_database_scoped_credential = 98, 
		RULE_drop_default = 99, RULE_drop_endpoint = 100, RULE_drop_external_data_source = 101, 
		RULE_drop_external_file_format = 102, RULE_drop_external_library = 103, 
		RULE_drop_external_resource_pool = 104, RULE_drop_external_table = 105, 
		RULE_drop_event_notifications = 106, RULE_drop_event_session = 107, RULE_drop_fulltext_catalog = 108, 
		RULE_drop_fulltext_index = 109, RULE_drop_fulltext_stoplist = 110, RULE_drop_login = 111, 
		RULE_drop_master_key = 112, RULE_drop_message_type = 113, RULE_drop_partition_function = 114, 
		RULE_drop_partition_scheme = 115, RULE_drop_queue = 116, RULE_drop_remote_service_binding = 117, 
		RULE_drop_resource_pool = 118, RULE_drop_db_role = 119, RULE_drop_route = 120, 
		RULE_drop_rule = 121, RULE_drop_schema = 122, RULE_drop_search_property_list = 123, 
		RULE_drop_security_policy = 124, RULE_drop_sequence = 125, RULE_drop_server_audit = 126, 
		RULE_drop_server_audit_specification = 127, RULE_drop_server_role = 128, 
		RULE_drop_service = 129, RULE_drop_signature = 130, RULE_drop_statistics_name_azure_dw_and_pdw = 131, 
		RULE_drop_symmetric_key = 132, RULE_drop_synonym = 133, RULE_drop_user = 134, 
		RULE_drop_workload_group = 135, RULE_drop_xml_schema_collection = 136, 
		RULE_disable_trigger = 137, RULE_enable_trigger = 138, RULE_lock_table = 139, 
		RULE_truncate_table = 140, RULE_create_column_master_key = 141, RULE_alter_credential = 142, 
		RULE_create_credential = 143, RULE_alter_cryptographic_provider = 144, 
		RULE_create_cryptographic_provider = 145, RULE_create_event_notification = 146, 
		RULE_create_or_alter_event_session = 147, RULE_event_session_predicate_expression = 148, 
		RULE_event_session_predicate_factor = 149, RULE_event_session_predicate_leaf = 150, 
		RULE_alter_external_data_source = 151, RULE_alter_external_library = 152, 
		RULE_create_external_library = 153, RULE_alter_external_resource_pool = 154, 
		RULE_create_external_resource_pool = 155, RULE_alter_fulltext_catalog = 156, 
		RULE_create_fulltext_catalog = 157, RULE_alter_fulltext_stoplist = 158, 
		RULE_create_fulltext_stoplist = 159, RULE_alter_login_sql_server = 160, 
		RULE_create_login_sql_server = 161, RULE_alter_login_azure_sql = 162, 
		RULE_create_login_azure_sql = 163, RULE_alter_login_azure_sql_dw_and_pdw = 164, 
		RULE_create_login_pdw = 165, RULE_alter_master_key_sql_server = 166, RULE_create_master_key_sql_server = 167, 
		RULE_alter_master_key_azure_sql = 168, RULE_create_master_key_azure_sql = 169, 
		RULE_alter_message_type = 170, RULE_alter_partition_function = 171, RULE_alter_partition_scheme = 172, 
		RULE_alter_remote_service_binding = 173, RULE_create_remote_service_binding = 174, 
		RULE_create_resource_pool = 175, RULE_alter_resource_governor = 176, RULE_alter_db_role = 177, 
		RULE_create_db_role = 178, RULE_create_route = 179, RULE_create_rule = 180, 
		RULE_alter_schema_sql = 181, RULE_create_schema = 182, RULE_create_schema_azure_sql_dw_and_pdw = 183, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 184, RULE_create_search_property_list = 185, 
		RULE_create_security_policy = 186, RULE_alter_sequence = 187, RULE_create_sequence = 188, 
		RULE_alter_server_audit = 189, RULE_create_server_audit = 190, RULE_alter_server_audit_specification = 191, 
		RULE_create_server_audit_specification = 192, RULE_alter_server_configuration = 193, 
		RULE_alter_server_role = 194, RULE_create_server_role = 195, RULE_alter_server_role_pdw = 196, 
		RULE_alter_service = 197, RULE_create_service = 198, RULE_alter_service_master_key = 199, 
		RULE_alter_symmetric_key = 200, RULE_create_synonym = 201, RULE_alter_user = 202, 
		RULE_create_user = 203, RULE_create_user_azure_sql_dw = 204, RULE_alter_user_azure_sql = 205, 
		RULE_alter_workload_group = 206, RULE_create_workload_group = 207, RULE_create_xml_schema_collection = 208, 
		RULE_create_partition_function = 209, RULE_create_partition_scheme = 210, 
		RULE_create_queue = 211, RULE_queue_settings = 212, RULE_alter_queue = 213, 
		RULE_queue_action = 214, RULE_queue_rebuild_options = 215, RULE_create_contract = 216, 
		RULE_conversation_statement = 217, RULE_message_statement = 218, RULE_merge_statement = 219, 
		RULE_when_matches = 220, RULE_merge_matched = 221, RULE_merge_not_matched = 222, 
		RULE_delete_statement = 223, RULE_delete_statement_from = 224, RULE_insert_statement = 225, 
		RULE_insert_statement_value = 226, RULE_receive_statement = 227, RULE_select_statement_standalone = 228, 
		RULE_select_statement = 229, RULE_time = 230, RULE_update_statement = 231, 
		RULE_output_clause = 232, RULE_output_dml_list_elem = 233, RULE_create_database = 234, 
		RULE_create_index = 235, RULE_create_columnstore_index = 236, RULE_create_nonclustered_columnstore_index = 237, 
		RULE_create_xml_index = 238, RULE_create_or_alter_procedure = 239, RULE_as_external_name = 240, 
		RULE_create_or_alter_trigger = 241, RULE_create_or_alter_dml_trigger = 242, 
		RULE_dml_trigger_option = 243, RULE_dml_trigger_operation = 244, RULE_create_or_alter_ddl_trigger = 245, 
		RULE_ddl_trigger_operation = 246, RULE_create_or_alter_function = 247, 
		RULE_func_body_returns_select = 248, RULE_func_body_returns_table = 249, 
		RULE_func_body_returns_scalar = 250, RULE_procedure_param = 251, RULE_procedure_option = 252, 
		RULE_function_option = 253, RULE_create_statistics = 254, RULE_update_statistics = 255, 
		RULE_create_table = 256, RULE_table_indices = 257, RULE_table_options = 258, 
		RULE_create_view = 259, RULE_view_attribute = 260, RULE_alter_table = 261, 
		RULE_switch_partition = 262, RULE_low_priority_lock_wait = 263, RULE_alter_database = 264, 
		RULE_add_or_modify_files = 265, RULE_filespec = 266, RULE_add_or_modify_filegroups = 267, 
		RULE_filegroup_updatability_option = 268, RULE_database_optionspec = 269, 
		RULE_auto_option = 270, RULE_change_tracking_option = 271, RULE_change_tracking_option_list = 272, 
		RULE_containment_option = 273, RULE_cursor_option = 274, RULE_alter_endpoint = 275, 
		RULE_database_mirroring_option = 276, RULE_mirroring_set_option = 277, 
		RULE_mirroring_partner = 278, RULE_mirroring_witness = 279, RULE_witness_partner_equal = 280, 
		RULE_partner_option = 281, RULE_witness_option = 282, RULE_witness_server = 283, 
		RULE_partner_server = 284, RULE_mirroring_host_port_seperator = 285, RULE_partner_server_tcp_prefix = 286, 
		RULE_port_number = 287, RULE_host = 288, RULE_date_correlation_optimization_option = 289, 
		RULE_db_encryption_option = 290, RULE_db_state_option = 291, RULE_db_update_option = 292, 
		RULE_db_user_access_option = 293, RULE_delayed_durability_option = 294, 
		RULE_external_access_option = 295, RULE_hadr_options = 296, RULE_mixed_page_allocation_option = 297, 
		RULE_parameterization_option = 298, RULE_recovery_option = 299, RULE_service_broker_option = 300, 
		RULE_snapshot_option = 301, RULE_sql_option = 302, RULE_target_recovery_time_option = 303, 
		RULE_termination = 304, RULE_drop_index = 305, RULE_drop_relational_or_xml_or_spatial_index = 306, 
		RULE_drop_backward_compatible_index = 307, RULE_drop_procedure = 308, 
		RULE_drop_trigger = 309, RULE_drop_dml_trigger = 310, RULE_drop_ddl_trigger = 311, 
		RULE_drop_function = 312, RULE_drop_statistics = 313, RULE_drop_table = 314, 
		RULE_drop_view = 315, RULE_create_type = 316, RULE_drop_type = 317, RULE_rowset_function_limited = 318, 
		RULE_openquery = 319, RULE_opendatasource = 320, RULE_declare_statement = 321, 
		RULE_xml_declaration = 322, RULE_cursor_statement = 323, RULE_backup_database = 324, 
		RULE_backup_log = 325, RULE_backup_certificate = 326, RULE_backup_master_key = 327, 
		RULE_backup_service_master_key = 328, RULE_kill_statement = 329, RULE_kill_process = 330, 
		RULE_kill_query_notification = 331, RULE_kill_stats_job = 332, RULE_execute_statement = 333, 
		RULE_execute_body_batch = 334, RULE_execute_body = 335, RULE_execute_statement_arg = 336, 
		RULE_execute_statement_arg_named = 337, RULE_execute_statement_arg_unnamed = 338, 
		RULE_execute_parameter = 339, RULE_execute_var_string = 340, RULE_security_statement = 341, 
		RULE_principal_id = 342, RULE_create_certificate = 343, RULE_existing_keys = 344, 
		RULE_private_key_options = 345, RULE_generate_new_keys = 346, RULE_date_options = 347, 
		RULE_open_key = 348, RULE_close_key = 349, RULE_create_key = 350, RULE_key_options = 351, 
		RULE_algorithm = 352, RULE_encryption_mechanism = 353, RULE_decryption_mechanism = 354, 
		RULE_grant_permission = 355, RULE_set_statement = 356, RULE_transaction_statement = 357, 
		RULE_go_batch_statement = 358, RULE_go_statement = 359, RULE_use_statement = 360, 
		RULE_setuser_statement = 361, RULE_reconfigure_statement = 362, RULE_shutdown_statement = 363, 
		RULE_checkpoint_statement = 364, RULE_dbcc_special = 365, RULE_dbcc_clause = 366, 
		RULE_dbcc_command = 367, RULE_dbcc_options = 368, RULE_execute_clause = 369, 
		RULE_declare_local = 370, RULE_table_type_definition = 371, RULE_table_type_indices = 372, 
		RULE_xml_type_definition = 373, RULE_xml_schema_collection = 374, RULE_column_def_table_constraints = 375, 
		RULE_column_def_table_constraint = 376, RULE_column_definition = 377, 
		RULE_materialized_column_definition = 378, RULE_column_constraint = 379, 
		RULE_table_constraint = 380, RULE_on_delete = 381, RULE_on_update = 382, 
		RULE_index_options = 383, RULE_index_option = 384, RULE_declare_cursor = 385, 
		RULE_declare_set_cursor_common = 386, RULE_declare_set_cursor_common_partial = 387, 
		RULE_fetch_cursor = 388, RULE_set_special = 389, RULE_special_list = 390, 
		RULE_constant_LOCAL_ID = 391, RULE_expression = 392, RULE_time_zone = 393, 
		RULE_primitive_expression = 394, RULE_case_expression = 395, RULE_unary_operator_expression = 396, 
		RULE_bracket_expression = 397, RULE_constant_expression = 398, RULE_subquery = 399, 
		RULE_with_expression = 400, RULE_common_table_expression = 401, RULE_update_elem = 402, 
		RULE_update_elem_merge = 403, RULE_search_condition = 404, RULE_predicate = 405, 
		RULE_query_expression = 406, RULE_sql_union = 407, RULE_query_specification = 408, 
		RULE_top_clause = 409, RULE_top_percent = 410, RULE_top_count = 411, RULE_order_by_clause = 412, 
		RULE_for_clause = 413, RULE_xml_common_directives = 414, RULE_order_by_expression = 415, 
		RULE_group_by_item = 416, RULE_option_clause = 417, RULE_option = 418, 
		RULE_optimize_for_arg = 419, RULE_select_list = 420, RULE_udt_method_arguments = 421, 
		RULE_asterisk = 422, RULE_column_elem = 423, RULE_udt_elem = 424, RULE_expression_elem = 425, 
		RULE_select_list_elem = 426, RULE_table_sources = 427, RULE_table_source = 428, 
		RULE_table_source_item_joined = 429, RULE_table_source_item = 430, RULE_open_xml = 431, 
		RULE_open_json = 432, RULE_json_declaration = 433, RULE_json_column_declaration = 434, 
		RULE_schema_declaration = 435, RULE_column_declaration = 436, RULE_change_table = 437, 
		RULE_change_table_changes = 438, RULE_change_table_version = 439, RULE_join_part = 440, 
		RULE_join_on = 441, RULE_cross_join = 442, RULE_apply_ = 443, RULE_pivot = 444, 
		RULE_unpivot = 445, RULE_pivot_clause = 446, RULE_unpivot_clause = 447, 
		RULE_full_column_name_list = 448, RULE_table_name_with_hint = 449, RULE_rowset_function = 450, 
		RULE_bulk_option = 451, RULE_derived_table = 452, RULE_function_call = 453, 
		RULE_partition_function = 454, RULE_freetext_function = 455, RULE_freetext_predicate = 456, 
		RULE_built_in_functions = 457, RULE_xml_data_type_methods = 458, RULE_value_method = 459, 
		RULE_value_call = 460, RULE_query_method = 461, RULE_query_call = 462, 
		RULE_exist_method = 463, RULE_exist_call = 464, RULE_modify_method = 465, 
		RULE_modify_call = 466, RULE_nodes_method = 467, RULE_switch_section = 468, 
		RULE_switch_search_condition_section = 469, RULE_as_column_alias = 470, 
		RULE_as_table_alias = 471, RULE_table_alias = 472, RULE_with_table_hints = 473, 
		RULE_insert_with_table_hints = 474, RULE_table_hint = 475, RULE_index_value = 476, 
		RULE_column_alias_list = 477, RULE_column_alias = 478, RULE_table_value_constructor = 479, 
		RULE_expression_list = 480, RULE_ranking_windowed_function = 481, RULE_aggregate_windowed_function = 482, 
		RULE_analytic_windowed_function = 483, RULE_all_distinct_expression = 484, 
		RULE_over_clause = 485, RULE_row_or_range_clause = 486, RULE_window_frame_extent = 487, 
		RULE_window_frame_bound = 488, RULE_window_frame_preceding = 489, RULE_window_frame_following = 490, 
		RULE_create_database_option = 491, RULE_database_filestream_option = 492, 
		RULE_database_file_spec = 493, RULE_file_group = 494, RULE_file_spec = 495, 
		RULE_entity_name = 496, RULE_entity_name_for_azure_dw = 497, RULE_entity_name_for_parallel_dw = 498, 
		RULE_full_table_name = 499, RULE_table_name = 500, RULE_simple_name = 501, 
		RULE_func_proc_name_schema = 502, RULE_func_proc_name_database_schema = 503, 
		RULE_func_proc_name_server_database_schema = 504, RULE_ddl_object = 505, 
		RULE_full_column_name = 506, RULE_column_name_list_with_order = 507, RULE_insert_column_name_list = 508, 
		RULE_insert_column_id = 509, RULE_column_name_list = 510, RULE_cursor_name = 511, 
		RULE_on_off = 512, RULE_clustered = 513, RULE_null_notnull = 514, RULE_null_or_default = 515, 
		RULE_scalar_function_name = 516, RULE_begin_conversation_timer = 517, 
		RULE_begin_conversation_dialog = 518, RULE_contract_name = 519, RULE_service_name = 520, 
		RULE_end_conversation = 521, RULE_waitfor_conversation = 522, RULE_get_conversation = 523, 
		RULE_queue_id = 524, RULE_send_conversation = 525, RULE_data_type = 526, 
		RULE_default_value = 527, RULE_constant = 528, RULE_sign = 529, RULE_keyword = 530, 
		RULE_id_ = 531, RULE_simple_id = 532, RULE_id_or_string = 533, RULE_comparison_operator = 534, 
		RULE_assignment_operator = 535, RULE_file_size = 536;
	public static readonly string[] ruleNames = {
		"tsql_file", "batch", "batch_level_statement", "sql_clauses", "dml_clause", 
		"ddl_clause", "backup_statement", "cfl_statement", "block_statement", 
		"break_statement", "continue_statement", "goto_statement", "return_statement", 
		"if_statement", "throw_statement", "throw_error_number", "throw_message", 
		"throw_state", "try_catch_statement", "waitfor_statement", "while_statement", 
		"print_statement", "raiseerror_statement", "empty_statement", "another_statement", 
		"alter_application_role", "create_application_role", "drop_aggregate", 
		"drop_application_role", "alter_assembly", "alter_assembly_start", "alter_assembly_clause", 
		"alter_assembly_from_clause", "alter_assembly_from_clause_start", "alter_assembly_drop_clause", 
		"alter_assembly_drop_multiple_files", "alter_assembly_drop", "alter_assembly_add_clause", 
		"alter_asssembly_add_clause_start", "alter_assembly_client_file_clause", 
		"alter_assembly_file_name", "alter_assembly_file_bits", "alter_assembly_as", 
		"alter_assembly_with_clause", "alter_assembly_with", "client_assembly_specifier", 
		"assembly_option", "network_file_share", "network_computer", "network_file_start", 
		"file_path", "file_directory_path_separator", "local_file", "local_drive", 
		"multiple_local_files", "multiple_local_file_start", "create_assembly", 
		"drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "class_type_for_grant", 
		"drop_availability_group", "alter_availability_group", "alter_availability_group_start", 
		"alter_availability_group_options", "ip_v4_failover", "ip_v6_failover", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_encryption_key", "drop_database_scoped_credential", "drop_default", 
		"drop_endpoint", "drop_external_data_source", "drop_external_file_format", 
		"drop_external_library", "drop_external_resource_pool", "drop_external_table", 
		"drop_event_notifications", "drop_event_session", "drop_fulltext_catalog", 
		"drop_fulltext_index", "drop_fulltext_stoplist", "drop_login", "drop_master_key", 
		"drop_message_type", "drop_partition_function", "drop_partition_scheme", 
		"drop_queue", "drop_remote_service_binding", "drop_resource_pool", "drop_db_role", 
		"drop_route", "drop_rule", "drop_schema", "drop_search_property_list", 
		"drop_security_policy", "drop_sequence", "drop_server_audit", "drop_server_audit_specification", 
		"drop_server_role", "drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"alter_cryptographic_provider", "create_cryptographic_provider", "create_event_notification", 
		"create_or_alter_event_session", "event_session_predicate_expression", 
		"event_session_predicate_factor", "event_session_predicate_leaf", "alter_external_data_source", 
		"alter_external_library", "create_external_library", "alter_external_resource_pool", 
		"create_external_resource_pool", "alter_fulltext_catalog", "create_fulltext_catalog", 
		"alter_fulltext_stoplist", "create_fulltext_stoplist", "alter_login_sql_server", 
		"create_login_sql_server", "alter_login_azure_sql", "create_login_azure_sql", 
		"alter_login_azure_sql_dw_and_pdw", "create_login_pdw", "alter_master_key_sql_server", 
		"create_master_key_sql_server", "alter_master_key_azure_sql", "create_master_key_azure_sql", 
		"alter_message_type", "alter_partition_function", "alter_partition_scheme", 
		"alter_remote_service_binding", "create_remote_service_binding", "create_resource_pool", 
		"alter_resource_governor", "alter_db_role", "create_db_role", "create_route", 
		"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "create_service", "alter_service_master_key", 
		"alter_symmetric_key", "create_synonym", "alter_user", "create_user", 
		"create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_partition_function", 
		"create_partition_scheme", "create_queue", "queue_settings", "alter_queue", 
		"queue_action", "queue_rebuild_options", "create_contract", "conversation_statement", 
		"message_statement", "merge_statement", "when_matches", "merge_matched", 
		"merge_not_matched", "delete_statement", "delete_statement_from", "insert_statement", 
		"insert_statement_value", "receive_statement", "select_statement_standalone", 
		"select_statement", "time", "update_statement", "output_clause", "output_dml_list_elem", 
		"create_database", "create_index", "create_columnstore_index", "create_nonclustered_columnstore_index", 
		"create_xml_index", "create_or_alter_procedure", "as_external_name", "create_or_alter_trigger", 
		"create_or_alter_dml_trigger", "dml_trigger_option", "dml_trigger_operation", 
		"create_or_alter_ddl_trigger", "ddl_trigger_operation", "create_or_alter_function", 
		"func_body_returns_select", "func_body_returns_table", "func_body_returns_scalar", 
		"procedure_param", "procedure_option", "function_option", "create_statistics", 
		"update_statistics", "create_table", "table_indices", "table_options", 
		"create_view", "view_attribute", "alter_table", "switch_partition", "low_priority_lock_wait", 
		"alter_database", "add_or_modify_files", "filespec", "add_or_modify_filegroups", 
		"filegroup_updatability_option", "database_optionspec", "auto_option", 
		"change_tracking_option", "change_tracking_option_list", "containment_option", 
		"cursor_option", "alter_endpoint", "database_mirroring_option", "mirroring_set_option", 
		"mirroring_partner", "mirroring_witness", "witness_partner_equal", "partner_option", 
		"witness_option", "witness_server", "partner_server", "mirroring_host_port_seperator", 
		"partner_server_tcp_prefix", "port_number", "host", "date_correlation_optimization_option", 
		"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
		"delayed_durability_option", "external_access_option", "hadr_options", 
		"mixed_page_allocation_option", "parameterization_option", "recovery_option", 
		"service_broker_option", "snapshot_option", "sql_option", "target_recovery_time_option", 
		"termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
		"drop_backward_compatible_index", "drop_procedure", "drop_trigger", "drop_dml_trigger", 
		"drop_ddl_trigger", "drop_function", "drop_statistics", "drop_table", 
		"drop_view", "create_type", "drop_type", "rowset_function_limited", "openquery", 
		"opendatasource", "declare_statement", "xml_declaration", "cursor_statement", 
		"backup_database", "backup_log", "backup_certificate", "backup_master_key", 
		"backup_service_master_key", "kill_statement", "kill_process", "kill_query_notification", 
		"kill_stats_job", "execute_statement", "execute_body_batch", "execute_body", 
		"execute_statement_arg", "execute_statement_arg_named", "execute_statement_arg_unnamed", 
		"execute_parameter", "execute_var_string", "security_statement", "principal_id", 
		"create_certificate", "existing_keys", "private_key_options", "generate_new_keys", 
		"date_options", "open_key", "close_key", "create_key", "key_options", 
		"algorithm", "encryption_mechanism", "decryption_mechanism", "grant_permission", 
		"set_statement", "transaction_statement", "go_batch_statement", "go_statement", 
		"use_statement", "setuser_statement", "reconfigure_statement", "shutdown_statement", 
		"checkpoint_statement", "dbcc_special", "dbcc_clause", "dbcc_command", 
		"dbcc_options", "execute_clause", "declare_local", "table_type_definition", 
		"table_type_indices", "xml_type_definition", "xml_schema_collection", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"materialized_column_definition", "column_constraint", "table_constraint", 
		"on_delete", "on_update", "index_options", "index_option", "declare_cursor", 
		"declare_set_cursor_common", "declare_set_cursor_common_partial", "fetch_cursor", 
		"set_special", "special_list", "constant_LOCAL_ID", "expression", "time_zone", 
		"primitive_expression", "case_expression", "unary_operator_expression", 
		"bracket_expression", "constant_expression", "subquery", "with_expression", 
		"common_table_expression", "update_elem", "update_elem_merge", "search_condition", 
		"predicate", "query_expression", "sql_union", "query_specification", "top_clause", 
		"top_percent", "top_count", "order_by_clause", "for_clause", "xml_common_directives", 
		"order_by_expression", "group_by_item", "option_clause", "option", "optimize_for_arg", 
		"select_list", "udt_method_arguments", "asterisk", "column_elem", "udt_elem", 
		"expression_elem", "select_list_elem", "table_sources", "table_source", 
		"table_source_item_joined", "table_source_item", "open_xml", "open_json", 
		"json_declaration", "json_column_declaration", "schema_declaration", "column_declaration", 
		"change_table", "change_table_changes", "change_table_version", "join_part", 
		"join_on", "cross_join", "apply_", "pivot", "unpivot", "pivot_clause", 
		"unpivot_clause", "full_column_name_list", "table_name_with_hint", "rowset_function", 
		"bulk_option", "derived_table", "function_call", "partition_function", 
		"freetext_function", "freetext_predicate", "built_in_functions", "xml_data_type_methods", 
		"value_method", "value_call", "query_method", "query_call", "exist_method", 
		"exist_call", "modify_method", "modify_call", "nodes_method", "switch_section", 
		"switch_search_condition_section", "as_column_alias", "as_table_alias", 
		"table_alias", "with_table_hints", "insert_with_table_hints", "table_hint", 
		"index_value", "column_alias_list", "column_alias", "table_value_constructor", 
		"expression_list", "ranking_windowed_function", "aggregate_windowed_function", 
		"analytic_windowed_function", "all_distinct_expression", "over_clause", 
		"row_or_range_clause", "window_frame_extent", "window_frame_bound", "window_frame_preceding", 
		"window_frame_following", "create_database_option", "database_filestream_option", 
		"database_file_spec", "file_group", "file_spec", "entity_name", "entity_name_for_azure_dw", 
		"entity_name_for_parallel_dw", "full_table_name", "table_name", "simple_name", 
		"func_proc_name_schema", "func_proc_name_database_schema", "func_proc_name_server_database_schema", 
		"ddl_object", "full_column_name", "column_name_list_with_order", "insert_column_name_list", 
		"insert_column_id", "column_name_list", "cursor_name", "on_off", "clustered", 
		"null_notnull", "null_or_default", "scalar_function_name", "begin_conversation_timer", 
		"begin_conversation_dialog", "contract_name", "service_name", "end_conversation", 
		"waitfor_conversation", "get_conversation", "queue_id", "send_conversation", 
		"data_type", "default_value", "constant", "sign", "keyword", "id_", "simple_id", 
		"id_or_string", "comparison_operator", "assignment_operator", "file_size"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ADD'", "'ALL'", "'ALTER'", "'AND'", "'ANY'", "'AS'", "'ASC'", 
		"'AUTHORIZATION'", "'\\'", "'BACKUP'", "'BEGIN'", "'BETWEEN'", "'BREAK'", 
		"'BROWSE'", "'BULK'", "'BY'", "'CASCADE'", "'CASE'", "'CHECK'", "'CHECKPOINT'", 
		"'CLOSE'", "'CLUSTERED'", "'COALESCE'", "'COLLATE'", "'COLUMN'", "'COMMIT'", 
		"'COMPUTE'", "'CONSTRAINT'", "'CONTAINS'", "'CONTAINSTABLE'", "'CONTINUE'", 
		null, "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DBCC'", 
		"'DEALLOCATE'", "'DECLARE'", "'DEFAULT'", "'DELETE'", "'DENY'", "'DESC'", 
		"'DISK'", "'DISTINCT'", "'DISTRIBUTED'", "'DOUBLE'", "'\\\\'", "'//'", 
		"'DROP'", "'DUMP'", "'ELSE'", "'END'", "'ERRLVL'", "'ESCAPE'", "'EXCEPT'", 
		null, "'EXISTS'", "'EXIT'", "'EXTERNAL'", "'FETCH'", "'FILE'", "'FILLFACTOR'", 
		"'FOR'", "'FOREIGN'", "'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", 
		"'FUNCTION'", "'GOTO'", "'GRANT'", "'GROUP'", "'HAVING'", "'HOLDLOCK'", 
		"'IDENTITY'", "'IDENTITY_INSERT'", "'IDENTITYCOL'", "'IF'", "'IN'", "'INDEX'", 
		"'INNER'", "'INSERT'", "'INTERSECT'", "'INTO'", "'IS'", "'JOIN'", "'KEY'", 
		"'KILL'", "'LEFT'", "'LIKE'", "'LINENO'", "'LOAD'", "'MERGE'", "'NATIONAL'", 
		"'NEGOTIATE'", "'NOCHECK'", "'NONCLUSTERED'", "'NOT'", "'NULL'", "'NULLIF'", 
		"'OF'", "'OFF'", "'OFFSETS'", "'ON'", "'OPEN'", "'OPENDATASOURCE'", "'OPENQUERY'", 
		"'OPENROWSET'", "'OPENJSON'", "'OPENXML'", "'OPTION'", "'OR'", "'ORDER'", 
		"'OUTER'", "'OVER'", "'PERCENT'", "'PIVOT'", "'PLAN'", "'PRECISION'", 
		"'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", "'PUBLIC'", "'RAISERROR'", 
		"'RAW'", "'READ'", "'READTEXT'", "'RECONFIGURE'", "'REFERENCES'", "'REPLICATION'", 
		"'RESTORE'", "'RESTRICT'", "'RETURN'", "'REVERT'", "'REVOKE'", "'RIGHT'", 
		"'ROLLBACK'", "'ROWCOUNT'", "'ROWGUIDCOL'", "'RULE'", "'SAVE'", "'SCHEMA'", 
		"'SECURITYAUDIT'", "'SELECT'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
		"'SEMANTICSIMILARITYTABLE'", "'SESSION_USER'", "'SET'", "'SETUSER'", "'SHUTDOWN'", 
		"'SOME'", "'STATISTICS'", "'SYSTEM_USER'", "'TABLE'", "'TABLESAMPLE'", 
		"'TEXTSIZE'", "'THEN'", "'TO'", "'TOP'", "'TRAN'", "'TRANSACTION'", "'TRIGGER'", 
		"'TRUNCATE'", "'TSEQUAL'", "'UNION'", "'UNIQUE'", "'UNPIVOT'", "'UPDATE'", 
		"'UPDATETEXT'", "'USE'", "'USER'", "'VALUES'", "'VARYING'", "'VIEW'", 
		"'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WITHIN'", "'WRITETEXT'", 
		"'$PARTITION'", "'ABSOLUTE'", "'AT'", "'ACCENT_SENSITIVITY'", "'ACCESS'", 
		"'ACTION'", "'ACTIVATION'", "'ACTIVE'", "'ADDRESS'", "'AES_128'", "'AES_192'", 
		"'AES_256'", "'AFFINITY'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_SNAPSHOT_ISOLATION'", "'ALLOWED'", "'ANSI_NULL_DEFAULT'", "'ANSI_NULLS'", 
		"'ANSI_PADDING'", "'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", 
		"'ASSEMBLY'", "'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
		"'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
		"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AUTOGROW_ALL_FILES'", "'AUTOGROW_SINGLE_FILE'", 
		"'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", "'BEGIN_DIALOG'", "'BIGINT'", 
		"'BINARY'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", "'BINDING'", "'BLOB_STORAGE'", 
		"'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", "'CALLER'", "'CAP_CPU_PERCENT'", 
		"'CAST'", "'TRY_CAST'", "'CATALOG'", "'CATCH'", "'CHANGE'", "'CHANGE_RETENTION'", 
		"'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
		"'COLUMN_MASTER_KEY'", "'COLUMNSTORE'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", 
		"'CONCAT'", "'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", 
		"'COUNT'", "'COUNT_BIG'", "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
		"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CUME_DIST'", "'CURSOR_CLOSE_ON_COMMIT'", 
		"'CURSOR_DEFAULT'", "'DATA'", "'DATE_CORRELATION_OPTIMIZATION'", "'DATEADD'", 
		"'DATEDIFF'", "'DATENAME'", "'DATEPART'", "'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", 
		"'DECRYPTION'", null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", 
		"'DEFINITION'", "'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", 
		"'DEPENDENTS'", "'DES'", "'DESCRIPTION'", "'DESX'", "'DHCP'", "'DIALOG'", 
		"'DIRECTORY_NAME'", "'DISABLE'", "'DISABLE_BROKER'", "'DISABLED'", null, 
		"'DOCUMENT'", "'DYNAMIC'", "'ELEMENTS'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", 
		"'ENABLE_BROKER'", "'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENDPOINT_URL'", 
		"'ERROR_BROKER_CONVERSATIONS'", "'EXCLUSIVE'", "'EXECUTABLE'", "'EXIST'", 
		"'EXPAND'", "'EXPIRY_DATE'", "'EXPLICIT'", "'FAIL_OPERATION'", "'FAILOVER_MODE'", 
		"'FAILURE'", "'FAILURE_CONDITION_LEVEL'", "'FAST'", "'FAST_FORWARD'", 
		"'FILEGROUP'", "'FILEGROWTH'", "'FILENAME'", "'FILEPATH'", "'FILESTREAM'", 
		"'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", "'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", 
		"'FORCED'", "'FORMAT'", "'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", 
		"'GB'", "'GETDATE'", "'GETUTCDATE'", "'GLOBAL'", null, "'GO'", "'GROUP_MAX_REQUESTS'", 
		"'GROUPING'", "'GROUPING_ID'", "'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", 
		"'HIGH'", "'HONOR_BROKER_PRIORITY'", "'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
		"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
		"'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
		"'INT'", "'IP'", "'ISOLATION'", "'JOB'", "'JSON'", "'KB'", "'KEEP'", "'KEEPFIXED'", 
		"'KEY_SOURCE'", "'KEYS'", "'KEYSET'", "'LAG'", "'LAST'", "'LAST_VALUE'", 
		"'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", "'LOB_COMPACTION'", 
		"'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOGIN'", "'LOOP'", 
		"'LOW'", "'MANUAL'", "'MARK'", "'MATERIALIZED'", "'MAX'", "'MAX_CPU_PERCENT'", 
		"'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY_PERCENT'", 
		"'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", "'MAXDOP'", 
		"'MAXRECURSION'", "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
		"'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
		"'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
		"'NEWNAME'", "'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", 
		"'NODES'", "'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NORECOVERY'", 
		"'NOTIFICATIONS'", "'NOWAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
		"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
		"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
		"'OVERRIDE'", "'OWNER'", "'OWNERSHIP'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", 
		"'PARTITION'", "'PARTITIONS'", "'PARTNER'", "'PATH'", "'PERCENT_RANK'", 
		"'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'POISON_MESSAGE_HANDLING'", 
		"'POOL'", "'PORT'", "'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", 
		"'PRIORITY_LEVEL'", "'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", 
		"'PROPERTY'", "'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUERY'", "'QUEUE'", 
		"'QUEUE_DELAY'", "'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", 
		"'RC4'", "'RC4_128'", "'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'READONLY'", "'READWRITE'", "'REBUILD'", "'RECEIVE'", 
		"'RECOMPILE'", "'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOTE'", 
		"'REMOTE_SERVICE_NAME'", "'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", 
		"'REQUEST_MAX_CPU_TIME_SEC'", "'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
		"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESERVE_DISK_SPACE'", 
		"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", 
		"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", 
		"'ROWS'", "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
		"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
		"'SECRET'", "'SECURABLES'", "'SECURITY'", "'SECURITY_LOG'", "'SEEDING_MODE'", 
		"'SELF'", "'SEMI_SENSITIVE'", "'SEND'", "'SENT'", "'SEQUENCE'", "'SERIALIZABLE'", 
		"'SESSION_TIMEOUT'", "'SETERROR'", "'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", 
		"'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", 
		"'STANDBY'", "'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", 
		"'STATUSONLY'", "'STDEV'", "'STDEVP'", "'STOPLIST'", "'STRING_AGG'", "'STUFF'", 
		"'SUBJECT'", "'SUBSCRIBE'", "'SUBSCRIPTION'", "'SUM'", "'SUSPEND'", "'SYMMETRIC'", 
		"'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'SYSTEM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", 
		"'TB'", "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", 
		"'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", "'TRACKING'", "'TRANSFORM_NOISE_WORDS'", 
		"'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", "'TRY'", "'TSQL'", 
		"'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPE_WARNING'", "'UNBOUNDED'", 
		"'UNCOMMITTED'", "'UNKNOWN'", "'UNLIMITED'", "'UNMASK'", "'UOW'", "'USING'", 
		"'VALID_XML'", "'VALIDATION'", "'VALUE'", "'VAR'", "'VARBINARY'", "'VARP'", 
		"'VIEW_METADATA'", "'VIEWS'", "'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", 
		"'WORK'", "'WORKLOAD'", "'XML'", "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", 
		"'XSINIL'", "'ZONE'", "'$ACTION'", "'ABORT_AFTER_WAIT'", "'ABSENT'", "'ADMINISTER'", 
		"'AES'", "'ALLOW_CONNECTIONS'", "'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_SINGLE_EVENT_LOSS'", 
		"'ANONYMOUS'", "'APPEND'", "'APPLICATION'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", 
		"'AUTHENTICATE'", "'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'", 
		"'AUTOMATIC'", "'AVAILABILITY_MODE'", "'BEFORE'", "'BLOCK'", "'BLOCKERS'", 
		"'BLOCKSIZE'", "'BLOCKING_HIERARCHY'", "'BUFFER'", "'BUFFERCOUNT'", "'CACHE'", 
		"'CALLED'", "'CERTIFICATE'", "'CHANGETABLE'", "'CHANGES'", "'CHECK_POLICY'", 
		"'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'", "'CLUSTER'", "'COMPRESSION'", 
		"'CONNECT'", "'CONNECTION'", "'CONFIGURATION'", "'CONTAINMENT'", "'CONTEXT'", 
		"'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", "'CONVERSATION'", 
		"'COPY_ONLY'", "'CYCLE'", "'DATA_COMPRESSION'", "'DATA_SOURCE'", "'DATABASE_MIRRORING'", 
		"'DATASPACE'", "'DDL'", "'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DIAGNOSTICS'", 
		"'DIFFERENTIAL'", "'DTC_SUPPORT'", "'ENABLED'", "'ENDPOINT'", "'ERROR'", 
		"'EVENT'", null, "'EVENT_RETENTION_MODE'", "'EXECUTABLE_FILE'", "'EXPIREDATE'", 
		"'EXTENSION'", "'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", 
		"'FAN_IN'", "'FILE_SNAPSHOT'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", 
		"'GET'", "'GOVERNOR'", "'HASHED'", "'HEALTHCHECKTIMEOUT'", "'IIF'", "'IO'", 
		"'INCLUDE'", "'INCREMENT'", "'INFINITE'", "'INIT'", "'INSTEAD'", "'ISNULL'", 
		"'KERBEROS'", "'KEY_PATH'", "'KEY_STORE_PROVIDER_NAME'", "'LANGUAGE'", 
		"'LIBRARY'", "'LIFETIME'", "'LINKED'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", 
		"'LOCAL_SERVICE_NAME'", "'LOG'", "'MASK'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", 
		"'MAXTRANSFER'", "'MAXVALUE'", "'MAX_DISPATCH_LATENCY'", "'MAX_DURATION'", 
		"'MAX_EVENT_SIZE'", "'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", 
		"'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", "'MESSAGE_FORWARDING'", 
		"'MESSAGE_FORWARD_SIZE'", "'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", "'NOFORMAT'", 
		"'NOINIT'", "'NONE'", "'NOREWIND'", "'NOSKIP'", "'NOUNLOAD'", "'NO_CHECKSUM'", 
		"'NO_COMPRESSION'", "'NO_EVENT_LOSS'", "'NOTIFICATION'", "'NTLM'", "'OLD_PASSWORD'", 
		"'ON_FAILURE'", "'OPERATIONS'", "'PAGE'", "'PARAM_NODE'", "'PARTIAL'", 
		"'PASSWORD'", "'PERMISSION_SET'", "'PER_CPU'", "'PER_DB'", "'PER_NODE'", 
		"'PERSISTED'", "'PLATFORM'", "'POLICY'", "'PREDICATE'", "'PROCESS'", "'PROFILE'", 
		"'PYTHON'", "'R'", "'READ_WRITE_FILEGROUPS'", "'REGENERATE'", "'RELATED_CONVERSATION'", 
		"'RELATED_CONVERSATION_GROUP'", "'REQUIRED'", "'RESET'", "'RESOURCES'", 
		"'RESTART'", "'RESUME'", "'RETAINDAYS'", "'RETURNS'", "'REWIND'", "'ROLE'", 
		"'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", "'RSA_4096'", "'SAFETY'", 
		"'SAFE'", "'SCHEDULER'", "'SCHEME'", "'SCRIPT'", "'SERVER'", "'SERVICE'", 
		"'SERVICE_BROKER'", "'SERVICE_NAME'", "'SESSION'", "'SETTINGS'", "'SHRINKLOG'", 
		"'SID'", "'SKIP'", "'SOFTNUMA'", "'SOURCE'", "'SPECIFICATION'", "'SPLIT'", 
		"'SQL'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", 
		"'STATE'", "'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", "'STOP'", 
		"'STOPPED'", "'STOP_ON_ERROR'", "'SUPPORTED'", "'SWITCH'", "'TAPE'", "'TARGET'", 
		"'TCP'", "'TRACE'", "'TRACK_CAUSALITY'", "'TRANSFER'", "'UNCHECKED'", 
		"'UNLOCK'", "'UNSAFE'", "'URL'", "'USED'", "'VERBOSELOGGING'", "'VISIBILITY'", 
		"'WAIT_AT_LOW_PRIORITY'", "'WINDOWS'", "'WITHOUT'", "'WITNESS'", "'XACT_ABORT'", 
		"'VARCHAR'", "'NVARCHAR'", null, null, null, null, "'''", null, null, 
		null, null, null, null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'||'", "'.'", 
		"'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'::'", 
		"'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "AUTHORIZATION", 
		"BACKSLASH", "BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", 
		"BY", "CASCADE", "CASE", "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED", 
		"COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINS", 
		"CONTAINSTABLE", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", 
		"DATABASE", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", "DENY", 
		"DESC", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
		"DOUBLE_FORWARD_SLASH", "DROP", "DUMP", "ELSE", "END", "ERRLVL", "ESCAPE", 
		"EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXTERNAL", "FETCH", "FILE", "FILLFACTOR", 
		"FOR", "FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", 
		"GOTO", "GRANT", "GROUP", "HAVING", "HOLDLOCK", "IDENTITY", "IDENTITY_INSERT", 
		"IDENTITYCOL", "IF", "IN", "INDEX", "INNER", "INSERT", "INTERSECT", "INTO", 
		"IS", "JOIN", "KEY", "KILL", "LEFT", "LIKE", "LINENO", "LOAD", "MERGE", 
		"NATIONAL", "NEGOTIATE", "NOCHECK", "NONCLUSTERED", "NOT", "NULL_", "NULLIF", 
		"OF", "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", 
		"OPENJSON", "OPENXML", "OPTION", "OR", "ORDER", "OUTER", "OVER", "PERCENT", 
		"PIVOT", "PLAN", "PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE", 
		"PUBLIC", "RAISERROR", "RAW", "READ", "READTEXT", "RECONFIGURE", "REFERENCES", 
		"REPLICATION", "RESTORE", "RESTRICT", "RETURN", "REVERT", "REVOKE", "RIGHT", 
		"ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", "SECURITYAUDIT", 
		"SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
		"SEMANTICSIMILARITYTABLE", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", 
		"SOME", "STATISTICS", "SYSTEM_USER", "TABLE", "TABLESAMPLE", "TEXTSIZE", 
		"THEN", "TO", "TOP", "TRAN", "TRANSACTION", "TRIGGER", "TRUNCATE", "TSEQUAL", 
		"UNION", "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", "USE", "USER", "VALUES", 
		"VARYING", "VIEW", "WAITFOR", "WHEN", "WHERE", "WHILE", "WITH", "WITHIN", 
		"WRITETEXT", "DOLLAR_PARTITION", "ABSOLUTE", "AT_KEYWORD", "ACCENT_SENSITIVITY", 
		"ACCESS", "ACTION", "ACTIVATION", "ACTIVE", "ADDRESS", "AES_128", "AES_192", 
		"AES_256", "AFFINITY", "AFTER", "AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
		"ALLOW_SNAPSHOT_ISOLATION", "ALLOWED", "ANSI_NULL_DEFAULT", "ANSI_NULLS", 
		"ANSI_PADDING", "ANSI_WARNINGS", "APPLICATION_LOG", "APPLY", "ARITHABORT", 
		"ASSEMBLY", "AUDIT", "AUDIT_GUID", "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", 
		"AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
		"AUTOGROW_ALL_FILES", "AUTOGROW_SINGLE_FILE", "AVAILABILITY", "AVG", "BACKUP_PRIORITY", 
		"BEGIN_DIALOG", "BIGINT", "BINARY_KEYWORD", "BINARY_BASE64", "BINARY_CHECKSUM", 
		"BINDING", "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", "BULK_LOGGED", 
		"CALLER", "CAP_CPU_PERCENT", "CAST", "TRY_CAST", "CATALOG", "CATCH", "CHANGE", 
		"CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", 
		"COLLECTION", "COLUMN_MASTER_KEY", "COLUMNSTORE", "COMMITTED", "COMPATIBILITY_LEVEL", 
		"CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTENT", "CONTROL", "COOKIE", "COUNT", 
		"COUNT_BIG", "COUNTER", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", 
		"CRYPTOGRAPHIC", "CUME_DIST", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
		"DATA", "DATE_CORRELATION_OPTIMIZATION", "DATEADD", "DATEDIFF", "DATENAME", 
		"DATEPART", "DAYS", "DB_CHAINING", "DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", 
		"DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", "DEFINITION", "DELAY", 
		"DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DEPENDENTS", "DES", "DESCRIPTION", 
		"DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", "DISABLE", "DISABLE_BROKER", 
		"DISABLED", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", "ELEMENTS", "EMERGENCY", 
		"EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", "ENCRYPTION", "ENDPOINT_URL", 
		"ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", "EXECUTABLE", "EXIST", "EXPAND", 
		"EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", "FAILOVER_MODE", "FAILURE", 
		"FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
		"FILENAME", "FILEPATH", "FILESTREAM", "FILTER", "FIRST", "FIRST_VALUE", 
		"FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", "FORCED", "FORMAT", 
		"FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", "GETUTCDATE", 
		"GLOBAL", "GO_BATCH", "GO", "GROUP_MAX_REQUESTS", "GROUPING", "GROUPING_ID", 
		"HADR", "HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", 
		"HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
		"IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", "INITIATOR", 
		"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "JOB", "JSON", 
		"KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", "LAG", "LAST", 
		"LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", "LOB_COMPACTION", 
		"LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", "LOW", 
		"MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", "MAX_DOP", 
		"MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
		"MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
		"MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MINUTES", 
		"MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MOVE", "MULTI_USER", 
		"NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", 
		"NEWNAME", "NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", 
		"NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOTIFICATIONS", 
		"NOWAIT", "NTILE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", 
		"OFFLINE", "OFFSET", "OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", 
		"OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OVERRIDE", "OWNER", "OWNERSHIP", 
		"PAGE_VERIFY", "PARAMETERIZATION", "PARTITION", "PARTITIONS", "PARTNER", 
		"PATH", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "POISON_MESSAGE_HANDLING", 
		"POOL", "PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", 
		"PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", 
		"PROVIDER", "PROVIDER_KEY_NAME", "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
		"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
		"READ_ONLY_ROUTING_LIST", "READ_WRITE", "READONLY", "READWRITE", "REBUILD", 
		"RECEIVE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", 
		"REMOTE", "REMOTE_SERVICE_NAME", "REMOVE", "REORGANIZE", "REPEATABLE", 
		"REPLICA", "REQUEST_MAX_CPU_TIME_SEC", "REQUEST_MAX_MEMORY_GRANT_PERCENT", 
		"REQUEST_MEMORY_GRANT_TIMEOUT_SEC", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", 
		"RESERVE_DISK_SPACE", "RESOURCE", "RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", 
		"RETENTION", "ROBUST", "ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", 
		"ROWS", "SAMPLE", "SCHEMABINDING", "SCOPED", "SCROLL", "SCROLL_LOCKS", 
		"SEARCH", "SECONDARY", "SECONDARY_ONLY", "SECONDARY_ROLE", "SECONDS", 
		"SECRET", "SECURABLES", "SECURITY", "SECURITY_LOG", "SEEDING_MODE", "SELF", 
		"SEMI_SENSITIVE", "SEND", "SENT", "SEQUENCE", "SERIALIZABLE", "SESSION_TIMEOUT", 
		"SETERROR", "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", 
		"SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STANDBY", 
		"START_DATE", "STATIC", "STATS_STREAM", "STATUS", "STATUSONLY", "STDEV", 
		"STDEVP", "STOPLIST", "STRING_AGG", "STUFF", "SUBJECT", "SUBSCRIBE", "SUBSCRIPTION", 
		"SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", 
		"TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", "TIES", 
		"TIME", "TIMEOUT", "TIMER", "TINYINT", "TORN_PAGE_DETECTION", "TRACKING", 
		"TRANSFORM_NOISE_WORDS", "TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", 
		"TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", "UNBOUNDED", 
		"UNCOMMITTED", "UNKNOWN", "UNLIMITED", "UNMASK", "UOW", "USING", "VALID_XML", 
		"VALIDATION", "VALUE", "VAR", "VARBINARY_KEYWORD", "VARP", "VIEW_METADATA", 
		"VIEWS", "WAIT", "WELL_FORMED_XML", "WITHOUT_ARRAY_WRAPPER", "WORK", "WORKLOAD", 
		"XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XSINIL", "ZONE", "DOLLAR_ACTION", 
		"ABORT_AFTER_WAIT", "ABSENT", "ADMINISTER", "AES", "ALLOW_CONNECTIONS", 
		"ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_SINGLE_EVENT_LOSS", "ANONYMOUS", "APPEND", 
		"APPLICATION", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUTHENTICATE", "AUTHENTICATION", 
		"AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE", "BEFORE", 
		"BLOCK", "BLOCKERS", "BLOCKSIZE", "BLOCKING_HIERARCHY", "BUFFER", "BUFFERCOUNT", 
		"CACHE", "CALLED", "CERTIFICATE", "CHANGETABLE", "CHANGES", "CHECK_POLICY", 
		"CHECK_EXPIRATION", "CLASSIFIER_FUNCTION", "CLUSTER", "COMPRESSION", "CONNECT", 
		"CONNECTION", "CONFIGURATION", "CONTAINMENT", "CONTEXT", "CONTINUE_AFTER_ERROR", 
		"CONTRACT", "CONTRACT_NAME", "CONVERSATION", "COPY_ONLY", "CYCLE", "DATA_COMPRESSION", 
		"DATA_SOURCE", "DATABASE_MIRRORING", "DATASPACE", "DDL", "DEFAULT_DATABASE", 
		"DEFAULT_SCHEMA", "DIAGNOSTICS", "DIFFERENTIAL", "DTC_SUPPORT", "ENABLED", 
		"ENDPOINT", "ERROR", "EVENT", "EVENTDATA", "EVENT_RETENTION_MODE", "EXECUTABLE_FILE", 
		"EXPIREDATE", "EXTENSION", "EXTERNAL_ACCESS", "FAILOVER", "FAILURECONDITIONLEVEL", 
		"FAN_IN", "FILE_SNAPSHOT", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
		"GET", "GOVERNOR", "HASHED", "HEALTHCHECKTIMEOUT", "IIF", "IO", "INCLUDE", 
		"INCREMENT", "INFINITE", "INIT", "INSTEAD", "ISNULL", "KERBEROS", "KEY_PATH", 
		"KEY_STORE_PROVIDER_NAME", "LANGUAGE", "LIBRARY", "LIFETIME", "LINKED", 
		"LINUX", "LISTENER_IP", "LISTENER_PORT", "LOCAL_SERVICE_NAME", "LOG", 
		"MASK", "MATCHED", "MASTER", "MAX_MEMORY", "MAXTRANSFER", "MAXVALUE", 
		"MAX_DISPATCH_LATENCY", "MAX_DURATION", "MAX_EVENT_SIZE", "MAX_SIZE", 
		"MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", "MEMBER", 
		"MEMORY_PARTITION_MODE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MINVALUE", "MIRROR", "MUST_CHANGE", "NOFORMAT", "NOINIT", "NONE", "NOREWIND", 
		"NOSKIP", "NOUNLOAD", "NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", 
		"NOTIFICATION", "NTLM", "OLD_PASSWORD", "ON_FAILURE", "OPERATIONS", "PAGE", 
		"PARAM_NODE", "PARTIAL", "PASSWORD", "PERMISSION_SET", "PER_CPU", "PER_DB", 
		"PER_NODE", "PERSISTED", "PLATFORM", "POLICY", "PREDICATE", "PROCESS", 
		"PROFILE", "PYTHON", "R", "READ_WRITE_FILEGROUPS", "REGENERATE", "RELATED_CONVERSATION", 
		"RELATED_CONVERSATION_GROUP", "REQUIRED", "RESET", "RESOURCES", "RESTART", 
		"RESUME", "RETAINDAYS", "RETURNS", "REWIND", "ROLE", "RSA_512", "RSA_1024", 
		"RSA_2048", "RSA_3072", "RSA_4096", "SAFETY", "SAFE", "SCHEDULER", "SCHEME", 
		"SCRIPT", "SERVER", "SERVICE", "SERVICE_BROKER", "SERVICE_NAME", "SESSION", 
		"SETTINGS", "SHRINKLOG", "SID", "SKIP_KEYWORD", "SOFTNUMA", "SOURCE", 
		"SPECIFICATION", "SPLIT", "SQL", "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", 
		"STATE", "STATS", "START", "STARTED", "STARTUP_STATE", "STOP", "STOPPED", 
		"STOP_ON_ERROR", "SUPPORTED", "SWITCH", "TAPE", "TARGET", "TCP", "TRACE", 
		"TRACK_CAUSALITY", "TRANSFER", "UNCHECKED", "UNLOCK", "UNSAFE", "URL", 
		"USED", "VERBOSELOGGING", "VISIBILITY", "WAIT_AT_LOW_PRIORITY", "WINDOWS", 
		"WITHOUT", "WITNESS", "XACT_ABORT", "VARCHAR", "NVARCHAR", "SPACE", "COMMENT", 
		"LINE_COMMENT", "DOUBLE_QUOTE_ID", "SINGLE_QUOTE", "SQUARE_BRACKET_ID", 
		"LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", "REAL", "EQUAL", 
		"GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", 
		"DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", 
		"COMMA", "SEMI", "COLON", "DOUBLE_COLON", "STAR", "DIVIDE", "MODULE", 
		"PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", "IPV4_ADDR", 
		"IPV6_ADDR", "ANSI_DEFAULTS", "ANSI_NULL_DFLT_OFF", "ANSI_NULL_DFLT_ON", 
		"ARITHIGNORE", "FMTONLY", "FORCEPLAN", "IMPLICIT_TRANSACTIONS", "NOEXEol", 
		"PARSEONLY", "REMOTE_PROC_TRANSACTIONS", "SHOWPLAN_ALL", "SHOWPLAN_TEXT", 
		"SHOWPLAN_XML", "VERSION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TSqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Tsql_fileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TSqlParser.Eof, 0); }
		public BatchContext[] batch() {
			return GetRuleContexts<BatchContext>();
		}
		public BatchContext batch(int i) {
			return GetRuleContext<BatchContext>(i);
		}
		public Execute_body_batchContext execute_body_batch() {
			return GetRuleContext<Execute_body_batchContext>(0);
		}
		public Go_batch_statementContext[] go_batch_statement() {
			return GetRuleContexts<Go_batch_statementContext>();
		}
		public Go_batch_statementContext go_batch_statement(int i) {
			return GetRuleContext<Go_batch_statementContext>(i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsql_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTsql_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTsql_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsql_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tsql_fileContext tsql_file() {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_tsql_file);
		try {
			int _alt;
			State = 1090;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1077;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1074; batch();
						}
						} 
					}
					State = 1079;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				}
				State = 1080; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1081; execute_body_batch();
				State = 1085;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1082; go_batch_statement();
						}
						} 
					}
					State = 1087;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				}
				State = 1088; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BatchContext : ParserRuleContext {
		public Go_batch_statementContext go_batch_statement() {
			return GetRuleContext<Go_batch_statementContext>(0);
		}
		public Execute_body_batchContext execute_body_batch() {
			return GetRuleContext<Execute_body_batchContext>(0);
		}
		public Go_statementContext[] go_statement() {
			return GetRuleContexts<Go_statementContext>();
		}
		public Go_statementContext go_statement(int i) {
			return GetRuleContext<Go_statementContext>(i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Batch_level_statementContext batch_level_statement() {
			return GetRuleContext<Batch_level_statementContext>(0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BatchContext batch() {
		BatchContext _localctx = new BatchContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			State = 1118;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1092; go_batch_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1094;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 1093; execute_body_batch();
					}
					break;
				}
				State = 1102;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 1096; go_batch_statement();
					}
					break;

				case 2:
					{
					State = 1098;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 1097; sql_clauses();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1100;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				State = 1107;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1104; go_statement();
						}
						} 
					}
					State = 1109;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1110; batch_level_statement();
				State = 1114;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1111; go_statement();
						}
						} 
					}
					State = 1116;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1117; go_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Batch_level_statementContext : ParserRuleContext {
		public Create_or_alter_functionContext create_or_alter_function() {
			return GetRuleContext<Create_or_alter_functionContext>(0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return GetRuleContext<Create_or_alter_procedureContext>(0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return GetRuleContext<Create_or_alter_triggerContext>(0);
		}
		public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		public Batch_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch_level_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch_level_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch_level_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBatch_level_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Batch_level_statementContext batch_level_statement() {
		Batch_level_statementContext _localctx = new Batch_level_statementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_batch_level_statement);
		try {
			State = 1124;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1120; create_or_alter_function();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1121; create_or_alter_procedure();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1122; create_or_alter_trigger();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1123; create_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clausesContext : ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return GetRuleContext<Dml_clauseContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Cfl_statementContext cfl_statement() {
			return GetRuleContext<Cfl_statementContext>(0);
		}
		public Another_statementContext another_statement() {
			return GetRuleContext<Another_statementContext>(0);
		}
		public Ddl_clauseContext ddl_clause() {
			return GetRuleContext<Ddl_clauseContext>(0);
		}
		public Dbcc_specialContext dbcc_special() {
			return GetRuleContext<Dbcc_specialContext>(0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return GetRuleContext<Dbcc_clauseContext>(0);
		}
		public Backup_statementContext backup_statement() {
			return GetRuleContext<Backup_statementContext>(0);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clausesContext sql_clauses() {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_sql_clauses);
		try {
			State = 1155;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1126; dml_clause();
				State = 1128;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					State = 1127; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1130; cfl_statement();
				State = 1132;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					State = 1131; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1134; another_statement();
				State = 1136;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 1135; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1138; ddl_clause();
				State = 1140;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 1139; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1142; dbcc_special();
				State = 1144;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					State = 1143; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1146; dbcc_clause();
				State = 1148;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 1147; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1150; backup_statement();
				State = 1152;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					State = 1151; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1154; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_clauseContext : ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_clauseContext dml_clause() {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_dml_clause);
		try {
			State = 1162;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1157; merge_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1158; delete_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1159; insert_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1160; select_statement_standalone();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1161; update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_clauseContext : ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return GetRuleContext<Alter_application_roleContext>(0);
		}
		public Alter_assemblyContext alter_assembly() {
			return GetRuleContext<Alter_assemblyContext>(0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return GetRuleContext<Alter_asymmetric_keyContext>(0);
		}
		public Alter_authorizationContext alter_authorization() {
			return GetRuleContext<Alter_authorizationContext>(0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return GetRuleContext<Alter_authorization_for_azure_dwContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return GetRuleContext<Alter_authorization_for_parallel_dwContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return GetRuleContext<Alter_authorization_for_sql_databaseContext>(0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return GetRuleContext<Alter_availability_groupContext>(0);
		}
		public Alter_certificateContext alter_certificate() {
			return GetRuleContext<Alter_certificateContext>(0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return GetRuleContext<Alter_column_encryption_keyContext>(0);
		}
		public Alter_credentialContext alter_credential() {
			return GetRuleContext<Alter_credentialContext>(0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return GetRuleContext<Alter_cryptographic_providerContext>(0);
		}
		public Alter_databaseContext alter_database() {
			return GetRuleContext<Alter_databaseContext>(0);
		}
		public Alter_db_roleContext alter_db_role() {
			return GetRuleContext<Alter_db_roleContext>(0);
		}
		public Alter_endpointContext alter_endpoint() {
			return GetRuleContext<Alter_endpointContext>(0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return GetRuleContext<Create_or_alter_event_sessionContext>(0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return GetRuleContext<Alter_external_data_sourceContext>(0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return GetRuleContext<Alter_external_libraryContext>(0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return GetRuleContext<Alter_external_resource_poolContext>(0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return GetRuleContext<Alter_fulltext_catalogContext>(0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return GetRuleContext<Alter_fulltext_stoplistContext>(0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return GetRuleContext<Alter_login_azure_sqlContext>(0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_login_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return GetRuleContext<Alter_login_sql_serverContext>(0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return GetRuleContext<Alter_master_key_azure_sqlContext>(0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return GetRuleContext<Alter_master_key_sql_serverContext>(0);
		}
		public Alter_message_typeContext alter_message_type() {
			return GetRuleContext<Alter_message_typeContext>(0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return GetRuleContext<Alter_partition_functionContext>(0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return GetRuleContext<Alter_partition_schemeContext>(0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return GetRuleContext<Alter_remote_service_bindingContext>(0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return GetRuleContext<Alter_resource_governorContext>(0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return GetRuleContext<Alter_schema_sqlContext>(0);
		}
		public Alter_sequenceContext alter_sequence() {
			return GetRuleContext<Alter_sequenceContext>(0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return GetRuleContext<Alter_server_auditContext>(0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return GetRuleContext<Alter_server_audit_specificationContext>(0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return GetRuleContext<Alter_server_configurationContext>(0);
		}
		public Alter_server_roleContext alter_server_role() {
			return GetRuleContext<Alter_server_roleContext>(0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return GetRuleContext<Alter_server_role_pdwContext>(0);
		}
		public Alter_serviceContext alter_service() {
			return GetRuleContext<Alter_serviceContext>(0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return GetRuleContext<Alter_service_master_keyContext>(0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return GetRuleContext<Alter_symmetric_keyContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_userContext alter_user() {
			return GetRuleContext<Alter_userContext>(0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return GetRuleContext<Alter_user_azure_sqlContext>(0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return GetRuleContext<Alter_workload_groupContext>(0);
		}
		public Create_application_roleContext create_application_role() {
			return GetRuleContext<Create_application_roleContext>(0);
		}
		public Create_assemblyContext create_assembly() {
			return GetRuleContext<Create_assemblyContext>(0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return GetRuleContext<Create_asymmetric_keyContext>(0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return GetRuleContext<Create_column_encryption_keyContext>(0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return GetRuleContext<Create_column_master_keyContext>(0);
		}
		public Create_credentialContext create_credential() {
			return GetRuleContext<Create_credentialContext>(0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return GetRuleContext<Create_cryptographic_providerContext>(0);
		}
		public Create_databaseContext create_database() {
			return GetRuleContext<Create_databaseContext>(0);
		}
		public Create_db_roleContext create_db_role() {
			return GetRuleContext<Create_db_roleContext>(0);
		}
		public Create_event_notificationContext create_event_notification() {
			return GetRuleContext<Create_event_notificationContext>(0);
		}
		public Create_external_libraryContext create_external_library() {
			return GetRuleContext<Create_external_libraryContext>(0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return GetRuleContext<Create_external_resource_poolContext>(0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return GetRuleContext<Create_fulltext_catalogContext>(0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return GetRuleContext<Create_fulltext_stoplistContext>(0);
		}
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_columnstore_indexContext create_columnstore_index() {
			return GetRuleContext<Create_columnstore_indexContext>(0);
		}
		public Create_nonclustered_columnstore_indexContext create_nonclustered_columnstore_index() {
			return GetRuleContext<Create_nonclustered_columnstore_indexContext>(0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return GetRuleContext<Create_login_azure_sqlContext>(0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return GetRuleContext<Create_login_pdwContext>(0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return GetRuleContext<Create_login_sql_serverContext>(0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return GetRuleContext<Create_master_key_azure_sqlContext>(0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return GetRuleContext<Create_master_key_sql_serverContext>(0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return GetRuleContext<Create_or_alter_broker_priorityContext>(0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return GetRuleContext<Create_remote_service_bindingContext>(0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return GetRuleContext<Create_resource_poolContext>(0);
		}
		public Create_routeContext create_route() {
			return GetRuleContext<Create_routeContext>(0);
		}
		public Create_ruleContext create_rule() {
			return GetRuleContext<Create_ruleContext>(0);
		}
		public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Create_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return GetRuleContext<Create_search_property_listContext>(0);
		}
		public Create_security_policyContext create_security_policy() {
			return GetRuleContext<Create_security_policyContext>(0);
		}
		public Create_sequenceContext create_sequence() {
			return GetRuleContext<Create_sequenceContext>(0);
		}
		public Create_server_auditContext create_server_audit() {
			return GetRuleContext<Create_server_auditContext>(0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return GetRuleContext<Create_server_audit_specificationContext>(0);
		}
		public Create_server_roleContext create_server_role() {
			return GetRuleContext<Create_server_roleContext>(0);
		}
		public Create_serviceContext create_service() {
			return GetRuleContext<Create_serviceContext>(0);
		}
		public Create_statisticsContext create_statistics() {
			return GetRuleContext<Create_statisticsContext>(0);
		}
		public Create_synonymContext create_synonym() {
			return GetRuleContext<Create_synonymContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		public Create_userContext create_user() {
			return GetRuleContext<Create_userContext>(0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return GetRuleContext<Create_user_azure_sql_dwContext>(0);
		}
		public Create_workload_groupContext create_workload_group() {
			return GetRuleContext<Create_workload_groupContext>(0);
		}
		public Create_xml_indexContext create_xml_index() {
			return GetRuleContext<Create_xml_indexContext>(0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return GetRuleContext<Create_xml_schema_collectionContext>(0);
		}
		public Create_partition_functionContext create_partition_function() {
			return GetRuleContext<Create_partition_functionContext>(0);
		}
		public Create_partition_schemeContext create_partition_scheme() {
			return GetRuleContext<Create_partition_schemeContext>(0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return GetRuleContext<Drop_aggregateContext>(0);
		}
		public Drop_application_roleContext drop_application_role() {
			return GetRuleContext<Drop_application_roleContext>(0);
		}
		public Drop_assemblyContext drop_assembly() {
			return GetRuleContext<Drop_assemblyContext>(0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return GetRuleContext<Drop_asymmetric_keyContext>(0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return GetRuleContext<Drop_availability_groupContext>(0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return GetRuleContext<Drop_broker_priorityContext>(0);
		}
		public Drop_certificateContext drop_certificate() {
			return GetRuleContext<Drop_certificateContext>(0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return GetRuleContext<Drop_column_encryption_keyContext>(0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return GetRuleContext<Drop_column_master_keyContext>(0);
		}
		public Drop_contractContext drop_contract() {
			return GetRuleContext<Drop_contractContext>(0);
		}
		public Drop_credentialContext drop_credential() {
			return GetRuleContext<Drop_credentialContext>(0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return GetRuleContext<Drop_cryptograhic_providerContext>(0);
		}
		public Drop_databaseContext drop_database() {
			return GetRuleContext<Drop_databaseContext>(0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return GetRuleContext<Drop_database_audit_specificationContext>(0);
		}
		public Drop_database_encryption_keyContext drop_database_encryption_key() {
			return GetRuleContext<Drop_database_encryption_keyContext>(0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return GetRuleContext<Drop_database_scoped_credentialContext>(0);
		}
		public Drop_db_roleContext drop_db_role() {
			return GetRuleContext<Drop_db_roleContext>(0);
		}
		public Drop_defaultContext drop_default() {
			return GetRuleContext<Drop_defaultContext>(0);
		}
		public Drop_endpointContext drop_endpoint() {
			return GetRuleContext<Drop_endpointContext>(0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return GetRuleContext<Drop_event_notificationsContext>(0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return GetRuleContext<Drop_event_sessionContext>(0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return GetRuleContext<Drop_external_data_sourceContext>(0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return GetRuleContext<Drop_external_file_formatContext>(0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return GetRuleContext<Drop_external_libraryContext>(0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return GetRuleContext<Drop_external_resource_poolContext>(0);
		}
		public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return GetRuleContext<Drop_fulltext_catalogContext>(0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return GetRuleContext<Drop_fulltext_indexContext>(0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return GetRuleContext<Drop_fulltext_stoplistContext>(0);
		}
		public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		public Drop_loginContext drop_login() {
			return GetRuleContext<Drop_loginContext>(0);
		}
		public Drop_master_keyContext drop_master_key() {
			return GetRuleContext<Drop_master_keyContext>(0);
		}
		public Drop_message_typeContext drop_message_type() {
			return GetRuleContext<Drop_message_typeContext>(0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return GetRuleContext<Drop_partition_functionContext>(0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return GetRuleContext<Drop_partition_schemeContext>(0);
		}
		public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		public Drop_queueContext drop_queue() {
			return GetRuleContext<Drop_queueContext>(0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return GetRuleContext<Drop_remote_service_bindingContext>(0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return GetRuleContext<Drop_resource_poolContext>(0);
		}
		public Drop_routeContext drop_route() {
			return GetRuleContext<Drop_routeContext>(0);
		}
		public Drop_ruleContext drop_rule() {
			return GetRuleContext<Drop_ruleContext>(0);
		}
		public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return GetRuleContext<Drop_search_property_listContext>(0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return GetRuleContext<Drop_security_policyContext>(0);
		}
		public Drop_sequenceContext drop_sequence() {
			return GetRuleContext<Drop_sequenceContext>(0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return GetRuleContext<Drop_server_auditContext>(0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return GetRuleContext<Drop_server_audit_specificationContext>(0);
		}
		public Drop_server_roleContext drop_server_role() {
			return GetRuleContext<Drop_server_roleContext>(0);
		}
		public Drop_serviceContext drop_service() {
			return GetRuleContext<Drop_serviceContext>(0);
		}
		public Drop_signatureContext drop_signature() {
			return GetRuleContext<Drop_signatureContext>(0);
		}
		public Drop_statisticsContext drop_statistics() {
			return GetRuleContext<Drop_statisticsContext>(0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return GetRuleContext<Drop_statistics_name_azure_dw_and_pdwContext>(0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return GetRuleContext<Drop_symmetric_keyContext>(0);
		}
		public Drop_synonymContext drop_synonym() {
			return GetRuleContext<Drop_synonymContext>(0);
		}
		public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		public Drop_triggerContext drop_trigger() {
			return GetRuleContext<Drop_triggerContext>(0);
		}
		public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		public Drop_userContext drop_user() {
			return GetRuleContext<Drop_userContext>(0);
		}
		public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return GetRuleContext<Drop_workload_groupContext>(0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return GetRuleContext<Drop_xml_schema_collectionContext>(0);
		}
		public Disable_triggerContext disable_trigger() {
			return GetRuleContext<Disable_triggerContext>(0);
		}
		public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		public Lock_tableContext lock_table() {
			return GetRuleContext<Lock_tableContext>(0);
		}
		public Truncate_tableContext truncate_table() {
			return GetRuleContext<Truncate_tableContext>(0);
		}
		public Update_statisticsContext update_statistics() {
			return GetRuleContext<Update_statisticsContext>(0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_clauseContext ddl_clause() {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ddl_clause);
		try {
			State = 1324;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1164; alter_application_role();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1165; alter_assembly();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1166; alter_asymmetric_key();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1167; alter_authorization();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1168; alter_authorization_for_azure_dw();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1169; alter_authorization_for_parallel_dw();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1170; alter_authorization_for_sql_database();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1171; alter_availability_group();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1172; alter_certificate();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1173; alter_column_encryption_key();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1174; alter_credential();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1175; alter_cryptographic_provider();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1176; alter_database();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1177; alter_db_role();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1178; alter_endpoint();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1179; create_or_alter_event_session();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1180; alter_external_data_source();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1181; alter_external_library();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1182; alter_external_resource_pool();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1183; alter_fulltext_catalog();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1184; alter_fulltext_stoplist();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1185; alter_login_azure_sql();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1186; alter_login_azure_sql_dw_and_pdw();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1187; alter_login_sql_server();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1188; alter_master_key_azure_sql();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1189; alter_master_key_sql_server();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1190; alter_message_type();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1191; alter_partition_function();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1192; alter_partition_scheme();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1193; alter_remote_service_binding();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1194; alter_resource_governor();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1195; alter_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1196; alter_schema_sql();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1197; alter_sequence();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1198; alter_server_audit();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1199; alter_server_audit_specification();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1200; alter_server_configuration();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1201; alter_server_role();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1202; alter_server_role_pdw();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1203; alter_service();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1204; alter_service_master_key();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1205; alter_symmetric_key();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1206; alter_table();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1207; alter_user();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1208; alter_user_azure_sql();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1209; alter_workload_group();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1210; create_application_role();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1211; create_assembly();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1212; create_asymmetric_key();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1213; create_column_encryption_key();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1214; create_column_master_key();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1215; create_credential();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1216; create_cryptographic_provider();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1217; create_database();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1218; create_db_role();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1219; create_event_notification();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1220; create_external_library();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1221; create_external_resource_pool();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1222; create_fulltext_catalog();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1223; create_fulltext_stoplist();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1224; create_index();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1225; create_columnstore_index();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1226; create_nonclustered_columnstore_index();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1227; create_login_azure_sql();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1228; create_login_pdw();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1229; create_login_sql_server();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1230; create_master_key_azure_sql();
				}
				break;

			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1231; create_master_key_sql_server();
				}
				break;

			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1232; create_or_alter_broker_priority();
				}
				break;

			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1233; create_remote_service_binding();
				}
				break;

			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1234; create_resource_pool();
				}
				break;

			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1235; create_route();
				}
				break;

			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1236; create_rule();
				}
				break;

			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1237; create_schema();
				}
				break;

			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1238; create_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1239; create_search_property_list();
				}
				break;

			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1240; create_security_policy();
				}
				break;

			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1241; create_sequence();
				}
				break;

			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1242; create_server_audit();
				}
				break;

			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1243; create_server_audit_specification();
				}
				break;

			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1244; create_server_role();
				}
				break;

			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1245; create_service();
				}
				break;

			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1246; create_statistics();
				}
				break;

			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1247; create_synonym();
				}
				break;

			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1248; create_table();
				}
				break;

			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1249; create_type();
				}
				break;

			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1250; create_user();
				}
				break;

			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1251; create_user_azure_sql_dw();
				}
				break;

			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1252; create_workload_group();
				}
				break;

			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1253; create_xml_index();
				}
				break;

			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1254; create_xml_schema_collection();
				}
				break;

			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1255; create_partition_function();
				}
				break;

			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1256; create_partition_scheme();
				}
				break;

			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1257; drop_aggregate();
				}
				break;

			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1258; drop_application_role();
				}
				break;

			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1259; drop_assembly();
				}
				break;

			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1260; drop_asymmetric_key();
				}
				break;

			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1261; drop_availability_group();
				}
				break;

			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1262; drop_broker_priority();
				}
				break;

			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1263; drop_certificate();
				}
				break;

			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1264; drop_column_encryption_key();
				}
				break;

			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1265; drop_column_master_key();
				}
				break;

			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1266; drop_contract();
				}
				break;

			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1267; drop_credential();
				}
				break;

			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1268; drop_cryptograhic_provider();
				}
				break;

			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1269; drop_database();
				}
				break;

			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1270; drop_database_audit_specification();
				}
				break;

			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1271; drop_database_encryption_key();
				}
				break;

			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1272; drop_database_scoped_credential();
				}
				break;

			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1273; drop_db_role();
				}
				break;

			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1274; drop_default();
				}
				break;

			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1275; drop_endpoint();
				}
				break;

			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1276; drop_event_notifications();
				}
				break;

			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1277; drop_event_session();
				}
				break;

			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1278; drop_external_data_source();
				}
				break;

			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1279; drop_external_file_format();
				}
				break;

			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1280; drop_external_library();
				}
				break;

			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1281; drop_external_resource_pool();
				}
				break;

			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1282; drop_external_table();
				}
				break;

			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1283; drop_fulltext_catalog();
				}
				break;

			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1284; drop_fulltext_index();
				}
				break;

			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1285; drop_fulltext_stoplist();
				}
				break;

			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1286; drop_function();
				}
				break;

			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1287; drop_index();
				}
				break;

			case 125:
				EnterOuterAlt(_localctx, 125);
				{
				State = 1288; drop_login();
				}
				break;

			case 126:
				EnterOuterAlt(_localctx, 126);
				{
				State = 1289; drop_master_key();
				}
				break;

			case 127:
				EnterOuterAlt(_localctx, 127);
				{
				State = 1290; drop_message_type();
				}
				break;

			case 128:
				EnterOuterAlt(_localctx, 128);
				{
				State = 1291; drop_partition_function();
				}
				break;

			case 129:
				EnterOuterAlt(_localctx, 129);
				{
				State = 1292; drop_partition_scheme();
				}
				break;

			case 130:
				EnterOuterAlt(_localctx, 130);
				{
				State = 1293; drop_procedure();
				}
				break;

			case 131:
				EnterOuterAlt(_localctx, 131);
				{
				State = 1294; drop_queue();
				}
				break;

			case 132:
				EnterOuterAlt(_localctx, 132);
				{
				State = 1295; drop_remote_service_binding();
				}
				break;

			case 133:
				EnterOuterAlt(_localctx, 133);
				{
				State = 1296; drop_resource_pool();
				}
				break;

			case 134:
				EnterOuterAlt(_localctx, 134);
				{
				State = 1297; drop_route();
				}
				break;

			case 135:
				EnterOuterAlt(_localctx, 135);
				{
				State = 1298; drop_rule();
				}
				break;

			case 136:
				EnterOuterAlt(_localctx, 136);
				{
				State = 1299; drop_schema();
				}
				break;

			case 137:
				EnterOuterAlt(_localctx, 137);
				{
				State = 1300; drop_search_property_list();
				}
				break;

			case 138:
				EnterOuterAlt(_localctx, 138);
				{
				State = 1301; drop_security_policy();
				}
				break;

			case 139:
				EnterOuterAlt(_localctx, 139);
				{
				State = 1302; drop_sequence();
				}
				break;

			case 140:
				EnterOuterAlt(_localctx, 140);
				{
				State = 1303; drop_server_audit();
				}
				break;

			case 141:
				EnterOuterAlt(_localctx, 141);
				{
				State = 1304; drop_server_audit_specification();
				}
				break;

			case 142:
				EnterOuterAlt(_localctx, 142);
				{
				State = 1305; drop_server_role();
				}
				break;

			case 143:
				EnterOuterAlt(_localctx, 143);
				{
				State = 1306; drop_service();
				}
				break;

			case 144:
				EnterOuterAlt(_localctx, 144);
				{
				State = 1307; drop_signature();
				}
				break;

			case 145:
				EnterOuterAlt(_localctx, 145);
				{
				State = 1308; drop_statistics();
				}
				break;

			case 146:
				EnterOuterAlt(_localctx, 146);
				{
				State = 1309; drop_statistics_name_azure_dw_and_pdw();
				}
				break;

			case 147:
				EnterOuterAlt(_localctx, 147);
				{
				State = 1310; drop_symmetric_key();
				}
				break;

			case 148:
				EnterOuterAlt(_localctx, 148);
				{
				State = 1311; drop_synonym();
				}
				break;

			case 149:
				EnterOuterAlt(_localctx, 149);
				{
				State = 1312; drop_table();
				}
				break;

			case 150:
				EnterOuterAlt(_localctx, 150);
				{
				State = 1313; drop_trigger();
				}
				break;

			case 151:
				EnterOuterAlt(_localctx, 151);
				{
				State = 1314; drop_type();
				}
				break;

			case 152:
				EnterOuterAlt(_localctx, 152);
				{
				State = 1315; drop_user();
				}
				break;

			case 153:
				EnterOuterAlt(_localctx, 153);
				{
				State = 1316; drop_view();
				}
				break;

			case 154:
				EnterOuterAlt(_localctx, 154);
				{
				State = 1317; drop_workload_group();
				}
				break;

			case 155:
				EnterOuterAlt(_localctx, 155);
				{
				State = 1318; drop_xml_schema_collection();
				}
				break;

			case 156:
				EnterOuterAlt(_localctx, 156);
				{
				State = 1319; disable_trigger();
				}
				break;

			case 157:
				EnterOuterAlt(_localctx, 157);
				{
				State = 1320; enable_trigger();
				}
				break;

			case 158:
				EnterOuterAlt(_localctx, 158);
				{
				State = 1321; lock_table();
				}
				break;

			case 159:
				EnterOuterAlt(_localctx, 159);
				{
				State = 1322; truncate_table();
				}
				break;

			case 160:
				EnterOuterAlt(_localctx, 160);
				{
				State = 1323; update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_statementContext : ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return GetRuleContext<Backup_databaseContext>(0);
		}
		public Backup_logContext backup_log() {
			return GetRuleContext<Backup_logContext>(0);
		}
		public Backup_certificateContext backup_certificate() {
			return GetRuleContext<Backup_certificateContext>(0);
		}
		public Backup_master_keyContext backup_master_key() {
			return GetRuleContext<Backup_master_keyContext>(0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return GetRuleContext<Backup_service_master_keyContext>(0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_statementContext backup_statement() {
		Backup_statementContext _localctx = new Backup_statementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_backup_statement);
		try {
			State = 1331;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1326; backup_database();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1327; backup_log();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1328; backup_certificate();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1329; backup_master_key();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1330; backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cfl_statementContext : ParserRuleContext {
		public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return GetRuleContext<Try_catch_statementContext>(0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return GetRuleContext<Waitfor_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return GetRuleContext<Raiseerror_statementContext>(0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfl_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCfl_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCfl_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCfl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cfl_statementContext cfl_statement() {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_cfl_statement);
		try {
			State = 1345;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1333; block_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1334; break_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1335; continue_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1336; goto_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1337; if_statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1338; return_statement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1339; throw_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1340; try_catch_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1341; waitfor_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1342; while_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1343; print_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1344; raiseerror_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_block_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347; Match(BEGIN);
			State = 1349;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 1348; Match(SEMI);
				}
				break;
			}
			State = 1354;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1351; sql_clauses();
					}
					} 
				}
				State = 1356;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			State = 1357; Match(END);
			State = 1359;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 1358; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361; Match(BREAK);
			State = 1363;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 1362; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365; Match(CONTINUE);
			State = 1367;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 1366; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(TSqlParser.GOTO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_goto_statement);
		try {
			State = 1379;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1369; Match(GOTO);
				State = 1370; id_();
				State = 1372;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					State = 1371; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1374; id_();
				State = 1375; Match(COLON);
				State = 1377;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					State = 1376; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381; Match(RETURN);
			State = 1383;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 1382; expression(0);
				}
				break;
			}
			State = 1386;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 1385; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1388; Match(IF);
			State = 1389; search_condition(0);
			State = 1390; sql_clauses();
			State = 1393;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 1391; Match(ELSE);
				State = 1392; sql_clauses();
				}
				break;
			}
			State = 1396;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 1395; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return GetRuleContext<Throw_error_numberContext>(0);
		}
		public Throw_messageContext throw_message() {
			return GetRuleContext<Throw_messageContext>(0);
		}
		public Throw_stateContext throw_state() {
			return GetRuleContext<Throw_stateContext>(0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_throw_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1398; Match(THROW);
			State = 1405;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 1399; throw_error_number();
				State = 1400; Match(COMMA);
				State = 1401; throw_message();
				State = 1402; Match(COMMA);
				State = 1403; throw_state();
				}
				break;
			}
			State = 1408;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 1407; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_error_numberContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_error_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_error_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_error_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_error_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_error_numberContext throw_error_number() {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_messageContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_messageContext throw_message() {
		Throw_messageContext _localctx = new Throw_messageContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_stateContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_state; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_state(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_state(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_stateContext throw_state() {
		Throw_stateContext _localctx = new Throw_stateContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1414;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_catch_statementContext : ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public ITerminalNode[] BEGIN() { return GetTokens(TSqlParser.BEGIN); }
		public ITerminalNode BEGIN(int i) {
			return GetToken(TSqlParser.BEGIN, i);
		}
		public ITerminalNode[] TRY() { return GetTokens(TSqlParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(TSqlParser.TRY, i);
		}
		public ITerminalNode[] END() { return GetTokens(TSqlParser.END); }
		public ITerminalNode END(int i) {
			return GetToken(TSqlParser.END, i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(TSqlParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(TSqlParser.CATCH, i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_catch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTry_catch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTry_catch_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_catch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_catch_statementContext try_catch_statement() {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_try_catch_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1416; Match(BEGIN);
			State = 1417; Match(TRY);
			State = 1419;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 1418; Match(SEMI);
				}
				break;
			}
			State = 1422;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1421; _localctx.try_clauses = sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1424;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1426; Match(END);
			State = 1427; Match(TRY);
			State = 1429;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 1428; Match(SEMI);
				}
				break;
			}
			State = 1431; Match(BEGIN);
			State = 1432; Match(CATCH);
			State = 1434;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 1433; Match(SEMI);
				}
				break;
			}
			State = 1439;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1436; _localctx.catch_clauses = sql_clauses();
					}
					} 
				}
				State = 1441;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			}
			State = 1442; Match(END);
			State = 1443; Match(CATCH);
			State = 1445;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 1444; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_statementContext : ParserRuleContext {
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return GetRuleContext<Receive_statementContext>(0);
		}
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitfor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_statementContext waitfor_statement() {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447; Match(WAITFOR);
			State = 1449;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 1448; receive_statement();
				}
				break;
			}
			State = 1452;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 1451; Match(COMMA);
				}
				break;
			}
			State = 1456;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 1454;
				_la = _input.La(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1455; time();
				}
				break;
			}
			State = 1459;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 1458; expression(0);
				}
				break;
			}
			State = 1462;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 1461; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(TSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1464; Match(WHILE);
			State = 1465; search_condition(0);
			State = 1475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 1466; sql_clauses();
				}
				break;

			case 2:
				{
				State = 1467; Match(BREAK);
				State = 1469;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 1468; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1471; Match(CONTINUE);
				State = 1473;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					State = 1472; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(TSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_print_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1477; Match(PRINT);
			State = 1480;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 1478; expression(0);
				}
				break;

			case 2:
				{
				State = 1479; Match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			State = 1486;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1482; Match(COMMA);
					State = 1483; Match(LOCAL_ID);
					}
					} 
				}
				State = 1488;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			}
			State = 1490;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 1489; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raiseerror_statementContext : ParserRuleContext {
		public IToken msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public IToken formatstring;
		public IToken argument;
		public ITerminalNode RAISERROR() { return GetToken(TSqlParser.RAISERROR, 0); }
		public Constant_LOCAL_IDContext[] constant_LOCAL_ID() {
			return GetRuleContexts<Constant_LOCAL_IDContext>();
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return GetRuleContext<Constant_LOCAL_IDContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseerror_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRaiseerror_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRaiseerror_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseerror_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raiseerror_statementContext raiseerror_statement() {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			int _alt;
			State = 1524;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1492; Match(RAISERROR);
				State = 1493; Match(LR_BRACKET);
				State = 1494;
				_localctx.msg = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 850)) & ~0x3f) == 0 && ((1L << (_la - 850)) & ((1L << (LOCAL_ID - 850)) | (1L << (DECIMAL - 850)) | (1L << (STRING - 850)))) != 0)) ) {
					_localctx.msg = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1495; Match(COMMA);
				State = 1496; _localctx.severity = constant_LOCAL_ID();
				State = 1497; Match(COMMA);
				State = 1498; _localctx.state = constant_LOCAL_ID();
				State = 1503;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1499; Match(COMMA);
						State = 1500; constant_LOCAL_ID();
						}
						} 
					}
					State = 1505;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
				}
				State = 1506; Match(RR_BRACKET);
				State = 1509;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					State = 1507; Match(WITH);
					State = 1508;
					_la = _input.La(1);
					if ( !(_la==NOWAIT || _la==SETERROR || _la==LOG) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 1512;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					State = 1511; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1514; Match(RAISERROR);
				State = 1515; Match(DECIMAL);
				State = 1516;
				_localctx.formatstring = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (DOUBLE_QUOTE_ID - 847)) | (1L << (LOCAL_ID - 847)) | (1L << (STRING - 847)))) != 0)) ) {
					_localctx.formatstring = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1521;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1517; Match(COMMA);
						State = 1518;
						_localctx.argument = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 850)) & ~0x3f) == 0 && ((1L << (_la - 850)) & ((1L << (LOCAL_ID - 850)) | (1L << (DECIMAL - 850)) | (1L << (STRING - 850)))) != 0)) ) {
							_localctx.argument = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						} 
					}
					State = 1523;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1526; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Another_statementContext : ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public Cursor_statementContext cursor_statement() {
			return GetRuleContext<Cursor_statementContext>(0);
		}
		public Conversation_statementContext conversation_statement() {
			return GetRuleContext<Conversation_statementContext>(0);
		}
		public Create_contractContext create_contract() {
			return GetRuleContext<Create_contractContext>(0);
		}
		public Create_queueContext create_queue() {
			return GetRuleContext<Create_queueContext>(0);
		}
		public Alter_queueContext alter_queue() {
			return GetRuleContext<Alter_queueContext>(0);
		}
		public Kill_statementContext kill_statement() {
			return GetRuleContext<Kill_statementContext>(0);
		}
		public Message_statementContext message_statement() {
			return GetRuleContext<Message_statementContext>(0);
		}
		public Security_statementContext security_statement() {
			return GetRuleContext<Security_statementContext>(0);
		}
		public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		public Transaction_statementContext transaction_statement() {
			return GetRuleContext<Transaction_statementContext>(0);
		}
		public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		public Setuser_statementContext setuser_statement() {
			return GetRuleContext<Setuser_statementContext>(0);
		}
		public Reconfigure_statementContext reconfigure_statement() {
			return GetRuleContext<Reconfigure_statementContext>(0);
		}
		public Shutdown_statementContext shutdown_statement() {
			return GetRuleContext<Shutdown_statementContext>(0);
		}
		public Checkpoint_statementContext checkpoint_statement() {
			return GetRuleContext<Checkpoint_statementContext>(0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_another_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnother_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnother_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnother_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Another_statementContext another_statement() {
		Another_statementContext _localctx = new Another_statementContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_another_statement);
		try {
			State = 1545;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1528; declare_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1529; execute_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1530; cursor_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1531; conversation_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1532; create_contract();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1533; create_queue();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1534; alter_queue();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1535; kill_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1536; message_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1537; security_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1538; set_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1539; transaction_statement();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1540; use_statement();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1541; setuser_statement();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1542; reconfigure_statement();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1543; shutdown_statement();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1544; checkpoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_application_roleContext : ParserRuleContext {
		public Id_Context appliction_role;
		public Id_Context new_application_role_name;
		public IToken application_role_password;
		public Id_Context app_role_default_schema;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_application_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_application_roleContext alter_application_role() {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_alter_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1547; Match(ALTER);
			State = 1548; Match(APPLICATION);
			State = 1549; Match(ROLE);
			State = 1550; _localctx.appliction_role = id_();
			State = 1551; Match(WITH);
			State = 1558;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 1553;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 1552; Match(COMMA);
					}
					break;
				}
				State = 1555; Match(NAME);
				State = 1556; Match(EQUAL);
				State = 1557; _localctx.new_application_role_name = id_();
				}
				break;
			}
			State = 1566;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 1561;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 1560; Match(COMMA);
					}
					break;
				}
				State = 1563; Match(PASSWORD);
				State = 1564; Match(EQUAL);
				State = 1565; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1574;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 1569;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 1568; Match(COMMA);
					}
					break;
				}
				State = 1571; Match(DEFAULT_SCHEMA);
				State = 1572; Match(EQUAL);
				State = 1573; _localctx.app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_application_roleContext : ParserRuleContext {
		public Id_Context appliction_role;
		public IToken application_role_password;
		public Id_Context app_role_default_schema;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_application_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_application_roleContext create_application_role() {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_create_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576; Match(CREATE);
			State = 1577; Match(APPLICATION);
			State = 1578; Match(ROLE);
			State = 1579; _localctx.appliction_role = id_();
			State = 1580; Match(WITH);
			State = 1587;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 1582;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					State = 1581; Match(COMMA);
					}
					break;
				}
				State = 1584; Match(PASSWORD);
				State = 1585; Match(EQUAL);
				State = 1586; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1595;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 1590;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					State = 1589; Match(COMMA);
					}
					break;
				}
				State = 1592; Match(DEFAULT_SCHEMA);
				State = 1593; Match(EQUAL);
				State = 1594; _localctx.app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_aggregateContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context aggregate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_aggregate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_aggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_aggregate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_aggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_aggregateContext drop_aggregate() {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_drop_aggregate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597; Match(DROP);
			State = 1598; Match(AGGREGATE);
			State = 1601;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 1599; Match(IF);
				State = 1600; Match(EXISTS);
				}
				break;
			}
			State = 1606;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 1603; _localctx.schema_name = id_();
				State = 1604; Match(DOT);
				}
				break;
			}
			State = 1608; _localctx.aggregate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_application_roleContext : ParserRuleContext {
		public Id_Context rolename;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_application_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_application_roleContext drop_application_role() {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_drop_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610; Match(DROP);
			State = 1611; Match(APPLICATION);
			State = 1612; Match(ROLE);
			State = 1613; _localctx.rolename = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return GetRuleContext<Alter_assembly_startContext>(0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return GetRuleContext<Alter_assembly_clauseContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assemblyContext alter_assembly() {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_alter_assembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615; alter_assembly_start();
			State = 1616; _localctx.assembly_name = id_();
			State = 1617; alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_startContext alter_assembly_start() {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_alter_assembly_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1619; Match(ALTER);
			State = 1620; Match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return GetRuleContext<Alter_assembly_from_clauseContext>(0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return GetRuleContext<Alter_assembly_with_clauseContext>(0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return GetRuleContext<Alter_assembly_drop_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return GetRuleContext<Alter_assembly_add_clauseContext>(0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_clauseContext alter_assembly_clause() {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_alter_assembly_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1623;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 1622; alter_assembly_from_clause();
				}
				break;
			}
			State = 1626;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 1625; alter_assembly_with_clause();
				}
				break;
			}
			State = 1629;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 1628; alter_assembly_drop_clause();
				}
				break;
			}
			State = 1632;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 1631; alter_assembly_add_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return GetRuleContext<Alter_assembly_from_clause_startContext>(0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return GetRuleContext<Client_assembly_specifierContext>(0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return GetRuleContext<Alter_assembly_file_bitsContext>(0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_from_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_alter_assembly_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634; alter_assembly_from_clause_start();
			State = 1637;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 1635; client_assembly_specifier();
				}
				break;

			case 2:
				{
				State = 1636; alter_assembly_file_bits();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clause_startContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_from_clause_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_alter_assembly_from_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1639; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_clauseContext : ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return GetRuleContext<Alter_assembly_dropContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return GetRuleContext<Alter_assembly_drop_multiple_filesContext>(0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_alter_assembly_drop_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1641; alter_assembly_drop();
			State = 1642; alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_multiple_filesContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return GetRuleContext<Multiple_local_filesContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_multiple_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_multiple_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_multiple_files(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop_multiple_files(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_alter_assembly_drop_multiple_files);
		try {
			State = 1646;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1644; Match(ALL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1645; multiple_local_files();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_dropContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_dropContext alter_assembly_drop() {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_alter_assembly_drop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1648; Match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_add_clauseContext : ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return GetRuleContext<Alter_asssembly_add_clause_startContext>(0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return GetRuleContext<Alter_assembly_client_file_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_add_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_add_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_add_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_add_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_alter_assembly_add_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650; alter_asssembly_add_clause_start();
			State = 1651; alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asssembly_add_clause_startContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asssembly_add_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asssembly_add_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asssembly_add_clause_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asssembly_add_clause_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_alter_asssembly_add_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; Match(ADD);
			State = 1654; Match(FILE);
			State = 1655; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_client_file_clauseContext : ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return GetRuleContext<Alter_assembly_file_nameContext>(0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_client_file_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_client_file_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_client_file_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_client_file_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_alter_assembly_client_file_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657; alter_assembly_file_name();
			State = 1661;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 1658; alter_assembly_as();
				State = 1659; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_nameContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_file_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_nameContext alter_assembly_file_name() {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_alter_assembly_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1663; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_bitsContext : ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_bits; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_bits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_bits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_file_bits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_alter_assembly_file_bits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665; alter_assembly_as();
			State = 1666; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_asContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_as; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_as(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_as(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_as(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_asContext alter_assembly_as() {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_alter_assembly_as);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1668; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_with_clauseContext : ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return GetRuleContext<Alter_assembly_withContext>(0);
		}
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_with_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_alter_assembly_with_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1670; alter_assembly_with();
			State = 1671; assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_withContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_with(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_withContext alter_assembly_with() {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_alter_assembly_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1673; Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Client_assembly_specifierContext : ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return GetRuleContext<Network_file_shareContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_client_assembly_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClient_assembly_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClient_assembly_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClient_assembly_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Client_assembly_specifierContext client_assembly_specifier() {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_client_assembly_specifier);
		try {
			State = 1678;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1675; network_file_share();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1676; local_file();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1677; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assembly_optionContext : ParserRuleContext {
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssembly_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssembly_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssembly_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assembly_optionContext assembly_option() {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1689;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 1681; Match(PERMISSION_SET);
				State = 1682; Match(EQUAL);
				State = 1683;
				_la = _input.La(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 1684; Match(VISIBILITY);
				State = 1685; Match(EQUAL);
				State = 1686;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				{
				State = 1687; Match(UNCHECKED);
				State = 1688; Match(DATA);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1695;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,80,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					State = 1691;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 1692; Match(COMMA);
					}
					} 
				}
				State = 1697;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,80,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Network_file_shareContext : ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return GetRuleContext<Network_file_startContext>(0);
		}
		public Network_computerContext network_computer() {
			return GetRuleContext<Network_computerContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_file_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_shareContext network_file_share() {
		Network_file_shareContext _localctx = new Network_file_shareContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_network_file_share);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698; network_file_start();
			State = 1699; network_computer();
			State = 1700; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_computerContext : ParserRuleContext {
		public Id_Context computer_name;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_computer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_computer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_computer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_computer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_computerContext network_computer() {
		Network_computerContext _localctx = new Network_computerContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_network_computer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702; _localctx.computer_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_file_startContext : ParserRuleContext {
		public ITerminalNode DOUBLE_BACK_SLASH() { return GetToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_file_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_startContext network_file_start() {
		Network_file_startContext _localctx = new Network_file_startContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_network_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704; Match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_pathContext : ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return GetRuleContext<File_directory_path_separatorContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_path(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_path(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_path(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_pathContext file_path() {
		File_pathContext _localctx = new File_pathContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_file_path);
		try {
			State = 1710;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1706; file_directory_path_separator();
				State = 1707; file_path();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1709; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_directory_path_separatorContext : ParserRuleContext {
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_directory_path_separator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_directory_path_separator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_directory_path_separator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_directory_path_separator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_directory_path_separatorContext file_directory_path_separator() {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_file_directory_path_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712; Match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_fileContext : ParserRuleContext {
		public Local_driveContext local_drive() {
			return GetRuleContext<Local_driveContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_fileContext local_file() {
		Local_fileContext _localctx = new Local_fileContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_local_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714; local_drive();
			State = 1715; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_driveContext : ParserRuleContext {
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_drive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_drive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_drive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_drive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_driveContext local_drive() {
		Local_driveContext _localctx = new Local_driveContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_local_drive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1717; Match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_filesContext : ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return GetRuleContext<Multiple_local_file_startContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_files(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiple_local_files(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_filesContext multiple_local_files() {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_multiple_local_files);
		try {
			State = 1725;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1719; multiple_local_file_start();
				State = 1720; local_file();
				State = 1721; Match(SINGLE_QUOTE);
				State = 1722; Match(COMMA);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1724; local_file();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_file_startContext : ParserRuleContext {
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_file_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiple_local_file_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_file_startContext multiple_local_file_start() {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_multiple_local_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1727; Match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_assembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_assemblyContext create_assembly() {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_create_assembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1729; Match(CREATE);
			State = 1730; Match(ASSEMBLY);
			State = 1731; _localctx.assembly_name = id_();
			State = 1734;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 1732; Match(AUTHORIZATION);
				State = 1733; _localctx.owner_name = id_();
				}
				break;
			}
			State = 1736; Match(FROM);
			State = 1741;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1738;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
					case 1:
						{
						State = 1737; Match(COMMA);
						}
						break;
					}
					State = 1740;
					_la = _input.La(1);
					if ( !(_la==STRING || _la==BINARY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1743;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,85,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1749;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 1745; Match(WITH);
				State = 1746; Match(PERMISSION_SET);
				State = 1747; Match(EQUAL);
				State = 1748;
				_la = _input.La(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_assembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assemblyContext drop_assembly() {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_drop_assembly);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1751; Match(DROP);
			State = 1752; Match(ASSEMBLY);
			State = 1755;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 1753; Match(IF);
				State = 1754; Match(EXISTS);
				}
				break;
			}
			State = 1761;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1758;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
					case 1:
						{
						State = 1757; Match(COMMA);
						}
						break;
					}
					State = 1760; _localctx.assembly_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1763;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,89,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1768;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 1765; Match(WITH);
				State = 1766; Match(NO);
				State = 1767; Match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_keyContext : ParserRuleContext {
		public Id_Context Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return GetRuleContext<Alter_asymmetric_key_startContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return GetRuleContext<Asymmetric_key_optionContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_keyContext alter_asymmetric_key() {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_alter_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770; alter_asymmetric_key_start();
			State = 1771; _localctx.Asym_Key_Name = id_();
			State = 1776;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 1772; asymmetric_key_option();
				}
				break;

			case 2:
				{
				State = 1773; Match(REMOVE);
				State = 1774; Match(PRIVATE);
				State = 1775; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_key_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asymmetric_key_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_alter_asymmetric_key_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1778; Match(ALTER);
			State = 1779; Match(ASYMMETRIC);
			State = 1780; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_optionContext : ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return GetRuleContext<Asymmetric_key_option_startContext>(0);
		}
		public Asymmetric_key_password_change_optionContext[] asymmetric_key_password_change_option() {
			return GetRuleContexts<Asymmetric_key_password_change_optionContext>();
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return GetRuleContext<Asymmetric_key_password_change_optionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_optionContext asymmetric_key_option() {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_asymmetric_key_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782; asymmetric_key_option_start();
			State = 1783; asymmetric_key_password_change_option();
			State = 1786;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 1784; Match(COMMA);
				State = 1785; asymmetric_key_password_change_option();
				}
				break;
			}
			State = 1788; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_option_startContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_option_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_option_startContext asymmetric_key_option_start() {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_asymmetric_key_option_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1790; Match(WITH);
			State = 1791; Match(PRIVATE);
			State = 1792; Match(KEY);
			State = 1793; Match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_password_change_optionContext : ParserRuleContext {
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_password_change_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_password_change_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_password_change_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_password_change_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_asymmetric_key_password_change_option);
		try {
			State = 1805;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1795; Match(DECRYPTION);
				State = 1796; Match(BY);
				State = 1797; Match(PASSWORD);
				State = 1798; Match(EQUAL);
				State = 1799; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1800; Match(ENCRYPTION);
				State = 1801; Match(BY);
				State = 1802; Match(PASSWORD);
				State = 1803; Match(EQUAL);
				State = 1804; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_asymmetric_keyContext : ParserRuleContext {
		public Id_Context Asym_Key_Nam;
		public Id_Context database_principal_name;
		public Id_Context Assembly_Name;
		public Id_Context Provider_Name;
		public IToken provider_key_name;
		public IToken asymmetric_key_password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_asymmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_asymmetric_keyContext create_asymmetric_key() {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_create_asymmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1807; Match(CREATE);
			State = 1808; Match(ASYMMETRIC);
			State = 1809; Match(KEY);
			State = 1810; _localctx.Asym_Key_Nam = id_();
			State = 1813;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				State = 1811; Match(AUTHORIZATION);
				State = 1812; _localctx.database_principal_name = id_();
				}
				break;
			}
			State = 1828;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				State = 1815; Match(FROM);
				State = 1826;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					State = 1816; Match(FILE);
					State = 1817; Match(EQUAL);
					State = 1818; Match(STRING);
					}
					break;

				case 2:
					{
					State = 1819; Match(EXECUTABLE_FILE);
					State = 1820; Match(EQUAL);
					State = 1821; Match(STRING);
					}
					break;

				case 3:
					{
					State = 1822; Match(ASSEMBLY);
					State = 1823; _localctx.Assembly_Name = id_();
					}
					break;

				case 4:
					{
					State = 1824; Match(PROVIDER);
					State = 1825; _localctx.Provider_Name = id_();
					}
					break;
				}
				}
				break;
			}
			State = 1842;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 1830; Match(WITH);
				State = 1840;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
				case 1:
					{
					State = 1831; Match(ALGORITHM);
					State = 1832; Match(EQUAL);
					State = 1833;
					_la = _input.La(1);
					if ( !(((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (RSA_512 - 787)) | (1L << (RSA_1024 - 787)) | (1L << (RSA_2048 - 787)) | (1L << (RSA_3072 - 787)) | (1L << (RSA_4096 - 787)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 1834; Match(PROVIDER_KEY_NAME);
					State = 1835; Match(EQUAL);
					State = 1836; _localctx.provider_key_name = Match(STRING);
					}
					break;

				case 3:
					{
					State = 1837; Match(CREATION_DISPOSITION);
					State = 1838; Match(EQUAL);
					State = 1839;
					_la = _input.La(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			}
			State = 1849;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 1844; Match(ENCRYPTION);
				State = 1845; Match(BY);
				State = 1846; Match(PASSWORD);
				State = 1847; Match(EQUAL);
				State = 1848; _localctx.asymmetric_key_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_asymmetric_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_asymmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_asymmetric_keyContext drop_asymmetric_key() {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_drop_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1851; Match(DROP);
			State = 1852; Match(ASYMMETRIC);
			State = 1853; Match(KEY);
			State = 1854; _localctx.key_name = id_();
			State = 1858;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 1855; Match(REMOVE);
				State = 1856; Match(PROVIDER);
				State = 1857; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorizationContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorizationContext alter_authorization() {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_alter_authorization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1860; alter_authorization_start();
			State = 1864;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 1861; class_type();
				State = 1862; colon_colon();
				}
				break;
			}
			State = 1866; _localctx.entity = entity_name();
			State = 1867; entity_to();
			State = 1868; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Authorization_granteeContext : ParserRuleContext {
		public Id_Context principal_name;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorization_grantee; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuthorization_grantee(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuthorization_grantee(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthorization_grantee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Authorization_granteeContext authorization_grantee() {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_authorization_grantee);
		try {
			State = 1873;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1870; _localctx.principal_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1871; Match(SCHEMA);
				State = 1872; Match(OWNER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_toContext : ParserRuleContext {
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_to; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_to(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_to(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_to(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_toContext entity_to() {
		Entity_toContext _localctx = new Entity_toContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_entity_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1875; Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_colonContext : ParserRuleContext {
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Colon_colonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_colon; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColon_colon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColon_colon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColon_colon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Colon_colonContext colon_colon() {
		Colon_colonContext _localctx = new Colon_colonContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_colon_colon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1877; Match(DOUBLE_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_startContext alter_authorization_start() {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_alter_authorization_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1879; Match(ALTER);
			State = 1880; Match(AUTHORIZATION);
			State = 1881; Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_sql_databaseContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return GetRuleContext<Class_type_for_sql_databaseContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_sql_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_sql_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_alter_authorization_for_sql_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1883; alter_authorization_start();
			State = 1887;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				State = 1884; class_type_for_sql_database();
				State = 1885; colon_colon();
				}
				break;
			}
			State = 1889; _localctx.entity = entity_name();
			State = 1890; entity_to();
			State = 1891; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_azure_dwContext : ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return GetRuleContext<Entity_name_for_azure_dwContext>(0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return GetRuleContext<Class_type_for_azure_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_azure_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_alter_authorization_for_azure_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893; alter_authorization_start();
			State = 1897;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				State = 1894; class_type_for_azure_dw();
				State = 1895; colon_colon();
				}
				break;
			}
			State = 1899; _localctx.entity = entity_name_for_azure_dw();
			State = 1900; entity_to();
			State = 1901; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_parallel_dwContext : ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return GetRuleContext<Entity_name_for_parallel_dwContext>(0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return GetRuleContext<Class_type_for_parallel_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_parallel_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_alter_authorization_for_parallel_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1903; alter_authorization_start();
			State = 1907;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				State = 1904; class_type_for_parallel_dw();
				State = 1905; colon_colon();
				}
				break;
			}
			State = 1909; _localctx.entity = entity_name_for_parallel_dw();
			State = 1910; entity_to();
			State = 1911; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_class_type);
		try {
			State = 1947;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1913; Match(OBJECT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1914; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1915; Match(ASYMMETRIC);
				State = 1916; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1917; Match(AVAILABILITY);
				State = 1918; Match(GROUP);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1919; Match(CERTIFICATE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1920; Match(CONTRACT);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1921; Match(TYPE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1922; Match(DATABASE);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1923; Match(ENDPOINT);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1924; Match(FULLTEXT);
				State = 1925; Match(CATALOG);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1926; Match(FULLTEXT);
				State = 1927; Match(STOPLIST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1928; Match(MESSAGE);
				State = 1929; Match(TYPE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1930; Match(REMOTE);
				State = 1931; Match(SERVICE);
				State = 1932; Match(BINDING);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1933; Match(ROLE);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1934; Match(ROUTE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1935; Match(SCHEMA);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1936; Match(SEARCH);
				State = 1937; Match(PROPERTY);
				State = 1938; Match(LIST);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1939; Match(SERVER);
				State = 1940; Match(ROLE);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1941; Match(SERVICE);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1942; Match(SYMMETRIC);
				State = 1943; Match(KEY);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1944; Match(XML);
				State = 1945; Match(SCHEMA);
				State = 1946; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_sql_databaseContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_sql_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_sql_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_sql_databaseContext class_type_for_sql_database() {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_class_type_for_sql_database);
		try {
			State = 1970;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1949; Match(OBJECT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1950; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1951; Match(ASYMMETRIC);
				State = 1952; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1953; Match(CERTIFICATE);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1954; Match(TYPE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1955; Match(DATABASE);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1956; Match(FULLTEXT);
				State = 1957; Match(CATALOG);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1958; Match(FULLTEXT);
				State = 1959; Match(STOPLIST);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1960; Match(ROLE);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1961; Match(SCHEMA);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1962; Match(SEARCH);
				State = 1963; Match(PROPERTY);
				State = 1964; Match(LIST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1965; Match(SYMMETRIC);
				State = 1966; Match(KEY);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1967; Match(XML);
				State = 1968; Match(SCHEMA);
				State = 1969; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_azure_dwContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_azure_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_azure_dwContext class_type_for_azure_dw() {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_class_type_for_azure_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1972;
			_la = _input.La(1);
			if ( !(_la==SCHEMA || _la==OBJECT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_parallel_dwContext : ParserRuleContext {
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_parallel_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			_la = _input.La(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==OBJECT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_grantContext : ParserRuleContext {
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_grantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_grant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_grant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_grant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_grant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_grantContext class_type_for_grant() {
		Class_type_for_grantContext _localctx = new Class_type_for_grantContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_class_type_for_grant);
		int _la;
		try {
			State = 2067;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1976; Match(APPLICATION);
				State = 1977; Match(ROLE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1978; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1979; Match(ASYMMETRIC);
				State = 1980; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1981; Match(AUDIT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1982; Match(AVAILABILITY);
				State = 1983; Match(GROUP);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1984; Match(BROKER);
				State = 1985; Match(PRIORITY);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1986; Match(CERTIFICATE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1987; Match(COLUMN);
				State = 1988;
				_la = _input.La(1);
				if ( !(_la==ENCRYPTION || _la==MASTER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1989; Match(KEY);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1990; Match(CONTRACT);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1991; Match(CREDENTIAL);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1992; Match(CRYPTOGRAPHIC);
				State = 1993; Match(PROVIDER);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1994; Match(DATABASE);
				State = 2008;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
				case 1:
					{
					State = 1995; Match(AUDIT);
					State = 1996; Match(SPECIFICATION);
					}
					break;

				case 2:
					{
					State = 1997; Match(ENCRYPTION);
					State = 1998; Match(KEY);
					}
					break;

				case 3:
					{
					State = 1999; Match(EVENT);
					State = 2000; Match(SESSION);
					}
					break;

				case 4:
					{
					State = 2001; Match(SCOPED);
					State = 2006;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
					case 1:
						{
						State = 2002; Match(CONFIGURATION);
						}
						break;

					case 2:
						{
						State = 2003; Match(CREDENTIAL);
						}
						break;

					case 3:
						{
						State = 2004; Match(RESOURCE);
						State = 2005; Match(GOVERNOR);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2010; Match(ENDPOINT);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2011; Match(EVENT);
				State = 2012; Match(SESSION);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2013; Match(NOTIFICATION);
				State = 2014;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==OBJECT || _la==SERVER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2015; Match(EXTERNAL);
				State = 2026;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					State = 2016; Match(DATA);
					State = 2017; Match(SOURCE);
					}
					break;

				case 2:
					{
					State = 2018; Match(FILE);
					State = 2019; Match(FORMAT);
					}
					break;

				case 3:
					{
					State = 2020; Match(LIBRARY);
					}
					break;

				case 4:
					{
					State = 2021; Match(RESOURCE);
					State = 2022; Match(POOL);
					}
					break;

				case 5:
					{
					State = 2023; Match(TABLE);
					}
					break;

				case 6:
					{
					State = 2024; Match(CATALOG);
					}
					break;

				case 7:
					{
					State = 2025; Match(STOPLIST);
					}
					break;
				}
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2028; Match(LOGIN);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2029; Match(MASTER);
				State = 2030; Match(KEY);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2031; Match(MESSAGE);
				State = 2032; Match(TYPE);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2033; Match(OBJECT);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2034; Match(PARTITION);
				State = 2035;
				_la = _input.La(1);
				if ( !(_la==FUNCTION || _la==SCHEME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2036; Match(REMOTE);
				State = 2037; Match(SERVICE);
				State = 2038; Match(BINDING);
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2039; Match(RESOURCE);
				State = 2040; Match(GOVERNOR);
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2041; Match(ROLE);
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2042; Match(ROUTE);
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2043; Match(SCHEMA);
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2044; Match(SEARCH);
				State = 2045; Match(PROPERTY);
				State = 2046; Match(LIST);
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2047; Match(SERVER);
				State = 2053;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					{
					State = 2048; Match(AUDIT);
					State = 2050;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
					case 1:
						{
						State = 2049; Match(SPECIFICATION);
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 2052; Match(ROLE);
					}
					break;
				}
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2055; Match(SERVICE);
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2056; Match(SQL);
				State = 2057; Match(LOGIN);
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2058; Match(SYMMETRIC);
				State = 2059; Match(KEY);
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2060; Match(TRIGGER);
				State = 2061;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==SERVER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2062; Match(TYPE);
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2063; Match(USER);
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2064; Match(XML);
				State = 2065; Match(SCHEMA);
				State = 2066; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_availability_groupContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_availability_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_availability_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_availability_groupContext drop_availability_group() {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_drop_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2069; Match(DROP);
			State = 2070; Match(AVAILABILITY);
			State = 2071; Match(GROUP);
			State = 2072; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_groupContext : ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return GetRuleContext<Alter_availability_group_startContext>(0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return GetRuleContext<Alter_availability_group_optionsContext>(0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_groupContext alter_availability_group() {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_alter_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074; alter_availability_group_start();
			State = 2075; alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_startContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_startContext alter_availability_group_start() {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_alter_availability_group_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2077; Match(ALTER);
			State = 2078; Match(AVAILABILITY);
			State = 2079; Match(GROUP);
			State = 2080; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_optionsContext : ParserRuleContext {
		public IToken milliseconds;
		public Id_Context database_name;
		public IToken server_instance;
		public IToken session_timeout;
		public IToken ag_name;
		public IToken ag_name_modified;
		public IToken listener_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode[] AVAILABILITY_MODE() { return GetTokens(TSqlParser.AVAILABILITY_MODE); }
		public ITerminalNode AVAILABILITY_MODE(int i) {
			return GetToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		public ITerminalNode[] FAILOVER_MODE() { return GetTokens(TSqlParser.FAILOVER_MODE); }
		public ITerminalNode FAILOVER_MODE(int i) {
			return GetToken(TSqlParser.FAILOVER_MODE, i);
		}
		public ITerminalNode[] SEEDING_MODE() { return GetTokens(TSqlParser.SEEDING_MODE); }
		public ITerminalNode SEEDING_MODE(int i) {
			return GetToken(TSqlParser.SEEDING_MODE, i);
		}
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode[] ALLOW_CONNECTIONS() { return GetTokens(TSqlParser.ALLOW_CONNECTIONS); }
		public ITerminalNode ALLOW_CONNECTIONS(int i) {
			return GetToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode[] SYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		public ITerminalNode SYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] ASYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		public ITerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] AUTOMATIC() { return GetTokens(TSqlParser.AUTOMATIC); }
		public ITerminalNode AUTOMATIC(int i) {
			return GetToken(TSqlParser.AUTOMATIC, i);
		}
		public ITerminalNode[] MANUAL() { return GetTokens(TSqlParser.MANUAL); }
		public ITerminalNode MANUAL(int i) {
			return GetToken(TSqlParser.MANUAL, i);
		}
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] LISTENER_URL() { return GetTokens(TSqlParser.LISTENER_URL); }
		public ITerminalNode LISTENER_URL(int i) {
			return GetToken(TSqlParser.LISTENER_URL, i);
		}
		public ITerminalNode GRANT() { return GetToken(TSqlParser.GRANT, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode DENY() { return GetToken(TSqlParser.DENY, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public Ip_v4_failoverContext[] ip_v4_failover() {
			return GetRuleContexts<Ip_v4_failoverContext>();
		}
		public Ip_v4_failoverContext ip_v4_failover(int i) {
			return GetRuleContext<Ip_v4_failoverContext>(i);
		}
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public Ip_v6_failoverContext[] ip_v6_failover() {
			return GetRuleContexts<Ip_v6_failoverContext>();
		}
		public Ip_v6_failoverContext ip_v6_failover(int i) {
			return GetRuleContext<Ip_v6_failoverContext>(i);
		}
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_optionsContext alter_availability_group_options() {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_alter_availability_group_options);
		int _la;
		try {
			int _alt;
			State = 2437;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2082; Match(SET);
				State = 2083; Match(LR_BRACKET);
				{
				State = 2099;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
				case 1:
					{
					State = 2084; Match(AUTOMATED_BACKUP_PREFERENCE);
					State = 2085; Match(EQUAL);
					State = 2086;
					_la = _input.La(1);
					if ( !(_la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY || _la==NONE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2087; Match(FAILURE_CONDITION_LEVEL);
					State = 2088; Match(EQUAL);
					State = 2089; Match(DECIMAL);
					}
					break;

				case 3:
					{
					State = 2090; Match(HEALTH_CHECK_TIMEOUT);
					State = 2091; Match(EQUAL);
					State = 2092; _localctx.milliseconds = Match(DECIMAL);
					}
					break;

				case 4:
					{
					State = 2093; Match(DB_FAILOVER);
					State = 2094; Match(EQUAL);
					State = 2095;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 5:
					{
					State = 2096; Match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					State = 2097; Match(EQUAL);
					State = 2098; Match(DECIMAL);
					}
					break;
				}
				State = 2101; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2102; Match(ADD);
				State = 2103; Match(DATABASE);
				State = 2104; _localctx.database_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2105; Match(REMOVE);
				State = 2106; Match(DATABASE);
				State = 2107; _localctx.database_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2108; Match(ADD);
				State = 2109; Match(REPLICA);
				State = 2110; Match(ON);
				State = 2111; _localctx.server_instance = Match(STRING);
				{
				State = 2112; Match(WITH);
				State = 2113; Match(LR_BRACKET);
				{
				State = 2117;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					State = 2114; Match(ENDPOINT_URL);
					State = 2115; Match(EQUAL);
					State = 2116; Match(STRING);
					}
					break;
				}
				State = 2125;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					State = 2120;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
					case 1:
						{
						State = 2119; Match(COMMA);
						}
						break;
					}
					State = 2122; Match(AVAILABILITY_MODE);
					State = 2123; Match(EQUAL);
					State = 2124;
					_la = _input.La(1);
					if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2133;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					State = 2128;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
					case 1:
						{
						State = 2127; Match(COMMA);
						}
						break;
					}
					State = 2130; Match(FAILOVER_MODE);
					State = 2131; Match(EQUAL);
					State = 2132;
					_la = _input.La(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2141;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
				case 1:
					{
					State = 2136;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
					case 1:
						{
						State = 2135; Match(COMMA);
						}
						break;
					}
					State = 2138; Match(SEEDING_MODE);
					State = 2139; Match(EQUAL);
					State = 2140;
					_la = _input.La(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2149;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
				case 1:
					{
					State = 2144;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
					case 1:
						{
						State = 2143; Match(COMMA);
						}
						break;
					}
					State = 2146; Match(BACKUP_PRIORITY);
					State = 2147; Match(EQUAL);
					State = 2148; Match(DECIMAL);
					}
					break;
				}
				State = 2160;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					State = 2152;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
					case 1:
						{
						State = 2151; Match(COMMA);
						}
						break;
					}
					State = 2154; Match(PRIMARY_ROLE);
					State = 2155; Match(LR_BRACKET);
					State = 2156; Match(ALLOW_CONNECTIONS);
					State = 2157; Match(EQUAL);
					State = 2158;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2159; Match(RR_BRACKET);
					}
					break;
				}
				State = 2171;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					State = 2163;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
					case 1:
						{
						State = 2162; Match(COMMA);
						}
						break;
					}
					State = 2165; Match(SECONDARY_ROLE);
					State = 2166; Match(LR_BRACKET);
					State = 2167; Match(ALLOW_CONNECTIONS);
					State = 2168; Match(EQUAL);
					{
					State = 2169; Match(READ_ONLY);
					}
					State = 2170; Match(RR_BRACKET);
					}
					break;
				}
				}
				}
				State = 2173; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2174; Match(SECONDARY_ROLE);
				State = 2175; Match(LR_BRACKET);
				State = 2184;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					State = 2176; Match(ALLOW_CONNECTIONS);
					State = 2177; Match(EQUAL);
					State = 2178;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2179; Match(READ_ONLY_ROUTING_LIST);
					State = 2180; Match(EQUAL);
					{
					State = 2181; Match(LR_BRACKET);
					{
					{
					State = 2182; Match(STRING);
					}
					}
					State = 2183; Match(RR_BRACKET);
					}
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2186; Match(PRIMARY_ROLE);
				State = 2187; Match(LR_BRACKET);
				State = 2210;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
				case 1:
					{
					State = 2188; Match(ALLOW_CONNECTIONS);
					State = 2189; Match(EQUAL);
					State = 2190;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2191; Match(READ_ONLY_ROUTING_LIST);
					State = 2192; Match(EQUAL);
					{
					State = 2193; Match(LR_BRACKET);
					State = 2204;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
					case 1:
						{
						State = 2200;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,130,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 2195;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
								case 1:
									{
									State = 2194; Match(COMMA);
									}
									break;
								}
								State = 2197; Match(STRING);
								}
								} 
							}
							State = 2202;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,130,_ctx);
						}
						}
						break;

					case 2:
						{
						State = 2203; Match(NONE);
						}
						break;
					}
					State = 2206; Match(RR_BRACKET);
					}
					}
					break;

				case 3:
					{
					State = 2207; Match(SESSION_TIMEOUT);
					State = 2208; Match(EQUAL);
					State = 2209; _localctx.session_timeout = Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2212; Match(MODIFY);
				State = 2213; Match(REPLICA);
				State = 2214; Match(ON);
				State = 2215; _localctx.server_instance = Match(STRING);
				State = 2273;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					State = 2216; Match(WITH);
					State = 2217; Match(LR_BRACKET);
					State = 2233;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
					case 1:
						{
						State = 2218; Match(ENDPOINT_URL);
						State = 2219; Match(EQUAL);
						State = 2220; Match(STRING);
						}
						break;

					case 2:
						{
						State = 2221; Match(AVAILABILITY_MODE);
						State = 2222; Match(EQUAL);
						State = 2223;
						_la = _input.La(1);
						if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 3:
						{
						State = 2224; Match(FAILOVER_MODE);
						State = 2225; Match(EQUAL);
						State = 2226;
						_la = _input.La(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 4:
						{
						State = 2227; Match(SEEDING_MODE);
						State = 2228; Match(EQUAL);
						State = 2229;
						_la = _input.La(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 5:
						{
						State = 2230; Match(BACKUP_PRIORITY);
						State = 2231; Match(EQUAL);
						State = 2232; Match(DECIMAL);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 2235; Match(SECONDARY_ROLE);
					State = 2236; Match(LR_BRACKET);
					State = 2245;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
					case 1:
						{
						State = 2237; Match(ALLOW_CONNECTIONS);
						State = 2238; Match(EQUAL);
						State = 2239;
						_la = _input.La(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 2240; Match(READ_ONLY_ROUTING_LIST);
						State = 2241; Match(EQUAL);
						{
						State = 2242; Match(LR_BRACKET);
						{
						{
						State = 2243; Match(STRING);
						}
						}
						State = 2244; Match(RR_BRACKET);
						}
						}
						break;
					}
					}
					break;

				case 3:
					{
					State = 2247; Match(PRIMARY_ROLE);
					State = 2248; Match(LR_BRACKET);
					State = 2271;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
					case 1:
						{
						State = 2249; Match(ALLOW_CONNECTIONS);
						State = 2250; Match(EQUAL);
						State = 2251;
						_la = _input.La(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 2252; Match(READ_ONLY_ROUTING_LIST);
						State = 2253; Match(EQUAL);
						{
						State = 2254; Match(LR_BRACKET);
						State = 2265;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
						case 1:
							{
							State = 2261;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
							while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
								if ( _alt==1 ) {
									{
									{
									State = 2256;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
									case 1:
										{
										State = 2255; Match(COMMA);
										}
										break;
									}
									State = 2258; Match(STRING);
									}
									} 
								}
								State = 2263;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
							}
							}
							break;

						case 2:
							{
							State = 2264; Match(NONE);
							}
							break;
						}
						State = 2267; Match(RR_BRACKET);
						}
						}
						break;

					case 3:
						{
						State = 2268; Match(SESSION_TIMEOUT);
						State = 2269; Match(EQUAL);
						State = 2270; _localctx.session_timeout = Match(DECIMAL);
						}
						break;
					}
					}
					break;
				}
				State = 2275; Match(RR_BRACKET);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2276; Match(REMOVE);
				State = 2277; Match(REPLICA);
				State = 2278; Match(ON);
				State = 2279; Match(STRING);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2280; Match(JOIN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2281; Match(JOIN);
				State = 2282; Match(AVAILABILITY);
				State = 2283; Match(GROUP);
				State = 2284; Match(ON);
				State = 2307;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2286;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
						case 1:
							{
							State = 2285; Match(COMMA);
							}
							break;
						}
						State = 2288; _localctx.ag_name = Match(STRING);
						State = 2289; Match(WITH);
						State = 2290; Match(LR_BRACKET);
						{
						State = 2291; Match(LISTENER_URL);
						State = 2292; Match(EQUAL);
						State = 2293; Match(STRING);
						State = 2294; Match(COMMA);
						State = 2295; Match(AVAILABILITY_MODE);
						State = 2296; Match(EQUAL);
						State = 2297;
						_la = _input.La(1);
						if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2298; Match(COMMA);
						State = 2299; Match(FAILOVER_MODE);
						State = 2300; Match(EQUAL);
						State = 2301; Match(MANUAL);
						State = 2302; Match(COMMA);
						State = 2303; Match(SEEDING_MODE);
						State = 2304; Match(EQUAL);
						State = 2305;
						_la = _input.La(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2306; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2309;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,141,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2311; Match(MODIFY);
				State = 2312; Match(AVAILABILITY);
				State = 2313; Match(GROUP);
				State = 2314; Match(ON);
				State = 2349;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2316;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
						case 1:
							{
							State = 2315; Match(COMMA);
							}
							break;
						}
						State = 2318; _localctx.ag_name_modified = Match(STRING);
						State = 2319; Match(WITH);
						State = 2320; Match(LR_BRACKET);
						{
						State = 2321; Match(LISTENER_URL);
						State = 2322; Match(EQUAL);
						State = 2323; Match(STRING);
						State = 2330;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
						case 1:
							{
							State = 2325;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
							case 1:
								{
								State = 2324; Match(COMMA);
								}
								break;
							}
							State = 2327; Match(AVAILABILITY_MODE);
							State = 2328; Match(EQUAL);
							State = 2329;
							_la = _input.La(1);
							if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						State = 2338;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
						case 1:
							{
							State = 2333;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
							case 1:
								{
								State = 2332; Match(COMMA);
								}
								break;
							}
							State = 2335; Match(FAILOVER_MODE);
							State = 2336; Match(EQUAL);
							State = 2337; Match(MANUAL);
							}
							break;
						}
						State = 2346;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
						case 1:
							{
							State = 2341;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
							case 1:
								{
								State = 2340; Match(COMMA);
								}
								break;
							}
							State = 2343; Match(SEEDING_MODE);
							State = 2344; Match(EQUAL);
							State = 2345;
							_la = _input.La(1);
							if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						State = 2348; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2351;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,149,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2353; Match(GRANT);
				State = 2354; Match(CREATE);
				State = 2355; Match(ANY);
				State = 2356; Match(DATABASE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2357; Match(DENY);
				State = 2358; Match(CREATE);
				State = 2359; Match(ANY);
				State = 2360; Match(DATABASE);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2361; Match(FAILOVER);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2362; Match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2363; Match(ADD);
				State = 2364; Match(LISTENER);
				State = 2365; _localctx.listener_name = Match(STRING);
				State = 2366; Match(LR_BRACKET);
				State = 2402;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					State = 2367; Match(WITH);
					State = 2368; Match(DHCP);
					{
					State = 2369; Match(ON);
					State = 2370; Match(LR_BRACKET);
					State = 2371; ip_v4_failover();
					State = 2372; ip_v4_failover();
					State = 2373; Match(RR_BRACKET);
					}
					}
					break;

				case 2:
					{
					State = 2375; Match(WITH);
					State = 2376; Match(IP);
					State = 2377; Match(LR_BRACKET);
					{
					State = 2391;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2379;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
							case 1:
								{
								State = 2378; Match(COMMA);
								}
								break;
							}
							State = 2381; Match(LR_BRACKET);
							State = 2387;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
							case 1:
								{
								State = 2382; ip_v4_failover();
								State = 2383; Match(COMMA);
								State = 2384; ip_v4_failover();
								}
								break;

							case 2:
								{
								State = 2386; ip_v6_failover();
								}
								break;
							}
							State = 2389; Match(RR_BRACKET);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2393;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					State = 2395; Match(RR_BRACKET);
					State = 2400;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
					case 1:
						{
						State = 2396; Match(COMMA);
						State = 2397; Match(PORT);
						State = 2398; Match(EQUAL);
						State = 2399; Match(DECIMAL);
						}
						break;
					}
					}
					}
					break;
				}
				State = 2404; Match(RR_BRACKET);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2406; Match(MODIFY);
				State = 2407; Match(LISTENER);
				State = 2422;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					State = 2408; Match(ADD);
					State = 2409; Match(IP);
					State = 2410; Match(LR_BRACKET);
					State = 2415;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
					case 1:
						{
						State = 2411; ip_v4_failover();
						State = 2412; ip_v4_failover();
						}
						break;

					case 2:
						{
						State = 2414; ip_v6_failover();
						}
						break;
					}
					State = 2417; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 2419; Match(PORT);
					State = 2420; Match(EQUAL);
					State = 2421; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2424; Match(RESTART);
				State = 2425; Match(LISTENER);
				State = 2426; Match(STRING);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2427; Match(REMOVE);
				State = 2428; Match(LISTENER);
				State = 2429; Match(STRING);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2430; Match(OFFLINE);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2431; Match(WITH);
				State = 2432; Match(LR_BRACKET);
				State = 2433; Match(DTC_SUPPORT);
				State = 2434; Match(EQUAL);
				State = 2435; Match(PER_DB);
				State = 2436; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ip_v4_failoverContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Ip_v4_failoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ip_v4_failover; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIp_v4_failover(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIp_v4_failover(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIp_v4_failover(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ip_v4_failoverContext ip_v4_failover() {
		Ip_v4_failoverContext _localctx = new Ip_v4_failoverContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_ip_v4_failover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2439; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ip_v6_failoverContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Ip_v6_failoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ip_v6_failover; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIp_v6_failover(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIp_v6_failover(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIp_v6_failover(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ip_v6_failoverContext ip_v6_failover() {
		Ip_v6_failoverContext _localctx = new Ip_v6_failoverContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_ip_v6_failover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2441; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_broker_priorityContext : ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public IToken RemoteServiceName;
		public IToken PriorityValue;
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_broker_priority(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_broker_priority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2443;
			_la = _input.La(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2444; Match(BROKER);
			State = 2445; Match(PRIORITY);
			State = 2446; _localctx.ConversationPriorityName = id_();
			State = 2447; Match(FOR);
			State = 2448; Match(CONVERSATION);
			State = 2449; Match(SET);
			State = 2450; Match(LR_BRACKET);
			State = 2460;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 2451; Match(CONTRACT_NAME);
				State = 2452; Match(EQUAL);
				State = 2455;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					{
					State = 2453; id_();
					}
					}
					break;

				case 2:
					{
					State = 2454; Match(ANY);
					}
					break;
				}
				State = 2458;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					State = 2457; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2474;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				State = 2462; Match(LOCAL_SERVICE_NAME);
				State = 2463; Match(EQUAL);
				State = 2469;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
				case 1:
					{
					State = 2465;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
					case 1:
						{
						State = 2464; Match(DOUBLE_FORWARD_SLASH);
						}
						break;
					}
					State = 2467; id_();
					}
					break;

				case 2:
					{
					State = 2468; Match(ANY);
					}
					break;
				}
				State = 2472;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					State = 2471; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2485;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				State = 2476; Match(REMOTE_SERVICE_NAME);
				State = 2477; Match(EQUAL);
				State = 2480;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					State = 2478; _localctx.RemoteServiceName = Match(STRING);
					}
					break;

				case 2:
					{
					State = 2479; Match(ANY);
					}
					break;
				}
				State = 2483;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
				case 1:
					{
					State = 2482; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2493;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 2487; Match(PRIORITY_LEVEL);
				State = 2488; Match(EQUAL);
				State = 2491;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
				case 1:
					{
					State = 2489; _localctx.PriorityValue = Match(DECIMAL);
					}
					break;

				case 2:
					{
					State = 2490; Match(DEFAULT);
					}
					break;
				}
				}
				break;
			}
			State = 2495; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_broker_priorityContext : ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_broker_priority(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_broker_priority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_broker_priorityContext drop_broker_priority() {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_drop_broker_priority);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2497; Match(DROP);
			State = 2498; Match(BROKER);
			State = 2499; Match(PRIORITY);
			State = 2500; _localctx.ConversationPriorityName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_certificateContext alter_certificate() {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_alter_certificate);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2502; Match(ALTER);
			State = 2503; Match(CERTIFICATE);
			State = 2504; _localctx.certificate_name = id_();
			State = 2544;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				State = 2505; Match(REMOVE);
				State = 2506; Match(PRIVATE_KEY);
				}
				break;

			case 2:
				{
				State = 2507; Match(WITH);
				State = 2508; Match(PRIVATE);
				State = 2509; Match(KEY);
				State = 2510; Match(LR_BRACKET);
				State = 2533;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2533;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
						case 1:
							{
							State = 2511; Match(FILE);
							State = 2512; Match(EQUAL);
							State = 2513; Match(STRING);
							State = 2515;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
							case 1:
								{
								State = 2514; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 2:
							{
							State = 2517; Match(DECRYPTION);
							State = 2518; Match(BY);
							State = 2519; Match(PASSWORD);
							State = 2520; Match(EQUAL);
							State = 2521; Match(STRING);
							State = 2523;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
							case 1:
								{
								State = 2522; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 3:
							{
							State = 2525; Match(ENCRYPTION);
							State = 2526; Match(BY);
							State = 2527; Match(PASSWORD);
							State = 2528; Match(EQUAL);
							State = 2529; Match(STRING);
							State = 2531;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
							case 1:
								{
								State = 2530; Match(COMMA);
								}
								break;
							}
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2535;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,174,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2537; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 2538; Match(WITH);
				State = 2539; Match(ACTIVE);
				State = 2540; Match(FOR);
				State = 2541; Match(BEGIN_DIALOG);
				State = 2542; Match(EQUAL);
				State = 2543;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_encryption_keyContext : ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public IToken algorithm_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_encryption_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_encryption_keyContext alter_column_encryption_key() {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_alter_column_encryption_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2546; Match(ALTER);
			State = 2547; Match(COLUMN);
			State = 2548; Match(ENCRYPTION);
			State = 2549; Match(KEY);
			State = 2550; _localctx.column_encryption_key = id_();
			State = 2551;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2552; Match(VALUE);
			State = 2553; Match(LR_BRACKET);
			State = 2554; Match(COLUMN_MASTER_KEY);
			State = 2555; Match(EQUAL);
			State = 2556; _localctx.column_master_key_name = id_();
			State = 2565;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 2557; Match(COMMA);
				State = 2558; Match(ALGORITHM);
				State = 2559; Match(EQUAL);
				State = 2560; _localctx.algorithm_name = Match(STRING);
				State = 2561; Match(COMMA);
				State = 2562; Match(ENCRYPTED_VALUE);
				State = 2563; Match(EQUAL);
				State = 2564; Match(BINARY);
				}
				break;
			}
			State = 2567; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_encryption_keyContext : ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public IToken algorithm_name;
		public IToken encrypted_value;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] COLUMN_MASTER_KEY() { return GetTokens(TSqlParser.COLUMN_MASTER_KEY); }
		public ITerminalNode COLUMN_MASTER_KEY(int i) {
			return GetToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] ENCRYPTED_VALUE() { return GetTokens(TSqlParser.ENCRYPTED_VALUE); }
		public ITerminalNode ENCRYPTED_VALUE(int i) {
			return GetToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_encryption_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_encryption_keyContext create_column_encryption_key() {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_create_column_encryption_key);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2569; Match(CREATE);
			State = 2570; Match(COLUMN);
			State = 2571; Match(ENCRYPTION);
			State = 2572; Match(KEY);
			State = 2573; _localctx.column_encryption_key = id_();
			State = 2574; Match(WITH);
			State = 2575; Match(VALUES);
			State = 2595;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2576; Match(LR_BRACKET);
					State = 2578;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
					case 1:
						{
						State = 2577; Match(COMMA);
						}
						break;
					}
					State = 2580; Match(COLUMN_MASTER_KEY);
					State = 2581; Match(EQUAL);
					State = 2582; _localctx.column_master_key_name = id_();
					State = 2583; Match(COMMA);
					State = 2584; Match(ALGORITHM);
					State = 2585; Match(EQUAL);
					State = 2586; _localctx.algorithm_name = Match(STRING);
					State = 2587; Match(COMMA);
					State = 2588; Match(ENCRYPTED_VALUE);
					State = 2589; Match(EQUAL);
					State = 2590; _localctx.encrypted_value = Match(BINARY);
					State = 2591; Match(RR_BRACKET);
					State = 2593;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
					case 1:
						{
						State = 2592; Match(COMMA);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2597;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,179,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_certificateContext drop_certificate() {
		Drop_certificateContext _localctx = new Drop_certificateContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_drop_certificate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2599; Match(DROP);
			State = 2600; Match(CERTIFICATE);
			State = 2601; _localctx.certificate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_encryption_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_encryption_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_encryption_keyContext drop_column_encryption_key() {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_drop_column_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2603; Match(DROP);
			State = 2604; Match(COLUMN);
			State = 2605; Match(ENCRYPTION);
			State = 2606; Match(KEY);
			State = 2607; _localctx.key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_master_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_master_keyContext drop_column_master_key() {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_drop_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2609; Match(DROP);
			State = 2610; Match(COLUMN);
			State = 2611; Match(MASTER);
			State = 2612; Match(KEY);
			State = 2613; _localctx.key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_contractContext : ParserRuleContext {
		public Id_Context dropped_contract_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_contract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_contract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_contractContext drop_contract() {
		Drop_contractContext _localctx = new Drop_contractContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_drop_contract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2615; Match(DROP);
			State = 2616; Match(CONTRACT);
			State = 2617; _localctx.dropped_contract_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_credentialContext drop_credential() {
		Drop_credentialContext _localctx = new Drop_credentialContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_drop_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2619; Match(DROP);
			State = 2620; Match(CREDENTIAL);
			State = 2621; _localctx.credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_cryptograhic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_cryptograhic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_cryptograhic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_cryptograhic_provider(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_cryptograhic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_drop_cryptograhic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2623; Match(DROP);
			State = 2624; Match(CRYPTOGRAPHIC);
			State = 2625; Match(PROVIDER);
			State = 2626; _localctx.provider_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_databaseContext : ParserRuleContext {
		public Id_Context database_name_or_database_snapshot_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_databaseContext drop_database() {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_drop_database);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2628; Match(DROP);
			State = 2629; Match(DATABASE);
			State = 2632;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				State = 2630; Match(IF);
				State = 2631; Match(EXISTS);
				}
				break;
			}
			State = 2638;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2635;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
					case 1:
						{
						State = 2634; Match(COMMA);
						}
						break;
					}
					State = 2637; _localctx.database_name_or_database_snapshot_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2640;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,182,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_audit_specificationContext drop_database_audit_specification() {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_drop_database_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2642; Match(DROP);
			State = 2643; Match(DATABASE);
			State = 2644; Match(AUDIT);
			State = 2645; Match(SPECIFICATION);
			State = 2646; _localctx.audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_encryption_keyContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_database_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_encryption_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_encryption_keyContext drop_database_encryption_key() {
		Drop_database_encryption_keyContext _localctx = new Drop_database_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_drop_database_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2648; Match(DROP);
			State = 2649; Match(DATABASE);
			State = 2650; Match(ENCRYPTION);
			State = 2651; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_scoped_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_scoped_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_scoped_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_scoped_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database_scoped_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_drop_database_scoped_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2653; Match(DROP);
			State = 2654; Match(DATABASE);
			State = 2655; Match(SCOPED);
			State = 2656; Match(CREDENTIAL);
			State = 2657; _localctx.credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_defaultContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context default_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_default(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_defaultContext drop_default() {
		Drop_defaultContext _localctx = new Drop_defaultContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_drop_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2659; Match(DROP);
			State = 2660; Match(DEFAULT);
			State = 2663;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				State = 2661; Match(IF);
				State = 2662; Match(EXISTS);
				}
				break;
			}
			{
			State = 2666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 2665; Match(COMMA);
				}
				break;
			}
			State = 2671;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 2668; _localctx.schema_name = id_();
				State = 2669; Match(DOT);
				}
				break;
			}
			State = 2673; _localctx.default_name = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_endpointContext : ParserRuleContext {
		public Id_Context endPointName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_endpoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_endpoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_endpointContext drop_endpoint() {
		Drop_endpointContext _localctx = new Drop_endpointContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_drop_endpoint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2675; Match(DROP);
			State = 2676; Match(ENDPOINT);
			State = 2677; _localctx.endPointName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_data_sourceContext : ParserRuleContext {
		public Id_Context external_data_source_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_data_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_data_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_data_sourceContext drop_external_data_source() {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_drop_external_data_source);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2679; Match(DROP);
			State = 2680; Match(EXTERNAL);
			State = 2681; Match(DATA);
			State = 2682; Match(SOURCE);
			State = 2683; _localctx.external_data_source_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_file_formatContext : ParserRuleContext {
		public Id_Context external_file_format_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_file_format; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_file_format(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_file_format(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_file_format(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_file_formatContext drop_external_file_format() {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_drop_external_file_format);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2685; Match(DROP);
			State = 2686; Match(EXTERNAL);
			State = 2687; Match(FILE);
			State = 2688; Match(FORMAT);
			State = 2689; _localctx.external_file_format_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_libraryContext drop_external_library() {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_drop_external_library);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2691; Match(DROP);
			State = 2692; Match(EXTERNAL);
			State = 2693; Match(LIBRARY);
			State = 2694; _localctx.library_name = id_();
			State = 2697;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 2695; Match(AUTHORIZATION);
				State = 2696; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_resource_poolContext drop_external_resource_pool() {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_drop_external_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2699; Match(DROP);
			State = 2700; Match(EXTERNAL);
			State = 2701; Match(RESOURCE);
			State = 2702; Match(POOL);
			State = 2703; _localctx.pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context table;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_drop_external_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2705; Match(DROP);
			State = 2706; Match(EXTERNAL);
			State = 2707; Match(TABLE);
			State = 2711;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 2708; _localctx.database_name = id_();
				State = 2709; Match(DOT);
				}
				break;
			}
			State = 2716;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 2713; _localctx.schema_name = id_();
				State = 2714; Match(DOT);
				}
				break;
			}
			State = 2718; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_notificationsContext : ParserRuleContext {
		public Id_Context notification_name;
		public Id_Context queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_notifications; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_notifications(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_notifications(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_event_notifications(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_notificationsContext drop_event_notifications() {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_drop_event_notifications);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2720; Match(DROP);
			State = 2721; Match(EVENT);
			State = 2722; Match(NOTIFICATION);
			State = 2727;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2724;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
					case 1:
						{
						State = 2723; Match(COMMA);
						}
						break;
					}
					State = 2726; _localctx.notification_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2729;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,190,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2731; Match(ON);
			State = 2736;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 2732; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 2733; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 2734; Match(QUEUE);
				State = 2735; _localctx.queue_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_sessionContext : ParserRuleContext {
		public Id_Context event_session_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_session(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_event_session(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_sessionContext drop_event_session() {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_drop_event_session);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2738; Match(DROP);
			State = 2739; Match(EVENT);
			State = 2740; Match(SESSION);
			State = 2741; _localctx.event_session_name = id_();
			State = 2742; Match(ON);
			State = 2743; Match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_catalog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_catalogContext drop_fulltext_catalog() {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_drop_fulltext_catalog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2745; Match(DROP);
			State = 2746; Match(FULLTEXT);
			State = 2747; Match(CATALOG);
			State = 2748; _localctx.catalog_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_indexContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context table;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_indexContext drop_fulltext_index() {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_drop_fulltext_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2750; Match(DROP);
			State = 2751; Match(FULLTEXT);
			State = 2752; Match(INDEX);
			State = 2753; Match(ON);
			State = 2757;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				State = 2754; _localctx.schema = id_();
				State = 2755; Match(DOT);
				}
				break;
			}
			State = 2759; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_stoplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_drop_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2761; Match(DROP);
			State = 2762; Match(FULLTEXT);
			State = 2763; Match(STOPLIST);
			State = 2764; _localctx.stoplist_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_loginContext : ParserRuleContext {
		public Id_Context login_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_login; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_login(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_login(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_login(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_loginContext drop_login() {
		Drop_loginContext _localctx = new Drop_loginContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_drop_login);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2766; Match(DROP);
			State = 2767; Match(LOGIN);
			State = 2768; _localctx.login_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_master_keyContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_master_keyContext drop_master_key() {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_drop_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2770; Match(DROP);
			State = 2771; Match(MASTER);
			State = 2772; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_message_typeContext : ParserRuleContext {
		public Id_Context message_type_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_message_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_message_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_message_typeContext drop_message_type() {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_drop_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2774; Match(DROP);
			State = 2775; Match(MESSAGE);
			State = 2776; Match(TYPE);
			State = 2777; _localctx.message_type_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_partition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_functionContext drop_partition_function() {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_drop_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2779; Match(DROP);
			State = 2780; Match(PARTITION);
			State = 2781; Match(FUNCTION);
			State = 2782; _localctx.partition_function_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_scheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_partition_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_schemeContext drop_partition_scheme() {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_drop_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2784; Match(DROP);
			State = 2785; Match(PARTITION);
			State = 2786; Match(SCHEME);
			State = 2787; _localctx.partition_scheme_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_queueContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_queue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_queueContext drop_queue() {
		Drop_queueContext _localctx = new Drop_queueContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_drop_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2789; Match(DROP);
			State = 2790; Match(QUEUE);
			State = 2794;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				State = 2791; _localctx.database_name = id_();
				State = 2792; Match(DOT);
				}
				break;
			}
			State = 2799;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				State = 2796; _localctx.schema_name = id_();
				State = 2797; Match(DOT);
				}
				break;
			}
			State = 2801; _localctx.queue_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_remote_service_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_remote_service_bindingContext drop_remote_service_binding() {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_drop_remote_service_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2803; Match(DROP);
			State = 2804; Match(REMOTE);
			State = 2805; Match(SERVICE);
			State = 2806; Match(BINDING);
			State = 2807; _localctx.binding_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_poolContext drop_resource_pool() {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_drop_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2809; Match(DROP);
			State = 2810; Match(RESOURCE);
			State = 2811; Match(POOL);
			State = 2812; _localctx.pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_db_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_db_roleContext drop_db_role() {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_drop_db_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2814; Match(DROP);
			State = 2815; Match(ROLE);
			State = 2818;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				State = 2816; Match(IF);
				State = 2817; Match(EXISTS);
				}
				break;
			}
			State = 2820; _localctx.role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_routeContext : ParserRuleContext {
		public Id_Context route_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_route(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_route(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_routeContext drop_route() {
		Drop_routeContext _localctx = new Drop_routeContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_drop_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2822; Match(DROP);
			State = 2823; Match(ROUTE);
			State = 2824; _localctx.route_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ruleContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ruleContext drop_rule() {
		Drop_ruleContext _localctx = new Drop_ruleContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_drop_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2826; Match(DROP);
			State = 2827; Match(RULE);
			State = 2830;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 2828; Match(IF);
				State = 2829; Match(EXISTS);
				}
				break;
			}
			State = 2841;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				State = 2833;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
				case 1:
					{
					State = 2832; Match(COMMA);
					}
					break;
				}
				State = 2838;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					State = 2835; _localctx.schema_name = id_();
					State = 2836; Match(DOT);
					}
					break;
				}
				State = 2840; _localctx.rule_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_drop_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2843; Match(DROP);
			State = 2844; Match(SCHEMA);
			State = 2847;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				State = 2845; Match(IF);
				State = 2846; Match(EXISTS);
				}
				break;
			}
			State = 2849; _localctx.schema_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_property_listContext : ParserRuleContext {
		public Id_Context property_list_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_property_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_search_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_property_listContext drop_search_property_list() {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_drop_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2851; Match(DROP);
			State = 2852; Match(SEARCH);
			State = 2853; Match(PROPERTY);
			State = 2854; Match(LIST);
			State = 2855; _localctx.property_list_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_security_policyContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_security_policy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_security_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_security_policyContext drop_security_policy() {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_drop_security_policy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2857; Match(DROP);
			State = 2858; Match(SECURITY);
			State = 2859; Match(POLICY);
			State = 2862;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 2860; Match(IF);
				State = 2861; Match(EXISTS);
				}
				break;
			}
			State = 2867;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				State = 2864; _localctx.schema_name = id_();
				State = 2865; Match(DOT);
				}
				break;
			}
			State = 2869; _localctx.security_policy_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequenceContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_sequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequenceContext drop_sequence() {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_drop_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2871; Match(DROP);
			State = 2872; Match(SEQUENCE);
			State = 2875;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				State = 2873; Match(IF);
				State = 2874; Match(EXISTS);
				}
				break;
			}
			State = 2891;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				State = 2878;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
				case 1:
					{
					State = 2877; Match(COMMA);
					}
					break;
				}
				State = 2883;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					State = 2880; _localctx.database_name = id_();
					State = 2881; Match(DOT);
					}
					break;
				}
				State = 2888;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					State = 2885; _localctx.schema_name = id_();
					State = 2886; Match(DOT);
					}
					break;
				}
				State = 2890; _localctx.sequence_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_auditContext drop_server_audit() {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_drop_server_audit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2893; Match(DROP);
			State = 2894; Match(SERVER);
			State = 2895; Match(AUDIT);
			State = 2896; _localctx.audit_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_audit_specificationContext drop_server_audit_specification() {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_drop_server_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2898; Match(DROP);
			State = 2899; Match(SERVER);
			State = 2900; Match(AUDIT);
			State = 2901; Match(SPECIFICATION);
			State = 2902; _localctx.audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_roleContext drop_server_role() {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_drop_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2904; Match(DROP);
			State = 2905; Match(SERVER);
			State = 2906; Match(ROLE);
			State = 2907; _localctx.role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_serviceContext : ParserRuleContext {
		public Id_Context dropped_service_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_service(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_serviceContext drop_service() {
		Drop_serviceContext _localctx = new Drop_serviceContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_drop_service);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2909; Match(DROP);
			State = 2910; Match(SERVICE);
			State = 2911; _localctx.dropped_service_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_signatureContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context module_name;
		public Id_Context cert_name;
		public Id_Context Asym_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_signatureContext drop_signature() {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_drop_signature);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2913; Match(DROP);
			State = 2915;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				State = 2914; Match(COUNTER);
				}
				break;
			}
			State = 2917; Match(SIGNATURE);
			State = 2918; Match(FROM);
			State = 2922;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				State = 2919; _localctx.schema_name = id_();
				State = 2920; Match(DOT);
				}
				break;
			}
			State = 2924; _localctx.module_name = id_();
			State = 2925; Match(BY);
			State = 2937;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2937;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
					case 1:
						{
						State = 2927;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
						case 1:
							{
							State = 2926; Match(COMMA);
							}
							break;
						}
						State = 2929; Match(CERTIFICATE);
						State = 2930; _localctx.cert_name = id_();
						}
						break;

					case 2:
						{
						State = 2932;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
						case 1:
							{
							State = 2931; Match(COMMA);
							}
							break;
						}
						State = 2934; Match(ASYMMETRIC);
						State = 2935; Match(KEY);
						State = 2936; _localctx.Asym_key_name = id_();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2939;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,213,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statistics_name_azure_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context object_name;
		public Id_Context statistics_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics_name_azure_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics_name_azure_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_statistics_name_azure_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2941; Match(DROP);
			State = 2942; Match(STATISTICS);
			State = 2946;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				State = 2943; _localctx.schema_name = id_();
				State = 2944; Match(DOT);
				}
				break;
			}
			State = 2948; _localctx.object_name = id_();
			State = 2949; Match(DOT);
			State = 2950; _localctx.statistics_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_symmetric_keyContext : ParserRuleContext {
		public Id_Context symmetric_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_symmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_symmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_symmetric_keyContext drop_symmetric_key() {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_drop_symmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2952; Match(DROP);
			State = 2953; Match(SYMMETRIC);
			State = 2954; Match(KEY);
			State = 2955; _localctx.symmetric_key_name = id_();
			State = 2959;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				State = 2956; Match(REMOVE);
				State = 2957; Match(PROVIDER);
				State = 2958; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_synonymContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context synonym_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_synonym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_synonymContext drop_synonym() {
		Drop_synonymContext _localctx = new Drop_synonymContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_drop_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2961; Match(DROP);
			State = 2962; Match(SYNONYM);
			State = 2965;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				State = 2963; Match(IF);
				State = 2964; Match(EXISTS);
				}
				break;
			}
			State = 2970;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				State = 2967; _localctx.schema = id_();
				State = 2968; Match(DOT);
				}
				break;
			}
			State = 2972; _localctx.synonym_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_userContext : ParserRuleContext {
		public Id_Context user_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_user(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_userContext drop_user() {
		Drop_userContext _localctx = new Drop_userContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_drop_user);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2974; Match(DROP);
			State = 2975; Match(USER);
			State = 2978;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				State = 2976; Match(IF);
				State = 2977; Match(EXISTS);
				}
				break;
			}
			State = 2980; _localctx.user_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_workload_groupContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_workload_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_workload_groupContext drop_workload_group() {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_drop_workload_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2982; Match(DROP);
			State = 2983; Match(WORKLOAD);
			State = 2984; Match(GROUP);
			State = 2985; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_xml_schema_collectionContext : ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_xml_schema_collection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_xml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_drop_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2987; Match(DROP);
			State = 2988; Match(XML);
			State = 2989; Match(SCHEMA);
			State = 2990; Match(COLLECTION);
			State = 2994;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 2991; _localctx.relational_schema = id_();
				State = 2992; Match(DOT);
				}
				break;
			}
			State = 2996; _localctx.sql_identifier = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disable_triggerContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDisable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDisable_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisable_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Disable_triggerContext disable_trigger() {
		Disable_triggerContext _localctx = new Disable_triggerContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_disable_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2998; Match(DISABLE);
			State = 2999; Match(TRIGGER);
			State = 3014;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
			case 1:
				{
				State = 3009;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3001;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
						case 1:
							{
							State = 3000; Match(COMMA);
							}
							break;
						}
						State = 3006;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
						case 1:
							{
							State = 3003; _localctx.schema_name = id_();
							State = 3004; Match(DOT);
							}
							break;
						}
						State = 3008; _localctx.trigger_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3011;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,222,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 3013; Match(ALL);
				}
				break;
			}
			State = 3016; Match(ON);
			State = 3026;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				State = 3020;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					State = 3017; _localctx.schema_id = id_();
					State = 3018; Match(DOT);
					}
					break;
				}
				State = 3022; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 3023; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3024; Match(ALL);
				State = 3025; Match(SERVER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnable_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_enable_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3028; Match(ENABLE);
			State = 3029; Match(TRIGGER);
			State = 3044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				State = 3039;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3031;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
						case 1:
							{
							State = 3030; Match(COMMA);
							}
							break;
						}
						State = 3036;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
						case 1:
							{
							State = 3033; _localctx.schema_name = id_();
							State = 3034; Match(DOT);
							}
							break;
						}
						State = 3038; _localctx.trigger_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3041;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,228,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 3043; Match(ALL);
				}
				break;
			}
			State = 3046; Match(ON);
			State = 3056;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				State = 3050;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					State = 3047; _localctx.schema_id = id_();
					State = 3048; Match(DOT);
					}
					break;
				}
				State = 3052; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 3053; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3054; Match(ALL);
				State = 3055; Match(SERVER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_tableContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLock_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLock_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_tableContext lock_table() {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_lock_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3058; Match(LOCK);
			State = 3059; Match(TABLE);
			State = 3060; table_name();
			State = 3061; Match(IN);
			State = 3062;
			_la = _input.La(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3063; Match(MODE);
			State = 3067;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				State = 3064; Match(WAIT);
				State = 3065; _localctx.seconds = Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 3066; Match(NOWAIT);
				}
				break;
			}
			State = 3070;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				State = 3069; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truncate_tableContext : ParserRuleContext {
		public ITerminalNode TRUNCATE() { return GetToken(TSqlParser.TRUNCATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncate_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTruncate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTruncate_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Truncate_tableContext truncate_table() {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_truncate_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3072; Match(TRUNCATE);
			State = 3073; Match(TABLE);
			State = 3074; table_name();
			State = 3094;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
			case 1:
				{
				State = 3075; Match(WITH);
				State = 3076; Match(LR_BRACKET);
				State = 3077; Match(PARTITIONS);
				State = 3078; Match(LR_BRACKET);
				State = 3088;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3080;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
						case 1:
							{
							State = 3079; Match(COMMA);
							}
							break;
						}
						State = 3086;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
						case 1:
							{
							State = 3082; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3083; Match(DECIMAL);
							State = 3084; Match(TO);
							State = 3085; Match(DECIMAL);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3090;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,236,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 3092; Match(RR_BRACKET);
				State = 3093; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_master_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public IToken key_store_provider_name;
		public IToken key_path;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_column_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_master_keyContext create_column_master_key() {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_create_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3096; Match(CREATE);
			State = 3097; Match(COLUMN);
			State = 3098; Match(MASTER);
			State = 3099; Match(KEY);
			State = 3100; _localctx.key_name = id_();
			State = 3101; Match(WITH);
			State = 3102; Match(LR_BRACKET);
			State = 3103; Match(KEY_STORE_PROVIDER_NAME);
			State = 3104; Match(EQUAL);
			State = 3105; _localctx.key_store_provider_name = Match(STRING);
			State = 3106; Match(COMMA);
			State = 3107; Match(KEY_PATH);
			State = 3108; Match(EQUAL);
			State = 3109; _localctx.key_path = Match(STRING);
			State = 3110; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public IToken identity_name;
		public IToken secret;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_credentialContext alter_credential() {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_alter_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3112; Match(ALTER);
			State = 3113; Match(CREDENTIAL);
			State = 3114; _localctx.credential_name = id_();
			State = 3115; Match(WITH);
			State = 3116; Match(IDENTITY);
			State = 3117; Match(EQUAL);
			State = 3118; _localctx.identity_name = Match(STRING);
			State = 3123;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				State = 3119; Match(COMMA);
				State = 3120; Match(SECRET);
				State = 3121; Match(EQUAL);
				State = 3122; _localctx.secret = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public IToken identity_name;
		public IToken secret;
		public Id_Context cryptographic_provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_credentialContext create_credential() {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_create_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3125; Match(CREATE);
			State = 3126; Match(CREDENTIAL);
			State = 3127; _localctx.credential_name = id_();
			State = 3128; Match(WITH);
			State = 3129; Match(IDENTITY);
			State = 3130; Match(EQUAL);
			State = 3131; _localctx.identity_name = Match(STRING);
			State = 3136;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				State = 3132; Match(COMMA);
				State = 3133; Match(SECRET);
				State = 3134; Match(EQUAL);
				State = 3135; _localctx.secret = Match(STRING);
				}
				break;
			}
			State = 3142;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				State = 3138; Match(FOR);
				State = 3139; Match(CRYPTOGRAPHIC);
				State = 3140; Match(PROVIDER);
				State = 3141; _localctx.cryptographic_provider_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_cryptographic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public IToken crypto_provider_ddl_file;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_cryptographic_provider(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_cryptographic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_cryptographic_providerContext alter_cryptographic_provider() {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_alter_cryptographic_provider);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3144; Match(ALTER);
			State = 3145; Match(CRYPTOGRAPHIC);
			State = 3146; Match(PROVIDER);
			State = 3147; _localctx.provider_name = id_();
			State = 3152;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				State = 3148; Match(FROM);
				State = 3149; Match(FILE);
				State = 3150; Match(EQUAL);
				State = 3151; _localctx.crypto_provider_ddl_file = Match(STRING);
				}
				break;
			}
			State = 3155;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				State = 3154;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_cryptographic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public IToken path_of_DLL;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_cryptographic_provider(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_cryptographic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_cryptographic_providerContext create_cryptographic_provider() {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_create_cryptographic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3157; Match(CREATE);
			State = 3158; Match(CRYPTOGRAPHIC);
			State = 3159; Match(PROVIDER);
			State = 3160; _localctx.provider_name = id_();
			State = 3161; Match(FROM);
			State = 3162; Match(FILE);
			State = 3163; Match(EQUAL);
			State = 3164; _localctx.path_of_DLL = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_event_notificationContext : ParserRuleContext {
		public Id_Context event_notification_name;
		public Id_Context queue_name;
		public Id_Context event_type_or_group;
		public IToken broker_service;
		public IToken broker_service_specifier_or_current_database;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_event_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_event_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_event_notification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_event_notification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_event_notificationContext create_event_notification() {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_create_event_notification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3166; Match(CREATE);
			State = 3167; Match(EVENT);
			State = 3168; Match(NOTIFICATION);
			State = 3169; _localctx.event_notification_name = id_();
			State = 3170; Match(ON);
			State = 3175;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				State = 3171; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 3172; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3173; Match(QUEUE);
				State = 3174; _localctx.queue_name = id_();
				}
				break;
			}
			State = 3179;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				State = 3177; Match(WITH);
				State = 3178; Match(FAN_IN);
				}
				break;
			}
			State = 3181; Match(FOR);
			State = 3186;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3183;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
					case 1:
						{
						State = 3182; Match(COMMA);
						}
						break;
					}
					State = 3185; _localctx.event_type_or_group = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3188;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,246,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3190; Match(TO);
			State = 3191; Match(SERVICE);
			State = 3192; _localctx.broker_service = Match(STRING);
			State = 3193; Match(COMMA);
			State = 3194; _localctx.broker_service_specifier_or_current_database = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_event_sessionContext : ParserRuleContext {
		public Id_Context event_session_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context event_name;
		public Id_Context event_customizable_attributue;
		public Id_Context action_name;
		public Id_Context target_name;
		public Id_Context target_parameter_name;
		public IToken max_memory;
		public IToken max_dispatch_latency_seconds;
		public IToken max_event_size;
		public ITerminalNode[] EVENT() { return GetTokens(TSqlParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(TSqlParser.EVENT, i);
		}
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] KB() { return GetTokens(TSqlParser.KB); }
		public ITerminalNode KB(int i) {
			return GetToken(TSqlParser.KB, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode[] ACTION() { return GetTokens(TSqlParser.ACTION); }
		public ITerminalNode ACTION(int i) {
			return GetToken(TSqlParser.ACTION, i);
		}
		public ITerminalNode[] WHERE() { return GetTokens(TSqlParser.WHERE); }
		public ITerminalNode WHERE(int i) {
			return GetToken(TSqlParser.WHERE, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_event_session(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_event_session(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_event_sessionContext create_or_alter_event_session() {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3196;
			_la = _input.La(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3197; Match(EVENT);
			State = 3198; Match(SESSION);
			State = 3199; _localctx.event_session_name = id_();
			State = 3200; Match(ON);
			State = 3201; Match(SERVER);
			State = 3269;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,258,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3203;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
					case 1:
						{
						State = 3202; Match(COMMA);
						}
						break;
					}
					State = 3205; Match(ADD);
					State = 3206; Match(EVENT);
					{
					State = 3210;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
					case 1:
						{
						State = 3207; _localctx.event_module_guid = id_();
						State = 3208; Match(DOT);
						}
						break;
					}
					State = 3212; _localctx.event_package_name = id_();
					State = 3213; Match(DOT);
					State = 3214; _localctx.event_name = id_();
					}
					State = 3264;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,257,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3216; Match(LR_BRACKET);
							State = 3230;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
							case 1:
								{
								State = 3217; Match(SET);
								State = 3227;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,250,_ctx);
								while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
									if ( _alt==1 ) {
										{
										{
										State = 3219;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
										case 1:
											{
											State = 3218; Match(COMMA);
											}
											break;
										}
										State = 3221; _localctx.event_customizable_attributue = id_();
										State = 3222; Match(EQUAL);
										State = 3223;
										_la = _input.La(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										} 
									}
									State = 3229;
									_errHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(_input,250,_ctx);
								}
								}
								break;
							}
							State = 3252;
							_errHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 3232; Match(ACTION);
									State = 3233; Match(LR_BRACKET);
									State = 3246;
									_errHandler.Sync(this);
									_alt = 1;
									do {
										switch (_alt) {
										case 1:
											{
											{
											State = 3235;
											_errHandler.Sync(this);
											switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
											case 1:
												{
												State = 3234; Match(COMMA);
												}
												break;
											}
											State = 3240;
											_errHandler.Sync(this);
											switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
											case 1:
												{
												State = 3237; _localctx.event_module_guid = id_();
												State = 3238; Match(DOT);
												}
												break;
											}
											State = 3242; _localctx.event_package_name = id_();
											State = 3243; Match(DOT);
											State = 3244; _localctx.action_name = id_();
											}
											}
											break;
										default:
											throw new NoViableAltException(this);
										}
										State = 3248;
										_errHandler.Sync(this);
										_alt = Interpreter.AdaptivePredict(_input,254,_ctx);
									} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
									State = 3250; Match(RR_BRACKET);
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 3254;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,255,_ctx);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
							State = 3258;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
							case 1:
								{
								State = 3256; Match(WHERE);
								State = 3257; event_session_predicate_expression();
								}
								break;
							}
							State = 3260; Match(RR_BRACKET);
							}
							} 
						}
						State = 3266;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,257,_ctx);
					}
					}
					} 
				}
				State = 3271;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,258,_ctx);
			}
			State = 3288;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,261,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3273;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
					case 1:
						{
						State = 3272; Match(COMMA);
						}
						break;
					}
					State = 3275; Match(DROP);
					State = 3276; Match(EVENT);
					State = 3280;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
					case 1:
						{
						State = 3277; _localctx.event_module_guid = id_();
						State = 3278; Match(DOT);
						}
						break;
					}
					State = 3282; _localctx.event_package_name = id_();
					State = 3283; Match(DOT);
					State = 3284; _localctx.event_name = id_();
					}
					} 
				}
				State = 3290;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,261,_ctx);
			}
			State = 3332;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,269,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 3291; Match(ADD);
					State = 3292; Match(TARGET);
					State = 3296;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
					case 1:
						{
						State = 3293; _localctx.event_module_guid = id_();
						State = 3294; Match(DOT);
						}
						break;
					}
					State = 3298; _localctx.event_package_name = id_();
					State = 3299; Match(DOT);
					State = 3300; _localctx.target_name = id_();
					}
					State = 3327;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,268,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3302; Match(LR_BRACKET);
							State = 3303; Match(SET);
							State = 3319;
							_errHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 3305;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
									case 1:
										{
										State = 3304; Match(COMMA);
										}
										break;
									}
									State = 3307; _localctx.target_parameter_name = id_();
									State = 3308; Match(EQUAL);
									State = 3317;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,266,_ctx) ) {
									case 1:
										{
										State = 3310;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
										case 1:
											{
											State = 3309; Match(LR_BRACKET);
											}
											break;
										}
										State = 3312; Match(DECIMAL);
										State = 3314;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
										case 1:
											{
											State = 3313; Match(RR_BRACKET);
											}
											break;
										}
										}
										break;

									case 2:
										{
										State = 3316; Match(STRING);
										}
										break;
									}
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 3321;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,267,_ctx);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
							State = 3323; Match(RR_BRACKET);
							}
							} 
						}
						State = 3329;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,268,_ctx);
					}
					}
					} 
				}
				State = 3334;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,269,_ctx);
			}
			State = 3348;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,271,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3335; Match(DROP);
					State = 3336; Match(TARGET);
					State = 3340;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
					case 1:
						{
						State = 3337; _localctx.event_module_guid = id_();
						State = 3338; Match(DOT);
						}
						break;
					}
					State = 3342; _localctx.event_package_name = id_();
					State = 3343; Match(DOT);
					State = 3344; _localctx.target_name = id_();
					}
					} 
				}
				State = 3350;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,271,_ctx);
			}
			State = 3416;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				State = 3351; Match(WITH);
				State = 3352; Match(LR_BRACKET);
				State = 3360;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					State = 3354;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
					case 1:
						{
						State = 3353; Match(COMMA);
						}
						break;
					}
					State = 3356; Match(MAX_MEMORY);
					State = 3357; Match(EQUAL);
					State = 3358; _localctx.max_memory = Match(DECIMAL);
					State = 3359;
					_la = _input.La(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3368;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					State = 3363;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
					case 1:
						{
						State = 3362; Match(COMMA);
						}
						break;
					}
					State = 3365; Match(EVENT_RETENTION_MODE);
					State = 3366; Match(EQUAL);
					State = 3367;
					_la = _input.La(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3380;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					State = 3371;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,276,_ctx) ) {
					case 1:
						{
						State = 3370; Match(COMMA);
						}
						break;
					}
					State = 3373; Match(MAX_DISPATCH_LATENCY);
					State = 3374; Match(EQUAL);
					State = 3378;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
					case 1:
						{
						State = 3375; _localctx.max_dispatch_latency_seconds = Match(DECIMAL);
						State = 3376; Match(SECONDS);
						}
						break;

					case 2:
						{
						State = 3377; Match(INFINITE);
						}
						break;
					}
					}
					break;
				}
				State = 3389;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,280,_ctx) ) {
				case 1:
					{
					State = 3383;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
					case 1:
						{
						State = 3382; Match(COMMA);
						}
						break;
					}
					State = 3385; Match(MAX_EVENT_SIZE);
					State = 3386; Match(EQUAL);
					State = 3387; _localctx.max_event_size = Match(DECIMAL);
					State = 3388;
					_la = _input.La(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3397;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					State = 3392;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
					case 1:
						{
						State = 3391; Match(COMMA);
						}
						break;
					}
					State = 3394; Match(MEMORY_PARTITION_MODE);
					State = 3395; Match(EQUAL);
					State = 3396;
					_la = _input.La(1);
					if ( !(((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (NONE - 746)) | (1L << (PER_CPU - 746)) | (1L << (PER_NODE - 746)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3405;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					State = 3400;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,283,_ctx) ) {
					case 1:
						{
						State = 3399; Match(COMMA);
						}
						break;
					}
					State = 3402; Match(TRACK_CAUSALITY);
					State = 3403; Match(EQUAL);
					State = 3404;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3413;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					State = 3408;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
					case 1:
						{
						State = 3407; Match(COMMA);
						}
						break;
					}
					State = 3410; Match(STARTUP_STATE);
					State = 3411; Match(EQUAL);
					State = 3412;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3415; Match(RR_BRACKET);
				}
				break;
			}
			State = 3421;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 3418; Match(STATE);
				State = 3419; Match(EQUAL);
				State = 3420;
				_la = _input.La(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_expressionContext : ParserRuleContext {
		public Event_session_predicate_factorContext[] event_session_predicate_factor() {
			return GetRuleContexts<Event_session_predicate_factorContext>();
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return GetRuleContext<Event_session_predicate_factorContext>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(TSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_expressionContext event_session_predicate_expression() {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_event_session_predicate_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3439;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3424;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
					case 1:
						{
						State = 3423; Match(COMMA);
						}
						break;
					}
					State = 3427;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
					case 1:
						{
						State = 3426;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 3430;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
					case 1:
						{
						State = 3429; Match(NOT);
						}
						break;
					}
					State = 3437;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,292,_ctx) ) {
					case 1:
						{
						State = 3432; event_session_predicate_factor();
						}
						break;

					case 2:
						{
						State = 3433; Match(LR_BRACKET);
						State = 3434; event_session_predicate_expression();
						State = 3435; Match(RR_BRACKET);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3441;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,293,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_factorContext : ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return GetRuleContext<Event_session_predicate_leafContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return GetRuleContext<Event_session_predicate_expressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_factor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_factor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_factorContext event_session_predicate_factor() {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_event_session_predicate_factor);
		try {
			State = 3448;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3443; event_session_predicate_leaf();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3444; Match(LR_BRACKET);
				State = 3445; event_session_predicate_expression();
				State = 3446; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_leafContext : ParserRuleContext {
		public Id_Context event_field_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context predicate_source_name;
		public Id_Context predicate_compare_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_leaf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_leaf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_leaf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_leaf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_leafContext event_session_predicate_leaf() {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_event_session_predicate_leaf);
		int _la;
		try {
			State = 3506;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3478;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					State = 3450; _localctx.event_field_name = id_();
					}
					break;

				case 2:
					{
					State = 3461;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
					case 1:
						{
						State = 3451; _localctx.event_field_name = id_();
						}
						break;

					case 2:
						{
						{
						State = 3455;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
						case 1:
							{
							State = 3452; _localctx.event_module_guid = id_();
							State = 3453; Match(DOT);
							}
							break;
						}
						State = 3457; _localctx.event_package_name = id_();
						State = 3458; Match(DOT);
						State = 3459; _localctx.predicate_source_name = id_();
						}
						}
						break;
					}
					State = 3474;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
					case 1:
						{
						State = 3463; Match(EQUAL);
						}
						break;

					case 2:
						{
						{
						State = 3464; Match(LESS);
						State = 3465; Match(GREATER);
						}
						}
						break;

					case 3:
						{
						{
						State = 3466; Match(EXCLAMATION);
						State = 3467; Match(EQUAL);
						}
						}
						break;

					case 4:
						{
						State = 3468; Match(GREATER);
						}
						break;

					case 5:
						{
						{
						State = 3469; Match(GREATER);
						State = 3470; Match(EQUAL);
						}
						}
						break;

					case 6:
						{
						State = 3471; Match(LESS);
						}
						break;

					case 7:
						{
						State = 3472; Match(LESS);
						State = 3473; Match(EQUAL);
						}
						break;
					}
					State = 3476;
					_la = _input.La(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3483;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
				case 1:
					{
					State = 3480; _localctx.event_module_guid = id_();
					State = 3481; Match(DOT);
					}
					break;
				}
				State = 3485; _localctx.event_package_name = id_();
				State = 3486; Match(DOT);
				State = 3487; _localctx.predicate_compare_name = id_();
				State = 3488; Match(LR_BRACKET);
				State = 3502;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					State = 3489; _localctx.event_field_name = id_();
					}
					break;

				case 2:
					{
					{
					State = 3493;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
					case 1:
						{
						State = 3490; _localctx.event_module_guid = id_();
						State = 3491; Match(DOT);
						}
						break;
					}
					State = 3495; _localctx.event_package_name = id_();
					State = 3496; Match(DOT);
					State = 3497; _localctx.predicate_source_name = id_();
					}
					State = 3499; Match(COMMA);
					State = 3500;
					_la = _input.La(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3504; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_sourceContext : ParserRuleContext {
		public Id_Context data_source_name;
		public IToken location;
		public IToken resource_manager_location;
		public Id_Context credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] LOCATION() { return GetTokens(TSqlParser.LOCATION); }
		public ITerminalNode LOCATION(int i) {
			return GetToken(TSqlParser.LOCATION, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RESOURCE_MANAGER_LOCATION() { return GetTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_data_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_sourceContext alter_external_data_source() {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_alter_external_data_source);
		try {
			int _alt;
			State = 3555;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3508; Match(ALTER);
				State = 3509; Match(EXTERNAL);
				State = 3510; Match(DATA);
				State = 3511; Match(SOURCE);
				State = 3512; _localctx.data_source_name = id_();
				State = 3513; Match(SET);
				State = 3529;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3529;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
						case 1:
							{
							State = 3514; Match(LOCATION);
							State = 3515; Match(EQUAL);
							State = 3516; _localctx.location = Match(STRING);
							State = 3518;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,303,_ctx) ) {
							case 1:
								{
								State = 3517; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 2:
							{
							State = 3520; Match(RESOURCE_MANAGER_LOCATION);
							State = 3521; Match(EQUAL);
							State = 3522; _localctx.resource_manager_location = Match(STRING);
							State = 3524;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
							case 1:
								{
								State = 3523; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 3:
							{
							State = 3526; Match(CREDENTIAL);
							State = 3527; Match(EQUAL);
							State = 3528; _localctx.credential_name = id_();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3531;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,306,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3533; Match(ALTER);
				State = 3534; Match(EXTERNAL);
				State = 3535; Match(DATA);
				State = 3536; Match(SOURCE);
				State = 3537; _localctx.data_source_name = id_();
				State = 3538; Match(WITH);
				State = 3539; Match(LR_BRACKET);
				State = 3540; Match(TYPE);
				State = 3541; Match(EQUAL);
				State = 3542; Match(BLOB_STORAGE);
				State = 3543; Match(COMMA);
				State = 3544; Match(LOCATION);
				State = 3545; Match(EQUAL);
				State = 3546; _localctx.location = Match(STRING);
				State = 3551;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					State = 3547; Match(COMMA);
					State = 3548; Match(CREDENTIAL);
					State = 3549; Match(EQUAL);
					State = 3550; _localctx.credential_name = id_();
					}
					break;
				}
				State = 3553; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public IToken client_library;
		public Id_Context external_data_source_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_libraryContext alter_external_library() {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_alter_external_library);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3557; Match(ALTER);
			State = 3558; Match(EXTERNAL);
			State = 3559; Match(LIBRARY);
			State = 3560; _localctx.library_name = id_();
			State = 3563;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				State = 3561; Match(AUTHORIZATION);
				State = 3562; _localctx.owner_name = id_();
				}
				break;
			}
			State = 3565;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			{
			State = 3566; Match(LR_BRACKET);
			State = 3567; Match(CONTENT);
			State = 3568; Match(EQUAL);
			State = 3572;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				State = 3569; _localctx.client_library = Match(STRING);
				}
				break;

			case 2:
				{
				State = 3570; Match(BINARY);
				}
				break;

			case 3:
				{
				State = 3571; Match(NONE);
				}
				break;
			}
			{
			State = 3574; Match(COMMA);
			State = 3575; Match(PLATFORM);
			State = 3576; Match(EQUAL);
			State = 3578;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				State = 3577;
				_la = _input.La(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 3580; Match(RR_BRACKET);
			}
			State = 3582; Match(WITH);
			State = 3592;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3592;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
					case 1:
						{
						State = 3584;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
						case 1:
							{
							State = 3583; Match(COMMA);
							}
							break;
						}
						State = 3586; Match(LANGUAGE);
						State = 3587; Match(EQUAL);
						State = 3588;
						_la = _input.La(1);
						if ( !(_la==PYTHON || _la==R) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 3589; Match(DATA_SOURCE);
						State = 3590; Match(EQUAL);
						State = 3591; _localctx.external_data_source_name = id_();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3594;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,314,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3596; Match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public IToken client_library;
		public Id_Context external_data_source_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_libraryContext create_external_library() {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_create_external_library);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3598; Match(CREATE);
			State = 3599; Match(EXTERNAL);
			State = 3600; Match(LIBRARY);
			State = 3601; _localctx.library_name = id_();
			State = 3604;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				State = 3602; Match(AUTHORIZATION);
				State = 3603; _localctx.owner_name = id_();
				}
				break;
			}
			State = 3606; Match(FROM);
			{
			State = 3608;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
			case 1:
				{
				State = 3607; Match(COMMA);
				}
				break;
			}
			State = 3611;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				State = 3610; Match(LR_BRACKET);
				}
				break;
			}
			State = 3615;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				State = 3613; Match(CONTENT);
				State = 3614; Match(EQUAL);
				}
				break;
			}
			State = 3620;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				State = 3617; _localctx.client_library = Match(STRING);
				}
				break;

			case 2:
				{
				State = 3618; Match(BINARY);
				}
				break;

			case 3:
				{
				State = 3619; Match(NONE);
				}
				break;
			}
			State = 3629;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				State = 3622; Match(COMMA);
				State = 3623; Match(PLATFORM);
				State = 3624; Match(EQUAL);
				State = 3626;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
				case 1:
					{
					State = 3625;
					_la = _input.La(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3628; Match(RR_BRACKET);
				}
				break;
			}
			}
			State = 3646;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 3631; Match(WITH);
				State = 3641;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3641;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
						case 1:
							{
							State = 3633;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
							case 1:
								{
								State = 3632; Match(COMMA);
								}
								break;
							}
							State = 3635; Match(LANGUAGE);
							State = 3636; Match(EQUAL);
							State = 3637;
							_la = _input.La(1);
							if ( !(_la==PYTHON || _la==R) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 3638; Match(DATA_SOURCE);
							State = 3639; Match(EQUAL);
							State = 3640; _localctx.external_data_source_name = id_();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3643;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,324,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 3645; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_resource_poolContext alter_external_resource_pool() {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_alter_external_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3648; Match(ALTER);
			State = 3649; Match(EXTERNAL);
			State = 3650; Match(RESOURCE);
			State = 3651; Match(POOL);
			State = 3654;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				State = 3652; _localctx.pool_name = id_();
				}
				break;

			case 2:
				{
				State = 3653; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 3656; Match(WITH);
			State = 3657; Match(LR_BRACKET);
			State = 3658; Match(MAX_CPU_PERCENT);
			State = 3659; Match(EQUAL);
			State = 3660; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 3698;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 3662;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
				case 1:
					{
					State = 3661; Match(COMMA);
					}
					break;
				}
				State = 3664; Match(AFFINITY);
				State = 3665; Match(CPU);
				State = 3666; Match(EQUAL);
				State = 3680;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					State = 3667; Match(AUTO);
					}
					break;

				case 2:
					{
					State = 3676;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3676;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,329,_ctx) ) {
							case 1:
								{
								State = 3669;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
								case 1:
									{
									State = 3668; Match(COMMA);
									}
									break;
								}
								State = 3671; Match(DECIMAL);
								State = 3672; Match(TO);
								State = 3673; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 3674; Match(COMMA);
								State = 3675; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3678;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,330,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3682; Match(NUMANODE);
				State = 3683; Match(EQUAL);
				State = 3694;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3694;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
						case 1:
							{
							State = 3685;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
							case 1:
								{
								State = 3684; Match(COMMA);
								}
								break;
							}
							State = 3687; Match(DECIMAL);
							State = 3688; Match(TO);
							State = 3689; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3691;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
							case 1:
								{
								State = 3690; Match(COMMA);
								}
								break;
							}
							State = 3693; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3696;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,335,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 3706;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				State = 3701;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
				case 1:
					{
					State = 3700; Match(COMMA);
					}
					break;
				}
				State = 3703; Match(MAX_MEMORY_PERCENT);
				State = 3704; Match(EQUAL);
				State = 3705; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 3714;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				State = 3709;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					State = 3708; Match(COMMA);
					}
					break;
				}
				State = 3711; Match(MAX_PROCESSES);
				State = 3712; Match(EQUAL);
				State = 3713; _localctx.max_processes = Match(DECIMAL);
				}
				break;
			}
			State = 3716; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_resource_poolContext create_external_resource_pool() {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_create_external_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3718; Match(CREATE);
			State = 3719; Match(EXTERNAL);
			State = 3720; Match(RESOURCE);
			State = 3721; Match(POOL);
			State = 3722; _localctx.pool_name = id_();
			State = 3723; Match(WITH);
			State = 3724; Match(LR_BRACKET);
			State = 3725; Match(MAX_CPU_PERCENT);
			State = 3726; Match(EQUAL);
			State = 3727; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 3765;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				State = 3729;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
				case 1:
					{
					State = 3728; Match(COMMA);
					}
					break;
				}
				State = 3731; Match(AFFINITY);
				State = 3732; Match(CPU);
				State = 3733; Match(EQUAL);
				State = 3747;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					State = 3734; Match(AUTO);
					}
					break;

				case 2:
					{
					State = 3743;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3743;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
							case 1:
								{
								State = 3736;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
								case 1:
									{
									State = 3735; Match(COMMA);
									}
									break;
								}
								State = 3738; Match(DECIMAL);
								State = 3739; Match(TO);
								State = 3740; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 3741; Match(COMMA);
								State = 3742; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3745;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,344,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3749; Match(NUMANODE);
				State = 3750; Match(EQUAL);
				State = 3761;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3761;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,348,_ctx) ) {
						case 1:
							{
							State = 3752;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
							case 1:
								{
								State = 3751; Match(COMMA);
								}
								break;
							}
							State = 3754; Match(DECIMAL);
							State = 3755; Match(TO);
							State = 3756; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3758;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
							case 1:
								{
								State = 3757; Match(COMMA);
								}
								break;
							}
							State = 3760; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3763;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,349,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 3773;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				State = 3768;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					State = 3767; Match(COMMA);
					}
					break;
				}
				State = 3770; Match(MAX_MEMORY_PERCENT);
				State = 3771; Match(EQUAL);
				State = 3772; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 3781;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				State = 3776;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
				case 1:
					{
					State = 3775; Match(COMMA);
					}
					break;
				}
				State = 3778; Match(MAX_PROCESSES);
				State = 3779; Match(EQUAL);
				State = 3780; _localctx.max_processes = Match(DECIMAL);
				}
				break;
			}
			State = 3783; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_catalog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_catalogContext alter_fulltext_catalog() {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_alter_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3785; Match(ALTER);
			State = 3786; Match(FULLTEXT);
			State = 3787; Match(CATALOG);
			State = 3788; _localctx.catalog_name = id_();
			State = 3799;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				State = 3789; Match(REBUILD);
				State = 3794;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
				case 1:
					{
					State = 3790; Match(WITH);
					State = 3791; Match(ACCENT_SENSITIVITY);
					State = 3792; Match(EQUAL);
					State = 3793;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3796; Match(REORGANIZE);
				}
				break;

			case 3:
				{
				State = 3797; Match(AS);
				State = 3798; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public Id_Context filegroup;
		public IToken rootpath;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_catalog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_catalogContext create_fulltext_catalog() {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_create_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3801; Match(CREATE);
			State = 3802; Match(FULLTEXT);
			State = 3803; Match(CATALOG);
			State = 3804; _localctx.catalog_name = id_();
			State = 3808;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				State = 3805; Match(ON);
				State = 3806; Match(FILEGROUP);
				State = 3807; _localctx.filegroup = id_();
				}
				break;
			}
			State = 3813;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				State = 3810; Match(IN);
				State = 3811; Match(PATH);
				State = 3812; _localctx.rootpath = Match(STRING);
				}
				break;
			}
			State = 3819;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				State = 3815; Match(WITH);
				State = 3816; Match(ACCENT_SENSITIVITY);
				State = 3817; Match(EQUAL);
				State = 3818;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 3823;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				State = 3821; Match(AS);
				State = 3822; Match(DEFAULT);
				}
				break;
			}
			State = 3827;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				State = 3825; Match(AUTHORIZATION);
				State = 3826; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public IToken stopword;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_stoplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3829; Match(ALTER);
			State = 3830; Match(FULLTEXT);
			State = 3831; Match(STOPLIST);
			State = 3832; _localctx.stoplist_name = id_();
			State = 3846;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				State = 3833; Match(ADD);
				State = 3834; _localctx.stopword = Match(STRING);
				State = 3835; Match(LANGUAGE);
				State = 3836;
				_la = _input.La(1);
				if ( !(((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (DECIMAL - 851)) | (1L << (STRING - 851)) | (1L << (BINARY - 851)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 3837; Match(DROP);
				State = 3844;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					State = 3838; _localctx.stopword = Match(STRING);
					State = 3839; Match(LANGUAGE);
					State = 3840;
					_la = _input.La(1);
					if ( !(((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (DECIMAL - 851)) | (1L << (STRING - 851)) | (1L << (BINARY - 851)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 3841; Match(ALL);
					State = 3842;
					_la = _input.La(1);
					if ( !(((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (DECIMAL - 851)) | (1L << (STRING - 851)) | (1L << (BINARY - 851)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 3843; Match(ALL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public Id_Context database_name;
		public Id_Context source_stoplist_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode[] STOPLIST() { return GetTokens(TSqlParser.STOPLIST); }
		public ITerminalNode STOPLIST(int i) {
			return GetToken(TSqlParser.STOPLIST, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_stoplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_stoplistContext create_fulltext_stoplist() {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_create_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3848; Match(CREATE);
			State = 3849; Match(FULLTEXT);
			State = 3850; Match(STOPLIST);
			State = 3851; _localctx.stoplist_name = id_();
			State = 3863;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				State = 3852; Match(FROM);
				State = 3861;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					State = 3856;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
					case 1:
						{
						State = 3853; _localctx.database_name = id_();
						State = 3854; Match(DOT);
						}
						break;
					}
					State = 3858; _localctx.source_stoplist_name = id_();
					}
					break;

				case 2:
					{
					State = 3859; Match(SYSTEM);
					State = 3860; Match(STOPLIST);
					}
					break;
				}
				}
				break;
			}
			State = 3867;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				State = 3865; Match(AUTHORIZATION);
				State = 3866; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_sql_serverContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken password_hash;
		public IToken old_password;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_sql_serverContext alter_login_sql_server() {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_alter_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3869; Match(ALTER);
			State = 3870; Match(LOGIN);
			State = 3871; _localctx.login_name = id_();
			State = 3939;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 3873;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					State = 3872;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3875; Match(WITH);
				State = 3889;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					{
					State = 3876; Match(PASSWORD);
					State = 3877; Match(EQUAL);
					State = 3881;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
					case 1:
						{
						State = 3878; _localctx.password = Match(STRING);
						}
						break;

					case 2:
						{
						State = 3879; _localctx.password_hash = Match(BINARY);
						State = 3880; Match(HASHED);
						}
						break;
					}
					}
					State = 3886;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3883;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 3888;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
					}
					}
					break;
				}
				State = 3900;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					State = 3891; Match(OLD_PASSWORD);
					State = 3892; Match(EQUAL);
					State = 3893; _localctx.old_password = Match(STRING);
					State = 3897;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,372,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3894;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 3899;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,372,_ctx);
					}
					}
					break;
				}
				State = 3905;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					State = 3902; Match(DEFAULT_DATABASE);
					State = 3903; Match(EQUAL);
					State = 3904; _localctx.default_database = id_();
					}
					break;
				}
				State = 3910;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					State = 3907; Match(DEFAULT_LANGUAGE);
					State = 3908; Match(EQUAL);
					State = 3909; _localctx.default_laguage = id_();
					}
					break;
				}
				State = 3915;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					State = 3912; Match(NAME);
					State = 3913; Match(EQUAL);
					State = 3914; _localctx.login_name = id_();
					}
					break;
				}
				State = 3920;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					State = 3917; Match(CHECK_POLICY);
					State = 3918; Match(EQUAL);
					State = 3919;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3925;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					State = 3922; Match(CHECK_EXPIRATION);
					State = 3923; Match(EQUAL);
					State = 3924;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3930;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					State = 3927; Match(CREDENTIAL);
					State = 3928; Match(EQUAL);
					State = 3929; _localctx.credential_name = id_();
					}
					break;
				}
				State = 3934;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					State = 3932; Match(NO);
					State = 3933; Match(CREDENTIAL);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 3936;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3937; Match(CREDENTIAL);
				State = 3938; _localctx.credential_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_sql_serverContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken password_hash;
		public IToken sid;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public IToken default_language;
		public Id_Context certname;
		public Id_Context asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_sql_serverContext create_login_sql_server() {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_create_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3941; Match(CREATE);
			State = 3942; Match(LOGIN);
			State = 3943; _localctx.login_name = id_();
			State = 4034;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				State = 3944; Match(WITH);
				State = 3958;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					{
					State = 3945; Match(PASSWORD);
					State = 3946; Match(EQUAL);
					State = 3950;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
					case 1:
						{
						State = 3947; _localctx.password = Match(STRING);
						}
						break;

					case 2:
						{
						State = 3948; _localctx.password_hash = Match(BINARY);
						State = 3949; Match(HASHED);
						}
						break;
					}
					}
					State = 3955;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,383,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3952;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 3957;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,383,_ctx);
					}
					}
					break;
				}
				State = 3966;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					State = 3961;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
					case 1:
						{
						State = 3960; Match(COMMA);
						}
						break;
					}
					State = 3963; Match(SID);
					State = 3964; Match(EQUAL);
					State = 3965; _localctx.sid = Match(BINARY);
					}
					break;
				}
				State = 3974;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
				case 1:
					{
					State = 3969;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
					case 1:
						{
						State = 3968; Match(COMMA);
						}
						break;
					}
					State = 3971; Match(DEFAULT_DATABASE);
					State = 3972; Match(EQUAL);
					State = 3973; _localctx.default_database = id_();
					}
					break;
				}
				State = 3982;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					State = 3977;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
					case 1:
						{
						State = 3976; Match(COMMA);
						}
						break;
					}
					State = 3979; Match(DEFAULT_LANGUAGE);
					State = 3980; Match(EQUAL);
					State = 3981; _localctx.default_laguage = id_();
					}
					break;
				}
				State = 3990;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					State = 3985;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
					case 1:
						{
						State = 3984; Match(COMMA);
						}
						break;
					}
					State = 3987; Match(CHECK_EXPIRATION);
					State = 3988; Match(EQUAL);
					State = 3989;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3998;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					State = 3993;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
					case 1:
						{
						State = 3992; Match(COMMA);
						}
						break;
					}
					State = 3995; Match(CHECK_POLICY);
					State = 3996; Match(EQUAL);
					State = 3997;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4006;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					State = 4001;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
					case 1:
						{
						State = 4000; Match(COMMA);
						}
						break;
					}
					State = 4003; Match(CREDENTIAL);
					State = 4004; Match(EQUAL);
					State = 4005; _localctx.credential_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				{
				{
				State = 4008; Match(FROM);
				State = 4032;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					State = 4009; Match(WINDOWS);
					{
					State = 4010; Match(WITH);
					State = 4017;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
					case 1:
						{
						State = 4012;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
						case 1:
							{
							State = 4011; Match(COMMA);
							}
							break;
						}
						State = 4014; Match(DEFAULT_DATABASE);
						State = 4015; Match(EQUAL);
						State = 4016; _localctx.default_database = id_();
						}
						break;
					}
					State = 4025;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
					case 1:
						{
						State = 4020;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
						case 1:
							{
							State = 4019; Match(COMMA);
							}
							break;
						}
						State = 4022; Match(DEFAULT_LANGUAGE);
						State = 4023; Match(EQUAL);
						State = 4024; _localctx.default_language = Match(STRING);
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 4027; Match(CERTIFICATE);
					State = 4028; _localctx.certname = id_();
					}
					break;

				case 3:
					{
					State = 4029; Match(ASYMMETRIC);
					State = 4030; Match(KEY);
					State = 4031; _localctx.asym_key_name = id_();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sqlContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sqlContext alter_login_azure_sql() {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_alter_login_azure_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4036; Match(ALTER);
			State = 4037; Match(LOGIN);
			State = 4038; _localctx.login_name = id_();
			State = 4056;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 4040;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					State = 4039;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4042; Match(WITH);
				State = 4054;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					State = 4043; Match(PASSWORD);
					State = 4044; Match(EQUAL);
					State = 4045; _localctx.password = Match(STRING);
					State = 4049;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
					case 1:
						{
						State = 4046; Match(OLD_PASSWORD);
						State = 4047; Match(EQUAL);
						State = 4048; _localctx.old_password = Match(STRING);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 4051; Match(NAME);
					State = 4052; Match(EQUAL);
					State = 4053; _localctx.login_name = id_();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_azure_sqlContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken sid;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_azure_sqlContext create_login_azure_sql() {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_create_login_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4058; Match(CREATE);
			State = 4059; Match(LOGIN);
			State = 4060; _localctx.login_name = id_();
			State = 4061; Match(WITH);
			State = 4062; Match(PASSWORD);
			State = 4063; Match(EQUAL);
			State = 4064; Match(STRING);
			State = 4068;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 4065; Match(SID);
				State = 4066; Match(EQUAL);
				State = 4067; _localctx.sid = Match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4070; Match(ALTER);
			State = 4071; Match(LOGIN);
			State = 4072; _localctx.login_name = id_();
			State = 4096;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 4074;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					State = 4073;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4076; Match(WITH);
				State = 4094;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
				case 1:
					{
					State = 4077; Match(PASSWORD);
					State = 4078; Match(EQUAL);
					State = 4079; _localctx.password = Match(STRING);
					State = 4089;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
					case 1:
						{
						State = 4080; Match(OLD_PASSWORD);
						State = 4081; Match(EQUAL);
						State = 4082; _localctx.old_password = Match(STRING);
						State = 4086;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,409,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 4083;
								_la = _input.La(1);
								if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								} 
							}
							State = 4088;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,409,_ctx);
						}
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 4091; Match(NAME);
					State = 4092; Match(EQUAL);
					State = 4093; _localctx.login_name = id_();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_pdwContext : ParserRuleContext {
		public Id_Context loginName;
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_pdwContext create_login_pdw() {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_create_login_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4098; Match(CREATE);
			State = 4099; Match(LOGIN);
			State = 4100; _localctx.loginName = id_();
			State = 4117;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				State = 4101; Match(WITH);
				{
				State = 4102; Match(PASSWORD);
				State = 4103; Match(EQUAL);
				State = 4104; _localctx.password = Match(STRING);
				State = 4106;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					State = 4105; Match(MUST_CHANGE);
					}
					break;
				}
				State = 4113;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					State = 4108; Match(CHECK_POLICY);
					State = 4109; Match(EQUAL);
					State = 4111;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,414,_ctx) ) {
					case 1:
						{
						State = 4110;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 4115; Match(FROM);
				State = 4116; Match(WINDOWS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_master_key_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_alter_master_key_sql_server);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4119; Match(ALTER);
			State = 4120; Match(MASTER);
			State = 4121; Match(KEY);
			State = 4143;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				State = 4123;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					State = 4122; Match(FORCE);
					}
					break;
				}
				State = 4125; Match(REGENERATE);
				State = 4126; Match(WITH);
				State = 4127; Match(ENCRYPTION);
				State = 4128; Match(BY);
				State = 4129; Match(PASSWORD);
				State = 4130; Match(EQUAL);
				State = 4131; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				{
				State = 4132;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4133; Match(ENCRYPTION);
				State = 4134; Match(BY);
				State = 4141;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					State = 4135; Match(SERVICE);
					State = 4136; Match(MASTER);
					State = 4137; Match(KEY);
					}
					break;

				case 2:
					{
					State = 4138; Match(PASSWORD);
					State = 4139; Match(EQUAL);
					State = 4140; _localctx.encryption_password = Match(STRING);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_master_key_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_sql_serverContext create_master_key_sql_server() {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_create_master_key_sql_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4145; Match(CREATE);
			State = 4146; Match(MASTER);
			State = 4147; Match(KEY);
			State = 4148; Match(ENCRYPTION);
			State = 4149; Match(BY);
			State = 4150; Match(PASSWORD);
			State = 4151; Match(EQUAL);
			State = 4152; _localctx.password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_master_key_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_alter_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4154; Match(ALTER);
			State = 4155; Match(MASTER);
			State = 4156; Match(KEY);
			State = 4184;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				State = 4158;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					State = 4157; Match(FORCE);
					}
					break;
				}
				State = 4160; Match(REGENERATE);
				State = 4161; Match(WITH);
				State = 4162; Match(ENCRYPTION);
				State = 4163; Match(BY);
				State = 4164; Match(PASSWORD);
				State = 4165; Match(EQUAL);
				State = 4166; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				{
				State = 4167; Match(ADD);
				State = 4168; Match(ENCRYPTION);
				State = 4169; Match(BY);
				State = 4176;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					State = 4170; Match(SERVICE);
					State = 4171; Match(MASTER);
					State = 4172; Match(KEY);
					}
					break;

				case 2:
					{
					State = 4173; Match(PASSWORD);
					State = 4174; Match(EQUAL);
					State = 4175; _localctx.encryption_password = Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 4178; Match(DROP);
				State = 4179; Match(ENCRYPTION);
				State = 4180; Match(BY);
				State = 4181; Match(PASSWORD);
				State = 4182; Match(EQUAL);
				State = 4183; _localctx.encryption_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_master_key_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_create_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4186; Match(CREATE);
			State = 4187; Match(MASTER);
			State = 4188; Match(KEY);
			State = 4194;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				State = 4189; Match(ENCRYPTION);
				State = 4190; Match(BY);
				State = 4191; Match(PASSWORD);
				State = 4192; Match(EQUAL);
				State = 4193; _localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_message_typeContext : ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context schema_collection_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_message_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_message_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_message_typeContext alter_message_type() {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_alter_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4196; Match(ALTER);
			State = 4197; Match(MESSAGE);
			State = 4198; Match(TYPE);
			State = 4199; _localctx.message_type_name = id_();
			State = 4200; Match(VALIDATION);
			State = 4201; Match(EQUAL);
			State = 4210;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				State = 4202; Match(NONE);
				}
				break;

			case 2:
				{
				State = 4203; Match(EMPTY);
				}
				break;

			case 3:
				{
				State = 4204; Match(WELL_FORMED_XML);
				}
				break;

			case 4:
				{
				State = 4205; Match(VALID_XML);
				State = 4206; Match(WITH);
				State = 4207; Match(SCHEMA);
				State = 4208; Match(COLLECTION);
				State = 4209; _localctx.schema_collection_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_partition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_functionContext alter_partition_function() {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_alter_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4212; Match(ALTER);
			State = 4213; Match(PARTITION);
			State = 4214; Match(FUNCTION);
			State = 4215; _localctx.partition_function_name = id_();
			State = 4216; Match(LR_BRACKET);
			State = 4217; Match(RR_BRACKET);
			State = 4218;
			_la = _input.La(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 4219; Match(RANGE);
			State = 4220; Match(LR_BRACKET);
			State = 4221; Match(DECIMAL);
			State = 4222; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context file_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_scheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_partition_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_schemeContext alter_partition_scheme() {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_alter_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4224; Match(ALTER);
			State = 4225; Match(PARTITION);
			State = 4226; Match(SCHEME);
			State = 4227; _localctx.partition_scheme_name = id_();
			State = 4228; Match(NEXT);
			State = 4229; Match(USED);
			State = 4231;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
			case 1:
				{
				State = 4230; _localctx.file_group_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context user_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_remote_service_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_remote_service_bindingContext alter_remote_service_binding() {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_alter_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4233; Match(ALTER);
			State = 4234; Match(REMOTE);
			State = 4235; Match(SERVICE);
			State = 4236; Match(BINDING);
			State = 4237; _localctx.binding_name = id_();
			State = 4238; Match(WITH);
			State = 4242;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				State = 4239; Match(USER);
				State = 4240; Match(EQUAL);
				State = 4241; _localctx.user_name = id_();
				}
				break;
			}
			State = 4248;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				State = 4244; Match(COMMA);
				State = 4245; Match(ANONYMOUS);
				State = 4246; Match(EQUAL);
				State = 4247;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context owner_name;
		public IToken remote_service_name;
		public Id_Context user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_service_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_service_bindingContext create_remote_service_binding() {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_create_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4250; Match(CREATE);
			State = 4251; Match(REMOTE);
			State = 4252; Match(SERVICE);
			State = 4253; Match(BINDING);
			State = 4254; _localctx.binding_name = id_();
			State = 4257;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				State = 4255; Match(AUTHORIZATION);
				State = 4256; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4259; Match(TO);
			State = 4260; Match(SERVICE);
			State = 4261; _localctx.remote_service_name = Match(STRING);
			State = 4262; Match(WITH);
			State = 4266;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				State = 4263; Match(USER);
				State = 4264; Match(EQUAL);
				State = 4265; _localctx.user_name = id_();
				}
				break;
			}
			State = 4272;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				State = 4268; Match(COMMA);
				State = 4269; Match(ANONYMOUS);
				State = 4270; Match(EQUAL);
				State = 4271;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_poolContext create_resource_pool() {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_create_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4274; Match(CREATE);
			State = 4275; Match(RESOURCE);
			State = 4276; Match(POOL);
			State = 4277; _localctx.pool_name = id_();
			State = 4380;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				State = 4278; Match(WITH);
				State = 4279; Match(LR_BRACKET);
				State = 4286;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					State = 4281;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
					case 1:
						{
						State = 4280; Match(COMMA);
						}
						break;
					}
					State = 4283; Match(MIN_CPU_PERCENT);
					State = 4284; Match(EQUAL);
					State = 4285; Match(DECIMAL);
					}
					break;
				}
				State = 4294;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					State = 4289;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
					case 1:
						{
						State = 4288; Match(COMMA);
						}
						break;
					}
					State = 4291; Match(MAX_CPU_PERCENT);
					State = 4292; Match(EQUAL);
					State = 4293; Match(DECIMAL);
					}
					break;
				}
				State = 4302;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					State = 4297;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
					case 1:
						{
						State = 4296; Match(COMMA);
						}
						break;
					}
					State = 4299; Match(CAP_CPU_PERCENT);
					State = 4300; Match(EQUAL);
					State = 4301; Match(DECIMAL);
					}
					break;
				}
				State = 4345;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					State = 4305;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
					case 1:
						{
						State = 4304; Match(COMMA);
						}
						break;
					}
					State = 4307; Match(AFFINITY);
					State = 4308; Match(SCHEDULER);
					State = 4309; Match(EQUAL);
					State = 4343;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
					case 1:
						{
						State = 4310; Match(AUTO);
						}
						break;

					case 2:
						{
						State = 4311; Match(LR_BRACKET);
						State = 4321;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 4313;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
								case 1:
									{
									State = 4312; Match(COMMA);
									}
									break;
								}
								State = 4319;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,439,_ctx) ) {
								case 1:
									{
									State = 4315; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 4316; Match(DECIMAL);
									State = 4317; Match(TO);
									State = 4318; Match(DECIMAL);
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 4323;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,440,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 4325; Match(RR_BRACKET);
						}
						break;

					case 3:
						{
						State = 4326; Match(NUMANODE);
						State = 4327; Match(EQUAL);
						State = 4328; Match(LR_BRACKET);
						State = 4338;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 4330;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
								case 1:
									{
									State = 4329; Match(COMMA);
									}
									break;
								}
								State = 4336;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,442,_ctx) ) {
								case 1:
									{
									State = 4332; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 4333; Match(DECIMAL);
									State = 4334; Match(TO);
									State = 4335; Match(DECIMAL);
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 4340;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,443,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 4342; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 4353;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					State = 4348;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,446,_ctx) ) {
					case 1:
						{
						State = 4347; Match(COMMA);
						}
						break;
					}
					State = 4350; Match(MIN_MEMORY_PERCENT);
					State = 4351; Match(EQUAL);
					State = 4352; Match(DECIMAL);
					}
					break;
				}
				State = 4361;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,449,_ctx) ) {
				case 1:
					{
					State = 4356;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,448,_ctx) ) {
					case 1:
						{
						State = 4355; Match(COMMA);
						}
						break;
					}
					State = 4358; Match(MAX_MEMORY_PERCENT);
					State = 4359; Match(EQUAL);
					State = 4360; Match(DECIMAL);
					}
					break;
				}
				State = 4369;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					State = 4364;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,450,_ctx) ) {
					case 1:
						{
						State = 4363; Match(COMMA);
						}
						break;
					}
					State = 4366; Match(MIN_IOPS_PER_VOLUME);
					State = 4367; Match(EQUAL);
					State = 4368; Match(DECIMAL);
					}
					break;
				}
				State = 4377;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,453,_ctx) ) {
				case 1:
					{
					State = 4372;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,452,_ctx) ) {
					case 1:
						{
						State = 4371; Match(COMMA);
						}
						break;
					}
					State = 4374; Match(MAX_IOPS_PER_VOLUME);
					State = 4375; Match(EQUAL);
					State = 4376; Match(DECIMAL);
					}
					break;
				}
				State = 4379; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_governorContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context function_name;
		public IToken max_outstanding_io_per_volume;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_governor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_resource_governor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_resource_governor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_resource_governor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_governorContext alter_resource_governor() {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_alter_resource_governor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4382; Match(ALTER);
			State = 4383; Match(RESOURCE);
			State = 4384; Match(GOVERNOR);
			State = 4406;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				State = 4385;
				_la = _input.La(1);
				if ( !(_la==RECONFIGURE || _la==DISABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 4386; Match(WITH);
				State = 4387; Match(LR_BRACKET);
				State = 4388; Match(CLASSIFIER_FUNCTION);
				State = 4389; Match(EQUAL);
				State = 4395;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,455,_ctx) ) {
				case 1:
					{
					State = 4390; _localctx.schema_name = id_();
					State = 4391; Match(DOT);
					State = 4392; _localctx.function_name = id_();
					}
					break;

				case 2:
					{
					State = 4394; Match(NULL_);
					}
					break;
				}
				State = 4397; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 4398; Match(RESET);
				State = 4399; Match(STATISTICS);
				}
				break;

			case 4:
				{
				State = 4400; Match(WITH);
				State = 4401; Match(LR_BRACKET);
				State = 4402; Match(MAX_OUTSTANDING_IO_PER_VOLUME);
				State = 4403; Match(EQUAL);
				State = 4404; _localctx.max_outstanding_io_per_volume = Match(DECIMAL);
				State = 4405; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public Id_Context database_principal;
		public Id_Context new_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_db_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_db_roleContext alter_db_role() {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_alter_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4408; Match(ALTER);
			State = 4409; Match(ROLE);
			State = 4410; _localctx.role_name = id_();
			State = 4418;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				State = 4411;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4412; Match(MEMBER);
				State = 4413; _localctx.database_principal = id_();
				}
				break;

			case 2:
				{
				State = 4414; Match(WITH);
				State = 4415; Match(NAME);
				State = 4416; Match(EQUAL);
				State = 4417; _localctx.new_role_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_db_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_db_roleContext create_db_role() {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_create_db_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4420; Match(CREATE);
			State = 4421; Match(ROLE);
			State = 4422; _localctx.role_name = id_();
			State = 4425;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				State = 4423; Match(AUTHORIZATION);
				State = 4424; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_routeContext : ParserRuleContext {
		public Id_Context route_name;
		public Id_Context owner_name;
		public IToken route_service_name;
		public IToken broker_instance_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_route(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_route(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_routeContext create_route() {
		Create_routeContext _localctx = new Create_routeContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_create_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4427; Match(CREATE);
			State = 4428; Match(ROUTE);
			State = 4429; _localctx.route_name = id_();
			State = 4432;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				State = 4430; Match(AUTHORIZATION);
				State = 4431; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4434; Match(WITH);
			State = 4441;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				State = 4436;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,460,_ctx) ) {
				case 1:
					{
					State = 4435; Match(COMMA);
					}
					break;
				}
				State = 4438; Match(SERVICE_NAME);
				State = 4439; Match(EQUAL);
				State = 4440; _localctx.route_service_name = Match(STRING);
				}
				break;
			}
			State = 4449;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,463,_ctx) ) {
			case 1:
				{
				State = 4444;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					State = 4443; Match(COMMA);
					}
					break;
				}
				State = 4446; Match(BROKER_INSTANCE);
				State = 4447; Match(EQUAL);
				State = 4448; _localctx.broker_instance_identifier = Match(STRING);
				}
				break;
			}
			State = 4457;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				State = 4452;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,464,_ctx) ) {
				case 1:
					{
					State = 4451; Match(COMMA);
					}
					break;
				}
				State = 4454; Match(LIFETIME);
				State = 4455; Match(EQUAL);
				State = 4456; Match(DECIMAL);
				}
				break;
			}
			State = 4460;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				State = 4459; Match(COMMA);
				}
				break;
			}
			State = 4462; Match(ADDRESS);
			State = 4463; Match(EQUAL);
			State = 4464; Match(STRING);
			State = 4469;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				State = 4465; Match(COMMA);
				State = 4466; Match(MIRROR_ADDRESS);
				State = 4467; Match(EQUAL);
				State = 4468; Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_ruleContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_ruleContext create_rule() {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_create_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4471; Match(CREATE);
			State = 4472; Match(RULE);
			State = 4476;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				State = 4473; _localctx.schema_name = id_();
				State = 4474; Match(DOT);
				}
				break;
			}
			State = 4478; _localctx.rule_name = id_();
			State = 4479; Match(AS);
			State = 4480; search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_sqlContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_sqlContext alter_schema_sql() {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_alter_schema_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4482; Match(ALTER);
			State = 4483; Match(SCHEMA);
			State = 4484; _localctx.schema_name = id_();
			State = 4485; Match(TRANSFER);
			State = 4494;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				State = 4491;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					State = 4486; Match(OBJECT);
					}
					break;

				case 2:
					{
					State = 4487; Match(TYPE);
					}
					break;

				case 3:
					{
					State = 4488; Match(XML);
					State = 4489; Match(SCHEMA);
					State = 4490; Match(COLLECTION);
					}
					break;
				}
				State = 4493; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4496; id_();
			State = 4499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				State = 4497; Match(DOT);
				State = 4498; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public Id_Context object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Create_tableContext[] create_table() {
			return GetRuleContexts<Create_tableContext>();
		}
		public Create_tableContext create_table(int i) {
			return GetRuleContext<Create_tableContext>(i);
		}
		public Create_viewContext[] create_view() {
			return GetRuleContexts<Create_viewContext>();
		}
		public Create_viewContext create_view(int i) {
			return GetRuleContext<Create_viewContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] REVOKE() { return GetTokens(TSqlParser.REVOKE); }
		public ITerminalNode REVOKE(int i) {
			return GetToken(TSqlParser.REVOKE, i);
		}
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode[] DENY() { return GetTokens(TSqlParser.DENY); }
		public ITerminalNode DENY(int i) {
			return GetToken(TSqlParser.DENY, i);
		}
		public ITerminalNode[] SELECT() { return GetTokens(TSqlParser.SELECT); }
		public ITerminalNode SELECT(int i) {
			return GetToken(TSqlParser.SELECT, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] DOUBLE_COLON() { return GetTokens(TSqlParser.DOUBLE_COLON); }
		public ITerminalNode DOUBLE_COLON(int i) {
			return GetToken(TSqlParser.DOUBLE_COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_create_schema);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4501; Match(CREATE);
			State = 4502; Match(SCHEMA);
			State = 4510;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				State = 4503; _localctx.schema_name = id_();
				}
				break;

			case 2:
				{
				State = 4504; Match(AUTHORIZATION);
				State = 4505; _localctx.owner_name = id_();
				}
				break;

			case 3:
				{
				State = 4506; _localctx.schema_name = id_();
				State = 4507; Match(AUTHORIZATION);
				State = 4508; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4538;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,476,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 4536;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,475,_ctx) ) {
					case 1:
						{
						State = 4512; create_table();
						}
						break;

					case 2:
						{
						State = 4513; create_view();
						}
						break;

					case 3:
						{
						State = 4514;
						_la = _input.La(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4515;
						_la = _input.La(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4516; Match(ON);
						State = 4519;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,473,_ctx) ) {
						case 1:
							{
							State = 4517; Match(SCHEMA);
							State = 4518; Match(DOUBLE_COLON);
							}
							break;
						}
						State = 4521; _localctx.object_name = id_();
						State = 4522; Match(TO);
						State = 4523; _localctx.owner_name = id_();
						}
						break;

					case 4:
						{
						State = 4525; Match(REVOKE);
						State = 4526;
						_la = _input.La(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4527; Match(ON);
						State = 4530;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,474,_ctx) ) {
						case 1:
							{
							State = 4528; Match(SCHEMA);
							State = 4529; Match(DOUBLE_COLON);
							}
							break;
						}
						State = 4532; _localctx.object_name = id_();
						State = 4533; Match(FROM);
						State = 4534; _localctx.owner_name = id_();
						}
						break;
					}
					} 
				}
				State = 4540;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,476,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema_azure_sql_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_create_schema_azure_sql_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4541; Match(CREATE);
			State = 4542; Match(SCHEMA);
			State = 4543; _localctx.schema_name = id_();
			State = 4546;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				State = 4544; Match(AUTHORIZATION);
				State = 4545; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_azure_sql_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_alter_schema_azure_sql_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4548; Match(ALTER);
			State = 4549; Match(SCHEMA);
			State = 4550; _localctx.schema_name = id_();
			State = 4551; Match(TRANSFER);
			State = 4554;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				State = 4552; Match(OBJECT);
				State = 4553; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4556; id_();
			State = 4559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				State = 4557; Match(DOT);
				State = 4558; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_property_listContext : ParserRuleContext {
		public Id_Context new_list_name;
		public Id_Context database_name;
		public Id_Context source_list_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_property_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_search_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_property_listContext create_search_property_list() {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_create_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4561; Match(CREATE);
			State = 4562; Match(SEARCH);
			State = 4563; Match(PROPERTY);
			State = 4564; Match(LIST);
			State = 4565; _localctx.new_list_name = id_();
			State = 4573;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				State = 4566; Match(FROM);
				State = 4570;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					State = 4567; _localctx.database_name = id_();
					State = 4568; Match(DOT);
					}
					break;
				}
				State = 4572; _localctx.source_list_name = id_();
				}
				break;
			}
			State = 4577;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				State = 4575; Match(AUTHORIZATION);
				State = 4576; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_security_policyContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public Id_Context tvf_schema_name;
		public Id_Context security_predicate_function_name;
		public Id_Context column_name_or_arguments;
		public Id_Context table_schema_name;
		public Id_Context name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] PREDICATE() { return GetTokens(TSqlParser.PREDICATE); }
		public ITerminalNode PREDICATE(int i) {
			return GetToken(TSqlParser.PREDICATE, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] AFTER() { return GetTokens(TSqlParser.AFTER); }
		public ITerminalNode AFTER(int i) {
			return GetToken(TSqlParser.AFTER, i);
		}
		public ITerminalNode[] BEFORE() { return GetTokens(TSqlParser.BEFORE); }
		public ITerminalNode BEFORE(int i) {
			return GetToken(TSqlParser.BEFORE, i);
		}
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode[] FILTER() { return GetTokens(TSqlParser.FILTER); }
		public ITerminalNode FILTER(int i) {
			return GetToken(TSqlParser.FILTER, i);
		}
		public ITerminalNode[] BLOCK() { return GetTokens(TSqlParser.BLOCK); }
		public ITerminalNode BLOCK(int i) {
			return GetToken(TSqlParser.BLOCK, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_security_policy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_security_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_security_policyContext create_security_policy() {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4579; Match(CREATE);
			State = 4580; Match(SECURITY);
			State = 4581; Match(POLICY);
			State = 4585;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,483,_ctx) ) {
			case 1:
				{
				State = 4582; _localctx.schema_name = id_();
				State = 4583; Match(DOT);
				}
				break;
			}
			State = 4587; _localctx.security_policy_name = id_();
			State = 4628;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4589;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,484,_ctx) ) {
					case 1:
						{
						State = 4588; Match(COMMA);
						}
						break;
					}
					State = 4591; Match(ADD);
					State = 4593;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,485,_ctx) ) {
					case 1:
						{
						State = 4592;
						_la = _input.La(1);
						if ( !(_la==FILTER || _la==BLOCK) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 4595; Match(PREDICATE);
					State = 4596; _localctx.tvf_schema_name = id_();
					State = 4597; Match(DOT);
					State = 4598; _localctx.security_predicate_function_name = id_();
					State = 4599; Match(LR_BRACKET);
					State = 4604;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 4601;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,486,_ctx) ) {
							case 1:
								{
								State = 4600; Match(COMMA);
								}
								break;
							}
							State = 4603; _localctx.column_name_or_arguments = id_();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 4606;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,487,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					State = 4608; Match(RR_BRACKET);
					State = 4609; Match(ON);
					State = 4610; _localctx.table_schema_name = id_();
					State = 4611; Match(DOT);
					State = 4612; _localctx.name = id_();
					State = 4625;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,491,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 4623;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,490,_ctx) ) {
							case 1:
								{
								State = 4614;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,488,_ctx) ) {
								case 1:
									{
									State = 4613; Match(COMMA);
									}
									break;
								}
								State = 4616; Match(AFTER);
								State = 4617;
								_la = _input.La(1);
								if ( !(_la==INSERT || _la==UPDATE) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 2:
								{
								State = 4619;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,489,_ctx) ) {
								case 1:
									{
									State = 4618; Match(COMMA);
									}
									break;
								}
								State = 4621; Match(BEFORE);
								State = 4622;
								_la = _input.La(1);
								if ( !(_la==DELETE || _la==UPDATE) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 4627;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,491,_ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4630;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,492,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 4642;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				State = 4632; Match(WITH);
				State = 4633; Match(LR_BRACKET);
				State = 4634; Match(STATE);
				State = 4635; Match(EQUAL);
				State = 4636;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4639;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					State = 4637; Match(SCHEMABINDING);
					State = 4638;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4641; Match(RR_BRACKET);
				}
				break;
			}
			State = 4647;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				State = 4644; Match(NOT);
				State = 4645; Match(FOR);
				State = 4646; Match(REPLICATION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequenceContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public IToken sequnce_increment;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_sequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequenceContext alter_sequence() {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_alter_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4649; Match(ALTER);
			State = 4650; Match(SEQUENCE);
			State = 4654;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				State = 4651; _localctx.schema_name = id_();
				State = 4652; Match(DOT);
				}
				break;
			}
			State = 4656; _localctx.sequence_name = id_();
			State = 4662;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				State = 4657; Match(RESTART);
				State = 4660;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,497,_ctx) ) {
				case 1:
					{
					State = 4658; Match(WITH);
					State = 4659; Match(DECIMAL);
					}
					break;
				}
				}
				break;
			}
			State = 4667;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				State = 4664; Match(INCREMENT);
				State = 4665; Match(BY);
				State = 4666; _localctx.sequnce_increment = Match(DECIMAL);
				}
				break;
			}
			State = 4673;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				State = 4669; Match(MINVALUE);
				State = 4670; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 4671; Match(NO);
				State = 4672; Match(MINVALUE);
				}
				break;
			}
			State = 4679;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				State = 4675; Match(MAXVALUE);
				State = 4676; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 4677; Match(NO);
				State = 4678; Match(MAXVALUE);
				}
				break;
			}
			State = 4684;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				State = 4681; Match(CYCLE);
				}
				break;

			case 2:
				{
				State = 4682; Match(NO);
				State = 4683; Match(CYCLE);
				}
				break;
			}
			State = 4690;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,503,_ctx) ) {
			case 1:
				{
				State = 4686; Match(CACHE);
				State = 4687; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 4688; Match(NO);
				State = 4689; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequenceContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode[] MINUS() { return GetTokens(TSqlParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(TSqlParser.MINUS, i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_sequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequenceContext create_sequence() {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_create_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4692; Match(CREATE);
			State = 4693; Match(SEQUENCE);
			State = 4697;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,504,_ctx) ) {
			case 1:
				{
				State = 4694; _localctx.schema_name = id_();
				State = 4695; Match(DOT);
				}
				break;
			}
			State = 4699; _localctx.sequence_name = id_();
			State = 4702;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				State = 4700; Match(AS);
				State = 4701; data_type();
				}
				break;
			}
			State = 4707;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				State = 4704; Match(START);
				State = 4705; Match(WITH);
				State = 4706; Match(DECIMAL);
				}
				break;
			}
			State = 4715;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				State = 4709; Match(INCREMENT);
				State = 4710; Match(BY);
				State = 4712;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,507,_ctx) ) {
				case 1:
					{
					State = 4711; Match(MINUS);
					}
					break;
				}
				State = 4714; Match(DECIMAL);
				}
				break;
			}
			State = 4726;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				State = 4717; Match(MINVALUE);
				State = 4722;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,510,_ctx) ) {
				case 1:
					{
					State = 4719;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,509,_ctx) ) {
					case 1:
						{
						State = 4718; Match(MINUS);
						}
						break;
					}
					State = 4721; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4724; Match(NO);
				State = 4725; Match(MINVALUE);
				}
				break;
			}
			State = 4737;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				State = 4728; Match(MAXVALUE);
				State = 4733;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,513,_ctx) ) {
				case 1:
					{
					State = 4730;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,512,_ctx) ) {
					case 1:
						{
						State = 4729; Match(MINUS);
						}
						break;
					}
					State = 4732; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4735; Match(NO);
				State = 4736; Match(MAXVALUE);
				}
				break;
			}
			State = 4742;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,515,_ctx) ) {
			case 1:
				{
				State = 4739; Match(CYCLE);
				}
				break;

			case 2:
				{
				State = 4740; Match(NO);
				State = 4741; Match(CYCLE);
				}
				break;
			}
			State = 4750;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				State = 4744; Match(CACHE);
				State = 4746;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,516,_ctx) ) {
				case 1:
					{
					State = 4745; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4748; Match(NO);
				State = 4749; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_auditContext alter_server_audit() {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_alter_server_audit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4752; Match(ALTER);
			State = 4753; Match(SERVER);
			State = 4754; Match(AUDIT);
			State = 4755; _localctx.audit_name = id_();
			State = 4887;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				State = 4803;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,527,_ctx) ) {
				case 1:
					{
					State = 4756; Match(TO);
					State = 4801;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,526,_ctx) ) {
					case 1:
						{
						State = 4757; Match(FILE);
						{
						State = 4758; Match(LR_BRACKET);
						State = 4795;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,525,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 4793;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,524,_ctx) ) {
								case 1:
									{
									State = 4760;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,518,_ctx) ) {
									case 1:
										{
										State = 4759; Match(COMMA);
										}
										break;
									}
									State = 4762; Match(FILEPATH);
									State = 4763; Match(EQUAL);
									State = 4764; _localctx.filepath = Match(STRING);
									}
									break;

								case 2:
									{
									State = 4766;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,519,_ctx) ) {
									case 1:
										{
										State = 4765; Match(COMMA);
										}
										break;
									}
									State = 4768; Match(MAXSIZE);
									State = 4769; Match(EQUAL);
									State = 4773;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,520,_ctx) ) {
									case 1:
										{
										State = 4770; Match(DECIMAL);
										State = 4771;
										_la = _input.La(1);
										if ( !(_la==GB || _la==MB || _la==TB) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										break;

									case 2:
										{
										State = 4772; Match(UNLIMITED);
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 4776;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,521,_ctx) ) {
									case 1:
										{
										State = 4775; Match(COMMA);
										}
										break;
									}
									State = 4778; Match(MAX_ROLLOVER_FILES);
									State = 4779; Match(EQUAL);
									State = 4780;
									_localctx.max_rollover_files = _input.Lt(1);
									_la = _input.La(1);
									if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
										_localctx.max_rollover_files = _errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;

								case 4:
									{
									State = 4782;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,522,_ctx) ) {
									case 1:
										{
										State = 4781; Match(COMMA);
										}
										break;
									}
									State = 4784; Match(MAX_FILES);
									State = 4785; Match(EQUAL);
									State = 4786; _localctx.max_files = Match(DECIMAL);
									}
									break;

								case 5:
									{
									State = 4788;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,523,_ctx) ) {
									case 1:
										{
										State = 4787; Match(COMMA);
										}
										break;
									}
									State = 4790; Match(RESERVE_DISK_SPACE);
									State = 4791; Match(EQUAL);
									State = 4792;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 4797;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,525,_ctx);
						}
						State = 4798; Match(RR_BRACKET);
						}
						}
						break;

					case 2:
						{
						State = 4799; Match(APPLICATION_LOG);
						}
						break;

					case 3:
						{
						State = 4800; Match(SECURITY_LOG);
						}
						break;
					}
					}
					break;
				}
				State = 4831;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					State = 4805; Match(WITH);
					State = 4806; Match(LR_BRACKET);
					State = 4827;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,532,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 4825;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,531,_ctx) ) {
							case 1:
								{
								State = 4808;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,528,_ctx) ) {
								case 1:
									{
									State = 4807; Match(COMMA);
									}
									break;
								}
								State = 4810; Match(QUEUE_DELAY);
								State = 4811; Match(EQUAL);
								State = 4812; _localctx.queue_delay = Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 4814;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,529,_ctx) ) {
								case 1:
									{
									State = 4813; Match(COMMA);
									}
									break;
								}
								State = 4816; Match(ON_FAILURE);
								State = 4817; Match(EQUAL);
								State = 4818;
								_la = _input.La(1);
								if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 3:
								{
								State = 4820;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,530,_ctx) ) {
								case 1:
									{
									State = 4819; Match(COMMA);
									}
									break;
								}
								State = 4822; Match(STATE);
								State = 4823; Match(EQUAL);
								State = 4824;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 4829;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,532,_ctx);
					}
					State = 4830; Match(RR_BRACKET);
					}
					break;
				}
				State = 4879;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,541,_ctx) ) {
				case 1:
					{
					State = 4833; Match(WHERE);
					State = 4877;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,540,_ctx) ) {
					case 1:
						{
						State = 4835;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,534,_ctx) ) {
						case 1:
							{
							State = 4834; Match(COMMA);
							}
							break;
						}
						{
						State = 4838;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,535,_ctx) ) {
						case 1:
							{
							State = 4837; Match(NOT);
							}
							break;
						}
						}
						State = 4840; _localctx.event_field_name = id_();
						State = 4852;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,536,_ctx) ) {
						case 1:
							{
							State = 4841; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 4842; Match(LESS);
							State = 4843; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 4844; Match(EXCLAMATION);
							State = 4845; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 4846; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 4847; Match(GREATER);
							State = 4848; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 4849; Match(LESS);
							}
							break;

						case 7:
							{
							State = 4850; Match(LESS);
							State = 4851; Match(EQUAL);
							}
							break;
						}
						State = 4854;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 4857;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,537,_ctx) ) {
						case 1:
							{
							State = 4856; Match(COMMA);
							}
							break;
						}
						State = 4859;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4861;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,538,_ctx) ) {
						case 1:
							{
							State = 4860; Match(NOT);
							}
							break;
						}
						State = 4874;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,539,_ctx) ) {
						case 1:
							{
							State = 4863; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 4864; Match(LESS);
							State = 4865; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 4866; Match(EXCLAMATION);
							State = 4867; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 4868; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 4869; Match(GREATER);
							State = 4870; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 4871; Match(LESS);
							}
							break;

						case 7:
							{
							State = 4872; Match(LESS);
							State = 4873; Match(EQUAL);
							}
							break;
						}
						State = 4876;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4881; Match(REMOVE);
				State = 4882; Match(WHERE);
				}
				break;

			case 3:
				{
				State = 4883; Match(MODIFY);
				State = 4884; Match(NAME);
				State = 4885; Match(EQUAL);
				State = 4886; _localctx.new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public Id_Context audit_guid;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] AUDIT_GUID() { return GetTokens(TSqlParser.AUDIT_GUID); }
		public ITerminalNode AUDIT_GUID(int i) {
			return GetToken(TSqlParser.AUDIT_GUID, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_auditContext create_server_audit() {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_create_server_audit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4889; Match(CREATE);
			State = 4890; Match(SERVER);
			State = 4891; Match(AUDIT);
			State = 4892; _localctx.audit_name = id_();
			State = 5030;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,568,_ctx) ) {
			case 1:
				{
				State = 4940;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,552,_ctx) ) {
				case 1:
					{
					State = 4893; Match(TO);
					State = 4938;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,551,_ctx) ) {
					case 1:
						{
						State = 4894; Match(FILE);
						{
						State = 4895; Match(LR_BRACKET);
						State = 4932;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,550,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 4930;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,549,_ctx) ) {
								case 1:
									{
									State = 4897;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,543,_ctx) ) {
									case 1:
										{
										State = 4896; Match(COMMA);
										}
										break;
									}
									State = 4899; Match(FILEPATH);
									State = 4900; Match(EQUAL);
									State = 4901; _localctx.filepath = Match(STRING);
									}
									break;

								case 2:
									{
									State = 4903;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,544,_ctx) ) {
									case 1:
										{
										State = 4902; Match(COMMA);
										}
										break;
									}
									State = 4905; Match(MAXSIZE);
									State = 4906; Match(EQUAL);
									State = 4910;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,545,_ctx) ) {
									case 1:
										{
										State = 4907; Match(DECIMAL);
										State = 4908;
										_la = _input.La(1);
										if ( !(_la==GB || _la==MB || _la==TB) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										break;

									case 2:
										{
										State = 4909; Match(UNLIMITED);
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 4913;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,546,_ctx) ) {
									case 1:
										{
										State = 4912; Match(COMMA);
										}
										break;
									}
									State = 4915; Match(MAX_ROLLOVER_FILES);
									State = 4916; Match(EQUAL);
									State = 4917;
									_localctx.max_rollover_files = _input.Lt(1);
									_la = _input.La(1);
									if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
										_localctx.max_rollover_files = _errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;

								case 4:
									{
									State = 4919;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,547,_ctx) ) {
									case 1:
										{
										State = 4918; Match(COMMA);
										}
										break;
									}
									State = 4921; Match(MAX_FILES);
									State = 4922; Match(EQUAL);
									State = 4923; _localctx.max_files = Match(DECIMAL);
									}
									break;

								case 5:
									{
									State = 4925;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,548,_ctx) ) {
									case 1:
										{
										State = 4924; Match(COMMA);
										}
										break;
									}
									State = 4927; Match(RESERVE_DISK_SPACE);
									State = 4928; Match(EQUAL);
									State = 4929;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 4934;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,550,_ctx);
						}
						State = 4935; Match(RR_BRACKET);
						}
						}
						break;

					case 2:
						{
						State = 4936; Match(APPLICATION_LOG);
						}
						break;

					case 3:
						{
						State = 4937; Match(SECURITY_LOG);
						}
						break;
					}
					}
					break;
				}
				State = 4974;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,559,_ctx) ) {
				case 1:
					{
					State = 4942; Match(WITH);
					State = 4943; Match(LR_BRACKET);
					State = 4970;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,558,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 4968;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,557,_ctx) ) {
							case 1:
								{
								State = 4945;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,553,_ctx) ) {
								case 1:
									{
									State = 4944; Match(COMMA);
									}
									break;
								}
								State = 4947; Match(QUEUE_DELAY);
								State = 4948; Match(EQUAL);
								State = 4949; _localctx.queue_delay = Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 4951;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,554,_ctx) ) {
								case 1:
									{
									State = 4950; Match(COMMA);
									}
									break;
								}
								State = 4953; Match(ON_FAILURE);
								State = 4954; Match(EQUAL);
								State = 4955;
								_la = _input.La(1);
								if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 3:
								{
								State = 4957;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,555,_ctx) ) {
								case 1:
									{
									State = 4956; Match(COMMA);
									}
									break;
								}
								State = 4959; Match(STATE);
								State = 4960; Match(EQUAL);
								State = 4961;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 4:
								{
								State = 4963;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,556,_ctx) ) {
								case 1:
									{
									State = 4962; Match(COMMA);
									}
									break;
								}
								State = 4965; Match(AUDIT_GUID);
								State = 4966; Match(EQUAL);
								State = 4967; _localctx.audit_guid = id_();
								}
								break;
							}
							} 
						}
						State = 4972;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,558,_ctx);
					}
					State = 4973; Match(RR_BRACKET);
					}
					break;
				}
				State = 5022;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,567,_ctx) ) {
				case 1:
					{
					State = 4976; Match(WHERE);
					State = 5020;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,566,_ctx) ) {
					case 1:
						{
						State = 4978;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,560,_ctx) ) {
						case 1:
							{
							State = 4977; Match(COMMA);
							}
							break;
						}
						{
						State = 4981;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,561,_ctx) ) {
						case 1:
							{
							State = 4980; Match(NOT);
							}
							break;
						}
						}
						State = 4983; _localctx.event_field_name = id_();
						State = 4995;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,562,_ctx) ) {
						case 1:
							{
							State = 4984; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 4985; Match(LESS);
							State = 4986; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 4987; Match(EXCLAMATION);
							State = 4988; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 4989; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 4990; Match(GREATER);
							State = 4991; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 4992; Match(LESS);
							}
							break;

						case 7:
							{
							State = 4993; Match(LESS);
							State = 4994; Match(EQUAL);
							}
							break;
						}
						State = 4997;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 5000;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,563,_ctx) ) {
						case 1:
							{
							State = 4999; Match(COMMA);
							}
							break;
						}
						State = 5002;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 5004;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,564,_ctx) ) {
						case 1:
							{
							State = 5003; Match(NOT);
							}
							break;
						}
						State = 5017;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,565,_ctx) ) {
						case 1:
							{
							State = 5006; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5007; Match(LESS);
							State = 5008; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5009; Match(EXCLAMATION);
							State = 5010; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5011; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5012; Match(GREATER);
							State = 5013; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5014; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5015; Match(LESS);
							State = 5016; Match(EQUAL);
							}
							break;
						}
						State = 5019;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5024; Match(REMOVE);
				State = 5025; Match(WHERE);
				}
				break;

			case 3:
				{
				State = 5026; Match(MODIFY);
				State = 5027; Match(NAME);
				State = 5028; Match(EQUAL);
				State = 5029; _localctx.new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_audit_specificationContext alter_server_audit_specification() {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5032; Match(ALTER);
			State = 5033; Match(SERVER);
			State = 5034; Match(AUDIT);
			State = 5035; Match(SPECIFICATION);
			State = 5036; _localctx.audit_specification_name = id_();
			State = 5041;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,569,_ctx) ) {
			case 1:
				{
				State = 5037; Match(FOR);
				State = 5038; Match(SERVER);
				State = 5039; Match(AUDIT);
				State = 5040; _localctx.audit_name = id_();
				}
				break;
			}
			State = 5050;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,570,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5043;
					_la = _input.La(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5044; Match(LR_BRACKET);
					State = 5045; _localctx.audit_action_group_name = id_();
					State = 5046; Match(RR_BRACKET);
					}
					} 
				}
				State = 5052;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,570,_ctx);
			}
			State = 5059;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,571,_ctx) ) {
			case 1:
				{
				State = 5053; Match(WITH);
				State = 5054; Match(LR_BRACKET);
				State = 5055; Match(STATE);
				State = 5056; Match(EQUAL);
				State = 5057;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5058; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_audit_specificationContext create_server_audit_specification() {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_create_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5061; Match(CREATE);
			State = 5062; Match(SERVER);
			State = 5063; Match(AUDIT);
			State = 5064; Match(SPECIFICATION);
			State = 5065; _localctx.audit_specification_name = id_();
			State = 5070;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,572,_ctx) ) {
			case 1:
				{
				State = 5066; Match(FOR);
				State = 5067; Match(SERVER);
				State = 5068; Match(AUDIT);
				State = 5069; _localctx.audit_name = id_();
				}
				break;
			}
			State = 5079;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,573,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5072; Match(ADD);
					State = 5073; Match(LR_BRACKET);
					State = 5074; _localctx.audit_action_group_name = id_();
					State = 5075; Match(RR_BRACKET);
					}
					} 
				}
				State = 5081;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,573,_ctx);
			}
			State = 5088;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,574,_ctx) ) {
			case 1:
				{
				State = 5082; Match(WITH);
				State = 5083; Match(LR_BRACKET);
				State = 5084; Match(STATE);
				State = 5085; Match(EQUAL);
				State = 5086;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5087; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_configurationContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_configuration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_configuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_configuration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_configuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_configurationContext alter_server_configuration() {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_alter_server_configuration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5090; Match(ALTER);
			State = 5091; Match(SERVER);
			State = 5092; Match(CONFIGURATION);
			State = 5093; Match(SET);
			{
			State = 5199;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,589,_ctx) ) {
			case 1:
				{
				State = 5094; Match(PROCESS);
				State = 5095; Match(AFFINITY);
				State = 5131;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,584,_ctx) ) {
				case 1:
					{
					State = 5096; Match(CPU);
					State = 5097; Match(EQUAL);
					State = 5113;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,579,_ctx) ) {
					case 1:
						{
						State = 5098; Match(AUTO);
						}
						break;

					case 2:
						{
						State = 5109;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								State = 5109;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,577,_ctx) ) {
								case 1:
									{
									State = 5100;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,575,_ctx) ) {
									case 1:
										{
										State = 5099; Match(COMMA);
										}
										break;
									}
									State = 5102; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 5104;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,576,_ctx) ) {
									case 1:
										{
										State = 5103; Match(COMMA);
										}
										break;
									}
									State = 5106; Match(DECIMAL);
									State = 5107; Match(TO);
									State = 5108; Match(DECIMAL);
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 5111;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,578,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 5115; Match(NUMANODE);
					State = 5116; Match(EQUAL);
					State = 5127;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 5127;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,582,_ctx) ) {
							case 1:
								{
								State = 5118;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,580,_ctx) ) {
								case 1:
									{
									State = 5117; Match(COMMA);
									}
									break;
								}
								State = 5120; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 5122;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,581,_ctx) ) {
								case 1:
									{
									State = 5121; Match(COMMA);
									}
									break;
								}
								State = 5124; Match(DECIMAL);
								State = 5125; Match(TO);
								State = 5126; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 5129;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,583,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5133; Match(DIAGNOSTICS);
				State = 5134; Match(LOG);
				State = 5150;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					State = 5135; Match(ON);
					}
					break;

				case 2:
					{
					State = 5136; Match(OFF);
					}
					break;

				case 3:
					{
					State = 5137; Match(PATH);
					State = 5138; Match(EQUAL);
					State = 5139;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 4:
					{
					State = 5140; Match(MAX_SIZE);
					State = 5141; Match(EQUAL);
					State = 5145;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,585,_ctx) ) {
					case 1:
						{
						State = 5142; Match(DECIMAL);
						State = 5143; Match(MB);
						}
						break;

					case 2:
						{
						State = 5144; Match(DEFAULT);
						}
						break;
					}
					}
					break;

				case 5:
					{
					State = 5147; Match(MAX_FILES);
					State = 5148; Match(EQUAL);
					State = 5149;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 5152; Match(FAILOVER);
				State = 5153; Match(CLUSTER);
				State = 5154; Match(PROPERTY);
				State = 5172;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,587,_ctx) ) {
				case 1:
					{
					State = 5155; Match(VERBOSELOGGING);
					State = 5156; Match(EQUAL);
					State = 5157;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 5158; Match(SQLDUMPERFLAGS);
					State = 5159; Match(EQUAL);
					State = 5160;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 5161; Match(SQLDUMPERPATH);
					State = 5162; Match(EQUAL);
					State = 5163;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 4:
					{
					State = 5164; Match(SQLDUMPERTIMEOUT);
					State = 5165;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 5:
					{
					State = 5166; Match(FAILURECONDITIONLEVEL);
					State = 5167; Match(EQUAL);
					State = 5168;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 6:
					{
					State = 5169; Match(HEALTHCHECKTIMEOUT);
					State = 5170; Match(EQUAL);
					State = 5171;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 5174; Match(HADR);
				State = 5175; Match(CLUSTER);
				State = 5176; Match(CONTEXT);
				State = 5177; Match(EQUAL);
				State = 5178;
				_la = _input.La(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				{
				State = 5179; Match(BUFFER);
				State = 5180; Match(POOL);
				State = 5181; Match(EXTENSION);
				State = 5194;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					State = 5182; Match(ON);
					State = 5183; Match(LR_BRACKET);
					State = 5184; Match(FILENAME);
					State = 5185; Match(EQUAL);
					State = 5186; Match(STRING);
					State = 5187; Match(COMMA);
					State = 5188; Match(SIZE);
					State = 5189; Match(EQUAL);
					State = 5190; Match(DECIMAL);
					State = 5191;
					_la = _input.La(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5192; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 5193; Match(OFF);
					}
					break;
				}
				}
				break;

			case 6:
				{
				State = 5196; Match(SET);
				State = 5197; Match(SOFTNUMA);
				State = 5198;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_roleContext : ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context server_principal;
		public Id_Context new_server_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_roleContext alter_server_role() {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_alter_server_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5201; Match(ALTER);
			State = 5202; Match(SERVER);
			State = 5203; Match(ROLE);
			State = 5204; _localctx.server_role_name = id_();
			State = 5212;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,590,_ctx) ) {
			case 1:
				{
				State = 5205;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5206; Match(MEMBER);
				State = 5207; _localctx.server_principal = id_();
				}
				break;

			case 2:
				{
				State = 5208; Match(WITH);
				State = 5209; Match(NAME);
				State = 5210; Match(EQUAL);
				State = 5211; _localctx.new_server_role_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_roleContext : ParserRuleContext {
		public Id_Context server_role;
		public Id_Context server_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_roleContext create_server_role() {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_create_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5214; Match(CREATE);
			State = 5215; Match(SERVER);
			State = 5216; Match(ROLE);
			State = 5217; _localctx.server_role = id_();
			State = 5220;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,591,_ctx) ) {
			case 1:
				{
				State = 5218; Match(AUTHORIZATION);
				State = 5219; _localctx.server_principal = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_role_pdwContext : ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context login;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_role_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_role_pdwContext alter_server_role_pdw() {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_alter_server_role_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5222; Match(ALTER);
			State = 5223; Match(SERVER);
			State = 5224; Match(ROLE);
			State = 5225; _localctx.server_role_name = id_();
			State = 5226;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5227; Match(MEMBER);
			State = 5228; _localctx.login = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_serviceContext : ParserRuleContext {
		public Id_Context modified_service_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public Id_Context modified_contract_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_serviceContext alter_service() {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_alter_service);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5230; Match(ALTER);
			State = 5231; Match(SERVICE);
			State = 5232; _localctx.modified_service_name = id_();
			State = 5240;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,592,_ctx) ) {
			case 1:
				{
				State = 5233; Match(ON);
				State = 5234; Match(QUEUE);
				{
				State = 5235; _localctx.schema_name = id_();
				State = 5236; Match(DOT);
				}
				State = 5238; _localctx.queue_name = id_();
				}
				break;
			}
			State = 5249;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,594,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5243;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,593,_ctx) ) {
					case 1:
						{
						State = 5242; Match(COMMA);
						}
						break;
					}
					State = 5245;
					_la = _input.La(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5246; _localctx.modified_contract_name = id_();
					}
					} 
				}
				State = 5251;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,594,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_serviceContext : ParserRuleContext {
		public Id_Context create_service_name;
		public Id_Context owner_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_service(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_serviceContext create_service() {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_create_service);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5252; Match(CREATE);
			State = 5253; Match(SERVICE);
			State = 5254; _localctx.create_service_name = id_();
			State = 5257;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,595,_ctx) ) {
			case 1:
				{
				State = 5255; Match(AUTHORIZATION);
				State = 5256; _localctx.owner_name = id_();
				}
				break;
			}
			State = 5259; Match(ON);
			State = 5260; Match(QUEUE);
			State = 5264;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,596,_ctx) ) {
			case 1:
				{
				State = 5261; _localctx.schema_name = id_();
				State = 5262; Match(DOT);
				}
				break;
			}
			State = 5266; _localctx.queue_name = id_();
			State = 5280;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,600,_ctx) ) {
			case 1:
				{
				State = 5267; Match(LR_BRACKET);
				State = 5275;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5269;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,597,_ctx) ) {
						case 1:
							{
							State = 5268; Match(COMMA);
							}
							break;
						}
						State = 5273;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,598,_ctx) ) {
						case 1:
							{
							State = 5271; id_();
							}
							break;

						case 2:
							{
							State = 5272; Match(DEFAULT);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5277;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,599,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 5279; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_service_master_keyContext : ParserRuleContext {
		public IToken acold_account_name;
		public IToken old_password;
		public IToken new_account_name;
		public IToken new_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_service_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_service_master_keyContext alter_service_master_key() {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_alter_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5282; Match(ALTER);
			State = 5283; Match(SERVICE);
			State = 5284; Match(MASTER);
			State = 5285; Match(KEY);
			State = 5307;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,603,_ctx) ) {
			case 1:
				{
				State = 5287;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,601,_ctx) ) {
				case 1:
					{
					State = 5286; Match(FORCE);
					}
					break;
				}
				State = 5289; Match(REGENERATE);
				}
				break;

			case 2:
				{
				{
				State = 5290; Match(WITH);
				State = 5305;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					State = 5291; Match(OLD_ACCOUNT);
					State = 5292; Match(EQUAL);
					State = 5293; _localctx.acold_account_name = Match(STRING);
					State = 5294; Match(COMMA);
					State = 5295; Match(OLD_PASSWORD);
					State = 5296; Match(EQUAL);
					State = 5297; _localctx.old_password = Match(STRING);
					}
					break;

				case 2:
					{
					State = 5298; Match(NEW_ACCOUNT);
					State = 5299; Match(EQUAL);
					State = 5300; _localctx.new_account_name = Match(STRING);
					State = 5301; Match(COMMA);
					State = 5302; Match(NEW_PASSWORD);
					State = 5303; Match(EQUAL);
					State = 5304; _localctx.new_password = Match(STRING);
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_symmetric_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public Id_Context certificate_name;
		public IToken password;
		public Id_Context symmetric_key_name;
		public Id_Context Asym_key_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SYMMETRIC() { return GetTokens(TSqlParser.SYMMETRIC); }
		public ITerminalNode SYMMETRIC(int i) {
			return GetToken(TSqlParser.SYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_symmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_symmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_symmetric_keyContext alter_symmetric_key() {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_alter_symmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5309; Match(ALTER);
			State = 5310; Match(SYMMETRIC);
			State = 5311; Match(KEY);
			State = 5312; _localctx.key_name = id_();
			{
			State = 5313;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5314; Match(ENCRYPTION);
			State = 5315; Match(BY);
			State = 5327;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,604,_ctx) ) {
			case 1:
				{
				State = 5316; Match(CERTIFICATE);
				State = 5317; _localctx.certificate_name = id_();
				}
				break;

			case 2:
				{
				State = 5318; Match(PASSWORD);
				State = 5319; Match(EQUAL);
				State = 5320; _localctx.password = Match(STRING);
				}
				break;

			case 3:
				{
				State = 5321; Match(SYMMETRIC);
				State = 5322; Match(KEY);
				State = 5323; _localctx.symmetric_key_name = id_();
				}
				break;

			case 4:
				{
				State = 5324; Match(ASYMMETRIC);
				State = 5325; Match(KEY);
				State = 5326; _localctx.Asym_key_name = id_();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_synonymContext : ParserRuleContext {
		public Id_Context schema_name_1;
		public Id_Context synonym_name;
		public Id_Context server_name;
		public Id_Context database_name;
		public Id_Context schema_name_2;
		public Id_Context object_name;
		public Id_Context database_or_schema2;
		public Id_Context schema_id_2_or_object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_synonym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_synonymContext create_synonym() {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_create_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5329; Match(CREATE);
			State = 5330; Match(SYNONYM);
			State = 5334;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,605,_ctx) ) {
			case 1:
				{
				State = 5331; _localctx.schema_name_1 = id_();
				State = 5332; Match(DOT);
				}
				break;
			}
			State = 5336; _localctx.synonym_name = id_();
			State = 5337; Match(FOR);
			State = 5364;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,611,_ctx) ) {
			case 1:
				{
				State = 5341;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					State = 5338; _localctx.server_name = id_();
					State = 5339; Match(DOT);
					}
					break;
				}
				State = 5346;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,607,_ctx) ) {
				case 1:
					{
					State = 5343; _localctx.database_name = id_();
					State = 5344; Match(DOT);
					}
					break;
				}
				State = 5351;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,608,_ctx) ) {
				case 1:
					{
					State = 5348; _localctx.schema_name_2 = id_();
					State = 5349; Match(DOT);
					}
					break;
				}
				State = 5353; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 5357;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,609,_ctx) ) {
				case 1:
					{
					State = 5354; _localctx.database_or_schema2 = id_();
					State = 5355; Match(DOT);
					}
					break;
				}
				State = 5362;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,610,_ctx) ) {
				case 1:
					{
					State = 5359; _localctx.schema_id_2_or_object_name = id_();
					State = 5360; Match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_userContext : ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public IToken lcid;
		public Id_Context language_name_or_alias;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] OLD_PASSWORD() { return GetTokens(TSqlParser.OLD_PASSWORD); }
		public ITerminalNode OLD_PASSWORD(int i) {
			return GetToken(TSqlParser.OLD_PASSWORD, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_userContext alter_user() {
		Alter_userContext _localctx = new Alter_userContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_alter_user);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5366; Match(ALTER);
			State = 5367; Match(USER);
			State = 5368; _localctx.username = id_();
			State = 5369; Match(WITH);
			State = 5420;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5420;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,621,_ctx) ) {
					case 1:
						{
						State = 5371;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,612,_ctx) ) {
						case 1:
							{
							State = 5370; Match(COMMA);
							}
							break;
						}
						State = 5373; Match(NAME);
						State = 5374; Match(EQUAL);
						State = 5375; _localctx.newusername = id_();
						}
						break;

					case 2:
						{
						State = 5377;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,613,_ctx) ) {
						case 1:
							{
							State = 5376; Match(COMMA);
							}
							break;
						}
						State = 5379; Match(DEFAULT_SCHEMA);
						State = 5380; Match(EQUAL);
						State = 5383;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,614,_ctx) ) {
						case 1:
							{
							State = 5381; _localctx.schema_name = id_();
							}
							break;

						case 2:
							{
							State = 5382; Match(NULL_);
							}
							break;
						}
						}
						break;

					case 3:
						{
						State = 5386;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,615,_ctx) ) {
						case 1:
							{
							State = 5385; Match(COMMA);
							}
							break;
						}
						State = 5388; Match(LOGIN);
						State = 5389; Match(EQUAL);
						State = 5390; _localctx.loginame = id_();
						}
						break;

					case 4:
						{
						State = 5392;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,616,_ctx) ) {
						case 1:
							{
							State = 5391; Match(COMMA);
							}
							break;
						}
						State = 5394; Match(PASSWORD);
						State = 5395; Match(EQUAL);
						State = 5396; Match(STRING);
						State = 5400;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 5397; Match(OLD_PASSWORD);
								State = 5398; Match(EQUAL);
								State = 5399; Match(STRING);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 5402;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,617,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;

					case 5:
						{
						State = 5405;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,618,_ctx) ) {
						case 1:
							{
							State = 5404; Match(COMMA);
							}
							break;
						}
						State = 5407; Match(DEFAULT_LANGUAGE);
						State = 5408; Match(EQUAL);
						State = 5412;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,619,_ctx) ) {
						case 1:
							{
							State = 5409; Match(NONE);
							}
							break;

						case 2:
							{
							State = 5410; _localctx.lcid = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 5411; _localctx.language_name_or_alias = id_();
							}
							break;
						}
						}
						break;

					case 6:
						{
						State = 5415;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,620,_ctx) ) {
						case 1:
							{
							State = 5414; Match(COMMA);
							}
							break;
						}
						State = 5417; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5418; Match(EQUAL);
						State = 5419;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5422;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,622,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_userContext : ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context windows_principal;
		public Id_Context language_name_or_alias;
		public IToken password;
		public Id_Context Azure_Active_Directory_principal;
		public Id_Context cert_name;
		public Id_Context asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] SID() { return GetTokens(TSqlParser.SID); }
		public ITerminalNode SID(int i) {
			return GetToken(TSqlParser.SID, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_userContext create_user() {
		Create_userContext _localctx = new Create_userContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_create_user);
		int _la;
		try {
			int _alt;
			State = 5570;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,650,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5424; Match(CREATE);
				State = 5425; Match(USER);
				State = 5426; _localctx.user_name = id_();
				State = 5430;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					State = 5427;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5428; Match(LOGIN);
					State = 5429; _localctx.login_name = id_();
					}
					break;
				}
				State = 5450;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,628,_ctx) ) {
				case 1:
					{
					State = 5432; Match(WITH);
					State = 5447;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,627,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5445;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,626,_ctx) ) {
							case 1:
								{
								State = 5434;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,624,_ctx) ) {
								case 1:
									{
									State = 5433; Match(COMMA);
									}
									break;
								}
								State = 5436; Match(DEFAULT_SCHEMA);
								State = 5437; Match(EQUAL);
								State = 5438; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5440;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,625,_ctx) ) {
								case 1:
									{
									State = 5439; Match(COMMA);
									}
									break;
								}
								State = 5442; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5443; Match(EQUAL);
								State = 5444;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5449;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,627,_ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5452; Match(CREATE);
				State = 5453; Match(USER);
				State = 5534;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,644,_ctx) ) {
				case 1:
					{
					State = 5454; _localctx.windows_principal = id_();
					State = 5489;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,636,_ctx) ) {
					case 1:
						{
						State = 5455; Match(WITH);
						State = 5486;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,635,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5484;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,634,_ctx) ) {
								case 1:
									{
									State = 5457;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,629,_ctx) ) {
									case 1:
										{
										State = 5456; Match(COMMA);
										}
										break;
									}
									State = 5459; Match(DEFAULT_SCHEMA);
									State = 5460; Match(EQUAL);
									State = 5461; _localctx.schema_name = id_();
									}
									break;

								case 2:
									{
									State = 5463;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,630,_ctx) ) {
									case 1:
										{
										State = 5462; Match(COMMA);
										}
										break;
									}
									State = 5465; Match(DEFAULT_LANGUAGE);
									State = 5466; Match(EQUAL);
									State = 5470;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,631,_ctx) ) {
									case 1:
										{
										State = 5467; Match(NONE);
										}
										break;

									case 2:
										{
										State = 5468; Match(DECIMAL);
										}
										break;

									case 3:
										{
										State = 5469; _localctx.language_name_or_alias = id_();
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5473;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,632,_ctx) ) {
									case 1:
										{
										State = 5472; Match(COMMA);
										}
										break;
									}
									State = 5475; Match(SID);
									State = 5476; Match(EQUAL);
									State = 5477; Match(BINARY);
									}
									break;

								case 4:
									{
									State = 5479;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,633,_ctx) ) {
									case 1:
										{
										State = 5478; Match(COMMA);
										}
										break;
									}
									State = 5481; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									State = 5482; Match(EQUAL);
									State = 5483;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5488;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,635,_ctx);
						}
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 5491; _localctx.user_name = id_();
					State = 5492; Match(WITH);
					State = 5493; Match(PASSWORD);
					State = 5494; Match(EQUAL);
					State = 5495; _localctx.password = Match(STRING);
					State = 5526;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,643,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5524;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,642,_ctx) ) {
							case 1:
								{
								State = 5497;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,637,_ctx) ) {
								case 1:
									{
									State = 5496; Match(COMMA);
									}
									break;
								}
								State = 5499; Match(DEFAULT_SCHEMA);
								State = 5500; Match(EQUAL);
								State = 5501; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5503;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,638,_ctx) ) {
								case 1:
									{
									State = 5502; Match(COMMA);
									}
									break;
								}
								State = 5505; Match(DEFAULT_LANGUAGE);
								State = 5506; Match(EQUAL);
								State = 5510;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,639,_ctx) ) {
								case 1:
									{
									State = 5507; Match(NONE);
									}
									break;

								case 2:
									{
									State = 5508; Match(DECIMAL);
									}
									break;

								case 3:
									{
									State = 5509; _localctx.language_name_or_alias = id_();
									}
									break;
								}
								}
								break;

							case 3:
								{
								State = 5513;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,640,_ctx) ) {
								case 1:
									{
									State = 5512; Match(COMMA);
									}
									break;
								}
								State = 5515; Match(SID);
								State = 5516; Match(EQUAL);
								State = 5517; Match(BINARY);
								}
								break;

							case 4:
								{
								State = 5519;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,641,_ctx) ) {
								case 1:
									{
									State = 5518; Match(COMMA);
									}
									break;
								}
								State = 5521; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5522; Match(EQUAL);
								State = 5523;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5528;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,643,_ctx);
					}
					}
					break;

				case 3:
					{
					State = 5529; _localctx.Azure_Active_Directory_principal = id_();
					State = 5530; Match(FROM);
					State = 5531; Match(EXTERNAL);
					State = 5532; Match(PROVIDER);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5536; Match(CREATE);
				State = 5537; Match(USER);
				State = 5538; _localctx.user_name = id_();
				State = 5565;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,649,_ctx) ) {
				case 1:
					{
					State = 5539; Match(WITHOUT);
					State = 5540; Match(LOGIN);
					State = 5555;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,648,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5553;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,647,_ctx) ) {
							case 1:
								{
								State = 5542;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,645,_ctx) ) {
								case 1:
									{
									State = 5541; Match(COMMA);
									}
									break;
								}
								State = 5544; Match(DEFAULT_SCHEMA);
								State = 5545; Match(EQUAL);
								State = 5546; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5548;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,646,_ctx) ) {
								case 1:
									{
									State = 5547; Match(COMMA);
									}
									break;
								}
								State = 5550; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5551; Match(EQUAL);
								State = 5552;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5557;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,648,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 5558;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5559; Match(CERTIFICATE);
					State = 5560; _localctx.cert_name = id_();
					}
					break;

				case 3:
					{
					State = 5561;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5562; Match(ASYMMETRIC);
					State = 5563; Match(KEY);
					State = 5564; _localctx.asym_key_name = id_();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5567; Match(CREATE);
				State = 5568; Match(USER);
				State = 5569; _localctx.user_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_azure_sql_dwContext : ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context Azure_Active_Directory_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_azure_sql_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user_azure_sql_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user_azure_sql_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user_azure_sql_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			State = 5600;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,654,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5572; Match(CREATE);
				State = 5573; Match(USER);
				State = 5574; _localctx.user_name = id_();
				State = 5580;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,651,_ctx) ) {
				case 1:
					{
					State = 5575;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5576; Match(LOGIN);
					State = 5577; _localctx.login_name = id_();
					}
					break;

				case 2:
					{
					State = 5578; Match(WITHOUT);
					State = 5579; Match(LOGIN);
					}
					break;
				}
				State = 5586;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,652,_ctx) ) {
				case 1:
					{
					State = 5582; Match(WITH);
					State = 5583; Match(DEFAULT_SCHEMA);
					State = 5584; Match(EQUAL);
					State = 5585; _localctx.schema_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5588; Match(CREATE);
				State = 5589; Match(USER);
				State = 5590; _localctx.Azure_Active_Directory_principal = id_();
				State = 5591; Match(FROM);
				State = 5592; Match(EXTERNAL);
				State = 5593; Match(PROVIDER);
				State = 5598;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,653,_ctx) ) {
				case 1:
					{
					State = 5594; Match(WITH);
					State = 5595; Match(DEFAULT_SCHEMA);
					State = 5596; Match(EQUAL);
					State = 5597; _localctx.schema_name = id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_azure_sqlContext : ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_azure_sqlContext alter_user_azure_sql() {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5602; Match(ALTER);
			State = 5603; Match(USER);
			State = 5604; _localctx.username = id_();
			State = 5605; Match(WITH);
			State = 5630;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5630;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,659,_ctx) ) {
					case 1:
						{
						State = 5607;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,655,_ctx) ) {
						case 1:
							{
							State = 5606; Match(COMMA);
							}
							break;
						}
						State = 5609; Match(NAME);
						State = 5610; Match(EQUAL);
						State = 5611; _localctx.newusername = id_();
						}
						break;

					case 2:
						{
						State = 5613;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,656,_ctx) ) {
						case 1:
							{
							State = 5612; Match(COMMA);
							}
							break;
						}
						State = 5615; Match(DEFAULT_SCHEMA);
						State = 5616; Match(EQUAL);
						State = 5617; _localctx.schema_name = id_();
						}
						break;

					case 3:
						{
						State = 5619;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,657,_ctx) ) {
						case 1:
							{
							State = 5618; Match(COMMA);
							}
							break;
						}
						State = 5621; Match(LOGIN);
						State = 5622; Match(EQUAL);
						State = 5623; _localctx.loginame = id_();
						}
						break;

					case 4:
						{
						State = 5625;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,658,_ctx) ) {
						case 1:
							{
							State = 5624; Match(COMMA);
							}
							break;
						}
						State = 5627; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5628; Match(EQUAL);
						State = 5629;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5632;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,660,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_workload_groupContext : ParserRuleContext {
		public Id_Context workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public Id_Context workload_group_pool_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_workload_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_workload_groupContext alter_workload_group() {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_alter_workload_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5634; Match(ALTER);
			State = 5635; Match(WORKLOAD);
			State = 5636; Match(GROUP);
			State = 5639;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,661,_ctx) ) {
			case 1:
				{
				State = 5637; _localctx.workload_group_group_name = id_();
				}
				break;

			case 2:
				{
				State = 5638; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 5672;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,666,_ctx) ) {
			case 1:
				{
				State = 5641; Match(WITH);
				State = 5642; Match(LR_BRACKET);
				State = 5667;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 5667;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,664,_ctx) ) {
						case 1:
							{
							State = 5643; Match(IMPORTANCE);
							State = 5644; Match(EQUAL);
							State = 5645;
							_la = _input.La(1);
							if ( !(((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (HIGH - 354)) | (1L << (LOW - 354)) | (1L << (MEDIUM - 354)))) != 0)) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 5647;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,662,_ctx) ) {
							case 1:
								{
								State = 5646; Match(COMMA);
								}
								break;
							}
							State = 5649; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
							State = 5650; Match(EQUAL);
							State = 5651; _localctx.request_max_memory_grant = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 5653;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,663,_ctx) ) {
							case 1:
								{
								State = 5652; Match(COMMA);
								}
								break;
							}
							State = 5655; Match(REQUEST_MAX_CPU_TIME_SEC);
							State = 5656; Match(EQUAL);
							State = 5657; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
							}
							break;

						case 4:
							{
							State = 5658; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
							State = 5659; Match(EQUAL);
							State = 5660; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
							}
							break;

						case 5:
							{
							State = 5661; Match(MAX_DOP);
							State = 5662; Match(EQUAL);
							State = 5663; _localctx.max_dop = Match(DECIMAL);
							}
							break;

						case 6:
							{
							State = 5664; Match(GROUP_MAX_REQUESTS);
							State = 5665; Match(EQUAL);
							State = 5666; _localctx.group_max_requests = Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5669;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,665,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 5671; Match(RR_BRACKET);
				}
				break;
			}
			State = 5679;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,668,_ctx) ) {
			case 1:
				{
				State = 5674; Match(USING);
				State = 5677;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,667,_ctx) ) {
				case 1:
					{
					State = 5675; _localctx.workload_group_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 5676; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_workload_groupContext : ParserRuleContext {
		public Id_Context workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public Id_Context workload_group_pool_name;
		public Id_Context external_pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_workload_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_workload_groupContext create_workload_group() {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_create_workload_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5681; Match(CREATE);
			State = 5682; Match(WORKLOAD);
			State = 5683; Match(GROUP);
			State = 5684; _localctx.workload_group_group_name = id_();
			State = 5716;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,673,_ctx) ) {
			case 1:
				{
				State = 5685; Match(WITH);
				State = 5686; Match(LR_BRACKET);
				State = 5711;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 5711;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,671,_ctx) ) {
						case 1:
							{
							State = 5687; Match(IMPORTANCE);
							State = 5688; Match(EQUAL);
							State = 5689;
							_la = _input.La(1);
							if ( !(((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (HIGH - 354)) | (1L << (LOW - 354)) | (1L << (MEDIUM - 354)))) != 0)) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 5691;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,669,_ctx) ) {
							case 1:
								{
								State = 5690; Match(COMMA);
								}
								break;
							}
							State = 5693; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
							State = 5694; Match(EQUAL);
							State = 5695; _localctx.request_max_memory_grant = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 5697;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,670,_ctx) ) {
							case 1:
								{
								State = 5696; Match(COMMA);
								}
								break;
							}
							State = 5699; Match(REQUEST_MAX_CPU_TIME_SEC);
							State = 5700; Match(EQUAL);
							State = 5701; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
							}
							break;

						case 4:
							{
							State = 5702; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
							State = 5703; Match(EQUAL);
							State = 5704; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
							}
							break;

						case 5:
							{
							State = 5705; Match(MAX_DOP);
							State = 5706; Match(EQUAL);
							State = 5707; _localctx.max_dop = Match(DECIMAL);
							}
							break;

						case 6:
							{
							State = 5708; Match(GROUP_MAX_REQUESTS);
							State = 5709; Match(EQUAL);
							State = 5710; _localctx.group_max_requests = Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5713;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,672,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 5715; Match(RR_BRACKET);
				}
				break;
			}
			State = 5731;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				State = 5718; Match(USING);
				State = 5721;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,674,_ctx) ) {
				case 1:
					{
					State = 5719; _localctx.workload_group_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 5720; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				State = 5729;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,676,_ctx) ) {
				case 1:
					{
					State = 5724;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,675,_ctx) ) {
					case 1:
						{
						State = 5723; Match(COMMA);
						}
						break;
					}
					State = 5726; Match(EXTERNAL);
					State = 5727; _localctx.external_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 5728; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_schema_collectionContext : ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_schema_collection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_xml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_schema_collectionContext create_xml_schema_collection() {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_create_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5733; Match(CREATE);
			State = 5734; Match(XML);
			State = 5735; Match(SCHEMA);
			State = 5736; Match(COLLECTION);
			State = 5740;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				State = 5737; _localctx.relational_schema = id_();
				State = 5738; Match(DOT);
				}
				break;
			}
			State = 5742; _localctx.sql_identifier = id_();
			State = 5743; Match(AS);
			State = 5747;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,679,_ctx) ) {
			case 1:
				{
				State = 5744; Match(STRING);
				}
				break;

			case 2:
				{
				State = 5745; id_();
				}
				break;

			case 3:
				{
				State = 5746; Match(LOCAL_ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public Data_typeContext input_parameter_type;
		public Expression_listContext boundary_values;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public Create_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_partition_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_partition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_partition_functionContext create_partition_function() {
		Create_partition_functionContext _localctx = new Create_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_create_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5749; Match(CREATE);
			State = 5750; Match(PARTITION);
			State = 5751; Match(FUNCTION);
			State = 5752; _localctx.partition_function_name = id_();
			State = 5753; Match(LR_BRACKET);
			State = 5754; _localctx.input_parameter_type = data_type();
			State = 5755; Match(RR_BRACKET);
			State = 5756; Match(AS);
			State = 5757; Match(RANGE);
			State = 5759;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,680,_ctx) ) {
			case 1:
				{
				State = 5758;
				_la = _input.La(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 5761; Match(FOR);
			State = 5762; Match(VALUES);
			State = 5763; Match(LR_BRACKET);
			State = 5764; _localctx.boundary_values = expression_list();
			State = 5765; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context partition_function_name;
		public Id_Context _id_;
		public IList<Id_Context> _file_group_names = new List<Id_Context>();
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSqlParser.PARTITION, i);
		}
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Create_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_partition_scheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_partition_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_partition_schemeContext create_partition_scheme() {
		Create_partition_schemeContext _localctx = new Create_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_create_partition_scheme);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5767; Match(CREATE);
			State = 5768; Match(PARTITION);
			State = 5769; Match(SCHEME);
			State = 5770; _localctx.partition_scheme_name = id_();
			State = 5771; Match(AS);
			State = 5772; Match(PARTITION);
			State = 5773; _localctx.partition_function_name = id_();
			State = 5775;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,681,_ctx) ) {
			case 1:
				{
				State = 5774; Match(ALL);
				}
				break;
			}
			State = 5777; Match(TO);
			State = 5778; Match(LR_BRACKET);
			State = 5779; _localctx._id_ = id_();
			_localctx._file_group_names.Add(_localctx._id_);
			State = 5784;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,682,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5780; Match(COMMA);
					State = 5781; _localctx._id_ = id_();
					_localctx._file_group_names.Add(_localctx._id_);
					}
					} 
				}
				State = 5786;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,682,_ctx);
			}
			State = 5787; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_queueContext : ParserRuleContext {
		public Id_Context queue_name;
		public Id_Context filegroup;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_queue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_queueContext create_queue() {
		Create_queueContext _localctx = new Create_queueContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_create_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5789; Match(CREATE);
			State = 5790; Match(QUEUE);
			State = 5793;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,683,_ctx) ) {
			case 1:
				{
				State = 5791; full_table_name();
				}
				break;

			case 2:
				{
				State = 5792; _localctx.queue_name = id_();
				}
				break;
			}
			State = 5796;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,684,_ctx) ) {
			case 1:
				{
				State = 5795; queue_settings();
				}
				break;
			}
			State = 5801;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,685,_ctx) ) {
			case 1:
				{
				State = 5798; Match(ON);
				State = 5799; _localctx.filegroup = id_();
				}
				break;

			case 2:
				{
				State = 5800; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_settingsContext : ParserRuleContext {
		public IToken max_readers;
		public IToken user_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] STATUS() { return GetTokens(TSqlParser.STATUS); }
		public ITerminalNode STATUS(int i) {
			return GetToken(TSqlParser.STATUS, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_settings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_settings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_settings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_settings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_settingsContext queue_settings() {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_queue_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5803; Match(WITH);
			State = 5810;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				State = 5804; Match(STATUS);
				State = 5805; Match(EQUAL);
				State = 5806;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5808;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,686,_ctx) ) {
				case 1:
					{
					State = 5807; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 5818;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,689,_ctx) ) {
			case 1:
				{
				State = 5812; Match(RETENTION);
				State = 5813; Match(EQUAL);
				State = 5814;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5816;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,688,_ctx) ) {
				case 1:
					{
					State = 5815; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 5865;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,701,_ctx) ) {
			case 1:
				{
				State = 5820; Match(ACTIVATION);
				State = 5821; Match(LR_BRACKET);
				State = 5859;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,699,_ctx) ) {
				case 1:
					{
					{
					State = 5828;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,691,_ctx) ) {
					case 1:
						{
						State = 5822; Match(STATUS);
						State = 5823; Match(EQUAL);
						State = 5824;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 5826;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,690,_ctx) ) {
						case 1:
							{
							State = 5825; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 5836;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,693,_ctx) ) {
					case 1:
						{
						State = 5830; Match(PROCEDURE_NAME);
						State = 5831; Match(EQUAL);
						State = 5832; func_proc_name_database_schema();
						State = 5834;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,692,_ctx) ) {
						case 1:
							{
							State = 5833; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 5844;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,695,_ctx) ) {
					case 1:
						{
						State = 5838; Match(MAX_QUEUE_READERS);
						State = 5839; Match(EQUAL);
						State = 5840; _localctx.max_readers = Match(DECIMAL);
						State = 5842;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,694,_ctx) ) {
						case 1:
							{
							State = 5841; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 5856;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,698,_ctx) ) {
					case 1:
						{
						State = 5846; Match(EXECUTE);
						State = 5847; Match(AS);
						State = 5851;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,696,_ctx) ) {
						case 1:
							{
							State = 5848; Match(SELF);
							}
							break;

						case 2:
							{
							State = 5849; _localctx.user_name = Match(STRING);
							}
							break;

						case 3:
							{
							State = 5850; Match(OWNER);
							}
							break;
						}
						State = 5854;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,697,_ctx) ) {
						case 1:
							{
							State = 5853; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 5858; Match(DROP);
					}
					break;
				}
				State = 5861; Match(RR_BRACKET);
				State = 5863;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,700,_ctx) ) {
				case 1:
					{
					State = 5862; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 5874;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,702,_ctx) ) {
			case 1:
				{
				State = 5867; Match(POISON_MESSAGE_HANDLING);
				State = 5868; Match(LR_BRACKET);
				{
				State = 5869; Match(STATUS);
				State = 5870; Match(EQUAL);
				State = 5871;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				State = 5873; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_queueContext : ParserRuleContext {
		public Id_Context queue_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public Queue_actionContext queue_action() {
			return GetRuleContext<Queue_actionContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_queue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_queueContext alter_queue() {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_alter_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5876; Match(ALTER);
			State = 5877; Match(QUEUE);
			State = 5880;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,703,_ctx) ) {
			case 1:
				{
				State = 5878; full_table_name();
				}
				break;

			case 2:
				{
				State = 5879; _localctx.queue_name = id_();
				}
				break;
			}
			State = 5884;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,704,_ctx) ) {
			case 1:
				{
				State = 5882; queue_settings();
				}
				break;

			case 2:
				{
				State = 5883; queue_action();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_actionContext : ParserRuleContext {
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return GetRuleContext<Queue_rebuild_optionsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_action(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_action(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_action(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_actionContext queue_action() {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_queue_action);
		int _la;
		try {
			State = 5907;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,708,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5886; Match(REBUILD);
				State = 5892;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,705,_ctx) ) {
				case 1:
					{
					State = 5887; Match(WITH);
					State = 5888; Match(LR_BRACKET);
					State = 5889; queue_rebuild_options();
					State = 5890; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5894; Match(REORGANIZE);
				State = 5899;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,706,_ctx) ) {
				case 1:
					{
					State = 5895; Match(WITH);
					State = 5896; Match(LOB_COMPACTION);
					State = 5897; Match(EQUAL);
					State = 5898;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5901; Match(MOVE);
				State = 5902; Match(TO);
				State = 5905;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					State = 5903; id_();
					}
					break;

				case 2:
					{
					State = 5904; Match(DEFAULT);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_rebuild_optionsContext : ParserRuleContext {
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_rebuild_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_rebuild_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_rebuild_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_rebuild_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_rebuild_optionsContext queue_rebuild_options() {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_queue_rebuild_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5909; Match(MAXDOP);
			State = 5910; Match(EQUAL);
			State = 5911; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_contractContext : ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context message_type_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode[] SENT() { return GetTokens(TSqlParser.SENT); }
		public ITerminalNode SENT(int i) {
			return GetToken(TSqlParser.SENT, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] INITIATOR() { return GetTokens(TSqlParser.INITIATOR); }
		public ITerminalNode INITIATOR(int i) {
			return GetToken(TSqlParser.INITIATOR, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_contract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_contract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_contractContext create_contract() {
		Create_contractContext _localctx = new Create_contractContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_create_contract);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5913; Match(CREATE);
			State = 5914; Match(CONTRACT);
			State = 5915; contract_name();
			State = 5918;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,709,_ctx) ) {
			case 1:
				{
				State = 5916; Match(AUTHORIZATION);
				State = 5917; _localctx.owner_name = id_();
				}
				break;
			}
			State = 5920; Match(LR_BRACKET);
			State = 5931;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5923;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,710,_ctx) ) {
					case 1:
						{
						State = 5921; _localctx.message_type_name = id_();
						}
						break;

					case 2:
						{
						State = 5922; Match(DEFAULT);
						}
						break;
					}
					State = 5925; Match(SENT);
					State = 5926; Match(BY);
					State = 5927;
					_la = _input.La(1);
					if ( !(_la==ANY || _la==INITIATOR || _la==TARGET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5929;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,711,_ctx) ) {
					case 1:
						{
						State = 5928; Match(COMMA);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5933;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,712,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 5935; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversation_statementContext : ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return GetRuleContext<Begin_conversation_timerContext>(0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return GetRuleContext<Begin_conversation_dialogContext>(0);
		}
		public End_conversationContext end_conversation() {
			return GetRuleContext<End_conversationContext>(0);
		}
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public Send_conversationContext send_conversation() {
			return GetRuleContext<Send_conversationContext>(0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return GetRuleContext<Waitfor_conversationContext>(0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversation_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConversation_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConversation_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversation_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conversation_statementContext conversation_statement() {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, State);
		EnterRule(_localctx, 434, RULE_conversation_statement);
		try {
			State = 5943;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,713,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5937; begin_conversation_timer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5938; begin_conversation_dialog();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5939; end_conversation();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5940; get_conversation();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5941; send_conversation();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5942; waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_statementContext : ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context owner_name;
		public Id_Context schema_collection_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMessage_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMessage_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Message_statementContext message_statement() {
		Message_statementContext _localctx = new Message_statementContext(_ctx, State);
		EnterRule(_localctx, 436, RULE_message_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5945; Match(CREATE);
			State = 5946; Match(MESSAGE);
			State = 5947; Match(TYPE);
			State = 5948; _localctx.message_type_name = id_();
			State = 5951;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,714,_ctx) ) {
			case 1:
				{
				State = 5949; Match(AUTHORIZATION);
				State = 5950; _localctx.owner_name = id_();
				}
				break;
			}
			{
			State = 5953; Match(VALIDATION);
			State = 5954; Match(EQUAL);
			State = 5963;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				State = 5955; Match(NONE);
				}
				break;

			case 2:
				{
				State = 5956; Match(EMPTY);
				}
				break;

			case 3:
				{
				State = 5957; Match(WELL_FORMED_XML);
				}
				break;

			case 4:
				{
				State = 5958; Match(VALID_XML);
				State = 5959; Match(WITH);
				State = 5960; Match(SCHEMA);
				State = 5961; Match(COLLECTION);
				State = 5962; _localctx.schema_collection_name = id_();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public When_matchesContext[] when_matches() {
			return GetRuleContexts<When_matchesContext>();
		}
		public When_matchesContext when_matches(int i) {
			return GetRuleContext<When_matchesContext>(i);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, State);
		EnterRule(_localctx, 438, RULE_merge_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5966;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,716,_ctx) ) {
			case 1:
				{
				State = 5965; with_expression();
				}
				break;
			}
			State = 5968; Match(MERGE);
			State = 5976;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,718,_ctx) ) {
			case 1:
				{
				State = 5969; Match(TOP);
				State = 5970; Match(LR_BRACKET);
				State = 5971; expression(0);
				State = 5972; Match(RR_BRACKET);
				State = 5974;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,717,_ctx) ) {
				case 1:
					{
					State = 5973; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 5979;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,719,_ctx) ) {
			case 1:
				{
				State = 5978; Match(INTO);
				}
				break;
			}
			State = 5981; ddl_object();
			State = 5983;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,720,_ctx) ) {
			case 1:
				{
				State = 5982; insert_with_table_hints();
				}
				break;
			}
			State = 5986;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,721,_ctx) ) {
			case 1:
				{
				State = 5985; as_table_alias();
				}
				break;
			}
			State = 5988; Match(USING);
			State = 5989; table_sources();
			State = 5990; Match(ON);
			State = 5991; search_condition(0);
			State = 5993;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5992; when_matches();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5995;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,722,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 5998;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				State = 5997; output_clause();
				}
				break;
			}
			State = 6001;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,724,_ctx) ) {
			case 1:
				{
				State = 6000; option_clause();
				}
				break;
			}
			State = 6003; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_matchesContext : ParserRuleContext {
		public ITerminalNode[] WHEN() { return GetTokens(TSqlParser.WHEN); }
		public ITerminalNode WHEN(int i) {
			return GetToken(TSqlParser.WHEN, i);
		}
		public ITerminalNode[] MATCHED() { return GetTokens(TSqlParser.MATCHED); }
		public ITerminalNode MATCHED(int i) {
			return GetToken(TSqlParser.MATCHED, i);
		}
		public ITerminalNode[] THEN() { return GetTokens(TSqlParser.THEN); }
		public ITerminalNode THEN(int i) {
			return GetToken(TSqlParser.THEN, i);
		}
		public Merge_matchedContext[] merge_matched() {
			return GetRuleContexts<Merge_matchedContext>();
		}
		public Merge_matchedContext merge_matched(int i) {
			return GetRuleContext<Merge_matchedContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return GetRuleContext<Merge_not_matchedContext>(0);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public ITerminalNode[] SOURCE() { return GetTokens(TSqlParser.SOURCE); }
		public ITerminalNode SOURCE(int i) {
			return GetToken(TSqlParser.SOURCE, i);
		}
		public When_matchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_matches; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhen_matches(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhen_matches(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen_matches(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public When_matchesContext when_matches() {
		When_matchesContext _localctx = new When_matchesContext(_ctx, State);
		EnterRule(_localctx, 440, RULE_when_matches);
		try {
			int _alt;
			State = 6045;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,731,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6013;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6005; Match(WHEN);
						State = 6006; Match(MATCHED);
						State = 6009;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,725,_ctx) ) {
						case 1:
							{
							State = 6007; Match(AND);
							State = 6008; search_condition(0);
							}
							break;
						}
						State = 6011; Match(THEN);
						State = 6012; merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6015;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,726,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 6017; Match(WHEN);
				State = 6018; Match(NOT);
				State = 6019; Match(MATCHED);
				State = 6022;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,727,_ctx) ) {
				case 1:
					{
					State = 6020; Match(BY);
					State = 6021; Match(TARGET);
					}
					break;
				}
				State = 6026;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					State = 6024; Match(AND);
					State = 6025; search_condition(0);
					}
					break;
				}
				State = 6028; Match(THEN);
				State = 6029; merge_not_matched();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6041;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6030; Match(WHEN);
						State = 6031; Match(NOT);
						State = 6032; Match(MATCHED);
						State = 6033; Match(BY);
						State = 6034; Match(SOURCE);
						State = 6037;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,729,_ctx) ) {
						case 1:
							{
							State = 6035; Match(AND);
							State = 6036; search_condition(0);
							}
							break;
						}
						State = 6039; Match(THEN);
						State = 6040; merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6043;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,730,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_matchedContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elem_mergeContext[] update_elem_merge() {
			return GetRuleContexts<Update_elem_mergeContext>();
		}
		public Update_elem_mergeContext update_elem_merge(int i) {
			return GetRuleContext<Update_elem_mergeContext>(i);
		}
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_matched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_matched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_matchedContext merge_matched() {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, State);
		EnterRule(_localctx, 442, RULE_merge_matched);
		try {
			int _alt;
			State = 6058;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,733,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6047; Match(UPDATE);
				State = 6048; Match(SET);
				State = 6049; update_elem_merge();
				State = 6054;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,732,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6050; Match(COMMA);
						State = 6051; update_elem_merge();
						}
						} 
					}
					State = 6056;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,732,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6057; Match(DELETE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_not_matchedContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_not_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_not_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_not_matched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_not_matched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_not_matchedContext merge_not_matched() {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, State);
		EnterRule(_localctx, 444, RULE_merge_not_matched);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6060; Match(INSERT);
			State = 6065;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,734,_ctx) ) {
			case 1:
				{
				State = 6061; Match(LR_BRACKET);
				State = 6062; column_name_list();
				State = 6063; Match(RR_BRACKET);
				}
				break;
			}
			State = 6070;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,735,_ctx) ) {
			case 1:
				{
				State = 6067; table_value_constructor();
				}
				break;

			case 2:
				{
				State = 6068; Match(DEFAULT);
				State = 6069; Match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return GetRuleContext<Delete_statement_fromContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, State);
		EnterRule(_localctx, 446, RULE_delete_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6073;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,736,_ctx) ) {
			case 1:
				{
				State = 6072; with_expression();
				}
				break;
			}
			State = 6075; Match(DELETE);
			State = 6085;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,738,_ctx) ) {
			case 1:
				{
				State = 6076; Match(TOP);
				State = 6077; Match(LR_BRACKET);
				State = 6078; expression(0);
				State = 6079; Match(RR_BRACKET);
				State = 6081;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,737,_ctx) ) {
				case 1:
					{
					State = 6080; Match(PERCENT);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 6083; Match(TOP);
				State = 6084; Match(DECIMAL);
				}
				break;
			}
			State = 6088;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,739,_ctx) ) {
			case 1:
				{
				State = 6087; Match(FROM);
				}
				break;
			}
			State = 6090; delete_statement_from();
			State = 6092;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,740,_ctx) ) {
			case 1:
				{
				State = 6091; insert_with_table_hints();
				}
				break;
			}
			State = 6095;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,741,_ctx) ) {
			case 1:
				{
				State = 6094; output_clause();
				}
				break;
			}
			State = 6099;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,742,_ctx) ) {
			case 1:
				{
				State = 6097; Match(FROM);
				State = 6098; table_sources();
				}
				break;
			}
			State = 6114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,746,_ctx) ) {
			case 1:
				{
				State = 6101; Match(WHERE);
				State = 6112;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,745,_ctx) ) {
				case 1:
					{
					State = 6102; search_condition(0);
					}
					break;

				case 2:
					{
					State = 6103; Match(CURRENT);
					State = 6104; Match(OF);
					State = 6110;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,744,_ctx) ) {
					case 1:
						{
						State = 6106;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,743,_ctx) ) {
						case 1:
							{
							State = 6105; Match(GLOBAL);
							}
							break;
						}
						State = 6108; cursor_name();
						}
						break;

					case 2:
						{
						State = 6109; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 6117;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,747,_ctx) ) {
			case 1:
				{
				State = 6116; for_clause();
				}
				break;
			}
			State = 6120;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,748,_ctx) ) {
			case 1:
				{
				State = 6119; option_clause();
				}
				break;
			}
			State = 6123;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,749,_ctx) ) {
			case 1:
				{
				State = 6122; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statement_fromContext : ParserRuleContext {
		public IToken table_var;
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement_from; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement_from(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement_from(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement_from(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statement_fromContext delete_statement_from() {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, State);
		EnterRule(_localctx, 448, RULE_delete_statement_from);
		try {
			State = 6129;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,750,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6125; ddl_object();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6126; table_alias();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6127; rowset_function_limited();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6128; _localctx.table_var = Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return GetRuleContext<Insert_statement_valueContext>(0);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Insert_column_name_listContext insert_column_name_list() {
			return GetRuleContext<Insert_column_name_listContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, State);
		EnterRule(_localctx, 450, RULE_insert_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6132;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,751,_ctx) ) {
			case 1:
				{
				State = 6131; with_expression();
				}
				break;
			}
			State = 6134; Match(INSERT);
			State = 6142;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,753,_ctx) ) {
			case 1:
				{
				State = 6135; Match(TOP);
				State = 6136; Match(LR_BRACKET);
				State = 6137; expression(0);
				State = 6138; Match(RR_BRACKET);
				State = 6140;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,752,_ctx) ) {
				case 1:
					{
					State = 6139; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6145;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				State = 6144; Match(INTO);
				}
				break;
			}
			State = 6149;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,755,_ctx) ) {
			case 1:
				{
				State = 6147; ddl_object();
				}
				break;

			case 2:
				{
				State = 6148; rowset_function_limited();
				}
				break;
			}
			State = 6152;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,756,_ctx) ) {
			case 1:
				{
				State = 6151; insert_with_table_hints();
				}
				break;
			}
			State = 6158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,757,_ctx) ) {
			case 1:
				{
				State = 6154; Match(LR_BRACKET);
				State = 6155; insert_column_name_list();
				State = 6156; Match(RR_BRACKET);
				}
				break;
			}
			State = 6161;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,758,_ctx) ) {
			case 1:
				{
				State = 6160; output_clause();
				}
				break;
			}
			State = 6163; insert_statement_value();
			State = 6165;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,759,_ctx) ) {
			case 1:
				{
				State = 6164; for_clause();
				}
				break;
			}
			State = 6168;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,760,_ctx) ) {
			case 1:
				{
				State = 6167; option_clause();
				}
				break;
			}
			State = 6171;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,761,_ctx) ) {
			case 1:
				{
				State = 6170; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statement_valueContext : ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statement_valueContext insert_statement_value() {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, State);
		EnterRule(_localctx, 452, RULE_insert_statement_value);
		try {
			State = 6178;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,762,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6173; table_value_constructor();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6174; derived_table();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6175; execute_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6176; Match(DEFAULT);
				State = 6177; Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Receive_statementContext : ParserRuleContext {
		public Id_Context table_variable;
		public Search_conditionContext where;
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receive_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReceive_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReceive_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceive_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Receive_statementContext receive_statement() {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, State);
		EnterRule(_localctx, 454, RULE_receive_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,763,_ctx) ) {
			case 1:
				{
				State = 6180; Match(LR_BRACKET);
				}
				break;
			}
			State = 6183; Match(RECEIVE);
			State = 6188;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,764,_ctx) ) {
			case 1:
				{
				State = 6184; Match(ALL);
				}
				break;

			case 2:
				{
				State = 6185; Match(DISTINCT);
				}
				break;

			case 3:
				{
				State = 6186; top_clause();
				}
				break;

			case 4:
				{
				State = 6187; Match(STAR);
				}
				break;
			}
			State = 6198;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,766,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6190; Match(LOCAL_ID);
					State = 6191; Match(EQUAL);
					State = 6192; expression(0);
					State = 6194;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,765,_ctx) ) {
					case 1:
						{
						State = 6193; Match(COMMA);
						}
						break;
					}
					}
					} 
				}
				State = 6200;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,766,_ctx);
			}
			State = 6201; Match(FROM);
			State = 6202; full_table_name();
			State = 6208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,767,_ctx) ) {
			case 1:
				{
				State = 6203; Match(INTO);
				State = 6204; _localctx.table_variable = id_();
				{
				State = 6205; Match(WHERE);
				State = 6206; _localctx.where = search_condition(0);
				}
				}
				break;
			}
			State = 6211;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,768,_ctx) ) {
			case 1:
				{
				State = 6210; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statement_standaloneContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public Select_statement_standaloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement_standalone; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement_standalone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement_standalone(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement_standalone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statement_standaloneContext select_statement_standalone() {
		Select_statement_standaloneContext _localctx = new Select_statement_standaloneContext(_ctx, State);
		EnterRule(_localctx, 456, RULE_select_statement_standalone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6214;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,769,_ctx) ) {
			case 1:
				{
				State = 6213; with_expression();
				}
				break;
			}
			State = 6216; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(_ctx, State);
		EnterRule(_localctx, 458, RULE_select_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6218; query_expression();
			State = 6220;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,770,_ctx) ) {
			case 1:
				{
				State = 6219; order_by_clause();
				}
				break;
			}
			State = 6223;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,771,_ctx) ) {
			case 1:
				{
				State = 6222; for_clause();
				}
				break;
			}
			State = 6226;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,772,_ctx) ) {
			case 1:
				{
				State = 6225; option_clause();
				}
				break;
			}
			State = 6229;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,773,_ctx) ) {
			case 1:
				{
				State = 6228; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(_ctx, State);
		EnterRule(_localctx, 460, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6233;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,774,_ctx) ) {
			case 1:
				{
				State = 6231; Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 6232; constant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(_ctx, State);
		EnterRule(_localctx, 462, RULE_update_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6236;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,775,_ctx) ) {
			case 1:
				{
				State = 6235; with_expression();
				}
				break;
			}
			State = 6238; Match(UPDATE);
			State = 6246;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,777,_ctx) ) {
			case 1:
				{
				State = 6239; Match(TOP);
				State = 6240; Match(LR_BRACKET);
				State = 6241; expression(0);
				State = 6242; Match(RR_BRACKET);
				State = 6244;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					State = 6243; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6250;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				State = 6248; ddl_object();
				}
				break;

			case 2:
				{
				State = 6249; rowset_function_limited();
				}
				break;
			}
			State = 6253;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				State = 6252; with_table_hints();
				}
				break;
			}
			State = 6255; Match(SET);
			State = 6256; update_elem();
			State = 6261;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,780,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6257; Match(COMMA);
					State = 6258; update_elem();
					}
					} 
				}
				State = 6263;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,780,_ctx);
			}
			State = 6265;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,781,_ctx) ) {
			case 1:
				{
				State = 6264; output_clause();
				}
				break;
			}
			State = 6269;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,782,_ctx) ) {
			case 1:
				{
				State = 6267; Match(FROM);
				State = 6268; table_sources();
				}
				break;
			}
			State = 6284;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,786,_ctx) ) {
			case 1:
				{
				State = 6271; Match(WHERE);
				State = 6282;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					State = 6272; search_condition(0);
					}
					break;

				case 2:
					{
					State = 6273; Match(CURRENT);
					State = 6274; Match(OF);
					State = 6280;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,784,_ctx) ) {
					case 1:
						{
						State = 6276;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,783,_ctx) ) {
						case 1:
							{
							State = 6275; Match(GLOBAL);
							}
							break;
						}
						State = 6278; cursor_name();
						}
						break;

					case 2:
						{
						State = 6279; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 6287;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				State = 6286; for_clause();
				}
				break;
			}
			State = 6290;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				State = 6289; option_clause();
				}
				break;
			}
			State = 6293;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,789,_ctx) ) {
			case 1:
				{
				State = 6292; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_clauseContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_clauseContext output_clause() {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, State);
		EnterRule(_localctx, 464, RULE_output_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6295; Match(OUTPUT);
			State = 6296; output_dml_list_elem();
			State = 6301;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,790,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6297; Match(COMMA);
					State = 6298; output_dml_list_elem();
					}
					} 
				}
				State = 6303;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,790,_ctx);
			}
			State = 6315;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				State = 6304; Match(INTO);
				State = 6307;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,791,_ctx) ) {
				case 1:
					{
					State = 6305; Match(LOCAL_ID);
					}
					break;

				case 2:
					{
					State = 6306; table_name();
					}
					break;
				}
				State = 6313;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					State = 6309; Match(LR_BRACKET);
					State = 6310; column_name_list();
					State = 6311; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_dml_list_elemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_dml_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_dml_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_dml_list_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_dml_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_dml_list_elemContext output_dml_list_elem() {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, State);
		EnterRule(_localctx, 466, RULE_output_dml_list_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6319;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,794,_ctx) ) {
			case 1:
				{
				State = 6317; expression(0);
				}
				break;

			case 2:
				{
				State = 6318; asterisk();
				}
				break;
			}
			State = 6322;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				State = 6321; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_databaseContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context collation_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_databaseContext create_database() {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, State);
		EnterRule(_localctx, 468, RULE_create_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6324; Match(CREATE);
			State = 6325; Match(DATABASE);
			{
			State = 6326; _localctx.database = id_();
			}
			State = 6330;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,796,_ctx) ) {
			case 1:
				{
				State = 6327; Match(CONTAINMENT);
				State = 6328; Match(EQUAL);
				State = 6329;
				_la = _input.La(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6344;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,799,_ctx) ) {
			case 1:
				{
				State = 6332; Match(ON);
				State = 6334;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,797,_ctx) ) {
				case 1:
					{
					State = 6333; Match(PRIMARY);
					}
					break;
				}
				State = 6336; database_file_spec();
				State = 6341;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,798,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6337; Match(COMMA);
						State = 6338; database_file_spec();
						}
						} 
					}
					State = 6343;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,798,_ctx);
				}
				}
				break;
			}
			State = 6356;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				State = 6346; Match(LOG);
				State = 6347; Match(ON);
				State = 6348; database_file_spec();
				State = 6353;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,800,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6349; Match(COMMA);
						State = 6350; database_file_spec();
						}
						} 
					}
					State = 6355;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,800,_ctx);
				}
				}
				break;
			}
			State = 6360;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,802,_ctx) ) {
			case 1:
				{
				State = 6358; Match(COLLATE);
				State = 6359; _localctx.collation_name = id_();
				}
				break;
			}
			State = 6371;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				State = 6362; Match(WITH);
				State = 6363; create_database_option();
				State = 6368;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,803,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6364; Match(COMMA);
						State = 6365; create_database_option();
						}
						} 
					}
					State = 6370;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,803,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public Search_conditionContext where;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(_ctx, State);
		EnterRule(_localctx, 470, RULE_create_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6373; Match(CREATE);
			State = 6375;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,805,_ctx) ) {
			case 1:
				{
				State = 6374; Match(UNIQUE);
				}
				break;
			}
			State = 6378;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,806,_ctx) ) {
			case 1:
				{
				State = 6377; clustered();
				}
				break;
			}
			State = 6380; Match(INDEX);
			State = 6381; id_();
			State = 6382; Match(ON);
			State = 6383; table_name();
			State = 6384; Match(LR_BRACKET);
			State = 6385; column_name_list_with_order();
			State = 6386; Match(RR_BRACKET);
			State = 6392;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,807,_ctx) ) {
			case 1:
				{
				State = 6387; Match(INCLUDE);
				State = 6388; Match(LR_BRACKET);
				State = 6389; column_name_list();
				State = 6390; Match(RR_BRACKET);
				}
				break;
			}
			State = 6396;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,808,_ctx) ) {
			case 1:
				{
				State = 6394; Match(WHERE);
				State = 6395; _localctx.where = search_condition(0);
				}
				break;
			}
			State = 6399;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,809,_ctx) ) {
			case 1:
				{
				State = 6398; index_options();
				}
				break;
			}
			State = 6403;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,810,_ctx) ) {
			case 1:
				{
				State = 6401; Match(ON);
				State = 6402; id_();
				}
				break;
			}
			State = 6406;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,811,_ctx) ) {
			case 1:
				{
				State = 6405; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_columnstore_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public Create_columnstore_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_columnstore_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_columnstore_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_columnstore_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_columnstore_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_columnstore_indexContext create_columnstore_index() {
		Create_columnstore_indexContext _localctx = new Create_columnstore_indexContext(_ctx, State);
		EnterRule(_localctx, 472, RULE_create_columnstore_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6408; Match(CREATE);
			State = 6413;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,813,_ctx) ) {
			case 1:
				{
				State = 6409; Match(CLUSTERED);
				}
				break;

			case 2:
				{
				State = 6411;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,812,_ctx) ) {
				case 1:
					{
					State = 6410; Match(NONCLUSTERED);
					}
					break;
				}
				}
				break;
			}
			State = 6415; Match(COLUMNSTORE);
			State = 6416; Match(INDEX);
			State = 6417; id_();
			State = 6418; Match(ON);
			State = 6419; table_name();
			State = 6421;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,814,_ctx) ) {
			case 1:
				{
				State = 6420; index_options();
				}
				break;
			}
			State = 6425;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,815,_ctx) ) {
			case 1:
				{
				State = 6423; Match(ON);
				State = 6424; id_();
				}
				break;
			}
			State = 6428;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,816,_ctx) ) {
			case 1:
				{
				State = 6427; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_nonclustered_columnstore_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public Create_nonclustered_columnstore_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_nonclustered_columnstore_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_nonclustered_columnstore_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_nonclustered_columnstore_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_nonclustered_columnstore_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_nonclustered_columnstore_indexContext create_nonclustered_columnstore_index() {
		Create_nonclustered_columnstore_indexContext _localctx = new Create_nonclustered_columnstore_indexContext(_ctx, State);
		EnterRule(_localctx, 474, RULE_create_nonclustered_columnstore_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6430; Match(CREATE);
			State = 6432;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,817,_ctx) ) {
			case 1:
				{
				State = 6431; Match(NONCLUSTERED);
				}
				break;
			}
			State = 6434; Match(COLUMNSTORE);
			State = 6435; Match(INDEX);
			State = 6436; id_();
			State = 6437; Match(ON);
			State = 6438; table_name();
			State = 6439; Match(LR_BRACKET);
			State = 6440; column_name_list_with_order();
			State = 6441; Match(RR_BRACKET);
			State = 6444;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,818,_ctx) ) {
			case 1:
				{
				State = 6442; Match(WHERE);
				State = 6443; search_condition(0);
				}
				break;
			}
			State = 6447;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,819,_ctx) ) {
			case 1:
				{
				State = 6446; index_options();
				}
				break;
			}
			State = 6451;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,820,_ctx) ) {
			case 1:
				{
				State = 6449; Match(ON);
				State = 6450; id_();
				}
				break;
			}
			State = 6454;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,821,_ctx) ) {
			case 1:
				{
				State = 6453; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] XML() { return GetTokens(TSqlParser.XML); }
		public ITerminalNode XML(int i) {
			return GetToken(TSqlParser.XML, i);
		}
		public ITerminalNode[] INDEX() { return GetTokens(TSqlParser.INDEX); }
		public ITerminalNode INDEX(int i) {
			return GetToken(TSqlParser.INDEX, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public Create_xml_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_xml_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_indexContext create_xml_index() {
		Create_xml_indexContext _localctx = new Create_xml_indexContext(_ctx, State);
		EnterRule(_localctx, 476, RULE_create_xml_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6456; Match(CREATE);
			State = 6458;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,822,_ctx) ) {
			case 1:
				{
				State = 6457; Match(PRIMARY);
				}
				break;
			}
			State = 6460; Match(XML);
			State = 6461; Match(INDEX);
			State = 6462; id_();
			State = 6463; Match(ON);
			State = 6464; table_name();
			State = 6465; Match(LR_BRACKET);
			State = 6466; id_();
			State = 6467; Match(RR_BRACKET);
			State = 6478;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,825,_ctx) ) {
			case 1:
				{
				State = 6468; Match(USING);
				State = 6469; Match(XML);
				State = 6470; Match(INDEX);
				State = 6471; id_();
				State = 6476;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,824,_ctx) ) {
				case 1:
					{
					State = 6472; Match(FOR);
					State = 6474;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,823,_ctx) ) {
					case 1:
						{
						State = 6473;
						_la = _input.La(1);
						if ( !(_la==PATH || _la==PROPERTY || _la==VALUE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 6481;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,826,_ctx) ) {
			case 1:
				{
				State = 6480; index_options();
				}
				break;
			}
			State = 6484;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,827,_ctx) ) {
			case 1:
				{
				State = 6483; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_procedureContext : ParserRuleContext {
		public IToken proc;
		public Func_proc_name_schemaContext procName;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Procedure_optionContext[] procedure_option() {
			return GetRuleContexts<Procedure_optionContext>();
		}
		public Procedure_optionContext procedure_option(int i) {
			return GetRuleContext<Procedure_optionContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_procedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_procedureContext create_or_alter_procedure() {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, State);
		EnterRule(_localctx, 478, RULE_create_or_alter_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6492;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,829,_ctx) ) {
			case 1:
				{
				{
				State = 6486; Match(CREATE);
				State = 6489;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,828,_ctx) ) {
				case 1:
					{
					State = 6487; Match(OR);
					State = 6488; Match(ALTER);
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 6491; Match(ALTER);
				}
				break;
			}
			State = 6494;
			_localctx.proc = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 6495; _localctx.procName = func_proc_name_schema();
			State = 6498;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,830,_ctx) ) {
			case 1:
				{
				State = 6496; Match(SEMI);
				State = 6497; Match(DECIMAL);
				}
				break;
			}
			State = 6514;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				State = 6501;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,831,_ctx) ) {
				case 1:
					{
					State = 6500; Match(LR_BRACKET);
					}
					break;
				}
				State = 6503; procedure_param();
				State = 6508;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,832,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6504; Match(COMMA);
						State = 6505; procedure_param();
						}
						} 
					}
					State = 6510;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,832,_ctx);
				}
				State = 6512;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,833,_ctx) ) {
				case 1:
					{
					State = 6511; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			State = 6525;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,836,_ctx) ) {
			case 1:
				{
				State = 6516; Match(WITH);
				State = 6517; procedure_option();
				State = 6522;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,835,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6518; Match(COMMA);
						State = 6519; procedure_option();
						}
						} 
					}
					State = 6524;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,835,_ctx);
				}
				}
				break;
			}
			State = 6529;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,837,_ctx) ) {
			case 1:
				{
				State = 6527; Match(FOR);
				State = 6528; Match(REPLICATION);
				}
				break;
			}
			State = 6531; Match(AS);
			State = 6539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,839,_ctx) ) {
			case 1:
				{
				State = 6532; as_external_name();
				}
				break;

			case 2:
				{
				State = 6536;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,838,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6533; sql_clauses();
						}
						} 
					}
					State = 6538;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,838,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_external_nameContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context class_name;
		public Id_Context method_name;
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public As_external_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_external_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_external_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_external_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_external_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_external_nameContext as_external_name() {
		As_external_nameContext _localctx = new As_external_nameContext(_ctx, State);
		EnterRule(_localctx, 480, RULE_as_external_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6541; Match(EXTERNAL);
			State = 6542; Match(NAME);
			State = 6543; _localctx.assembly_name = id_();
			State = 6544; Match(DOT);
			State = 6545; _localctx.class_name = id_();
			State = 6546; Match(DOT);
			State = 6547; _localctx.method_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_triggerContext : ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return GetRuleContext<Create_or_alter_dml_triggerContext>(0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return GetRuleContext<Create_or_alter_ddl_triggerContext>(0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_triggerContext create_or_alter_trigger() {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, State);
		EnterRule(_localctx, 482, RULE_create_or_alter_trigger);
		try {
			State = 6551;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,840,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6549; create_or_alter_dml_trigger();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6550; create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_dml_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Dml_trigger_operationContext[] dml_trigger_operation() {
			return GetRuleContexts<Dml_trigger_operationContext>();
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return GetRuleContext<Dml_trigger_operationContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_dml_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(_ctx, State);
		EnterRule(_localctx, 484, RULE_create_or_alter_dml_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,842,_ctx) ) {
			case 1:
				{
				{
				State = 6553; Match(CREATE);
				State = 6556;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,841,_ctx) ) {
				case 1:
					{
					State = 6554; Match(OR);
					State = 6555; Match(ALTER);
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 6558; Match(ALTER);
				}
				break;
			}
			State = 6561; Match(TRIGGER);
			State = 6562; simple_name();
			State = 6563; Match(ON);
			State = 6564; table_name();
			State = 6574;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				State = 6565; Match(WITH);
				State = 6566; dml_trigger_option();
				State = 6571;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,843,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6567; Match(COMMA);
						State = 6568; dml_trigger_option();
						}
						} 
					}
					State = 6573;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,843,_ctx);
				}
				}
				break;
			}
			State = 6580;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				State = 6576; Match(FOR);
				}
				break;

			case 2:
				{
				State = 6577; Match(AFTER);
				}
				break;

			case 3:
				{
				State = 6578; Match(INSTEAD);
				State = 6579; Match(OF);
				}
				break;
			}
			State = 6582; dml_trigger_operation();
			State = 6587;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,846,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6583; Match(COMMA);
					State = 6584; dml_trigger_operation();
					}
					} 
				}
				State = 6589;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,846,_ctx);
			}
			State = 6592;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,847,_ctx) ) {
			case 1:
				{
				State = 6590; Match(WITH);
				State = 6591; Match(APPEND);
				}
				break;
			}
			State = 6597;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				State = 6594; Match(NOT);
				State = 6595; Match(FOR);
				State = 6596; Match(REPLICATION);
				}
				break;
			}
			State = 6599; Match(AS);
			State = 6601;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6600; sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6603;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,849,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_trigger_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_optionContext dml_trigger_option() {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, State);
		EnterRule(_localctx, 486, RULE_dml_trigger_option);
		try {
			State = 6607;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,850,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6605; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6606; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_operationContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_operation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_trigger_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_operationContext dml_trigger_operation() {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, State);
		EnterRule(_localctx, 488, RULE_dml_trigger_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6609;
			_la = _input.La(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Ddl_trigger_operationContext[] ddl_trigger_operation() {
			return GetRuleContexts<Ddl_trigger_operationContext>();
		}
		public Ddl_trigger_operationContext ddl_trigger_operation(int i) {
			return GetRuleContext<Ddl_trigger_operationContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_ddl_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_ddl_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(_ctx, State);
		EnterRule(_localctx, 490, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6617;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,852,_ctx) ) {
			case 1:
				{
				{
				State = 6611; Match(CREATE);
				State = 6614;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,851,_ctx) ) {
				case 1:
					{
					State = 6612; Match(OR);
					State = 6613; Match(ALTER);
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 6616; Match(ALTER);
				}
				break;
			}
			State = 6619; Match(TRIGGER);
			State = 6620; simple_name();
			State = 6621; Match(ON);
			State = 6625;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,853,_ctx) ) {
			case 1:
				{
				State = 6622; Match(ALL);
				State = 6623; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 6624; Match(DATABASE);
				}
				break;
			}
			State = 6636;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,855,_ctx) ) {
			case 1:
				{
				State = 6627; Match(WITH);
				State = 6628; dml_trigger_option();
				State = 6633;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,854,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6629; Match(COMMA);
						State = 6630; dml_trigger_option();
						}
						} 
					}
					State = 6635;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,854,_ctx);
				}
				}
				break;
			}
			State = 6638;
			_la = _input.La(1);
			if ( !(_la==FOR || _la==AFTER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 6639; ddl_trigger_operation();
			State = 6644;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,856,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6640; Match(COMMA);
					State = 6641; ddl_trigger_operation();
					}
					} 
				}
				State = 6646;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,856,_ctx);
			}
			State = 6647; Match(AS);
			State = 6649;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6648; sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6651;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,857,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_trigger_operationContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_trigger_operation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_trigger_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_trigger_operationContext ddl_trigger_operation() {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, State);
		EnterRule(_localctx, 492, RULE_ddl_trigger_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6653; simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_functionContext : ParserRuleContext {
		public Func_proc_name_schemaContext funcName;
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return GetRuleContext<Func_body_returns_selectContext>(0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return GetRuleContext<Func_body_returns_tableContext>(0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return GetRuleContext<Func_body_returns_scalarContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_functionContext create_or_alter_function() {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, State);
		EnterRule(_localctx, 494, RULE_create_or_alter_function);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6661;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,859,_ctx) ) {
			case 1:
				{
				{
				State = 6655; Match(CREATE);
				State = 6658;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					State = 6656; Match(OR);
					State = 6657; Match(ALTER);
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 6660; Match(ALTER);
				}
				break;
			}
			State = 6663; Match(FUNCTION);
			State = 6664; _localctx.funcName = func_proc_name_schema();
			State = 6678;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,861,_ctx) ) {
			case 1:
				{
				{
				State = 6665; Match(LR_BRACKET);
				State = 6666; procedure_param();
				State = 6671;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,860,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6667; Match(COMMA);
						State = 6668; procedure_param();
						}
						} 
					}
					State = 6673;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,860,_ctx);
				}
				State = 6674; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				{
				State = 6676; Match(LR_BRACKET);
				State = 6677; Match(RR_BRACKET);
				}
				break;
			}
			State = 6683;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,862,_ctx) ) {
			case 1:
				{
				State = 6680; func_body_returns_select();
				}
				break;

			case 2:
				{
				State = 6681; func_body_returns_table();
				}
				break;

			case 3:
				{
				State = 6682; func_body_returns_scalar();
				}
				break;
			}
			State = 6686;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				State = 6685; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_selectContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_select(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_select(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_selectContext func_body_returns_select() {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, State);
		EnterRule(_localctx, 496, RULE_func_body_returns_select);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6688; Match(RETURNS);
			State = 6689; Match(TABLE);
			State = 6699;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,865,_ctx) ) {
			case 1:
				{
				State = 6690; Match(WITH);
				State = 6691; function_option();
				State = 6696;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,864,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6692; Match(COMMA);
						State = 6693; function_option();
						}
						} 
					}
					State = 6698;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,864,_ctx);
				}
				}
				break;
			}
			State = 6702;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,866,_ctx) ) {
			case 1:
				{
				State = 6701; Match(AS);
				}
				break;
			}
			State = 6704; Match(RETURN);
			State = 6710;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,867,_ctx) ) {
			case 1:
				{
				State = 6705; Match(LR_BRACKET);
				State = 6706; select_statement_standalone();
				State = 6707; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 6709; select_statement_standalone();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_tableContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_tableContext func_body_returns_table() {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, State);
		EnterRule(_localctx, 498, RULE_func_body_returns_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6712; Match(RETURNS);
			State = 6713; Match(LOCAL_ID);
			State = 6714; table_type_definition();
			State = 6724;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,869,_ctx) ) {
			case 1:
				{
				State = 6715; Match(WITH);
				State = 6716; function_option();
				State = 6721;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,868,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6717; Match(COMMA);
						State = 6718; function_option();
						}
						} 
					}
					State = 6723;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,868,_ctx);
				}
				}
				break;
			}
			State = 6727;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,870,_ctx) ) {
			case 1:
				{
				State = 6726; Match(AS);
				}
				break;
			}
			State = 6729; Match(BEGIN);
			State = 6733;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,871,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6730; sql_clauses();
					}
					} 
				}
				State = 6735;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,871,_ctx);
			}
			State = 6736; Match(RETURN);
			State = 6738;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,872,_ctx) ) {
			case 1:
				{
				State = 6737; Match(SEMI);
				}
				break;
			}
			State = 6740; Match(END);
			State = 6742;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,873,_ctx) ) {
			case 1:
				{
				State = 6741; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_scalarContext : ParserRuleContext {
		public ExpressionContext ret;
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_scalar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_scalar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_scalar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_scalar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_scalarContext func_body_returns_scalar() {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, State);
		EnterRule(_localctx, 500, RULE_func_body_returns_scalar);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6744; Match(RETURNS);
			State = 6745; data_type();
			State = 6755;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,875,_ctx) ) {
			case 1:
				{
				State = 6746; Match(WITH);
				State = 6747; function_option();
				State = 6752;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,874,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6748; Match(COMMA);
						State = 6749; function_option();
						}
						} 
					}
					State = 6754;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,874,_ctx);
				}
				}
				break;
			}
			State = 6758;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,876,_ctx) ) {
			case 1:
				{
				State = 6757; Match(AS);
				}
				break;
			}
			State = 6760; Match(BEGIN);
			State = 6764;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,877,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6761; sql_clauses();
					}
					} 
				}
				State = 6766;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,877,_ctx);
			}
			State = 6767; Match(RETURN);
			State = 6768; _localctx.ret = expression(0);
			State = 6770;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,878,_ctx) ) {
			case 1:
				{
				State = 6769; Match(SEMI);
				}
				break;
			}
			State = 6772; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_paramContext : ParserRuleContext {
		public Id_Context type_schema;
		public Default_valueContext default_val;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode VARYING() { return GetToken(TSqlParser.VARYING, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_paramContext procedure_param() {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, State);
		EnterRule(_localctx, 502, RULE_procedure_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6774; Match(LOCAL_ID);
			State = 6776;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,879,_ctx) ) {
			case 1:
				{
				State = 6775; Match(AS);
				}
				break;
			}
			State = 6781;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,880,_ctx) ) {
			case 1:
				{
				State = 6778; _localctx.type_schema = id_();
				State = 6779; Match(DOT);
				}
				break;
			}
			State = 6783; data_type();
			State = 6785;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,881,_ctx) ) {
			case 1:
				{
				State = 6784; Match(VARYING);
				}
				break;
			}
			State = 6789;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,882,_ctx) ) {
			case 1:
				{
				State = 6787; Match(EQUAL);
				State = 6788; _localctx.default_val = default_value();
				}
				break;
			}
			State = 6792;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,883,_ctx) ) {
			case 1:
				{
				State = 6791;
				_la = _input.La(1);
				if ( !(((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (OUT - 457)) | (1L << (OUTPUT - 457)) | (1L << (READONLY - 457)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_optionContext procedure_option() {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, State);
		EnterRule(_localctx, 504, RULE_procedure_option);
		try {
			State = 6797;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,884,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6794; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6795; Match(RECOMPILE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6796; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_optionContext function_option() {
		Function_optionContext _localctx = new Function_optionContext(_ctx, State);
		EnterRule(_localctx, 506, RULE_function_option);
		try {
			State = 6811;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,885,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6799; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6800; Match(SCHEMABINDING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6801; Match(RETURNS);
				State = 6802; Match(NULL_);
				State = 6803; Match(ON);
				State = 6804; Match(NULL_);
				State = 6805; Match(INPUT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6806; Match(CALLED);
				State = 6807; Match(ON);
				State = 6808; Match(NULL_);
				State = 6809; Match(INPUT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6810; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_statisticsContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_statisticsContext create_statistics() {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, State);
		EnterRule(_localctx, 508, RULE_create_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6813; Match(CREATE);
			State = 6814; Match(STATISTICS);
			State = 6815; id_();
			State = 6816; Match(ON);
			State = 6817; table_name();
			State = 6818; Match(LR_BRACKET);
			State = 6819; column_name_list();
			State = 6820; Match(RR_BRACKET);
			State = 6839;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,889,_ctx) ) {
			case 1:
				{
				State = 6821; Match(WITH);
				State = 6827;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,886,_ctx) ) {
				case 1:
					{
					State = 6822; Match(FULLSCAN);
					}
					break;

				case 2:
					{
					State = 6823; Match(SAMPLE);
					State = 6824; Match(DECIMAL);
					State = 6825;
					_la = _input.La(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 6826; Match(STATS_STREAM);
					}
					break;
				}
				State = 6831;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,887,_ctx) ) {
				case 1:
					{
					State = 6829; Match(COMMA);
					State = 6830; Match(NORECOMPUTE);
					}
					break;
				}
				State = 6837;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,888,_ctx) ) {
				case 1:
					{
					State = 6833; Match(COMMA);
					State = 6834; Match(INCREMENTAL);
					State = 6835; Match(EQUAL);
					State = 6836; on_off();
					}
					break;
				}
				}
				break;
			}
			State = 6842;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,890,_ctx) ) {
			case 1:
				{
				State = 6841; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statisticsContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Update_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statisticsContext update_statistics() {
		Update_statisticsContext _localctx = new Update_statisticsContext(_ctx, State);
		EnterRule(_localctx, 510, RULE_update_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6844; Match(UPDATE);
			State = 6846;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,891,_ctx) ) {
			case 1:
				{
				State = 6845;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==INDEX) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6848; Match(STATISTICS);
			State = 6849; full_table_name();
			State = 6851;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,892,_ctx) ) {
			case 1:
				{
				State = 6850; id_();
				}
				break;
			}
			State = 6856;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,893,_ctx) ) {
			case 1:
				{
				State = 6853; Match(USING);
				State = 6854; Match(DECIMAL);
				State = 6855; Match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public Table_indicesContext[] table_indices() {
			return GetRuleContexts<Table_indicesContext>();
		}
		public Table_indicesContext table_indices(int i) {
			return GetRuleContext<Table_indicesContext>(i);
		}
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Table_optionsContext[] table_options() {
			return GetRuleContexts<Table_optionsContext>();
		}
		public Table_optionsContext table_options(int i) {
			return GetRuleContext<Table_optionsContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(_ctx, State);
		EnterRule(_localctx, 512, RULE_create_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6858; Match(CREATE);
			State = 6859; Match(TABLE);
			State = 6860; table_name();
			State = 6861; Match(LR_BRACKET);
			State = 6862; column_def_table_constraints();
			State = 6869;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,895,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6864;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,894,_ctx) ) {
					case 1:
						{
						State = 6863; Match(COMMA);
						}
						break;
					}
					State = 6866; table_indices();
					}
					} 
				}
				State = 6871;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,895,_ctx);
			}
			State = 6873;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,896,_ctx) ) {
			case 1:
				{
				State = 6872; Match(COMMA);
				}
				break;
			}
			State = 6875; Match(RR_BRACKET);
			State = 6878;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,897,_ctx) ) {
			case 1:
				{
				State = 6876; Match(LOCK);
				State = 6877; simple_id();
				}
				break;
			}
			State = 6883;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,898,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6880; table_options();
					}
					} 
				}
				State = 6885;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,898,_ctx);
			}
			State = 6889;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,899,_ctx) ) {
			case 1:
				{
				State = 6886; Match(ON);
				State = 6887; id_();
				}
				break;

			case 2:
				{
				State = 6888; Match(DEFAULT);
				}
				break;
			}
			State = 6894;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,900,_ctx) ) {
			case 1:
				{
				State = 6891; Match(TEXTIMAGE_ON);
				State = 6892; id_();
				}
				break;

			case 2:
				{
				State = 6893; Match(DEFAULT);
				}
				break;
			}
			State = 6897;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,901,_ctx) ) {
			case 1:
				{
				State = 6896; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indicesContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public Table_indicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_indices; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_indices(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_indices(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_indices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_indicesContext table_indices() {
		Table_indicesContext _localctx = new Table_indicesContext(_ctx, State);
		EnterRule(_localctx, 514, RULE_table_indices);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6899; Match(INDEX);
			State = 6900; id_();
			State = 6902;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,902,_ctx) ) {
			case 1:
				{
				State = 6901;
				_la = _input.La(1);
				if ( !(_la==CLUSTERED || _la==NONCLUSTERED || _la==UNIQUE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6904; Match(LR_BRACKET);
			State = 6905; column_name_list_with_order();
			State = 6906; Match(RR_BRACKET);
			State = 6908;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,903,_ctx) ) {
			case 1:
				{
				State = 6907; index_options();
				}
				break;
			}
			State = 6912;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,904,_ctx) ) {
			case 1:
				{
				State = 6910; Match(ON);
				State = 6911; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_optionsContext table_options() {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, State);
		EnterRule(_localctx, 516, RULE_table_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6914; Match(WITH);
			State = 6934;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,907,_ctx) ) {
			case 1:
				{
				State = 6915; Match(LR_BRACKET);
				State = 6916; index_option();
				State = 6921;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,905,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6917; Match(COMMA);
						State = 6918; index_option();
						}
						} 
					}
					State = 6923;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,905,_ctx);
				}
				State = 6924; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 6926; index_option();
				State = 6931;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,906,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6927; Match(COMMA);
						State = 6928; index_option();
						}
						} 
					}
					State = 6933;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,906,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public View_attributeContext[] view_attribute() {
			return GetRuleContexts<View_attributeContext>();
		}
		public View_attributeContext view_attribute(int i) {
			return GetRuleContext<View_attributeContext>(i);
		}
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(_ctx, State);
		EnterRule(_localctx, 518, RULE_create_view);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6936; Match(CREATE);
			State = 6937; Match(VIEW);
			State = 6938; simple_name();
			State = 6943;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,908,_ctx) ) {
			case 1:
				{
				State = 6939; Match(LR_BRACKET);
				State = 6940; column_name_list();
				State = 6941; Match(RR_BRACKET);
				}
				break;
			}
			State = 6954;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,910,_ctx) ) {
			case 1:
				{
				State = 6945; Match(WITH);
				State = 6946; view_attribute();
				State = 6951;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,909,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6947; Match(COMMA);
						State = 6948; view_attribute();
						}
						} 
					}
					State = 6953;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,909,_ctx);
				}
				}
				break;
			}
			State = 6956; Match(AS);
			State = 6957; select_statement_standalone();
			State = 6961;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,911,_ctx) ) {
			case 1:
				{
				State = 6958; Match(WITH);
				State = 6959; Match(CHECK);
				State = 6960; Match(OPTION);
				}
				break;
			}
			State = 6964;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,912,_ctx) ) {
			case 1:
				{
				State = 6963; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_attributeContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterView_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitView_attribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_attributeContext view_attribute() {
		View_attributeContext _localctx = new View_attributeContext(_ctx, State);
		EnterRule(_localctx, 520, RULE_view_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6966;
			_la = _input.La(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public ITerminalNode[] ALTER() { return GetTokens(TSqlParser.ALTER); }
		public ITerminalNode ALTER(int i) {
			return GetToken(TSqlParser.ALTER, i);
		}
		public ITerminalNode[] TABLE() { return GetTokens(TSqlParser.TABLE); }
		public ITerminalNode TABLE(int i) {
			return GetToken(TSqlParser.TABLE, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] CHECK() { return GetTokens(TSqlParser.CHECK); }
		public ITerminalNode CHECK(int i) {
			return GetToken(TSqlParser.CHECK, i);
		}
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return GetRuleContext<Table_optionsContext>(0);
		}
		public ITerminalNode SWITCH() { return GetToken(TSqlParser.SWITCH, 0); }
		public Switch_partitionContext switch_partition() {
			return GetRuleContext<Switch_partitionContext>(0);
		}
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode NOCHECK() { return GetToken(TSqlParser.NOCHECK, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, State);
		EnterRule(_localctx, 522, RULE_alter_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6968; Match(ALTER);
			State = 6969; Match(TABLE);
			State = 6970; table_name();
			State = 7035;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,918,_ctx) ) {
			case 1:
				{
				State = 6971; Match(SET);
				State = 6972; Match(LR_BRACKET);
				State = 6973; Match(LOCK_ESCALATION);
				State = 6974; Match(EQUAL);
				State = 6975;
				_la = _input.La(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 6976; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 6977; Match(ADD);
				State = 6978; column_def_table_constraints();
				}
				break;

			case 3:
				{
				State = 6979; Match(ALTER);
				State = 6980; Match(COLUMN);
				State = 6981; column_definition();
				}
				break;

			case 4:
				{
				State = 6982; Match(DROP);
				State = 6983; Match(COLUMN);
				State = 6984; id_();
				State = 6989;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,913,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6985; Match(COMMA);
						State = 6986; id_();
						}
						} 
					}
					State = 6991;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,913,_ctx);
				}
				}
				break;

			case 5:
				{
				State = 6992; Match(DROP);
				State = 6993; Match(CONSTRAINT);
				State = 6994; _localctx.constraint = id_();
				}
				break;

			case 6:
				{
				State = 6995; Match(WITH);
				State = 6996;
				_la = _input.La(1);
				if ( !(_la==CHECK || _la==NOCHECK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 6997; Match(ADD);
				State = 6998; Match(CONSTRAINT);
				State = 6999; _localctx.constraint = id_();
				State = 7021;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,916,_ctx) ) {
				case 1:
					{
					State = 7000; Match(FOREIGN);
					State = 7001; Match(KEY);
					State = 7002; Match(LR_BRACKET);
					State = 7003; _localctx.fk = column_name_list();
					State = 7004; Match(RR_BRACKET);
					State = 7005; Match(REFERENCES);
					State = 7006; table_name();
					State = 7007; Match(LR_BRACKET);
					State = 7008; _localctx.pk = column_name_list();
					State = 7009; Match(RR_BRACKET);
					State = 7011;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,914,_ctx) ) {
					case 1:
						{
						State = 7010; on_delete();
						}
						break;
					}
					State = 7014;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,915,_ctx) ) {
					case 1:
						{
						State = 7013; on_update();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7016; Match(CHECK);
					State = 7017; Match(LR_BRACKET);
					State = 7018; search_condition(0);
					State = 7019; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 7:
				{
				State = 7023; Match(CHECK);
				State = 7024; Match(CONSTRAINT);
				State = 7025; _localctx.constraint = id_();
				}
				break;

			case 8:
				{
				State = 7026;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7027; Match(TRIGGER);
				State = 7029;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,917,_ctx) ) {
				case 1:
					{
					State = 7028; id_();
					}
					break;
				}
				}
				break;

			case 9:
				{
				State = 7031; Match(REBUILD);
				State = 7032; table_options();
				}
				break;

			case 10:
				{
				State = 7033; Match(SWITCH);
				State = 7034; switch_partition();
				}
				break;
			}
			State = 7038;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,919,_ctx) ) {
			case 1:
				{
				State = 7037; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_partitionContext : ParserRuleContext {
		public ExpressionContext source_partition_number_expression;
		public Table_nameContext target_table;
		public ExpressionContext target_partition_number_expression;
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode[] PARTITION() { return GetTokens(TSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSqlParser.PARTITION, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_partition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_partition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_partitionContext switch_partition() {
		Switch_partitionContext _localctx = new Switch_partitionContext(_ctx, State);
		EnterRule(_localctx, 524, RULE_switch_partition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,921,_ctx) ) {
			case 1:
				{
				State = 7041;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,920,_ctx) ) {
				case 1:
					{
					State = 7040; Match(PARTITION);
					}
					break;
				}
				State = 7043; _localctx.source_partition_number_expression = expression(0);
				}
				break;
			}
			State = 7046; Match(TO);
			State = 7047; _localctx.target_table = table_name();
			State = 7050;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,922,_ctx) ) {
			case 1:
				{
				State = 7048; Match(PARTITION);
				State = 7049; _localctx.target_partition_number_expression = expression(0);
				}
				break;
			}
			State = 7054;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,923,_ctx) ) {
			case 1:
				{
				State = 7052; Match(WITH);
				State = 7053; low_priority_lock_wait();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Low_priority_lock_waitContext : ParserRuleContext {
		public TimeContext max_duration;
		public IToken abort_after_wait;
		public ITerminalNode WAIT_AT_LOW_PRIORITY() { return GetToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode ABORT_AFTER_WAIT() { return GetToken(TSqlParser.ABORT_AFTER_WAIT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode BLOCKERS() { return GetToken(TSqlParser.BLOCKERS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Low_priority_lock_waitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_low_priority_lock_wait; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLow_priority_lock_wait(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLow_priority_lock_wait(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLow_priority_lock_wait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Low_priority_lock_waitContext low_priority_lock_wait() {
		Low_priority_lock_waitContext _localctx = new Low_priority_lock_waitContext(_ctx, State);
		EnterRule(_localctx, 526, RULE_low_priority_lock_wait);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7056; Match(WAIT_AT_LOW_PRIORITY);
			State = 7057; Match(LR_BRACKET);
			State = 7058; Match(MAX_DURATION);
			State = 7059; Match(EQUAL);
			State = 7060; _localctx.max_duration = time();
			State = 7062;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,924,_ctx) ) {
			case 1:
				{
				State = 7061; Match(MINUTES);
				}
				break;
			}
			State = 7064; Match(COMMA);
			State = 7065; Match(ABORT_AFTER_WAIT);
			State = 7066; Match(EQUAL);
			State = 7067;
			_localctx.abort_after_wait = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==SELF || _la==BLOCKERS || _la==NONE) ) {
				_localctx.abort_after_wait = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 7068; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_databaseContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context new_name;
		public Id_Context collation;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return GetRuleContext<Database_optionspecContext>(0);
		}
		public Add_or_modify_filesContext add_or_modify_files() {
			return GetRuleContext<Add_or_modify_filesContext>(0);
		}
		public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
			return GetRuleContext<Add_or_modify_filegroupsContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_databaseContext alter_database() {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, State);
		EnterRule(_localctx, 528, RULE_alter_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7070; Match(ALTER);
			State = 7071; Match(DATABASE);
			State = 7074;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,925,_ctx) ) {
			case 1:
				{
				State = 7072; _localctx.database = id_();
				}
				break;

			case 2:
				{
				State = 7073; Match(CURRENT);
				}
				break;
			}
			State = 7090;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,927,_ctx) ) {
			case 1:
				{
				State = 7076; Match(MODIFY);
				State = 7077; Match(NAME);
				State = 7078; Match(EQUAL);
				State = 7079; _localctx.new_name = id_();
				}
				break;

			case 2:
				{
				State = 7080; Match(COLLATE);
				State = 7081; _localctx.collation = id_();
				}
				break;

			case 3:
				{
				State = 7082; Match(SET);
				State = 7083; database_optionspec();
				State = 7086;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,926,_ctx) ) {
				case 1:
					{
					State = 7084; Match(WITH);
					State = 7085; termination();
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 7088; add_or_modify_files();
				}
				break;

			case 5:
				{
				State = 7089; add_or_modify_filegroups();
				}
				break;
			}
			State = 7093;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,928,_ctx) ) {
			case 1:
				{
				State = 7092; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_or_modify_filesContext : ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context logical_file_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public FilespecContext[] filespec() {
			return GetRuleContexts<FilespecContext>();
		}
		public FilespecContext filespec(int i) {
			return GetRuleContext<FilespecContext>(i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public Add_or_modify_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_or_modify_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAdd_or_modify_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAdd_or_modify_files(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_or_modify_files(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_or_modify_filesContext add_or_modify_files() {
		Add_or_modify_filesContext _localctx = new Add_or_modify_filesContext(_ctx, State);
		EnterRule(_localctx, 530, RULE_add_or_modify_files);
		try {
			int _alt;
			State = 7127;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,932,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7095; Match(ADD);
				State = 7096; Match(FILE);
				State = 7097; filespec();
				State = 7102;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,929,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7098; Match(COMMA);
						State = 7099; filespec();
						}
						} 
					}
					State = 7104;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,929,_ctx);
				}
				State = 7108;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,930,_ctx) ) {
				case 1:
					{
					State = 7105; Match(TO);
					State = 7106; Match(FILEGROUP);
					State = 7107; _localctx.filegroup_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7110; Match(ADD);
				State = 7111; Match(LOG);
				State = 7112; Match(FILE);
				State = 7113; filespec();
				State = 7118;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,931,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7114; Match(COMMA);
						State = 7115; filespec();
						}
						} 
					}
					State = 7120;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,931,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7121; Match(REMOVE);
				State = 7122; Match(FILE);
				State = 7123; _localctx.logical_file_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7124; Match(MODIFY);
				State = 7125; Match(FILE);
				State = 7126; filespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilespecContext : ParserRuleContext {
		public Id_or_stringContext name;
		public Id_or_stringContext new_name;
		public IToken file_name;
		public File_sizeContext size;
		public File_sizeContext max_size;
		public File_sizeContext growth_increment;
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public Id_or_stringContext[] id_or_string() {
			return GetRuleContexts<Id_or_stringContext>();
		}
		public Id_or_stringContext id_or_string(int i) {
			return GetRuleContext<Id_or_stringContext>(i);
		}
		public ITerminalNode NEWNAME() { return GetToken(TSqlParser.NEWNAME, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public FilespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filespec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFilespec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFilespec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilespec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilespecContext filespec() {
		FilespecContext _localctx = new FilespecContext(_ctx, State);
		EnterRule(_localctx, 532, RULE_filespec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7129; Match(LR_BRACKET);
			State = 7130; Match(NAME);
			State = 7131; Match(EQUAL);
			State = 7132; _localctx.name = id_or_string();
			State = 7137;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,933,_ctx) ) {
			case 1:
				{
				State = 7133; Match(COMMA);
				State = 7134; Match(NEWNAME);
				State = 7135; Match(EQUAL);
				State = 7136; _localctx.new_name = id_or_string();
				}
				break;
			}
			State = 7143;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,934,_ctx) ) {
			case 1:
				{
				State = 7139; Match(COMMA);
				State = 7140; Match(FILENAME);
				State = 7141; Match(EQUAL);
				State = 7142; _localctx.file_name = Match(STRING);
				}
				break;
			}
			State = 7149;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,935,_ctx) ) {
			case 1:
				{
				State = 7145; Match(COMMA);
				State = 7146; Match(SIZE);
				State = 7147; Match(EQUAL);
				State = 7148; _localctx.size = file_size();
				}
				break;
			}
			State = 7156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,936,_ctx) ) {
			case 1:
				{
				State = 7151; Match(COMMA);
				State = 7152; Match(MAXSIZE);
				State = 7153; Match(EQUAL);
				{
				State = 7154; _localctx.max_size = file_size();
				}
				}
				break;

			case 2:
				{
				State = 7155; Match(UNLIMITED);
				}
				break;
			}
			State = 7162;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,937,_ctx) ) {
			case 1:
				{
				State = 7158; Match(COMMA);
				State = 7159; Match(FILEGROWTH);
				State = 7160; Match(EQUAL);
				State = 7161; _localctx.growth_increment = file_size();
				}
				break;
			}
			State = 7166;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,938,_ctx) ) {
			case 1:
				{
				State = 7164; Match(COMMA);
				State = 7165; Match(OFFLINE);
				}
				break;
			}
			State = 7168; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_or_modify_filegroupsContext : ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context filegrou_name;
		public Id_Context new_filegroup_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTAINS() { return GetToken(TSqlParser.CONTAINS, 0); }
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public Filegroup_updatability_optionContext filegroup_updatability_option() {
			return GetRuleContext<Filegroup_updatability_optionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode AUTOGROW_SINGLE_FILE() { return GetToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0); }
		public ITerminalNode AUTOGROW_ALL_FILES() { return GetToken(TSqlParser.AUTOGROW_ALL_FILES, 0); }
		public Add_or_modify_filegroupsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_or_modify_filegroups; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAdd_or_modify_filegroups(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAdd_or_modify_filegroups(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_or_modify_filegroups(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
		Add_or_modify_filegroupsContext _localctx = new Add_or_modify_filegroupsContext(_ctx, State);
		EnterRule(_localctx, 534, RULE_add_or_modify_filegroups);
		try {
			State = 7194;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,941,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7170; Match(ADD);
				State = 7171; Match(FILEGROUP);
				State = 7172; _localctx.filegroup_name = id_();
				State = 7177;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,939,_ctx) ) {
				case 1:
					{
					State = 7173; Match(CONTAINS);
					State = 7174; Match(FILESTREAM);
					}
					break;

				case 2:
					{
					State = 7175; Match(CONTAINS);
					State = 7176; Match(MEMORY_OPTIMIZED_DATA);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7179; Match(REMOVE);
				State = 7180; Match(FILEGROUP);
				State = 7181; _localctx.filegrou_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7182; Match(MODIFY);
				State = 7183; Match(FILEGROUP);
				State = 7184; _localctx.filegrou_name = id_();
				State = 7192;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,940,_ctx) ) {
				case 1:
					{
					State = 7185; filegroup_updatability_option();
					}
					break;

				case 2:
					{
					State = 7186; Match(DEFAULT);
					}
					break;

				case 3:
					{
					State = 7187; Match(NAME);
					State = 7188; Match(EQUAL);
					State = 7189; _localctx.new_filegroup_name = id_();
					}
					break;

				case 4:
					{
					State = 7190; Match(AUTOGROW_SINGLE_FILE);
					}
					break;

				case 5:
					{
					State = 7191; Match(AUTOGROW_ALL_FILES);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filegroup_updatability_optionContext : ParserRuleContext {
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public ITerminalNode READWRITE() { return GetToken(TSqlParser.READWRITE, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Filegroup_updatability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filegroup_updatability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFilegroup_updatability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFilegroup_updatability_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilegroup_updatability_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filegroup_updatability_optionContext filegroup_updatability_option() {
		Filegroup_updatability_optionContext _localctx = new Filegroup_updatability_optionContext(_ctx, State);
		EnterRule(_localctx, 536, RULE_filegroup_updatability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7196;
			_la = _input.La(1);
			if ( !(((((_la - 496)) & ~0x3f) == 0 && ((1L << (_la - 496)) & ((1L << (READ_ONLY - 496)) | (1L << (READ_WRITE - 496)) | (1L << (READONLY - 496)) | (1L << (READWRITE - 496)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_optionspecContext : ParserRuleContext {
		public Auto_optionContext auto_option() {
			return GetRuleContext<Auto_optionContext>(0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return GetRuleContext<Change_tracking_optionContext>(0);
		}
		public Containment_optionContext containment_option() {
			return GetRuleContext<Containment_optionContext>(0);
		}
		public Cursor_optionContext cursor_option() {
			return GetRuleContext<Cursor_optionContext>(0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return GetRuleContext<Database_mirroring_optionContext>(0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return GetRuleContext<Date_correlation_optimization_optionContext>(0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return GetRuleContext<Db_encryption_optionContext>(0);
		}
		public Db_state_optionContext db_state_option() {
			return GetRuleContext<Db_state_optionContext>(0);
		}
		public Db_update_optionContext db_update_option() {
			return GetRuleContext<Db_update_optionContext>(0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return GetRuleContext<Db_user_access_optionContext>(0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return GetRuleContext<Delayed_durability_optionContext>(0);
		}
		public External_access_optionContext external_access_option() {
			return GetRuleContext<External_access_optionContext>(0);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return GetRuleContext<Database_filestream_optionContext>(0);
		}
		public Hadr_optionsContext hadr_options() {
			return GetRuleContext<Hadr_optionsContext>(0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return GetRuleContext<Mixed_page_allocation_optionContext>(0);
		}
		public Parameterization_optionContext parameterization_option() {
			return GetRuleContext<Parameterization_optionContext>(0);
		}
		public Recovery_optionContext recovery_option() {
			return GetRuleContext<Recovery_optionContext>(0);
		}
		public Service_broker_optionContext service_broker_option() {
			return GetRuleContext<Service_broker_optionContext>(0);
		}
		public Snapshot_optionContext snapshot_option() {
			return GetRuleContext<Snapshot_optionContext>(0);
		}
		public Sql_optionContext sql_option() {
			return GetRuleContext<Sql_optionContext>(0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return GetRuleContext<Target_recovery_time_optionContext>(0);
		}
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_optionspec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_optionspec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_optionspec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_optionspec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_optionspecContext database_optionspec() {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, State);
		EnterRule(_localctx, 538, RULE_database_optionspec);
		try {
			State = 7221;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,942,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7198; auto_option();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7199; change_tracking_option();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7200; containment_option();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7201; cursor_option();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7202; database_mirroring_option();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7203; date_correlation_optimization_option();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7204; db_encryption_option();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7205; db_state_option();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7206; db_update_option();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7207; db_user_access_option();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7208; delayed_durability_option();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7209; external_access_option();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7210; Match(FILESTREAM);
				State = 7211; database_filestream_option();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7212; hadr_options();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7213; mixed_page_allocation_option();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7214; parameterization_option();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7215; recovery_option();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7216; service_broker_option();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7217; snapshot_option();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7218; sql_option();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7219; target_recovery_time_option();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7220; termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auto_optionContext : ParserRuleContext {
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auto_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuto_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuto_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuto_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Auto_optionContext auto_option() {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, State);
		EnterRule(_localctx, 540, RULE_auto_option);
		int _la;
		try {
			State = 7240;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,944,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7223; Match(AUTO_CLOSE);
				State = 7224; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7225; Match(AUTO_CREATE_STATISTICS);
				State = 7226; Match(OFF);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7227; Match(ON);
				State = 7232;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,943,_ctx) ) {
				case 1:
					{
					State = 7228; Match(INCREMENTAL);
					State = 7229; Match(EQUAL);
					State = 7230; Match(ON);
					}
					break;

				case 2:
					{
					State = 7231; Match(OFF);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7234; Match(AUTO_SHRINK);
				State = 7235; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7236; Match(AUTO_UPDATE_STATISTICS);
				State = 7237; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7238; Match(AUTO_UPDATE_STATISTICS_ASYNC);
				State = 7239;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_optionContext : ParserRuleContext {
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Change_tracking_option_listContext[] change_tracking_option_list() {
			return GetRuleContexts<Change_tracking_option_listContext>();
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return GetRuleContext<Change_tracking_option_listContext>(i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_tracking_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_optionContext change_tracking_option() {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, State);
		EnterRule(_localctx, 542, RULE_change_tracking_option);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7242; Match(CHANGE_TRACKING);
			State = 7243; Match(EQUAL);
			State = 7259;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,947,_ctx) ) {
			case 1:
				{
				State = 7244; Match(OFF);
				}
				break;

			case 2:
				{
				State = 7245; Match(ON);
				State = 7256;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,946,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7246; change_tracking_option_list();
						State = 7251;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,945,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 7247; Match(COMMA);
								State = 7248; change_tracking_option_list();
								}
								} 
							}
							State = 7253;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,945,_ctx);
						}
						}
						} 
					}
					State = 7258;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,946,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_option_listContext : ParserRuleContext {
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_tracking_option_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_option_listContext change_tracking_option_list() {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, State);
		EnterRule(_localctx, 544, RULE_change_tracking_option_list);
		int _la;
		try {
			State = 7267;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,948,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7261; Match(AUTO_CLEANUP);
				State = 7262; Match(EQUAL);
				State = 7263; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7264; Match(CHANGE_RETENTION);
				State = 7265; Match(EQUAL);
				State = 7266;
				_la = _input.La(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Containment_optionContext : ParserRuleContext {
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containment_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContainment_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContainment_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainment_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Containment_optionContext containment_option() {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, State);
		EnterRule(_localctx, 546, RULE_containment_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7269; Match(CONTAINMENT);
			State = 7270; Match(EQUAL);
			State = 7271;
			_la = _input.La(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionContext : ParserRuleContext {
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionContext cursor_option() {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, State);
		EnterRule(_localctx, 548, RULE_cursor_option);
		int _la;
		try {
			State = 7277;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,949,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7273; Match(CURSOR_CLOSE_ON_COMMIT);
				State = 7274; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7275; Match(CURSOR_DEFAULT);
				State = 7276;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_endpointContext : ParserRuleContext {
		public Id_Context endpointname;
		public Id_Context login;
		public IToken state;
		public IToken port;
		public Id_Context cert_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode IPV4_ADDR() { return GetToken(TSqlParser.IPV4_ADDR, 0); }
		public ITerminalNode IPV6_ADDR() { return GetToken(TSqlParser.IPV6_ADDR, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode[] DISABLED() { return GetTokens(TSqlParser.DISABLED); }
		public ITerminalNode DISABLED(int i) {
			return GetToken(TSqlParser.DISABLED, i);
		}
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode NEGOTIATE() { return GetToken(TSqlParser.NEGOTIATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_endpoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_endpoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_endpointContext alter_endpoint() {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, State);
		EnterRule(_localctx, 550, RULE_alter_endpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7279; Match(ALTER);
			State = 7280; Match(ENDPOINT);
			State = 7281; _localctx.endpointname = id_();
			State = 7284;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,950,_ctx) ) {
			case 1:
				{
				State = 7282; Match(AUTHORIZATION);
				State = 7283; _localctx.login = id_();
				}
				break;
			}
			State = 7293;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,952,_ctx) ) {
			case 1:
				{
				State = 7286; Match(STATE);
				State = 7287; Match(EQUAL);
				State = 7291;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,951,_ctx) ) {
				case 1:
					{
					State = 7288; _localctx.state = Match(STARTED);
					}
					break;

				case 2:
					{
					State = 7289; _localctx.state = Match(STOPPED);
					}
					break;

				case 3:
					{
					State = 7290; _localctx.state = Match(DISABLED);
					}
					break;
				}
				}
				break;
			}
			State = 7295; Match(AS);
			State = 7296; Match(TCP);
			State = 7297; Match(LR_BRACKET);
			State = 7298; Match(LISTENER_PORT);
			State = 7299; Match(EQUAL);
			State = 7300; _localctx.port = Match(DECIMAL);
			State = 7305;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,953,_ctx) ) {
			case 1:
				{
				State = 7301; Match(COMMA);
				State = 7302; Match(LISTENER_IP);
				State = 7303; Match(EQUAL);
				State = 7304;
				_la = _input.La(1);
				if ( !(_la==ALL || ((((_la - 853)) & ~0x3f) == 0 && ((1L << (_la - 853)) & ((1L << (STRING - 853)) | (1L << (IPV4_ADDR - 853)) | (1L << (IPV6_ADDR - 853)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 7307; Match(RR_BRACKET);
			State = 7417;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,977,_ctx) ) {
			case 1:
				{
				State = 7308; Match(TSQL);
				}
				break;

			case 2:
				{
				State = 7309; Match(FOR);
				State = 7310; Match(SERVICE_BROKER);
				State = 7311; Match(LR_BRACKET);
				State = 7312; Match(AUTHENTICATION);
				State = 7313; Match(EQUAL);
				State = 7330;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,958,_ctx) ) {
				case 1:
					{
					State = 7314; Match(WINDOWS);
					State = 7316;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,954,_ctx) ) {
					case 1:
						{
						State = 7315;
						_la = _input.La(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 7320;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,955,_ctx) ) {
					case 1:
						{
						State = 7318; Match(CERTIFICATE);
						State = 7319; _localctx.cert_name = id_();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7322; Match(CERTIFICATE);
					State = 7323; _localctx.cert_name = id_();
					State = 7325;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,956,_ctx) ) {
					case 1:
						{
						State = 7324; Match(WINDOWS);
						}
						break;
					}
					State = 7328;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,957,_ctx) ) {
					case 1:
						{
						State = 7327;
						_la = _input.La(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				State = 7349;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,962,_ctx) ) {
				case 1:
					{
					State = 7333;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,959,_ctx) ) {
					case 1:
						{
						State = 7332; Match(COMMA);
						}
						break;
					}
					State = 7335; Match(ENCRYPTION);
					State = 7336; Match(EQUAL);
					State = 7337;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 7347;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,961,_ctx) ) {
					case 1:
						{
						State = 7338; Match(ALGORITHM);
						State = 7345;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,960,_ctx) ) {
						case 1:
							{
							State = 7339; Match(AES);
							}
							break;

						case 2:
							{
							State = 7340; Match(RC4);
							}
							break;

						case 3:
							{
							State = 7341; Match(AES);
							State = 7342; Match(RC4);
							}
							break;

						case 4:
							{
							State = 7343; Match(RC4);
							State = 7344; Match(AES);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 7357;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,964,_ctx) ) {
				case 1:
					{
					State = 7352;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,963,_ctx) ) {
					case 1:
						{
						State = 7351; Match(COMMA);
						}
						break;
					}
					State = 7354; Match(MESSAGE_FORWARDING);
					State = 7355; Match(EQUAL);
					State = 7356;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 7365;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,966,_ctx) ) {
				case 1:
					{
					State = 7360;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,965,_ctx) ) {
					case 1:
						{
						State = 7359; Match(COMMA);
						}
						break;
					}
					State = 7362; Match(MESSAGE_FORWARD_SIZE);
					State = 7363; Match(EQUAL);
					State = 7364; Match(DECIMAL);
					}
					break;
				}
				State = 7367; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 7368; Match(FOR);
				State = 7369; Match(DATABASE_MIRRORING);
				State = 7370; Match(LR_BRACKET);
				State = 7371; Match(AUTHENTICATION);
				State = 7372; Match(EQUAL);
				State = 7389;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,971,_ctx) ) {
				case 1:
					{
					State = 7373; Match(WINDOWS);
					State = 7375;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,967,_ctx) ) {
					case 1:
						{
						State = 7374;
						_la = _input.La(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 7379;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,968,_ctx) ) {
					case 1:
						{
						State = 7377; Match(CERTIFICATE);
						State = 7378; _localctx.cert_name = id_();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7381; Match(CERTIFICATE);
					State = 7382; _localctx.cert_name = id_();
					State = 7384;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,969,_ctx) ) {
					case 1:
						{
						State = 7383; Match(WINDOWS);
						}
						break;
					}
					State = 7387;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,970,_ctx) ) {
					case 1:
						{
						State = 7386;
						_la = _input.La(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				State = 7408;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,975,_ctx) ) {
				case 1:
					{
					State = 7392;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,972,_ctx) ) {
					case 1:
						{
						State = 7391; Match(COMMA);
						}
						break;
					}
					State = 7394; Match(ENCRYPTION);
					State = 7395; Match(EQUAL);
					State = 7396;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 7406;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,974,_ctx) ) {
					case 1:
						{
						State = 7397; Match(ALGORITHM);
						State = 7404;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,973,_ctx) ) {
						case 1:
							{
							State = 7398; Match(AES);
							}
							break;

						case 2:
							{
							State = 7399; Match(RC4);
							}
							break;

						case 3:
							{
							State = 7400; Match(AES);
							State = 7401; Match(RC4);
							}
							break;

						case 4:
							{
							State = 7402; Match(RC4);
							State = 7403; Match(AES);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 7411;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,976,_ctx) ) {
				case 1:
					{
					State = 7410; Match(COMMA);
					}
					break;
				}
				State = 7413; Match(ROLE);
				State = 7414; Match(EQUAL);
				State = 7415;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7416; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_mirroring_optionContext : ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return GetRuleContext<Mirroring_set_optionContext>(0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_mirroring_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_mirroring_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_mirroring_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_mirroring_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_mirroring_optionContext database_mirroring_option() {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, State);
		EnterRule(_localctx, 552, RULE_database_mirroring_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7419; mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_set_optionContext : ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return GetRuleContext<Mirroring_partnerContext>(0);
		}
		public Partner_optionContext partner_option() {
			return GetRuleContext<Partner_optionContext>(0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return GetRuleContext<Mirroring_witnessContext>(0);
		}
		public Witness_optionContext witness_option() {
			return GetRuleContext<Witness_optionContext>(0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_set_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_set_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_set_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_set_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_set_optionContext mirroring_set_option() {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(_ctx, State);
		EnterRule(_localctx, 554, RULE_mirroring_set_option);
		try {
			State = 7427;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,978,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7421; mirroring_partner();
				State = 7422; partner_option();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7424; mirroring_witness();
				State = 7425; witness_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_partnerContext : ParserRuleContext {
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_partner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_partner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_partner(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_partner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_partnerContext mirroring_partner() {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(_ctx, State);
		EnterRule(_localctx, 556, RULE_mirroring_partner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7429; Match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_witnessContext : ParserRuleContext {
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_witness; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_witness(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_witness(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_witness(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_witnessContext mirroring_witness() {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(_ctx, State);
		EnterRule(_localctx, 558, RULE_mirroring_witness);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7431; Match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_partner_equalContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_partner_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_partner_equal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_partner_equal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_partner_equal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_partner_equalContext witness_partner_equal() {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(_ctx, State);
		EnterRule(_localctx, 560, RULE_witness_partner_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7433; Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_optionContext partner_option() {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, State);
		EnterRule(_localctx, 562, RULE_partner_option);
		int _la;
		try {
			State = 7447;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,979,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7435; witness_partner_equal();
				State = 7436; partner_server();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7438; Match(FAILOVER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7439; Match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7440; Match(OFF);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7441; Match(RESUME);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7442; Match(SAFETY);
				State = 7443;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7444; Match(SUSPEND);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7445; Match(TIMEOUT);
				State = 7446; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Witness_serverContext witness_server() {
			return GetRuleContext<Witness_serverContext>(0);
		}
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_optionContext witness_option() {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, State);
		EnterRule(_localctx, 564, RULE_witness_option);
		try {
			State = 7453;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,980,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7449; witness_partner_equal();
				State = 7450; witness_server();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7452; Match(OFF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_serverContext : ParserRuleContext {
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_serverContext witness_server() {
		Witness_serverContext _localctx = new Witness_serverContext(_ctx, State);
		EnterRule(_localctx, 566, RULE_witness_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7455; partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_serverContext : ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return GetRuleContext<Partner_server_tcp_prefixContext>(0);
		}
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return GetRuleContext<Mirroring_host_port_seperatorContext>(0);
		}
		public Port_numberContext port_number() {
			return GetRuleContext<Port_numberContext>(0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_serverContext partner_server() {
		Partner_serverContext _localctx = new Partner_serverContext(_ctx, State);
		EnterRule(_localctx, 568, RULE_partner_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7457; partner_server_tcp_prefix();
			State = 7458; host();
			State = 7459; mirroring_host_port_seperator();
			State = 7460; port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_host_port_seperatorContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_host_port_seperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_host_port_seperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_host_port_seperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_host_port_seperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(_ctx, State);
		EnterRule(_localctx, 570, RULE_mirroring_host_port_seperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7462; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_server_tcp_prefixContext : ParserRuleContext {
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server_tcp_prefix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server_tcp_prefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server_tcp_prefix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_server_tcp_prefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(_ctx, State);
		EnterRule(_localctx, 572, RULE_partner_server_tcp_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7464; Match(TCP);
			State = 7465; Match(COLON);
			State = 7466; Match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_numberContext : ParserRuleContext {
		public IToken port;
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPort_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPort_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPort_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Port_numberContext port_number() {
		Port_numberContext _localctx = new Port_numberContext(_ctx, State);
		EnterRule(_localctx, 574, RULE_port_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7468; _localctx.port = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public HostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_host; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHost(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHost(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HostContext host() {
		HostContext _localctx = new HostContext(_ctx, State);
		EnterRule(_localctx, 576, RULE_host);
		try {
			State = 7480;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,982,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7470; id_();
				State = 7471; Match(DOT);
				State = 7472; host();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7478;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,981,_ctx) ) {
				case 1:
					{
					State = 7474; id_();
					State = 7475; Match(DOT);
					}
					break;

				case 2:
					{
					State = 7477; id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_correlation_optimization_optionContext : ParserRuleContext {
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_correlation_optimization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_correlation_optimization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_correlation_optimization_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_correlation_optimization_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, State);
		EnterRule(_localctx, 578, RULE_date_correlation_optimization_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7482; Match(DATE_CORRELATION_OPTIMIZATION);
			State = 7483; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_encryption_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_encryption_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_encryption_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_encryption_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_encryption_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_encryption_optionContext db_encryption_option() {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, State);
		EnterRule(_localctx, 580, RULE_db_encryption_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7485; Match(ENCRYPTION);
			State = 7486; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_state_optionContext : ParserRuleContext {
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_state_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_state_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_state_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_state_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_state_optionContext db_state_option() {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, State);
		EnterRule(_localctx, 582, RULE_db_state_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7488;
			_la = _input.La(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_update_optionContext : ParserRuleContext {
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_update_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_update_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_update_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_update_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_update_optionContext db_update_option() {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, State);
		EnterRule(_localctx, 584, RULE_db_update_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7490;
			_la = _input.La(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_user_access_optionContext : ParserRuleContext {
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_user_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_user_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_user_access_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_user_access_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_user_access_optionContext db_user_access_option() {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, State);
		EnterRule(_localctx, 586, RULE_db_user_access_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7492;
			_la = _input.La(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delayed_durability_optionContext : ParserRuleContext {
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayed_durability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelayed_durability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelayed_durability_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelayed_durability_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delayed_durability_optionContext delayed_durability_option() {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, State);
		EnterRule(_localctx, 588, RULE_delayed_durability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7494; Match(DELAYED_DURABILITY);
			State = 7495; Match(EQUAL);
			State = 7496;
			_la = _input.La(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_access_optionContext : ParserRuleContext {
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExternal_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExternal_access_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_access_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_access_optionContext external_access_option() {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, State);
		EnterRule(_localctx, 590, RULE_external_access_option);
		int _la;
		try {
			State = 7523;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,985,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7498; Match(DB_CHAINING);
				State = 7499; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7500; Match(TRUSTWORTHY);
				State = 7501; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7502; Match(DEFAULT_LANGUAGE);
				State = 7503; Match(EQUAL);
				State = 7506;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,983,_ctx) ) {
				case 1:
					{
					State = 7504; id_();
					}
					break;

				case 2:
					{
					State = 7505; Match(STRING);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7508; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 7509; Match(EQUAL);
				State = 7512;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,984,_ctx) ) {
				case 1:
					{
					State = 7510; id_();
					}
					break;

				case 2:
					{
					State = 7511; Match(STRING);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7514; Match(NESTED_TRIGGERS);
				State = 7515; Match(EQUAL);
				State = 7516;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7517; Match(TRANSFORM_NOISE_WORDS);
				State = 7518; Match(EQUAL);
				State = 7519;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7520; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 7521; Match(EQUAL);
				State = 7522; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hadr_optionsContext : ParserRuleContext {
		public Id_Context availability_group_name;
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hadr_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHadr_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHadr_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHadr_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hadr_optionsContext hadr_options() {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, State);
		EnterRule(_localctx, 592, RULE_hadr_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7525; Match(HADR);
			State = 7534;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,987,_ctx) ) {
			case 1:
				{
				State = 7531;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,986,_ctx) ) {
				case 1:
					{
					State = 7526; Match(AVAILABILITY);
					State = 7527; Match(GROUP);
					State = 7528; Match(EQUAL);
					State = 7529; _localctx.availability_group_name = id_();
					}
					break;

				case 2:
					{
					State = 7530; Match(OFF);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 7533;
				_la = _input.La(1);
				if ( !(_la==SUSPEND || _la==RESUME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixed_page_allocation_optionContext : ParserRuleContext {
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixed_page_allocation_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMixed_page_allocation_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMixed_page_allocation_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixed_page_allocation_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, State);
		EnterRule(_localctx, 594, RULE_mixed_page_allocation_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7536; Match(MIXED_PAGE_ALLOCATION);
			State = 7537;
			_la = _input.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterization_optionContext : ParserRuleContext {
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterParameterization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitParameterization_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterization_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameterization_optionContext parameterization_option() {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, State);
		EnterRule(_localctx, 596, RULE_parameterization_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7539; Match(PARAMETERIZATION);
			State = 7540;
			_la = _input.La(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recovery_optionContext : ParserRuleContext {
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recovery_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRecovery_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRecovery_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecovery_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recovery_optionContext recovery_option() {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, State);
		EnterRule(_localctx, 598, RULE_recovery_option);
		int _la;
		try {
			State = 7548;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,988,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7542; Match(RECOVERY);
				State = 7543;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7544; Match(TORN_PAGE_DETECTION);
				State = 7545; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7546; Match(PAGE_VERIFY);
				State = 7547;
				_la = _input.La(1);
				if ( !(_la==CHECKSUM || _la==TORN_PAGE_DETECTION || _la==NONE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_broker_optionContext : ParserRuleContext {
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_broker_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_broker_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_broker_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService_broker_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Service_broker_optionContext service_broker_option() {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, State);
		EnterRule(_localctx, 600, RULE_service_broker_option);
		try {
			State = 7556;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,989,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7550; Match(ENABLE_BROKER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7551; Match(DISABLE_BROKER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7552; Match(NEW_BROKER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7553; Match(ERROR_BROKER_CONVERSATIONS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7554; Match(HONOR_BROKER_PRIORITY);
				State = 7555; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Snapshot_optionContext : ParserRuleContext {
		public IToken MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snapshot_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSnapshot_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSnapshot_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSnapshot_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Snapshot_optionContext snapshot_option() {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, State);
		EnterRule(_localctx, 602, RULE_snapshot_option);
		int _la;
		try {
			State = 7563;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,990,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7558; Match(ALLOW_SNAPSHOT_ISOLATION);
				State = 7559; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7560; Match(READ_COMMITTED_SNAPSHOT);
				State = 7561;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7562;
				_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
					_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_optionContext : ParserRuleContext {
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_optionContext sql_option() {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, State);
		EnterRule(_localctx, 604, RULE_sql_option);
		try {
			State = 7586;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,991,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7565; Match(ANSI_NULL_DEFAULT);
				State = 7566; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7567; Match(ANSI_NULLS);
				State = 7568; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7569; Match(ANSI_PADDING);
				State = 7570; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7571; Match(ANSI_WARNINGS);
				State = 7572; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7573; Match(ARITHABORT);
				State = 7574; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7575; Match(COMPATIBILITY_LEVEL);
				State = 7576; Match(EQUAL);
				State = 7577; Match(DECIMAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7578; Match(CONCAT_NULL_YIELDS_NULL);
				State = 7579; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7580; Match(NUMERIC_ROUNDABORT);
				State = 7581; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7582; Match(QUOTED_IDENTIFIER);
				State = 7583; on_off();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7584; Match(RECURSIVE_TRIGGERS);
				State = 7585; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_recovery_time_optionContext : ParserRuleContext {
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_recovery_time_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTarget_recovery_time_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTarget_recovery_time_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget_recovery_time_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target_recovery_time_optionContext target_recovery_time_option() {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, State);
		EnterRule(_localctx, 606, RULE_target_recovery_time_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7588; Match(TARGET_RECOVERY_TIME);
			State = 7589; Match(EQUAL);
			State = 7590; Match(DECIMAL);
			State = 7591;
			_la = _input.La(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminationContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termination; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTermination(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTermination(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminationContext termination() {
		TerminationContext _localctx = new TerminationContext(_ctx, State);
		EnterRule(_localctx, 608, RULE_termination);
		try {
			State = 7599;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,992,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7593; Match(ROLLBACK);
				State = 7594; Match(AFTER);
				State = 7595; _localctx.seconds = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7596; Match(ROLLBACK);
				State = 7597; Match(IMMEDIATE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7598; Match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Drop_relational_or_xml_or_spatial_indexContext[] drop_relational_or_xml_or_spatial_index() {
			return GetRuleContexts<Drop_relational_or_xml_or_spatial_indexContext>();
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return GetRuleContext<Drop_relational_or_xml_or_spatial_indexContext>(i);
		}
		public Drop_backward_compatible_indexContext[] drop_backward_compatible_index() {
			return GetRuleContexts<Drop_backward_compatible_indexContext>();
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return GetRuleContext<Drop_backward_compatible_indexContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, State);
		EnterRule(_localctx, 610, RULE_drop_index);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7601; Match(DROP);
			State = 7602; Match(INDEX);
			State = 7605;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,993,_ctx) ) {
			case 1:
				{
				State = 7603; Match(IF);
				State = 7604; Match(EXISTS);
				}
				break;
			}
			State = 7623;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,996,_ctx) ) {
			case 1:
				{
				State = 7607; drop_relational_or_xml_or_spatial_index();
				State = 7612;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,994,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7608; Match(COMMA);
						State = 7609; drop_relational_or_xml_or_spatial_index();
						}
						} 
					}
					State = 7614;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,994,_ctx);
				}
				}
				break;

			case 2:
				{
				State = 7615; drop_backward_compatible_index();
				State = 7620;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,995,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7616; Match(COMMA);
						State = 7617; drop_backward_compatible_index();
						}
						} 
					}
					State = 7622;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,995,_ctx);
				}
				}
				break;
			}
			State = 7626;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,997,_ctx) ) {
			case 1:
				{
				State = 7625; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_relational_or_xml_or_spatial_indexContext : ParserRuleContext {
		public Id_Context index_name;
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_relational_or_xml_or_spatial_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_relational_or_xml_or_spatial_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_relational_or_xml_or_spatial_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_relational_or_xml_or_spatial_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, State);
		EnterRule(_localctx, 612, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7628; _localctx.index_name = id_();
			State = 7629; Match(ON);
			State = 7630; full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_backward_compatible_indexContext : ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context table_or_view_name;
		public Id_Context index_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_backward_compatible_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_backward_compatible_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_backward_compatible_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_backward_compatible_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_backward_compatible_indexContext drop_backward_compatible_index() {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, State);
		EnterRule(_localctx, 614, RULE_drop_backward_compatible_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7635;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,998,_ctx) ) {
			case 1:
				{
				State = 7632; _localctx.owner_name = id_();
				State = 7633; Match(DOT);
				}
				break;
			}
			State = 7637; _localctx.table_or_view_name = id_();
			State = 7638; Match(DOT);
			State = 7639; _localctx.index_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IToken proc;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, State);
		EnterRule(_localctx, 616, RULE_drop_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7641; Match(DROP);
			State = 7642;
			_localctx.proc = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 7645;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,999,_ctx) ) {
			case 1:
				{
				State = 7643; Match(IF);
				State = 7644; Match(EXISTS);
				}
				break;
			}
			State = 7647; func_proc_name_schema();
			State = 7652;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1000,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7648; Match(COMMA);
					State = 7649; func_proc_name_schema();
					}
					} 
				}
				State = 7654;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1000,_ctx);
			}
			State = 7656;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1001,_ctx) ) {
			case 1:
				{
				State = 7655; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_triggerContext : ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return GetRuleContext<Drop_dml_triggerContext>(0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return GetRuleContext<Drop_ddl_triggerContext>(0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_triggerContext drop_trigger() {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, State);
		EnterRule(_localctx, 618, RULE_drop_trigger);
		try {
			State = 7660;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1002,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7658; drop_dml_trigger();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7659; drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_dml_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_dml_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_dml_triggerContext drop_dml_trigger() {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, State);
		EnterRule(_localctx, 620, RULE_drop_dml_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7662; Match(DROP);
			State = 7663; Match(TRIGGER);
			State = 7666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1003,_ctx) ) {
			case 1:
				{
				State = 7664; Match(IF);
				State = 7665; Match(EXISTS);
				}
				break;
			}
			State = 7668; simple_name();
			State = 7673;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1004,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7669; Match(COMMA);
					State = 7670; simple_name();
					}
					} 
				}
				State = 7675;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1004,_ctx);
			}
			State = 7677;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1005,_ctx) ) {
			case 1:
				{
				State = 7676; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_ddl_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_ddl_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ddl_triggerContext drop_ddl_trigger() {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, State);
		EnterRule(_localctx, 622, RULE_drop_ddl_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7679; Match(DROP);
			State = 7680; Match(TRIGGER);
			State = 7683;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1006,_ctx) ) {
			case 1:
				{
				State = 7681; Match(IF);
				State = 7682; Match(EXISTS);
				}
				break;
			}
			State = 7685; simple_name();
			State = 7690;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1007,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7686; Match(COMMA);
					State = 7687; simple_name();
					}
					} 
				}
				State = 7692;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1007,_ctx);
			}
			State = 7693; Match(ON);
			State = 7697;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1008,_ctx) ) {
			case 1:
				{
				State = 7694; Match(DATABASE);
				}
				break;

			case 2:
				{
				State = 7695; Match(ALL);
				State = 7696; Match(SERVER);
				}
				break;
			}
			State = 7700;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1009,_ctx) ) {
			case 1:
				{
				State = 7699; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, State);
		EnterRule(_localctx, 624, RULE_drop_function);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7702; Match(DROP);
			State = 7703; Match(FUNCTION);
			State = 7706;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1010,_ctx) ) {
			case 1:
				{
				State = 7704; Match(IF);
				State = 7705; Match(EXISTS);
				}
				break;
			}
			State = 7708; func_proc_name_schema();
			State = 7713;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1011,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7709; Match(COMMA);
					State = 7710; func_proc_name_schema();
					}
					} 
				}
				State = 7715;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1011,_ctx);
			}
			State = 7717;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1012,_ctx) ) {
			case 1:
				{
				State = 7716; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statisticsContext : ParserRuleContext {
		public Id_Context name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statisticsContext drop_statistics() {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, State);
		EnterRule(_localctx, 626, RULE_drop_statistics);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7719; Match(DROP);
			State = 7720; Match(STATISTICS);
			State = 7730;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7722;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1013,_ctx) ) {
					case 1:
						{
						State = 7721; Match(COMMA);
						}
						break;
					}
					State = 7727;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1014,_ctx) ) {
					case 1:
						{
						State = 7724; table_name();
						State = 7725; Match(DOT);
						}
						break;
					}
					State = 7729; _localctx.name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7732;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1015,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 7734; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, State);
		EnterRule(_localctx, 628, RULE_drop_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7736; Match(DROP);
			State = 7737; Match(TABLE);
			State = 7740;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1016,_ctx) ) {
			case 1:
				{
				State = 7738; Match(IF);
				State = 7739; Match(EXISTS);
				}
				break;
			}
			State = 7742; table_name();
			State = 7744;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1017,_ctx) ) {
			case 1:
				{
				State = 7743; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, State);
		EnterRule(_localctx, 630, RULE_drop_view);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7746; Match(DROP);
			State = 7747; Match(VIEW);
			State = 7750;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1018,_ctx) ) {
			case 1:
				{
				State = 7748; Match(IF);
				State = 7749; Match(EXISTS);
				}
				break;
			}
			State = 7752; simple_name();
			State = 7757;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1019,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7753; Match(COMMA);
					State = 7754; simple_name();
					}
					} 
				}
				State = 7759;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1019,_ctx);
			}
			State = 7761;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1020,_ctx) ) {
			case 1:
				{
				State = 7760; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(_ctx, State);
		EnterRule(_localctx, 632, RULE_create_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7763; Match(CREATE);
			State = 7764; Match(TYPE);
			State = 7765; _localctx.name = simple_name();
			State = 7770;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1021,_ctx) ) {
			case 1:
				{
				State = 7766; Match(FROM);
				State = 7767; data_type();
				State = 7768; default_value();
				}
				break;
			}
			State = 7778;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1022,_ctx) ) {
			case 1:
				{
				State = 7772; Match(AS);
				State = 7773; Match(TABLE);
				State = 7774; Match(LR_BRACKET);
				State = 7775; column_def_table_constraints();
				State = 7776; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, State);
		EnterRule(_localctx, 634, RULE_drop_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7780; Match(DROP);
			State = 7781; Match(TYPE);
			State = 7784;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1023,_ctx) ) {
			case 1:
				{
				State = 7782; Match(IF);
				State = 7783; Match(EXISTS);
				}
				break;
			}
			State = 7786; _localctx.name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_function_limitedContext : ParserRuleContext {
		public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		public OpendatasourceContext opendatasource() {
			return GetRuleContext<OpendatasourceContext>(0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_function_limitedContext rowset_function_limited() {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, State);
		EnterRule(_localctx, 636, RULE_rowset_function_limited);
		try {
			State = 7790;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1024,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7788; openquery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7789; opendatasource();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenqueryContext : ParserRuleContext {
		public Id_Context linked_server;
		public IToken query;
		public ITerminalNode OPENQUERY() { return GetToken(TSqlParser.OPENQUERY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpenquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpenquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenqueryContext openquery() {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, State);
		EnterRule(_localctx, 638, RULE_openquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7792; Match(OPENQUERY);
			State = 7793; Match(LR_BRACKET);
			State = 7794; _localctx.linked_server = id_();
			State = 7795; Match(COMMA);
			State = 7796; _localctx.query = Match(STRING);
			State = 7797; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpendatasourceContext : ParserRuleContext {
		public IToken provider;
		public IToken init;
		public Id_Context database;
		public Id_Context scheme;
		public Id_Context table;
		public ITerminalNode OPENDATASOURCE() { return GetToken(TSqlParser.OPENDATASOURCE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opendatasource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpendatasource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpendatasource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpendatasource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpendatasourceContext opendatasource() {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, State);
		EnterRule(_localctx, 640, RULE_opendatasource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7799; Match(OPENDATASOURCE);
			State = 7800; Match(LR_BRACKET);
			State = 7801; _localctx.provider = Match(STRING);
			State = 7802; Match(COMMA);
			State = 7803; _localctx.init = Match(STRING);
			State = 7804; Match(RR_BRACKET);
			State = 7805; Match(DOT);
			State = 7807;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1025,_ctx) ) {
			case 1:
				{
				State = 7806; _localctx.database = id_();
				}
				break;
			}
			State = 7809; Match(DOT);
			State = 7811;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1026,_ctx) ) {
			case 1:
				{
				State = 7810; _localctx.scheme = id_();
				}
				break;
			}
			State = 7813; Match(DOT);
			{
			State = 7814; _localctx.table = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public Declare_localContext _declare_local;
		public IList<Declare_localContext> _loc = new List<Declare_localContext>();
		public Xml_declarationContext _xml_declaration;
		public IList<Xml_declarationContext> _xml_dec = new List<Xml_declarationContext>();
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Declare_localContext[] declare_local() {
			return GetRuleContexts<Declare_localContext>();
		}
		public Declare_localContext declare_local(int i) {
			return GetRuleContext<Declare_localContext>(i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return GetRuleContext<Xml_type_definitionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public Xml_declarationContext[] xml_declaration() {
			return GetRuleContexts<Xml_declarationContext>();
		}
		public Xml_declarationContext xml_declaration(int i) {
			return GetRuleContext<Xml_declarationContext>(i);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, State);
		EnterRule(_localctx, 642, RULE_declare_statement);
		try {
			int _alt;
			State = 7864;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1036,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7816; Match(DECLARE);
				State = 7817; Match(LOCAL_ID);
				State = 7819;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1027,_ctx) ) {
				case 1:
					{
					State = 7818; Match(AS);
					}
					break;
				}
				State = 7823;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1028,_ctx) ) {
				case 1:
					{
					State = 7821; table_type_definition();
					}
					break;

				case 2:
					{
					State = 7822; table_name();
					}
					break;
				}
				State = 7826;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1029,_ctx) ) {
				case 1:
					{
					State = 7825; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7828; Match(DECLARE);
				State = 7829; _localctx._declare_local = declare_local();
				_localctx._loc.Add(_localctx._declare_local);
				State = 7834;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1030,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7830; Match(COMMA);
						State = 7831; _localctx._declare_local = declare_local();
						_localctx._loc.Add(_localctx._declare_local);
						}
						} 
					}
					State = 7836;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1030,_ctx);
				}
				State = 7838;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1031,_ctx) ) {
				case 1:
					{
					State = 7837; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7840; Match(DECLARE);
				State = 7841; Match(LOCAL_ID);
				State = 7843;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1032,_ctx) ) {
				case 1:
					{
					State = 7842; Match(AS);
					}
					break;
				}
				State = 7845; xml_type_definition();
				State = 7847;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1033,_ctx) ) {
				case 1:
					{
					State = 7846; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7849; Match(WITH);
				State = 7850; Match(XMLNAMESPACES);
				State = 7851; Match(LR_BRACKET);
				State = 7852; _localctx._xml_declaration = xml_declaration();
				_localctx._xml_dec.Add(_localctx._xml_declaration);
				State = 7857;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1034,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7853; Match(COMMA);
						State = 7854; _localctx._xml_declaration = xml_declaration();
						_localctx._xml_dec.Add(_localctx._xml_declaration);
						}
						} 
					}
					State = 7859;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1034,_ctx);
				}
				State = 7860; Match(RR_BRACKET);
				State = 7862;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1035,_ctx) ) {
				case 1:
					{
					State = 7861; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_declarationContext : ParserRuleContext {
		public IToken xml_namespace_uri;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Xml_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_declarationContext xml_declaration() {
		Xml_declarationContext _localctx = new Xml_declarationContext(_ctx, State);
		EnterRule(_localctx, 644, RULE_xml_declaration);
		try {
			State = 7871;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1037,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7866; _localctx.xml_namespace_uri = Match(STRING);
				State = 7867; Match(AS);
				State = 7868; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7869; Match(DEFAULT);
				State = 7870; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(TSqlParser.DEALLOCATE, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_cursorContext declare_cursor() {
			return GetRuleContext<Declare_cursorContext>(0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return GetRuleContext<Fetch_cursorContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_statementContext cursor_statement() {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, State);
		EnterRule(_localctx, 646, RULE_cursor_statement);
		try {
			State = 7902;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1045,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7873; Match(CLOSE);
				State = 7875;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1038,_ctx) ) {
				case 1:
					{
					State = 7874; Match(GLOBAL);
					}
					break;
				}
				State = 7877; cursor_name();
				State = 7879;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1039,_ctx) ) {
				case 1:
					{
					State = 7878; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7881; Match(DEALLOCATE);
				State = 7883;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1040,_ctx) ) {
				case 1:
					{
					State = 7882; Match(GLOBAL);
					}
					break;
				}
				State = 7886;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1041,_ctx) ) {
				case 1:
					{
					State = 7885; Match(CURSOR);
					}
					break;
				}
				State = 7888; cursor_name();
				State = 7890;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1042,_ctx) ) {
				case 1:
					{
					State = 7889; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7892; declare_cursor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7893; fetch_cursor();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7894; Match(OPEN);
				State = 7896;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1043,_ctx) ) {
				case 1:
					{
					State = 7895; Match(GLOBAL);
					}
					break;
				}
				State = 7898; cursor_name();
				State = 7900;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1044,_ctx) ) {
				case 1:
					{
					State = 7899; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_databaseContext : ParserRuleContext {
		public Id_Context database_name;
		public IToken file_or_filegroup;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public Id_Context encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] FILEGROUP() { return GetTokens(TSqlParser.FILEGROUP); }
		public ITerminalNode FILEGROUP(int i) {
			return GetToken(TSqlParser.FILEGROUP, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_databaseContext backup_database() {
		Backup_databaseContext _localctx = new Backup_databaseContext(_ctx, State);
		EnterRule(_localctx, 648, RULE_backup_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7904; Match(BACKUP);
			State = 7905; Match(DATABASE);
			{
			State = 7906; _localctx.database_name = id_();
			}
			State = 7919;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1048,_ctx) ) {
			case 1:
				{
				State = 7907; Match(READ_WRITE_FILEGROUPS);
				State = 7916;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1047,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7909;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1046,_ctx) ) {
						case 1:
							{
							State = 7908; Match(COMMA);
							}
							break;
						}
						State = 7911;
						_la = _input.La(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 7912; Match(EQUAL);
						State = 7913; _localctx.file_or_filegroup = Match(STRING);
						}
						} 
					}
					State = 7918;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1047,_ctx);
				}
				}
				break;
			}
			State = 7929;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1050,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7922;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1049,_ctx) ) {
					case 1:
						{
						State = 7921; Match(COMMA);
						}
						break;
					}
					State = 7924;
					_la = _input.La(1);
					if ( !(_la==FILE || _la==FILEGROUP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 7925; Match(EQUAL);
					State = 7926; _localctx.file_or_filegroup = Match(STRING);
					}
					} 
				}
				State = 7931;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1050,_ctx);
			}
			State = 7955;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1056,_ctx) ) {
			case 1:
				{
				State = 7932; Match(TO);
				State = 7937;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7934;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1051,_ctx) ) {
						case 1:
							{
							State = 7933; Match(COMMA);
							}
							break;
						}
						State = 7936; _localctx.logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7939;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1052,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 7941; Match(TO);
				State = 7951;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7943;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1053,_ctx) ) {
						case 1:
							{
							State = 7942; Match(COMMA);
							}
							break;
						}
						State = 7945;
						_la = _input.La(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 7946; Match(EQUAL);
						State = 7949;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1054,_ctx) ) {
						case 1:
							{
							State = 7947; Match(STRING);
							}
							break;

						case 2:
							{
							State = 7948; id_();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7953;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1055,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 7990;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1064,_ctx) ) {
			case 1:
				{
				State = 7967;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7957; Match(MIRROR);
						State = 7958; Match(TO);
						State = 7963;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 7960;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1057,_ctx) ) {
								case 1:
									{
									State = 7959; Match(COMMA);
									}
									break;
								}
								State = 7962; _localctx.logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 7965;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1058,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7969;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1059,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 7986;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7971; Match(MIRROR);
						State = 7972; Match(TO);
						State = 7982;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 7974;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1060,_ctx) ) {
								case 1:
									{
									State = 7973; Match(COMMA);
									}
									break;
								}
								State = 7976;
								_la = _input.La(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								State = 7977; Match(EQUAL);
								State = 7980;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1061,_ctx) ) {
								case 1:
									{
									State = 7978; Match(STRING);
									}
									break;

								case 2:
									{
									State = 7979; id_();
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 7984;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1062,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7988;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1063,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 8152;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1100,_ctx) ) {
			case 1:
				{
				State = 7992; Match(WITH);
				State = 8149;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1099,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 8147;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1098,_ctx) ) {
						case 1:
							{
							State = 7994;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1065,_ctx) ) {
							case 1:
								{
								State = 7993; Match(COMMA);
								}
								break;
							}
							State = 7996; Match(DIFFERENTIAL);
							}
							break;

						case 2:
							{
							State = 7998;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1066,_ctx) ) {
							case 1:
								{
								State = 7997; Match(COMMA);
								}
								break;
							}
							State = 8000; Match(COPY_ONLY);
							}
							break;

						case 3:
							{
							State = 8002;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1067,_ctx) ) {
							case 1:
								{
								State = 8001; Match(COMMA);
								}
								break;
							}
							State = 8004;
							_la = _input.La(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 8006;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1068,_ctx) ) {
							case 1:
								{
								State = 8005; Match(COMMA);
								}
								break;
							}
							State = 8008; Match(DESCRIPTION);
							State = 8009; Match(EQUAL);
							State = 8012;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1069,_ctx) ) {
							case 1:
								{
								State = 8010; Match(STRING);
								}
								break;

							case 2:
								{
								State = 8011; id_();
								}
								break;
							}
							}
							break;

						case 5:
							{
							State = 8015;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1070,_ctx) ) {
							case 1:
								{
								State = 8014; Match(COMMA);
								}
								break;
							}
							State = 8017; Match(NAME);
							State = 8018; Match(EQUAL);
							State = 8019; _localctx.backup_set_name = id_();
							}
							break;

						case 6:
							{
							State = 8021;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1071,_ctx) ) {
							case 1:
								{
								State = 8020; Match(COMMA);
								}
								break;
							}
							State = 8023; Match(CREDENTIAL);
							}
							break;

						case 7:
							{
							State = 8025;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1072,_ctx) ) {
							case 1:
								{
								State = 8024; Match(COMMA);
								}
								break;
							}
							State = 8027; Match(FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							State = 8029;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1073,_ctx) ) {
							case 1:
								{
								State = 8028; Match(COMMA);
								}
								break;
							}
							State = 8043;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1076,_ctx) ) {
							case 1:
								{
								State = 8031; Match(EXPIREDATE);
								State = 8032; Match(EQUAL);
								State = 8035;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1074,_ctx) ) {
								case 1:
									{
									State = 8033; Match(STRING);
									}
									break;

								case 2:
									{
									State = 8034; id_();
									}
									break;
								}
								}
								break;

							case 2:
								{
								State = 8037; Match(RETAINDAYS);
								State = 8038; Match(EQUAL);
								State = 8041;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1075,_ctx) ) {
								case 1:
									{
									State = 8039; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 8040; id_();
									}
									break;
								}
								}
								break;
							}
							}
							break;

						case 9:
							{
							State = 8046;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1077,_ctx) ) {
							case 1:
								{
								State = 8045; Match(COMMA);
								}
								break;
							}
							State = 8048;
							_la = _input.La(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 10:
							{
							State = 8050;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1078,_ctx) ) {
							case 1:
								{
								State = 8049; Match(COMMA);
								}
								break;
							}
							State = 8052;
							_la = _input.La(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 11:
							{
							State = 8054;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1079,_ctx) ) {
							case 1:
								{
								State = 8053; Match(COMMA);
								}
								break;
							}
							State = 8056;
							_la = _input.La(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 12:
							{
							State = 8058;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1080,_ctx) ) {
							case 1:
								{
								State = 8057; Match(COMMA);
								}
								break;
							}
							State = 8060; Match(MEDIADESCRIPTION);
							State = 8061; Match(EQUAL);
							State = 8064;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1081,_ctx) ) {
							case 1:
								{
								State = 8062; Match(STRING);
								}
								break;

							case 2:
								{
								State = 8063; id_();
								}
								break;
							}
							}
							break;

						case 13:
							{
							State = 8067;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1082,_ctx) ) {
							case 1:
								{
								State = 8066; Match(COMMA);
								}
								break;
							}
							State = 8069; Match(MEDIANAME);
							State = 8070; Match(EQUAL);
							{
							State = 8071; _localctx.medianame = Match(STRING);
							}
							}
							break;

						case 14:
							{
							State = 8073;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1083,_ctx) ) {
							case 1:
								{
								State = 8072; Match(COMMA);
								}
								break;
							}
							State = 8075; Match(BLOCKSIZE);
							State = 8076; Match(EQUAL);
							State = 8079;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1084,_ctx) ) {
							case 1:
								{
								State = 8077; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8078; id_();
								}
								break;
							}
							}
							break;

						case 15:
							{
							State = 8082;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1085,_ctx) ) {
							case 1:
								{
								State = 8081; Match(COMMA);
								}
								break;
							}
							State = 8084; Match(BUFFERCOUNT);
							State = 8085; Match(EQUAL);
							State = 8088;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1086,_ctx) ) {
							case 1:
								{
								State = 8086; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8087; id_();
								}
								break;
							}
							}
							break;

						case 16:
							{
							State = 8091;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1087,_ctx) ) {
							case 1:
								{
								State = 8090; Match(COMMA);
								}
								break;
							}
							State = 8093; Match(MAXTRANSFER);
							State = 8094; Match(EQUAL);
							State = 8097;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1088,_ctx) ) {
							case 1:
								{
								State = 8095; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8096; id_();
								}
								break;
							}
							}
							break;

						case 17:
							{
							State = 8100;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1089,_ctx) ) {
							case 1:
								{
								State = 8099; Match(COMMA);
								}
								break;
							}
							State = 8102;
							_la = _input.La(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 18:
							{
							State = 8104;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1090,_ctx) ) {
							case 1:
								{
								State = 8103; Match(COMMA);
								}
								break;
							}
							State = 8106;
							_la = _input.La(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 19:
							{
							State = 8108;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1091,_ctx) ) {
							case 1:
								{
								State = 8107; Match(COMMA);
								}
								break;
							}
							State = 8110; Match(RESTART);
							}
							break;

						case 20:
							{
							State = 8112;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1092,_ctx) ) {
							case 1:
								{
								State = 8111; Match(COMMA);
								}
								break;
							}
							State = 8114; Match(STATS);
							State = 8117;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1093,_ctx) ) {
							case 1:
								{
								State = 8115; Match(EQUAL);
								State = 8116; _localctx.stats_percent = Match(DECIMAL);
								}
								break;
							}
							}
							break;

						case 21:
							{
							State = 8120;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1094,_ctx) ) {
							case 1:
								{
								State = 8119; Match(COMMA);
								}
								break;
							}
							State = 8122;
							_la = _input.La(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 22:
							{
							State = 8124;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1095,_ctx) ) {
							case 1:
								{
								State = 8123; Match(COMMA);
								}
								break;
							}
							State = 8126;
							_la = _input.La(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 23:
							{
							State = 8128;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1096,_ctx) ) {
							case 1:
								{
								State = 8127; Match(COMMA);
								}
								break;
							}
							State = 8130; Match(ENCRYPTION);
							State = 8131; Match(LR_BRACKET);
							State = 8132; Match(ALGORITHM);
							State = 8133; Match(EQUAL);
							State = 8134;
							_la = _input.La(1);
							if ( !(((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (AES_128 - 199)) | (1L << (AES_192 - 199)) | (1L << (AES_256 - 199)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 8135; Match(COMMA);
							State = 8136; Match(SERVER);
							State = 8137; Match(CERTIFICATE);
							State = 8138; Match(EQUAL);
							State = 8145;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1097,_ctx) ) {
							case 1:
								{
								State = 8139; _localctx.encryptor_name = id_();
								}
								break;

							case 2:
								{
								State = 8140; Match(SERVER);
								State = 8141; Match(ASYMMETRIC);
								State = 8142; Match(KEY);
								State = 8143; Match(EQUAL);
								State = 8144; _localctx.encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 8151;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1099,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_logContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public IToken undo_file_name;
		public Id_Context encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] NO_TRUNCATE() { return GetTokens(TSqlParser.NO_TRUNCATE); }
		public ITerminalNode NO_TRUNCATE(int i) {
			return GetToken(TSqlParser.NO_TRUNCATE, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NORECOVERY() { return GetTokens(TSqlParser.NORECOVERY); }
		public ITerminalNode NORECOVERY(int i) {
			return GetToken(TSqlParser.NORECOVERY, i);
		}
		public ITerminalNode[] STANDBY() { return GetTokens(TSqlParser.STANDBY); }
		public ITerminalNode STANDBY(int i) {
			return GetToken(TSqlParser.STANDBY, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_log; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_log(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_log(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_log(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_logContext backup_log() {
		Backup_logContext _localctx = new Backup_logContext(_ctx, State);
		EnterRule(_localctx, 650, RULE_backup_log);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8154; Match(BACKUP);
			State = 8155; Match(LOG);
			{
			State = 8156; _localctx.database_name = id_();
			}
			State = 8180;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1106,_ctx) ) {
			case 1:
				{
				State = 8157; Match(TO);
				State = 8162;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8159;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1101,_ctx) ) {
						case 1:
							{
							State = 8158; Match(COMMA);
							}
							break;
						}
						State = 8161; _localctx.logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8164;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1102,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 8166; Match(TO);
				State = 8176;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8168;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1103,_ctx) ) {
						case 1:
							{
							State = 8167; Match(COMMA);
							}
							break;
						}
						State = 8170;
						_la = _input.La(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 8171; Match(EQUAL);
						State = 8174;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1104,_ctx) ) {
						case 1:
							{
							State = 8172; Match(STRING);
							}
							break;

						case 2:
							{
							State = 8173; id_();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8178;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1105,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 8215;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1114,_ctx) ) {
			case 1:
				{
				State = 8192;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8182; Match(MIRROR);
						State = 8183; Match(TO);
						State = 8188;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 8185;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1107,_ctx) ) {
								case 1:
									{
									State = 8184; Match(COMMA);
									}
									break;
								}
								State = 8187; _localctx.logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8190;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1108,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8194;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1109,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 8211;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8196; Match(MIRROR);
						State = 8197; Match(TO);
						State = 8207;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 8199;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1110,_ctx) ) {
								case 1:
									{
									State = 8198; Match(COMMA);
									}
									break;
								}
								State = 8201;
								_la = _input.La(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								State = 8202; Match(EQUAL);
								State = 8205;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1111,_ctx) ) {
								case 1:
									{
									State = 8203; Match(STRING);
									}
									break;

								case 2:
									{
									State = 8204; id_();
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8209;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1112,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8213;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1113,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 8390;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1153,_ctx) ) {
			case 1:
				{
				State = 8217; Match(WITH);
				State = 8387;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1152,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 8385;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1151,_ctx) ) {
						case 1:
							{
							State = 8219;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1115,_ctx) ) {
							case 1:
								{
								State = 8218; Match(COMMA);
								}
								break;
							}
							State = 8221; Match(DIFFERENTIAL);
							}
							break;

						case 2:
							{
							State = 8223;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1116,_ctx) ) {
							case 1:
								{
								State = 8222; Match(COMMA);
								}
								break;
							}
							State = 8225; Match(COPY_ONLY);
							}
							break;

						case 3:
							{
							State = 8227;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1117,_ctx) ) {
							case 1:
								{
								State = 8226; Match(COMMA);
								}
								break;
							}
							State = 8229;
							_la = _input.La(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 8231;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1118,_ctx) ) {
							case 1:
								{
								State = 8230; Match(COMMA);
								}
								break;
							}
							State = 8233; Match(DESCRIPTION);
							State = 8234; Match(EQUAL);
							State = 8237;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1119,_ctx) ) {
							case 1:
								{
								State = 8235; Match(STRING);
								}
								break;

							case 2:
								{
								State = 8236; id_();
								}
								break;
							}
							}
							break;

						case 5:
							{
							State = 8240;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1120,_ctx) ) {
							case 1:
								{
								State = 8239; Match(COMMA);
								}
								break;
							}
							State = 8242; Match(NAME);
							State = 8243; Match(EQUAL);
							State = 8244; _localctx.backup_set_name = id_();
							}
							break;

						case 6:
							{
							State = 8246;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1121,_ctx) ) {
							case 1:
								{
								State = 8245; Match(COMMA);
								}
								break;
							}
							State = 8248; Match(CREDENTIAL);
							}
							break;

						case 7:
							{
							State = 8250;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1122,_ctx) ) {
							case 1:
								{
								State = 8249; Match(COMMA);
								}
								break;
							}
							State = 8252; Match(FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							State = 8254;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1123,_ctx) ) {
							case 1:
								{
								State = 8253; Match(COMMA);
								}
								break;
							}
							State = 8268;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1126,_ctx) ) {
							case 1:
								{
								State = 8256; Match(EXPIREDATE);
								State = 8257; Match(EQUAL);
								State = 8260;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1124,_ctx) ) {
								case 1:
									{
									State = 8258; Match(STRING);
									}
									break;

								case 2:
									{
									State = 8259; id_();
									}
									break;
								}
								}
								break;

							case 2:
								{
								State = 8262; Match(RETAINDAYS);
								State = 8263; Match(EQUAL);
								State = 8266;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1125,_ctx) ) {
								case 1:
									{
									State = 8264; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 8265; id_();
									}
									break;
								}
								}
								break;
							}
							}
							break;

						case 9:
							{
							State = 8271;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1127,_ctx) ) {
							case 1:
								{
								State = 8270; Match(COMMA);
								}
								break;
							}
							State = 8273;
							_la = _input.La(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 10:
							{
							State = 8275;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1128,_ctx) ) {
							case 1:
								{
								State = 8274; Match(COMMA);
								}
								break;
							}
							State = 8277;
							_la = _input.La(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 11:
							{
							State = 8279;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1129,_ctx) ) {
							case 1:
								{
								State = 8278; Match(COMMA);
								}
								break;
							}
							State = 8281;
							_la = _input.La(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 12:
							{
							State = 8283;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1130,_ctx) ) {
							case 1:
								{
								State = 8282; Match(COMMA);
								}
								break;
							}
							State = 8285; Match(MEDIADESCRIPTION);
							State = 8286; Match(EQUAL);
							State = 8289;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1131,_ctx) ) {
							case 1:
								{
								State = 8287; Match(STRING);
								}
								break;

							case 2:
								{
								State = 8288; id_();
								}
								break;
							}
							}
							break;

						case 13:
							{
							State = 8292;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1132,_ctx) ) {
							case 1:
								{
								State = 8291; Match(COMMA);
								}
								break;
							}
							State = 8294; Match(MEDIANAME);
							State = 8295; Match(EQUAL);
							{
							State = 8296; _localctx.medianame = Match(STRING);
							}
							}
							break;

						case 14:
							{
							State = 8298;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1133,_ctx) ) {
							case 1:
								{
								State = 8297; Match(COMMA);
								}
								break;
							}
							State = 8300; Match(BLOCKSIZE);
							State = 8301; Match(EQUAL);
							State = 8304;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1134,_ctx) ) {
							case 1:
								{
								State = 8302; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8303; id_();
								}
								break;
							}
							}
							break;

						case 15:
							{
							State = 8307;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1135,_ctx) ) {
							case 1:
								{
								State = 8306; Match(COMMA);
								}
								break;
							}
							State = 8309; Match(BUFFERCOUNT);
							State = 8310; Match(EQUAL);
							State = 8313;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1136,_ctx) ) {
							case 1:
								{
								State = 8311; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8312; id_();
								}
								break;
							}
							}
							break;

						case 16:
							{
							State = 8316;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1137,_ctx) ) {
							case 1:
								{
								State = 8315; Match(COMMA);
								}
								break;
							}
							State = 8318; Match(MAXTRANSFER);
							State = 8319; Match(EQUAL);
							State = 8322;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1138,_ctx) ) {
							case 1:
								{
								State = 8320; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8321; id_();
								}
								break;
							}
							}
							break;

						case 17:
							{
							State = 8325;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1139,_ctx) ) {
							case 1:
								{
								State = 8324; Match(COMMA);
								}
								break;
							}
							State = 8327;
							_la = _input.La(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 18:
							{
							State = 8329;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1140,_ctx) ) {
							case 1:
								{
								State = 8328; Match(COMMA);
								}
								break;
							}
							State = 8331;
							_la = _input.La(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 19:
							{
							State = 8333;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1141,_ctx) ) {
							case 1:
								{
								State = 8332; Match(COMMA);
								}
								break;
							}
							State = 8335; Match(RESTART);
							}
							break;

						case 20:
							{
							State = 8337;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1142,_ctx) ) {
							case 1:
								{
								State = 8336; Match(COMMA);
								}
								break;
							}
							State = 8339; Match(STATS);
							State = 8342;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1143,_ctx) ) {
							case 1:
								{
								State = 8340; Match(EQUAL);
								State = 8341; _localctx.stats_percent = Match(DECIMAL);
								}
								break;
							}
							}
							break;

						case 21:
							{
							State = 8345;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1144,_ctx) ) {
							case 1:
								{
								State = 8344; Match(COMMA);
								}
								break;
							}
							State = 8347;
							_la = _input.La(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 22:
							{
							State = 8349;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1145,_ctx) ) {
							case 1:
								{
								State = 8348; Match(COMMA);
								}
								break;
							}
							State = 8351;
							_la = _input.La(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 23:
							{
							State = 8353;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1146,_ctx) ) {
							case 1:
								{
								State = 8352; Match(COMMA);
								}
								break;
							}
							State = 8359;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1147,_ctx) ) {
							case 1:
								{
								State = 8355; Match(NORECOVERY);
								}
								break;

							case 2:
								{
								State = 8356; Match(STANDBY);
								State = 8357; Match(EQUAL);
								State = 8358; _localctx.undo_file_name = Match(STRING);
								}
								break;
							}
							}
							break;

						case 24:
							{
							State = 8362;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1148,_ctx) ) {
							case 1:
								{
								State = 8361; Match(COMMA);
								}
								break;
							}
							State = 8364; Match(NO_TRUNCATE);
							}
							break;

						case 25:
							{
							State = 8366;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1149,_ctx) ) {
							case 1:
								{
								State = 8365; Match(COMMA);
								}
								break;
							}
							State = 8368; Match(ENCRYPTION);
							State = 8369; Match(LR_BRACKET);
							State = 8370; Match(ALGORITHM);
							State = 8371; Match(EQUAL);
							State = 8372;
							_la = _input.La(1);
							if ( !(((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (AES_128 - 199)) | (1L << (AES_192 - 199)) | (1L << (AES_256 - 199)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 8373; Match(COMMA);
							State = 8374; Match(SERVER);
							State = 8375; Match(CERTIFICATE);
							State = 8376; Match(EQUAL);
							State = 8383;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1150,_ctx) ) {
							case 1:
								{
								State = 8377; _localctx.encryptor_name = id_();
								}
								break;

							case 2:
								{
								State = 8378; Match(SERVER);
								State = 8379; Match(ASYMMETRIC);
								State = 8380; Match(KEY);
								State = 8381; Match(EQUAL);
								State = 8382; _localctx.encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 8389;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1152,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_certificateContext : ParserRuleContext {
		public Id_Context certname;
		public IToken cert_file;
		public IToken private_key_file;
		public IToken encryption_password;
		public IToken decryption_pasword;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_certificateContext backup_certificate() {
		Backup_certificateContext _localctx = new Backup_certificateContext(_ctx, State);
		EnterRule(_localctx, 652, RULE_backup_certificate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8392; Match(BACKUP);
			State = 8393; Match(CERTIFICATE);
			State = 8394; _localctx.certname = id_();
			State = 8395; Match(TO);
			State = 8396; Match(FILE);
			State = 8397; Match(EQUAL);
			State = 8398; _localctx.cert_file = Match(STRING);
			State = 8430;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1159,_ctx) ) {
			case 1:
				{
				State = 8399; Match(WITH);
				State = 8400; Match(PRIVATE);
				State = 8401; Match(KEY);
				State = 8402; Match(LR_BRACKET);
				State = 8425;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 8425;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1157,_ctx) ) {
						case 1:
							{
							State = 8404;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1154,_ctx) ) {
							case 1:
								{
								State = 8403; Match(COMMA);
								}
								break;
							}
							State = 8406; Match(FILE);
							State = 8407; Match(EQUAL);
							State = 8408; _localctx.private_key_file = Match(STRING);
							}
							break;

						case 2:
							{
							State = 8410;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1155,_ctx) ) {
							case 1:
								{
								State = 8409; Match(COMMA);
								}
								break;
							}
							State = 8412; Match(ENCRYPTION);
							State = 8413; Match(BY);
							State = 8414; Match(PASSWORD);
							State = 8415; Match(EQUAL);
							State = 8416; _localctx.encryption_password = Match(STRING);
							}
							break;

						case 3:
							{
							State = 8418;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1156,_ctx) ) {
							case 1:
								{
								State = 8417; Match(COMMA);
								}
								break;
							}
							State = 8420; Match(DECRYPTION);
							State = 8421; Match(BY);
							State = 8422; Match(PASSWORD);
							State = 8423; Match(EQUAL);
							State = 8424; _localctx.decryption_pasword = Match(STRING);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8427;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1158,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 8429; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_master_keyContext : ParserRuleContext {
		public IToken master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_master_keyContext backup_master_key() {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(_ctx, State);
		EnterRule(_localctx, 654, RULE_backup_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8432; Match(BACKUP);
			State = 8433; Match(MASTER);
			State = 8434; Match(KEY);
			State = 8435; Match(TO);
			State = 8436; Match(FILE);
			State = 8437; Match(EQUAL);
			State = 8438; _localctx.master_key_backup_file = Match(STRING);
			State = 8439; Match(ENCRYPTION);
			State = 8440; Match(BY);
			State = 8441; Match(PASSWORD);
			State = 8442; Match(EQUAL);
			State = 8443; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_service_master_keyContext : ParserRuleContext {
		public IToken service_master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_service_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_service_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_service_master_keyContext backup_service_master_key() {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(_ctx, State);
		EnterRule(_localctx, 656, RULE_backup_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8445; Match(BACKUP);
			State = 8446; Match(SERVICE);
			State = 8447; Match(MASTER);
			State = 8448; Match(KEY);
			State = 8449; Match(TO);
			State = 8450; Match(FILE);
			State = 8451; Match(EQUAL);
			State = 8452; _localctx.service_master_key_backup_file = Match(STRING);
			State = 8453; Match(ENCRYPTION);
			State = 8454; Match(BY);
			State = 8455; Match(PASSWORD);
			State = 8456; Match(EQUAL);
			State = 8457; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_statementContext : ParserRuleContext {
		public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		public Kill_processContext kill_process() {
			return GetRuleContext<Kill_processContext>(0);
		}
		public Kill_query_notificationContext kill_query_notification() {
			return GetRuleContext<Kill_query_notificationContext>(0);
		}
		public Kill_stats_jobContext kill_stats_job() {
			return GetRuleContext<Kill_stats_jobContext>(0);
		}
		public Kill_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_statementContext kill_statement() {
		Kill_statementContext _localctx = new Kill_statementContext(_ctx, State);
		EnterRule(_localctx, 658, RULE_kill_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8459; Match(KILL);
			State = 8463;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1160,_ctx) ) {
			case 1:
				{
				State = 8460; kill_process();
				}
				break;

			case 2:
				{
				State = 8461; kill_query_notification();
				}
				break;

			case 3:
				{
				State = 8462; kill_stats_job();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_processContext : ParserRuleContext {
		public IToken session_id;
		public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Kill_processContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_process; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_process(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_process(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_process(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_processContext kill_process() {
		Kill_processContext _localctx = new Kill_processContext(_ctx, State);
		EnterRule(_localctx, 660, RULE_kill_process);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8467;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1161,_ctx) ) {
			case 1:
				{
				State = 8465;
				_localctx.session_id = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==STRING) ) {
					_localctx.session_id = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 8466; Match(UOW);
				}
				break;
			}
			State = 8471;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1162,_ctx) ) {
			case 1:
				{
				State = 8469; Match(WITH);
				State = 8470; Match(STATUSONLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_query_notificationContext : ParserRuleContext {
		public IToken subscription_id;
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_query_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_query_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_query_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_query_notification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_query_notification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_query_notificationContext kill_query_notification() {
		Kill_query_notificationContext _localctx = new Kill_query_notificationContext(_ctx, State);
		EnterRule(_localctx, 662, RULE_kill_query_notification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8473; Match(QUERY);
			State = 8474; Match(NOTIFICATION);
			State = 8475; Match(SUBSCRIPTION);
			State = 8478;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1163,_ctx) ) {
			case 1:
				{
				State = 8476; Match(ALL);
				}
				break;

			case 2:
				{
				State = 8477; _localctx.subscription_id = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_stats_jobContext : ParserRuleContext {
		public IToken job_id;
		public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_stats_jobContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_stats_job; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_stats_job(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_stats_job(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKill_stats_job(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kill_stats_jobContext kill_stats_job() {
		Kill_stats_jobContext _localctx = new Kill_stats_jobContext(_ctx, State);
		EnterRule(_localctx, 664, RULE_kill_stats_job);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8480; Match(STATS);
			State = 8481; Match(JOB);
			State = 8482; _localctx.job_id = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statementContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return GetRuleContext<Execute_bodyContext>(0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statementContext execute_statement() {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, State);
		EnterRule(_localctx, 666, RULE_execute_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8484; Match(EXECUTE);
			State = 8485; execute_body();
			State = 8487;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1164,_ctx) ) {
			case 1:
				{
				State = 8486; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_body_batchContext : ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public Execute_body_batchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body_batch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body_batch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_body_batch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_body_batchContext execute_body_batch() {
		Execute_body_batchContext _localctx = new Execute_body_batchContext(_ctx, State);
		EnterRule(_localctx, 668, RULE_execute_body_batch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8489; func_proc_name_server_database_schema();
			State = 8498;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1166,_ctx) ) {
			case 1:
				{
				State = 8490; execute_statement_arg();
				State = 8495;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1165,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8491; Match(COMMA);
						State = 8492; execute_statement_arg();
						}
						} 
					}
					State = 8497;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1165,_ctx);
				}
				}
				break;
			}
			State = 8501;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1167,_ctx) ) {
			case 1:
				{
				State = 8500; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_bodyContext : ParserRuleContext {
		public IToken return_status;
		public Id_Context linkedServer;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public Execute_statement_argContext execute_statement_arg() {
			return GetRuleContext<Execute_statement_argContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_bodyContext execute_body() {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, State);
		EnterRule(_localctx, 670, RULE_execute_body);
		int _la;
		try {
			int _alt;
			State = 8536;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1175,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8505;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1168,_ctx) ) {
				case 1:
					{
					State = 8503; _localctx.return_status = Match(LOCAL_ID);
					State = 8504; Match(EQUAL);
					}
					break;
				}
				State = 8509;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1169,_ctx) ) {
				case 1:
					{
					State = 8507; func_proc_name_server_database_schema();
					}
					break;

				case 2:
					{
					State = 8508; execute_var_string();
					}
					break;
				}
				State = 8512;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1170,_ctx) ) {
				case 1:
					{
					State = 8511; execute_statement_arg();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8514; Match(LR_BRACKET);
				State = 8515; execute_var_string();
				State = 8520;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1171,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8516; Match(COMMA);
						State = 8517; execute_var_string();
						}
						} 
					}
					State = 8522;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1171,_ctx);
				}
				State = 8523; Match(RR_BRACKET);
				State = 8530;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1173,_ctx) ) {
				case 1:
					{
					State = 8525;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1172,_ctx) ) {
					case 1:
						{
						State = 8524; Match(AS);
						}
						break;
					}
					State = 8527;
					_la = _input.La(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 8528; Match(EQUAL);
					State = 8529; Match(STRING);
					}
					break;
				}
				State = 8534;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1174,_ctx) ) {
				case 1:
					{
					State = 8532; Match(AT_KEYWORD);
					State = 8533; _localctx.linkedServer = id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_argContext : ParserRuleContext {
		public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
			return GetRuleContext<Execute_statement_arg_unnamedContext>(0);
		}
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public Execute_statement_arg_namedContext[] execute_statement_arg_named() {
			return GetRuleContexts<Execute_statement_arg_namedContext>();
		}
		public Execute_statement_arg_namedContext execute_statement_arg_named(int i) {
			return GetRuleContext<Execute_statement_arg_namedContext>(i);
		}
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_argContext execute_statement_arg() {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, State);
		EnterRule(_localctx, 672, RULE_execute_statement_arg);
		try {
			int _alt;
			State = 8554;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1178,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8538; execute_statement_arg_unnamed();
				State = 8543;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1176,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8539; Match(COMMA);
						State = 8540; execute_statement_arg();
						}
						} 
					}
					State = 8545;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1176,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8546; execute_statement_arg_named();
				State = 8551;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1177,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8547; Match(COMMA);
						State = 8548; execute_statement_arg_named();
						}
						} 
					}
					State = 8553;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1177,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_arg_namedContext : ParserRuleContext {
		public IToken name;
		public Execute_parameterContext value;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Execute_parameterContext execute_parameter() {
			return GetRuleContext<Execute_parameterContext>(0);
		}
		public Execute_statement_arg_namedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg_named; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg_named(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg_named(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement_arg_named(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_arg_namedContext execute_statement_arg_named() {
		Execute_statement_arg_namedContext _localctx = new Execute_statement_arg_namedContext(_ctx, State);
		EnterRule(_localctx, 674, RULE_execute_statement_arg_named);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8556; _localctx.name = Match(LOCAL_ID);
			State = 8557; Match(EQUAL);
			State = 8558; _localctx.value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_arg_unnamedContext : ParserRuleContext {
		public Execute_parameterContext value;
		public Execute_parameterContext execute_parameter() {
			return GetRuleContext<Execute_parameterContext>(0);
		}
		public Execute_statement_arg_unnamedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg_unnamed; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg_unnamed(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg_unnamed(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement_arg_unnamed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
		Execute_statement_arg_unnamedContext _localctx = new Execute_statement_arg_unnamedContext(_ctx, State);
		EnterRule(_localctx, 676, RULE_execute_statement_arg_unnamed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8560; _localctx.value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_parameterContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public Execute_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_parameterContext execute_parameter() {
		Execute_parameterContext _localctx = new Execute_parameterContext(_ctx, State);
		EnterRule(_localctx, 678, RULE_execute_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8570;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1180,_ctx) ) {
			case 1:
				{
				State = 8562; constant();
				}
				break;

			case 2:
				{
				State = 8563; Match(LOCAL_ID);
				State = 8565;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1179,_ctx) ) {
				case 1:
					{
					State = 8564;
					_la = _input.La(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 8567; id_();
				}
				break;

			case 4:
				{
				State = 8568; Match(DEFAULT);
				}
				break;

			case 5:
				{
				State = 8569; Match(NULL_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_var_stringContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_var_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_var_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_var_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_var_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_var_stringContext execute_var_string() {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, State);
		EnterRule(_localctx, 680, RULE_execute_var_string);
		int _la;
		try {
			State = 8577;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1182,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8572; Match(LOCAL_ID);
				State = 8574;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1181,_ctx) ) {
				case 1:
					{
					State = 8573;
					_la = _input.La(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8576; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_statementContext : ParserRuleContext {
		public Table_nameContext on_id;
		public Principal_idContext _principal_id;
		public IList<Principal_idContext> _to_principal = new List<Principal_idContext>();
		public Principal_idContext as_principal;
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Principal_idContext[] principal_id() {
			return GetRuleContexts<Principal_idContext>();
		}
		public Principal_idContext principal_id(int i) {
			return GetRuleContext<Principal_idContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return GetRuleContext<Grant_permissionContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Class_type_for_grantContext class_type_for_grant() {
			return GetRuleContext<Class_type_for_grantContext>(0);
		}
		public ITerminalNode REVERT() { return GetToken(TSqlParser.REVERT, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return GetRuleContext<Open_keyContext>(0);
		}
		public Close_keyContext close_key() {
			return GetRuleContext<Close_keyContext>(0);
		}
		public Create_keyContext create_key() {
			return GetRuleContext<Create_keyContext>(0);
		}
		public Create_certificateContext create_certificate() {
			return GetRuleContext<Create_certificateContext>(0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSecurity_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSecurity_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecurity_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Security_statementContext security_statement() {
		Security_statementContext _localctx = new Security_statementContext(_ctx, State);
		EnterRule(_localctx, 682, RULE_security_statement);
		try {
			int _alt;
			State = 8643;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1195,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8579; execute_clause();
				State = 8581;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1183,_ctx) ) {
				case 1:
					{
					State = 8580; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8583; Match(GRANT);
				State = 8595;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1186,_ctx) ) {
				case 1:
					{
					State = 8584; Match(ALL);
					State = 8586;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1184,_ctx) ) {
					case 1:
						{
						State = 8585; Match(PRIVILEGES);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 8588; grant_permission();
					State = 8593;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1185,_ctx) ) {
					case 1:
						{
						State = 8589; Match(LR_BRACKET);
						State = 8590; column_name_list();
						State = 8591; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 8604;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1188,_ctx) ) {
				case 1:
					{
					State = 8597; Match(ON);
					State = 8601;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1187,_ctx) ) {
					case 1:
						{
						State = 8598; class_type_for_grant();
						State = 8599; Match(DOUBLE_COLON);
						}
						break;
					}
					State = 8603; _localctx.on_id = table_name();
					}
					break;
				}
				State = 8606; Match(TO);
				State = 8607; _localctx._principal_id = principal_id();
				_localctx._to_principal.Add(_localctx._principal_id);
				State = 8612;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1189,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8608; Match(COMMA);
						State = 8609; _localctx._principal_id = principal_id();
						_localctx._to_principal.Add(_localctx._principal_id);
						}
						} 
					}
					State = 8614;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1189,_ctx);
				}
				State = 8618;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1190,_ctx) ) {
				case 1:
					{
					State = 8615; Match(WITH);
					State = 8616; Match(GRANT);
					State = 8617; Match(OPTION);
					}
					break;
				}
				State = 8622;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1191,_ctx) ) {
				case 1:
					{
					State = 8620; Match(AS);
					State = 8621; _localctx.as_principal = principal_id();
					}
					break;
				}
				State = 8625;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1192,_ctx) ) {
				case 1:
					{
					State = 8624; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8627; Match(REVERT);
				State = 8634;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1193,_ctx) ) {
				case 1:
					{
					State = 8628; Match(LR_BRACKET);
					State = 8629; Match(WITH);
					State = 8630; Match(COOKIE);
					State = 8631; Match(EQUAL);
					State = 8632; Match(LOCAL_ID);
					State = 8633; Match(RR_BRACKET);
					}
					break;
				}
				State = 8637;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1194,_ctx) ) {
				case 1:
					{
					State = 8636; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8639; open_key();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8640; close_key();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8641; create_key();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8642; create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Principal_idContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(TSqlParser.PUBLIC, 0); }
		public Principal_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrincipal_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrincipal_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrincipal_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Principal_idContext principal_id() {
		Principal_idContext _localctx = new Principal_idContext(_ctx, State);
		EnterRule(_localctx, 684, RULE_principal_id);
		try {
			State = 8648;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1196,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8646; id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8647; Match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return GetRuleContext<Existing_keysContext>(0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return GetRuleContext<Generate_new_keysContext>(0);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_certificateContext create_certificate() {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, State);
		EnterRule(_localctx, 686, RULE_create_certificate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8650; Match(CREATE);
			State = 8651; Match(CERTIFICATE);
			State = 8652; _localctx.certificate_name = id_();
			State = 8655;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1197,_ctx) ) {
			case 1:
				{
				State = 8653; Match(AUTHORIZATION);
				State = 8654; _localctx.user_name = id_();
				}
				break;
			}
			State = 8660;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1198,_ctx) ) {
			case 1:
				{
				State = 8657; Match(FROM);
				State = 8658; existing_keys();
				}
				break;

			case 2:
				{
				State = 8659; generate_new_keys();
				}
				break;
			}
			State = 8668;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1199,_ctx) ) {
			case 1:
				{
				State = 8662; Match(ACTIVE);
				State = 8663; Match(FOR);
				State = 8664; Match(BEGIN);
				State = 8665; Match(DIALOG);
				State = 8666; Match(EQUAL);
				State = 8667;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Existing_keysContext : ParserRuleContext {
		public Id_Context assembly_name;
		public IToken path_to_file;
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Private_key_optionsContext private_key_options() {
			return GetRuleContext<Private_key_optionsContext>(0);
		}
		public Existing_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existing_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExisting_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExisting_keys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExisting_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Existing_keysContext existing_keys() {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, State);
		EnterRule(_localctx, 688, RULE_existing_keys);
		try {
			State = 8687;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1202,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8670; Match(ASSEMBLY);
				State = 8671; _localctx.assembly_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8673;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1200,_ctx) ) {
				case 1:
					{
					State = 8672; Match(EXECUTABLE);
					}
					break;
				}
				State = 8675; Match(FILE);
				State = 8676; Match(EQUAL);
				State = 8677; _localctx.path_to_file = Match(STRING);
				State = 8685;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1201,_ctx) ) {
				case 1:
					{
					State = 8678; Match(WITH);
					State = 8679; Match(PRIVATE);
					State = 8680; Match(KEY);
					State = 8681; Match(LR_BRACKET);
					State = 8682; private_key_options();
					State = 8683; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Private_key_optionsContext : ParserRuleContext {
		public IToken path;
		public IToken password;
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_private_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrivate_key_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrivate_key_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivate_key_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Private_key_optionsContext private_key_options() {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, State);
		EnterRule(_localctx, 690, RULE_private_key_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8689;
			_la = _input.La(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 8690; Match(EQUAL);
			State = 8691; _localctx.path = Match(STRING);
			State = 8698;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1203,_ctx) ) {
			case 1:
				{
				State = 8692; Match(COMMA);
				State = 8693;
				_la = _input.La(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8694; Match(BY);
				State = 8695; Match(PASSWORD);
				State = 8696; Match(EQUAL);
				State = 8697; _localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_new_keysContext : ParserRuleContext {
		public IToken password;
		public IToken certificate_subject_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public Date_optionsContext[] date_options() {
			return GetRuleContexts<Date_optionsContext>();
		}
		public Date_optionsContext date_options(int i) {
			return GetRuleContext<Date_optionsContext>(i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_new_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGenerate_new_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGenerate_new_keys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenerate_new_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generate_new_keysContext generate_new_keys() {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, State);
		EnterRule(_localctx, 692, RULE_generate_new_keys);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1204,_ctx) ) {
			case 1:
				{
				State = 8700; Match(ENCRYPTION);
				State = 8701; Match(BY);
				State = 8702; Match(PASSWORD);
				State = 8703; Match(EQUAL);
				State = 8704; _localctx.password = Match(STRING);
				}
				break;
			}
			State = 8707; Match(WITH);
			State = 8708; Match(SUBJECT);
			State = 8709; Match(EQUAL);
			State = 8710; _localctx.certificate_subject_name = Match(STRING);
			State = 8715;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1205,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8711; Match(COMMA);
					State = 8712; date_options();
					}
					} 
				}
				State = 8717;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1205,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_optionsContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_optionsContext date_options() {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, State);
		EnterRule(_localctx, 694, RULE_date_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8718;
			_la = _input.La(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 8719; Match(EQUAL);
			State = 8720; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public IToken password;
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return GetRuleContext<Decryption_mechanismContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_keyContext open_key() {
		Open_keyContext _localctx = new Open_keyContext(_ctx, State);
		EnterRule(_localctx, 696, RULE_open_key);
		try {
			State = 8738;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1206,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8722; Match(OPEN);
				State = 8723; Match(SYMMETRIC);
				State = 8724; Match(KEY);
				State = 8725; _localctx.key_name = id_();
				State = 8726; Match(DECRYPTION);
				State = 8727; Match(BY);
				State = 8728; decryption_mechanism();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8730; Match(OPEN);
				State = 8731; Match(MASTER);
				State = 8732; Match(KEY);
				State = 8733; Match(DECRYPTION);
				State = 8734; Match(BY);
				State = 8735; Match(PASSWORD);
				State = 8736; Match(EQUAL);
				State = 8737; _localctx.password = Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClose_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClose_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClose_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Close_keyContext close_key() {
		Close_keyContext _localctx = new Close_keyContext(_ctx, State);
		EnterRule(_localctx, 698, RULE_close_key);
		try {
			State = 8751;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1207,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8740; Match(CLOSE);
				State = 8741; Match(SYMMETRIC);
				State = 8742; Match(KEY);
				State = 8743; _localctx.key_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8744; Match(CLOSE);
				State = 8745; Match(ALL);
				State = 8746; Match(SYMMETRIC);
				State = 8747; Match(KEYS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8748; Match(CLOSE);
				State = 8749; Match(MASTER);
				State = 8750; Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_keyContext : ParserRuleContext {
		public IToken password;
		public Id_Context key_name;
		public Id_Context user_name;
		public Id_Context provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Key_optionsContext[] key_options() {
			return GetRuleContexts<Key_optionsContext>();
		}
		public Key_optionsContext key_options(int i) {
			return GetRuleContext<Key_optionsContext>(i);
		}
		public Encryption_mechanismContext[] encryption_mechanism() {
			return GetRuleContexts<Encryption_mechanismContext>();
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return GetRuleContext<Encryption_mechanismContext>(i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_keyContext create_key() {
		Create_keyContext _localctx = new Create_keyContext(_ctx, State);
		EnterRule(_localctx, 700, RULE_create_key);
		try {
			int _alt;
			State = 8788;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1213,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8753; Match(CREATE);
				State = 8754; Match(MASTER);
				State = 8755; Match(KEY);
				State = 8756; Match(ENCRYPTION);
				State = 8757; Match(BY);
				State = 8758; Match(PASSWORD);
				State = 8759; Match(EQUAL);
				State = 8760; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8761; Match(CREATE);
				State = 8762; Match(SYMMETRIC);
				State = 8763; Match(KEY);
				State = 8764; _localctx.key_name = id_();
				State = 8767;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1208,_ctx) ) {
				case 1:
					{
					State = 8765; Match(AUTHORIZATION);
					State = 8766; _localctx.user_name = id_();
					}
					break;
				}
				State = 8772;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1209,_ctx) ) {
				case 1:
					{
					State = 8769; Match(FROM);
					State = 8770; Match(PROVIDER);
					State = 8771; _localctx.provider_name = id_();
					}
					break;
				}
				State = 8774; Match(WITH);
				State = 8784;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8779;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1210,_ctx) ) {
						case 1:
							{
							State = 8775; key_options();
							}
							break;

						case 2:
							{
							State = 8776; Match(ENCRYPTION);
							State = 8777; Match(BY);
							State = 8778; encryption_mechanism();
							}
							break;
						}
						State = 8782;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1211,_ctx) ) {
						case 1:
							{
							State = 8781; Match(COMMA);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8786;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1212,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_optionsContext : ParserRuleContext {
		public IToken pass_phrase;
		public IToken identity_phrase;
		public IToken key_name_in_provider;
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return GetRuleContext<AlgorithmContext>(0);
		}
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKey_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKey_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_optionsContext key_options() {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, State);
		EnterRule(_localctx, 702, RULE_key_options);
		int _la;
		try {
			State = 8805;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1214,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8790; Match(KEY_SOURCE);
				State = 8791; Match(EQUAL);
				State = 8792; _localctx.pass_phrase = Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8793; Match(ALGORITHM);
				State = 8794; Match(EQUAL);
				State = 8795; algorithm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8796; Match(IDENTITY_VALUE);
				State = 8797; Match(EQUAL);
				State = 8798; _localctx.identity_phrase = Match(STRING);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8799; Match(PROVIDER_KEY_NAME);
				State = 8800; Match(EQUAL);
				State = 8801; _localctx.key_name_in_provider = Match(STRING);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8802; Match(CREATION_DISPOSITION);
				State = 8803; Match(EQUAL);
				State = 8804;
				_la = _input.La(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlgorithmContext : ParserRuleContext {
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_algorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlgorithmContext algorithm() {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, State);
		EnterRule(_localctx, 704, RULE_algorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8807;
			_la = _input.La(1);
			if ( !(((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (AES_128 - 199)) | (1L << (AES_192 - 199)) | (1L << (AES_256 - 199)))) != 0) || _la==DES || _la==DESX || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (RC2 - 492)) | (1L << (RC4 - 492)) | (1L << (RC4_128 - 492)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encryption_mechanismContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEncryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEncryption_mechanism(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncryption_mechanism(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Encryption_mechanismContext encryption_mechanism() {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, State);
		EnterRule(_localctx, 706, RULE_encryption_mechanism);
		try {
			State = 8820;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1215,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8809; Match(CERTIFICATE);
				State = 8810; _localctx.certificate_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8811; Match(ASYMMETRIC);
				State = 8812; Match(KEY);
				State = 8813; _localctx.asym_key_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8814; Match(SYMMETRIC);
				State = 8815; Match(KEY);
				State = 8816; _localctx.decrypting_Key_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8817; Match(PASSWORD);
				State = 8818; Match(EQUAL);
				State = 8819; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decryption_mechanismContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDecryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDecryption_mechanism(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecryption_mechanism(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decryption_mechanismContext decryption_mechanism() {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, State);
		EnterRule(_localctx, 708, RULE_decryption_mechanism);
		try {
			State = 8845;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1218,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8822; Match(CERTIFICATE);
				State = 8823; _localctx.certificate_name = id_();
				State = 8828;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1216,_ctx) ) {
				case 1:
					{
					State = 8824; Match(WITH);
					State = 8825; Match(PASSWORD);
					State = 8826; Match(EQUAL);
					State = 8827; Match(STRING);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8830; Match(ASYMMETRIC);
				State = 8831; Match(KEY);
				State = 8832; _localctx.asym_key_name = id_();
				State = 8837;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1217,_ctx) ) {
				case 1:
					{
					State = 8833; Match(WITH);
					State = 8834; Match(PASSWORD);
					State = 8835; Match(EQUAL);
					State = 8836; Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8839; Match(SYMMETRIC);
				State = 8840; Match(KEY);
				State = 8841; _localctx.decrypting_Key_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8842; Match(PASSWORD);
				State = 8843; Match(EQUAL);
				State = 8844; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissionContext : ParserRuleContext {
		public ITerminalNode ADMINISTER() { return GetToken(TSqlParser.ADMINISTER, 0); }
		public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		public ITerminalNode OPERATIONS() { return GetToken(TSqlParser.OPERATIONS, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode RESOURCES() { return GetToken(TSqlParser.RESOURCES, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(TSqlParser.SETTINGS, 0); }
		public ITerminalNode TRACE() { return GetToken(TSqlParser.TRACE, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode CONNECTION() { return GetToken(TSqlParser.CONNECTION, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode DATASPACE() { return GetToken(TSqlParser.DATASPACE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode LINKED() { return GetToken(TSqlParser.LINKED, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode MASK() { return GetToken(TSqlParser.MASK, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode DDL() { return GetToken(TSqlParser.DDL, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode AUTHENTICATE() { return GetToken(TSqlParser.AUTHENTICATE, 0); }
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode CHECKPOINT() { return GetToken(TSqlParser.CHECKPOINT, 0); }
		public ITerminalNode CONNECT() { return GetToken(TSqlParser.CONNECT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode SCRIPT() { return GetToken(TSqlParser.SCRIPT, 0); }
		public ITerminalNode ACCESS() { return GetToken(TSqlParser.ACCESS, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SECURABLES() { return GetToken(TSqlParser.SECURABLES, 0); }
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		public ITerminalNode SUBSCRIBE() { return GetToken(TSqlParser.SUBSCRIBE, 0); }
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode NOTIFICATIONS() { return GetToken(TSqlParser.NOTIFICATIONS, 0); }
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode OWNERSHIP() { return GetToken(TSqlParser.OWNERSHIP, 0); }
		public ITerminalNode UNMASK() { return GetToken(TSqlParser.UNMASK, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode CHANGE() { return GetToken(TSqlParser.CHANGE, 0); }
		public ITerminalNode TRACKING() { return GetToken(TSqlParser.TRACKING, 0); }
		public ITerminalNode DEFINITION() { return GetToken(TSqlParser.DEFINITION, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permission; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGrant_permission(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGrant_permission(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_permission(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissionContext grant_permission() {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, State);
		EnterRule(_localctx, 710, RULE_grant_permission);
		int _la;
		try {
			State = 9060;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1235,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8847; Match(ADMINISTER);
				State = 8853;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1219,_ctx) ) {
				case 1:
					{
					State = 8848; Match(BULK);
					State = 8849; Match(OPERATIONS);
					}
					break;

				case 2:
					{
					State = 8850; Match(DATABASE);
					State = 8851; Match(BULK);
					State = 8852; Match(OPERATIONS);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8855; Match(ALTER);
				State = 8926;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1224,_ctx) ) {
				case 1:
					{
					State = 8856; Match(ANY);
					State = 8919;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1223,_ctx) ) {
					case 1:
						{
						State = 8857; Match(APPLICATION);
						State = 8858; Match(ROLE);
						}
						break;

					case 2:
						{
						State = 8859; Match(ASSEMBLY);
						}
						break;

					case 3:
						{
						State = 8860; Match(ASYMMETRIC);
						State = 8861; Match(KEY);
						}
						break;

					case 4:
						{
						State = 8862; Match(AVAILABILITY);
						State = 8863; Match(GROUP);
						}
						break;

					case 5:
						{
						State = 8864; Match(CERTIFICATE);
						}
						break;

					case 6:
						{
						State = 8865; Match(COLUMN);
						State = 8870;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1220,_ctx) ) {
						case 1:
							{
							State = 8866; Match(ENCRYPTION);
							State = 8867; Match(KEY);
							}
							break;

						case 2:
							{
							State = 8868; Match(MASTER);
							State = 8869; Match(KEY);
							}
							break;
						}
						}
						break;

					case 7:
						{
						State = 8872; Match(CONNECTION);
						}
						break;

					case 8:
						{
						State = 8873; Match(CONTRACT);
						}
						break;

					case 9:
						{
						State = 8874; Match(CREDENTIAL);
						}
						break;

					case 10:
						{
						State = 8875; Match(DATABASE);
						State = 8883;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1221,_ctx) ) {
						case 1:
							{
							State = 8876; Match(AUDIT);
							}
							break;

						case 2:
							{
							State = 8877; Match(DDL);
							State = 8878; Match(TRIGGER);
							}
							break;

						case 3:
							{
							State = 8879; Match(EVENT);
							State = 8880;
							_la = _input.La(1);
							if ( !(_la==NOTIFICATION || _la==SESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 8881; Match(SCOPED);
							State = 8882; Match(CONFIGURATION);
							}
							break;
						}
						}
						break;

					case 11:
						{
						State = 8885; Match(DATASPACE);
						}
						break;

					case 12:
						{
						State = 8886; Match(ENDPOINT);
						}
						break;

					case 13:
						{
						State = 8887; Match(EVENT);
						State = 8888;
						_la = _input.La(1);
						if ( !(_la==NOTIFICATION || _la==SESSION) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 14:
						{
						State = 8889; Match(EXTERNAL);
						State = 8895;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1222,_ctx) ) {
						case 1:
							{
							State = 8890; Match(DATA);
							State = 8891; Match(SOURCE);
							}
							break;

						case 2:
							{
							State = 8892; Match(FILE);
							State = 8893; Match(FORMAT);
							}
							break;

						case 3:
							{
							State = 8894; Match(LIBRARY);
							}
							break;
						}
						}
						break;

					case 15:
						{
						State = 8897; Match(FULLTEXT);
						State = 8898; Match(CATALOG);
						}
						break;

					case 16:
						{
						State = 8899; Match(LINKED);
						State = 8900; Match(SERVER);
						}
						break;

					case 17:
						{
						State = 8901; Match(LOGIN);
						}
						break;

					case 18:
						{
						State = 8902; Match(MASK);
						}
						break;

					case 19:
						{
						State = 8903; Match(MESSAGE);
						State = 8904; Match(TYPE);
						}
						break;

					case 20:
						{
						State = 8905; Match(REMOTE);
						State = 8906; Match(SERVICE);
						State = 8907; Match(BINDING);
						}
						break;

					case 21:
						{
						State = 8908; Match(ROLE);
						}
						break;

					case 22:
						{
						State = 8909; Match(ROUTE);
						}
						break;

					case 23:
						{
						State = 8910; Match(SCHEMA);
						}
						break;

					case 24:
						{
						State = 8911; Match(SECURITY);
						State = 8912; Match(POLICY);
						}
						break;

					case 25:
						{
						State = 8913; Match(SERVER);
						State = 8914;
						_la = _input.La(1);
						if ( !(_la==AUDIT || _la==ROLE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 26:
						{
						State = 8915; Match(SERVICE);
						}
						break;

					case 27:
						{
						State = 8916; Match(SYMMETRIC);
						State = 8917; Match(KEY);
						}
						break;

					case 28:
						{
						State = 8918; Match(USER);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 8921; Match(RESOURCES);
					}
					break;

				case 3:
					{
					State = 8922; Match(SERVER);
					State = 8923; Match(STATE);
					}
					break;

				case 4:
					{
					State = 8924; Match(SETTINGS);
					}
					break;

				case 5:
					{
					State = 8925; Match(TRACE);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8928; Match(AUTHENTICATE);
				State = 8930;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1225,_ctx) ) {
				case 1:
					{
					State = 8929; Match(SERVER);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8932; Match(BACKUP);
				State = 8933;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==LOG) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8934; Match(CHECKPOINT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8935; Match(CONNECT);
				State = 8940;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1226,_ctx) ) {
				case 1:
					{
					State = 8936; Match(ANY);
					State = 8937; Match(DATABASE);
					}
					break;

				case 2:
					{
					State = 8938; Match(REPLICATION);
					}
					break;

				case 3:
					{
					State = 8939; Match(SQL);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8942; Match(CONTROL);
				State = 8944;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1227,_ctx) ) {
				case 1:
					{
					State = 8943; Match(SERVER);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8946; Match(CREATE);
				State = 9000;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1229,_ctx) ) {
				case 1:
					{
					State = 8947; Match(AGGREGATE);
					}
					break;

				case 2:
					{
					State = 8948; Match(ANY);
					State = 8949; Match(DATABASE);
					}
					break;

				case 3:
					{
					State = 8950; Match(ASSEMBLY);
					}
					break;

				case 4:
					{
					State = 8951; Match(ASYMMETRIC);
					State = 8952; Match(KEY);
					}
					break;

				case 5:
					{
					State = 8953; Match(AVAILABILITY);
					State = 8954; Match(GROUP);
					}
					break;

				case 6:
					{
					State = 8955; Match(CERTIFICATE);
					}
					break;

				case 7:
					{
					State = 8956; Match(CONTRACT);
					}
					break;

				case 8:
					{
					State = 8957; Match(DATABASE);
					State = 8961;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1228,_ctx) ) {
					case 1:
						{
						State = 8958; Match(DDL);
						State = 8959; Match(EVENT);
						State = 8960; Match(NOTIFICATION);
						}
						break;
					}
					}
					break;

				case 9:
					{
					State = 8963; Match(DDL);
					State = 8964; Match(EVENT);
					State = 8965; Match(NOTIFICATION);
					}
					break;

				case 10:
					{
					State = 8966; Match(DEFAULT);
					}
					break;

				case 11:
					{
					State = 8967; Match(ENDPOINT);
					}
					break;

				case 12:
					{
					State = 8968; Match(EXTERNAL);
					State = 8969; Match(LIBRARY);
					}
					break;

				case 13:
					{
					State = 8970; Match(FULLTEXT);
					State = 8971; Match(CATALOG);
					}
					break;

				case 14:
					{
					State = 8972; Match(FUNCTION);
					}
					break;

				case 15:
					{
					State = 8973; Match(MESSAGE);
					State = 8974; Match(TYPE);
					}
					break;

				case 16:
					{
					State = 8975; Match(PROCEDURE);
					}
					break;

				case 17:
					{
					State = 8976; Match(QUEUE);
					}
					break;

				case 18:
					{
					State = 8977; Match(REMOTE);
					State = 8978; Match(SERVICE);
					State = 8979; Match(BINDING);
					}
					break;

				case 19:
					{
					State = 8980; Match(ROLE);
					}
					break;

				case 20:
					{
					State = 8981; Match(ROUTE);
					}
					break;

				case 21:
					{
					State = 8982; Match(RULE);
					}
					break;

				case 22:
					{
					State = 8983; Match(SCHEMA);
					}
					break;

				case 23:
					{
					State = 8984; Match(SEQUENCE);
					}
					break;

				case 24:
					{
					State = 8985; Match(SERVER);
					State = 8986; Match(ROLE);
					}
					break;

				case 25:
					{
					State = 8987; Match(SERVICE);
					}
					break;

				case 26:
					{
					State = 8988; Match(SYMMETRIC);
					State = 8989; Match(KEY);
					}
					break;

				case 27:
					{
					State = 8990; Match(SYNONYM);
					}
					break;

				case 28:
					{
					State = 8991; Match(TABLE);
					}
					break;

				case 29:
					{
					State = 8992; Match(TRACE);
					State = 8993; Match(EVENT);
					State = 8994; Match(NOTIFICATION);
					}
					break;

				case 30:
					{
					State = 8995; Match(TYPE);
					}
					break;

				case 31:
					{
					State = 8996; Match(VIEW);
					}
					break;

				case 32:
					{
					State = 8997; Match(XML);
					State = 8998; Match(SCHEMA);
					State = 8999; Match(COLLECTION);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9002; Match(DELETE);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9003; Match(EXECUTE);
				State = 9007;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1230,_ctx) ) {
				case 1:
					{
					State = 9004; Match(ANY);
					State = 9005; Match(EXTERNAL);
					State = 9006; Match(SCRIPT);
					}
					break;
				}
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9009; Match(EXTERNAL);
				State = 9010; Match(ACCESS);
				State = 9011; Match(ASSEMBLY);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9012; Match(IMPERSONATE);
				State = 9015;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1231,_ctx) ) {
				case 1:
					{
					State = 9013; Match(ANY);
					State = 9014; Match(LOGIN);
					}
					break;
				}
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9017; Match(INSERT);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9018; Match(KILL);
				State = 9019; Match(DATABASE);
				State = 9020; Match(CONNECTION);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9021; Match(RECEIVE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9022; Match(REFERENCES);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9023; Match(SELECT);
				State = 9027;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1232,_ctx) ) {
				case 1:
					{
					State = 9024; Match(ALL);
					State = 9025; Match(USER);
					State = 9026; Match(SECURABLES);
					}
					break;
				}
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 9029; Match(SEND);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 9030; Match(SHOWPLAN);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 9031; Match(SHUTDOWN);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 9032; Match(SUBSCRIBE);
				State = 9033; Match(QUERY);
				State = 9034; Match(NOTIFICATIONS);
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 9035; Match(TAKE);
				State = 9036; Match(OWNERSHIP);
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 9037; Match(UNMASK);
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 9038; Match(UNSAFE);
				State = 9039; Match(ASSEMBLY);
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 9040; Match(UPDATE);
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 9041; Match(VIEW);
				State = 9058;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1234,_ctx) ) {
				case 1:
					{
					State = 9042; Match(ANY);
					State = 9049;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1233,_ctx) ) {
					case 1:
						{
						State = 9043; Match(DATABASE);
						}
						break;

					case 2:
						{
						State = 9044; Match(DEFINITION);
						}
						break;

					case 3:
						{
						State = 9045; Match(COLUMN);
						State = 9046;
						_la = _input.La(1);
						if ( !(_la==ENCRYPTION || _la==MASTER) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9047; Match(KEY);
						State = 9048; Match(DEFINITION);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 9051; Match(CHANGE);
					State = 9052; Match(TRACKING);
					}
					break;

				case 3:
					{
					State = 9053; Match(DATABASE);
					State = 9054; Match(STATE);
					}
					break;

				case 4:
					{
					State = 9055; Match(DEFINITION);
					}
					break;

				case 5:
					{
					State = 9056; Match(SERVER);
					State = 9057; Match(STATE);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public Id_Context member_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Set_specialContext set_special() {
			return GetRuleContext<Set_specialContext>(0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(_ctx, State);
		EnterRule(_localctx, 712, RULE_set_statement);
		try {
			State = 9101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1243,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9062; Match(SET);
				State = 9063; Match(LOCAL_ID);
				State = 9066;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1236,_ctx) ) {
				case 1:
					{
					State = 9064; Match(DOT);
					State = 9065; _localctx.member_name = id_();
					}
					break;
				}
				State = 9068; Match(EQUAL);
				State = 9069; expression(0);
				State = 9071;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1237,_ctx) ) {
				case 1:
					{
					State = 9070; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9073; Match(SET);
				State = 9074; Match(LOCAL_ID);
				State = 9075; assignment_operator();
				State = 9076; expression(0);
				State = 9078;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1238,_ctx) ) {
				case 1:
					{
					State = 9077; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9080; Match(SET);
				State = 9081; Match(LOCAL_ID);
				State = 9082; Match(EQUAL);
				State = 9083; Match(CURSOR);
				State = 9084; declare_set_cursor_common();
				State = 9095;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1241,_ctx) ) {
				case 1:
					{
					State = 9085; Match(FOR);
					State = 9093;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1240,_ctx) ) {
					case 1:
						{
						State = 9086; Match(READ);
						State = 9087; Match(ONLY);
						}
						break;

					case 2:
						{
						State = 9088; Match(UPDATE);
						State = 9091;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1239,_ctx) ) {
						case 1:
							{
							State = 9089; Match(OF);
							State = 9090; column_name_list();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 9098;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1242,_ctx) ) {
				case 1:
					{
					State = 9097; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9100; set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DISTRIBUTED() { return GetToken(TSqlParser.DISTRIBUTED, 0); }
		public ITerminalNode TRAN() { return GetToken(TSqlParser.TRAN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSqlParser.COMMIT, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode SAVE() { return GetToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTransaction_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTransaction_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_statementContext transaction_statement() {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, State);
		EnterRule(_localctx, 714, RULE_transaction_statement);
		int _la;
		try {
			State = 9184;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1262,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9103; Match(BEGIN);
				State = 9104; Match(DISTRIBUTED);
				State = 9105;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9108;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1244,_ctx) ) {
				case 1:
					{
					State = 9106; id_();
					}
					break;

				case 2:
					{
					State = 9107; Match(LOCAL_ID);
					}
					break;
				}
				State = 9111;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1245,_ctx) ) {
				case 1:
					{
					State = 9110; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9113; Match(BEGIN);
				State = 9114;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9124;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1248,_ctx) ) {
				case 1:
					{
					State = 9117;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1246,_ctx) ) {
					case 1:
						{
						State = 9115; id_();
						}
						break;

					case 2:
						{
						State = 9116; Match(LOCAL_ID);
						}
						break;
					}
					State = 9122;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1247,_ctx) ) {
					case 1:
						{
						State = 9119; Match(WITH);
						State = 9120; Match(MARK);
						State = 9121; Match(STRING);
						}
						break;
					}
					}
					break;
				}
				State = 9127;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1249,_ctx) ) {
				case 1:
					{
					State = 9126; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9129; Match(COMMIT);
				State = 9130;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9143;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1252,_ctx) ) {
				case 1:
					{
					State = 9133;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1250,_ctx) ) {
					case 1:
						{
						State = 9131; id_();
						}
						break;

					case 2:
						{
						State = 9132; Match(LOCAL_ID);
						}
						break;
					}
					State = 9141;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1251,_ctx) ) {
					case 1:
						{
						State = 9135; Match(WITH);
						State = 9136; Match(LR_BRACKET);
						State = 9137; Match(DELAYED_DURABILITY);
						State = 9138; Match(EQUAL);
						State = 9139;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9140; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 9146;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1253,_ctx) ) {
				case 1:
					{
					State = 9145; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9148; Match(COMMIT);
				State = 9150;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1254,_ctx) ) {
				case 1:
					{
					State = 9149; Match(WORK);
					}
					break;
				}
				State = 9153;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1255,_ctx) ) {
				case 1:
					{
					State = 9152; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9155; Match(COMMIT);
				State = 9156; id_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9157; Match(ROLLBACK);
				State = 9158; id_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9159; Match(ROLLBACK);
				State = 9160;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9163;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1256,_ctx) ) {
				case 1:
					{
					State = 9161; id_();
					}
					break;

				case 2:
					{
					State = 9162; Match(LOCAL_ID);
					}
					break;
				}
				State = 9166;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1257,_ctx) ) {
				case 1:
					{
					State = 9165; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9168; Match(ROLLBACK);
				State = 9170;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1258,_ctx) ) {
				case 1:
					{
					State = 9169; Match(WORK);
					}
					break;
				}
				State = 9173;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1259,_ctx) ) {
				case 1:
					{
					State = 9172; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9175; Match(SAVE);
				State = 9176;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9179;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1260,_ctx) ) {
				case 1:
					{
					State = 9177; id_();
					}
					break;

				case 2:
					{
					State = 9178; Match(LOCAL_ID);
					}
					break;
				}
				State = 9182;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1261,_ctx) ) {
				case 1:
					{
					State = 9181; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_batch_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO_BATCH() { return GetToken(TSqlParser.GO_BATCH, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_batch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_batch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_batch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_batch_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGo_batch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Go_batch_statementContext go_batch_statement() {
		Go_batch_statementContext _localctx = new Go_batch_statementContext(_ctx, State);
		EnterRule(_localctx, 716, RULE_go_batch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9186; Match(GO_BATCH);
			State = 9188;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1263,_ctx) ) {
			case 1:
				{
				State = 9187; _localctx.count = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGo_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Go_statementContext go_statement() {
		Go_statementContext _localctx = new Go_statementContext(_ctx, State);
		EnterRule(_localctx, 718, RULE_go_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9190; Match(GO);
			State = 9192;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1264,_ctx) ) {
			case 1:
				{
				State = 9191; _localctx.count = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public Id_Context database;
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(_ctx, State);
		EnterRule(_localctx, 720, RULE_use_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9194; Match(USE);
			State = 9195; _localctx.database = id_();
			State = 9197;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1265,_ctx) ) {
			case 1:
				{
				State = 9196; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setuser_statementContext : ParserRuleContext {
		public IToken user;
		public ITerminalNode SETUSER() { return GetToken(TSqlParser.SETUSER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setuser_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSetuser_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSetuser_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetuser_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Setuser_statementContext setuser_statement() {
		Setuser_statementContext _localctx = new Setuser_statementContext(_ctx, State);
		EnterRule(_localctx, 722, RULE_setuser_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9199; Match(SETUSER);
			State = 9201;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1266,_ctx) ) {
			case 1:
				{
				State = 9200; _localctx.user = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reconfigure_statementContext : ParserRuleContext {
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public Reconfigure_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reconfigure_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReconfigure_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReconfigure_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReconfigure_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reconfigure_statementContext reconfigure_statement() {
		Reconfigure_statementContext _localctx = new Reconfigure_statementContext(_ctx, State);
		EnterRule(_localctx, 724, RULE_reconfigure_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9203; Match(RECONFIGURE);
			State = 9206;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1267,_ctx) ) {
			case 1:
				{
				State = 9204; Match(WITH);
				State = 9205; Match(OVERRIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shutdown_statementContext : ParserRuleContext {
		public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public Shutdown_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdown_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterShutdown_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitShutdown_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShutdown_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shutdown_statementContext shutdown_statement() {
		Shutdown_statementContext _localctx = new Shutdown_statementContext(_ctx, State);
		EnterRule(_localctx, 726, RULE_shutdown_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9208; Match(SHUTDOWN);
			State = 9211;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1268,_ctx) ) {
			case 1:
				{
				State = 9209; Match(WITH);
				State = 9210; Match(NOWAIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checkpoint_statementContext : ParserRuleContext {
		public IToken checkPointDuration;
		public ITerminalNode CHECKPOINT() { return GetToken(TSqlParser.CHECKPOINT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Checkpoint_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpoint_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCheckpoint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCheckpoint_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckpoint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Checkpoint_statementContext checkpoint_statement() {
		Checkpoint_statementContext _localctx = new Checkpoint_statementContext(_ctx, State);
		EnterRule(_localctx, 728, RULE_checkpoint_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9213; Match(CHECKPOINT);
			State = 9215;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1269,_ctx) ) {
			case 1:
				{
				State = 9214; _localctx.checkPointDuration = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_specialContext : ParserRuleContext {
		public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		public ITerminalNode SHRINKLOG() { return GetToken(TSqlParser.SHRINKLOG, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Dbcc_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_special(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_special(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_special(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_specialContext dbcc_special() {
		Dbcc_specialContext _localctx = new Dbcc_specialContext(_ctx, State);
		EnterRule(_localctx, 730, RULE_dbcc_special);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9217; Match(DBCC);
			State = 9218; Match(SHRINKLOG);
			State = 9228;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1271,_ctx) ) {
			case 1:
				{
				State = 9219; Match(LR_BRACKET);
				State = 9220; Match(SIZE);
				State = 9221; Match(EQUAL);
				State = 9225;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1270,_ctx) ) {
				case 1:
					{
					State = 9222; constant_expression();
					}
					break;

				case 2:
					{
					State = 9223; id_();
					}
					break;

				case 3:
					{
					State = 9224; Match(DEFAULT);
					}
					break;
				}
				State = 9227; Match(RR_BRACKET);
				}
				break;
			}
			State = 9231;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1272,_ctx) ) {
			case 1:
				{
				State = 9230; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clauseContext : ParserRuleContext {
		public Dbcc_commandContext name;
		public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		public Dbcc_commandContext dbcc_command() {
			return GetRuleContext<Dbcc_commandContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_optionsContext dbcc_options() {
			return GetRuleContext<Dbcc_optionsContext>(0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clauseContext dbcc_clause() {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, State);
		EnterRule(_localctx, 732, RULE_dbcc_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9233; Match(DBCC);
			State = 9234; _localctx.name = dbcc_command();
			State = 9239;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1273,_ctx) ) {
			case 1:
				{
				State = 9235; Match(LR_BRACKET);
				State = 9236; expression_list();
				State = 9237; Match(RR_BRACKET);
				}
				break;
			}
			State = 9243;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1274,_ctx) ) {
			case 1:
				{
				State = 9241; Match(WITH);
				State = 9242; dbcc_options();
				}
				break;
			}
			State = 9246;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1275,_ctx) ) {
			case 1:
				{
				State = 9245; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_commandContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public Dbcc_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_command(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_command(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_commandContext dbcc_command() {
		Dbcc_commandContext _localctx = new Dbcc_commandContext(_ctx, State);
		EnterRule(_localctx, 734, RULE_dbcc_command);
		try {
			State = 9250;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1276,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9248; simple_id();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9249; keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_optionsContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public Dbcc_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_optionsContext dbcc_options() {
		Dbcc_optionsContext _localctx = new Dbcc_optionsContext(_ctx, State);
		EnterRule(_localctx, 736, RULE_dbcc_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9252; simple_id();
			State = 9255;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1277,_ctx) ) {
			case 1:
				{
				State = 9253; Match(COMMA);
				State = 9254; simple_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_clauseContext : ParserRuleContext {
		public IToken clause;
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_clauseContext execute_clause() {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, State);
		EnterRule(_localctx, 738, RULE_execute_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9257; Match(EXECUTE);
			State = 9258; Match(AS);
			State = 9259;
			_localctx.clause = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				_localctx.clause = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_localContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_local; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_local(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_local(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_local(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_localContext declare_local() {
		Declare_localContext _localctx = new Declare_localContext(_ctx, State);
		EnterRule(_localctx, 740, RULE_declare_local);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9261; Match(LOCAL_ID);
			State = 9263;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1278,_ctx) ) {
			case 1:
				{
				State = 9262; Match(AS);
				}
				break;
			}
			State = 9265; data_type();
			State = 9268;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1279,_ctx) ) {
			case 1:
				{
				State = 9266; Match(EQUAL);
				State = 9267; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_definitionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public Table_type_indicesContext[] table_type_indices() {
			return GetRuleContexts<Table_type_indicesContext>();
		}
		public Table_type_indicesContext table_type_indices(int i) {
			return GetRuleContext<Table_type_indicesContext>(i);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_definitionContext table_type_definition() {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, State);
		EnterRule(_localctx, 742, RULE_table_type_definition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9270; Match(TABLE);
			State = 9271; Match(LR_BRACKET);
			State = 9272; column_def_table_constraints();
			State = 9279;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1281,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9274;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1280,_ctx) ) {
					case 1:
						{
						State = 9273; Match(COMMA);
						}
						break;
					}
					State = 9276; table_type_indices();
					}
					} 
				}
				State = 9281;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1281,_ctx);
			}
			State = 9282; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_indicesContext : ParserRuleContext {
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Table_type_indicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_indices; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_indices(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_indices(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_indices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_indicesContext table_type_indices() {
		Table_type_indicesContext _localctx = new Table_type_indicesContext(_ctx, State);
		EnterRule(_localctx, 744, RULE_table_type_indices);
		int _la;
		try {
			State = 9305;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1285,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9294;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1284,_ctx) ) {
				case 1:
					{
					{
					State = 9288;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1282,_ctx) ) {
					case 1:
						{
						State = 9284; Match(PRIMARY);
						State = 9285; Match(KEY);
						}
						break;

					case 2:
						{
						State = 9286; Match(INDEX);
						State = 9287; id_();
						}
						break;
					}
					State = 9291;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1283,_ctx) ) {
					case 1:
						{
						State = 9290;
						_la = _input.La(1);
						if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 9293; Match(UNIQUE);
					}
					break;
				}
				State = 9296; Match(LR_BRACKET);
				State = 9297; column_name_list_with_order();
				State = 9298; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9300; Match(CHECK);
				State = 9301; Match(LR_BRACKET);
				State = 9302; search_condition(0);
				State = 9303; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_type_definitionContext : ParserRuleContext {
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return GetRuleContext<Xml_schema_collectionContext>(0);
		}
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_type_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_type_definitionContext xml_type_definition() {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, State);
		EnterRule(_localctx, 746, RULE_xml_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9307; Match(XML);
			State = 9308; Match(LR_BRACKET);
			State = 9310;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1286,_ctx) ) {
			case 1:
				{
				State = 9309;
				_la = _input.La(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 9312; xml_schema_collection();
			State = 9313; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_schema_collectionContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_schema_collection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_schema_collectionContext xml_schema_collection() {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 748, RULE_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9315; Match(ID);
			State = 9316; Match(DOT);
			State = 9317; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintsContext : ParserRuleContext {
		public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintsContext column_def_table_constraints() {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, State);
		EnterRule(_localctx, 750, RULE_column_def_table_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9319; column_def_table_constraint();
			State = 9326;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1288,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9321;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1287,_ctx) ) {
					case 1:
						{
						State = 9320; Match(COMMA);
						}
						break;
					}
					State = 9323; column_def_table_constraint();
					}
					} 
				}
				State = 9328;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1288,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintContext : ParserRuleContext {
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return GetRuleContext<Materialized_column_definitionContext>(0);
		}
		public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintContext column_def_table_constraint() {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, State);
		EnterRule(_localctx, 752, RULE_column_def_table_constraint);
		try {
			State = 9332;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1289,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9329; column_definition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9330; materialized_column_definition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9331; table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public Id_Context constraint;
		public IToken seed;
		public IToken increment;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Null_or_defaultContext[] null_or_default() {
			return GetRuleContexts<Null_or_defaultContext>();
		}
		public Null_or_defaultContext null_or_default(int i) {
			return GetRuleContext<Null_or_defaultContext>(i);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, State);
		EnterRule(_localctx, 754, RULE_column_definition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9334; id_();
			State = 9341;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1291,_ctx) ) {
			case 1:
				{
				State = 9335; data_type();
				}
				break;

			case 2:
				{
				State = 9336; Match(AS);
				State = 9337; expression(0);
				State = 9339;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1290,_ctx) ) {
				case 1:
					{
					State = 9338; Match(PERSISTED);
					}
					break;
				}
				}
				break;
			}
			State = 9345;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1292,_ctx) ) {
			case 1:
				{
				State = 9343; Match(COLLATE);
				State = 9344; id_();
				}
				break;
			}
			State = 9348;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1293,_ctx) ) {
			case 1:
				{
				State = 9347; null_notnull();
				}
				break;
			}
			State = 9371;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1298,_ctx) ) {
			case 1:
				{
				State = 9352;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1294,_ctx) ) {
				case 1:
					{
					State = 9350; Match(CONSTRAINT);
					State = 9351; _localctx.constraint = id_();
					}
					break;
				}
				State = 9354; null_or_default();
				State = 9356;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1295,_ctx) ) {
				case 1:
					{
					State = 9355; null_or_default();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 9358; Match(IDENTITY);
				State = 9364;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1296,_ctx) ) {
				case 1:
					{
					State = 9359; Match(LR_BRACKET);
					State = 9360; _localctx.seed = Match(DECIMAL);
					State = 9361; Match(COMMA);
					State = 9362; _localctx.increment = Match(DECIMAL);
					State = 9363; Match(RR_BRACKET);
					}
					break;
				}
				State = 9369;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1297,_ctx) ) {
				case 1:
					{
					State = 9366; Match(NOT);
					State = 9367; Match(FOR);
					State = 9368; Match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			State = 9374;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1299,_ctx) ) {
			case 1:
				{
				State = 9373; Match(ROWGUIDCOL);
				}
				break;
			}
			State = 9379;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1300,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9376; column_constraint();
					}
					} 
				}
				State = 9381;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1300,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Materialized_column_definitionContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMPUTE() { return GetToken(TSqlParser.COMPUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialized_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMaterialized_column_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMaterialized_column_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialized_column_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Materialized_column_definitionContext materialized_column_definition() {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, State);
		EnterRule(_localctx, 756, RULE_materialized_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9382; id_();
			State = 9383;
			_la = _input.La(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 9384; expression(0);
			State = 9388;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1301,_ctx) ) {
			case 1:
				{
				State = 9385; Match(MATERIALIZED);
				}
				break;

			case 2:
				{
				State = 9386; Match(NOT);
				State = 9387; Match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext pk;
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, State);
		EnterRule(_localctx, 758, RULE_column_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9392;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1302,_ctx) ) {
			case 1:
				{
				State = 9390; Match(CONSTRAINT);
				State = 9391; _localctx.constraint = id_();
				}
				break;
			}
			State = 9431;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1310,_ctx) ) {
			case 1:
				{
				State = 9397;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1303,_ctx) ) {
				case 1:
					{
					State = 9394; Match(PRIMARY);
					State = 9395; Match(KEY);
					}
					break;

				case 2:
					{
					State = 9396; Match(UNIQUE);
					}
					break;
				}
				State = 9400;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1304,_ctx) ) {
				case 1:
					{
					State = 9399; clustered();
					}
					break;
				}
				State = 9403;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1305,_ctx) ) {
				case 1:
					{
					State = 9402; index_options();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 9405; Match(CHECK);
				State = 9409;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1306,_ctx) ) {
				case 1:
					{
					State = 9406; Match(NOT);
					State = 9407; Match(FOR);
					State = 9408; Match(REPLICATION);
					}
					break;
				}
				State = 9411; Match(LR_BRACKET);
				State = 9412; search_condition(0);
				State = 9413; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 9417;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1307,_ctx) ) {
				case 1:
					{
					State = 9415; Match(FOREIGN);
					State = 9416; Match(KEY);
					}
					break;
				}
				State = 9419; Match(REFERENCES);
				State = 9420; table_name();
				State = 9421; Match(LR_BRACKET);
				State = 9422; _localctx.pk = column_name_list();
				State = 9423; Match(RR_BRACKET);
				State = 9425;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1308,_ctx) ) {
				case 1:
					{
					State = 9424; on_delete();
					}
					break;
				}
				State = 9428;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1309,_ctx) ) {
				case 1:
					{
					State = 9427; on_update();
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 9430; null_notnull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(TSqlParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(TSqlParser.PLUS, i);
		}
		public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, State);
		EnterRule(_localctx, 760, RULE_table_constraint);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9435;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1311,_ctx) ) {
			case 1:
				{
				State = 9433; Match(CONSTRAINT);
				State = 9434; _localctx.constraint = id_();
				}
				break;
			}
			State = 9507;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1325,_ctx) ) {
			case 1:
				{
				State = 9440;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1312,_ctx) ) {
				case 1:
					{
					State = 9437; Match(PRIMARY);
					State = 9438; Match(KEY);
					}
					break;

				case 2:
					{
					State = 9439; Match(UNIQUE);
					}
					break;
				}
				State = 9443;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1313,_ctx) ) {
				case 1:
					{
					State = 9442; clustered();
					}
					break;
				}
				State = 9445; Match(LR_BRACKET);
				State = 9446; column_name_list_with_order();
				State = 9447; Match(RR_BRACKET);
				State = 9449;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1314,_ctx) ) {
				case 1:
					{
					State = 9448; index_options();
					}
					break;
				}
				State = 9453;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1315,_ctx) ) {
				case 1:
					{
					State = 9451; Match(ON);
					State = 9452; id_();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 9455; Match(CHECK);
				State = 9459;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1316,_ctx) ) {
				case 1:
					{
					State = 9456; Match(NOT);
					State = 9457; Match(FOR);
					State = 9458; Match(REPLICATION);
					}
					break;
				}
				State = 9461; Match(LR_BRACKET);
				State = 9462; search_condition(0);
				State = 9463; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 9465; Match(DEFAULT);
				State = 9467;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1317,_ctx) ) {
				case 1:
					{
					State = 9466; Match(LR_BRACKET);
					}
					break;
				}
				State = 9481;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1320,_ctx) ) {
				case 1:
					{
					State = 9473;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 9473;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1318,_ctx) ) {
							case 1:
								{
								State = 9469; Match(STRING);
								}
								break;

							case 2:
								{
								State = 9470; Match(PLUS);
								}
								break;

							case 3:
								{
								State = 9471; function_call();
								}
								break;

							case 4:
								{
								State = 9472; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 9475;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1319,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;

				case 2:
					{
					State = 9477; Match(NEXT);
					State = 9478; Match(VALUE);
					State = 9479; Match(FOR);
					State = 9480; table_name();
					}
					break;
				}
				State = 9484;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1321,_ctx) ) {
				case 1:
					{
					State = 9483; Match(RR_BRACKET);
					}
					break;
				}
				State = 9486; Match(FOR);
				State = 9487; id_();
				}
				break;

			case 4:
				{
				State = 9488; Match(FOREIGN);
				State = 9489; Match(KEY);
				State = 9490; Match(LR_BRACKET);
				State = 9491; _localctx.fk = column_name_list();
				State = 9492; Match(RR_BRACKET);
				State = 9493; Match(REFERENCES);
				State = 9494; table_name();
				State = 9499;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1322,_ctx) ) {
				case 1:
					{
					State = 9495; Match(LR_BRACKET);
					State = 9496; _localctx.pk = column_name_list();
					State = 9497; Match(RR_BRACKET);
					}
					break;
				}
				State = 9502;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1323,_ctx) ) {
				case 1:
					{
					State = 9501; on_delete();
					}
					break;
				}
				State = 9505;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1324,_ctx) ) {
				case 1:
					{
					State = 9504; on_update();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_deleteContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_delete; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_delete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_delete(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_delete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_deleteContext on_delete() {
		On_deleteContext _localctx = new On_deleteContext(_ctx, State);
		EnterRule(_localctx, 762, RULE_on_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9509; Match(ON);
			State = 9510; Match(DELETE);
			State = 9518;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1326,_ctx) ) {
			case 1:
				{
				State = 9511; Match(NO);
				State = 9512; Match(ACTION);
				}
				break;

			case 2:
				{
				State = 9513; Match(CASCADE);
				}
				break;

			case 3:
				{
				State = 9514; Match(SET);
				State = 9515; Match(NULL_);
				}
				break;

			case 4:
				{
				State = 9516; Match(SET);
				State = 9517; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_updateContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_update; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_update(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_update(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_update(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_updateContext on_update() {
		On_updateContext _localctx = new On_updateContext(_ctx, State);
		EnterRule(_localctx, 764, RULE_on_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9520; Match(ON);
			State = 9521; Match(UPDATE);
			State = 9529;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1327,_ctx) ) {
			case 1:
				{
				State = 9522; Match(NO);
				State = 9523; Match(ACTION);
				}
				break;

			case 2:
				{
				State = 9524; Match(CASCADE);
				}
				break;

			case 3:
				{
				State = 9525; Match(SET);
				State = 9526; Match(NULL_);
				}
				break;

			case 4:
				{
				State = 9527; Match(SET);
				State = 9528; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionsContext index_options() {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, State);
		EnterRule(_localctx, 766, RULE_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9531; Match(WITH);
			State = 9532; Match(LR_BRACKET);
			State = 9533; index_option();
			State = 9538;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1328,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9534; Match(COMMA);
					State = 9535; index_option();
					}
					} 
				}
				State = 9540;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1328,_ctx);
			}
			State = 9541; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionContext index_option() {
		Index_optionContext _localctx = new Index_optionContext(_ctx, State);
		EnterRule(_localctx, 768, RULE_index_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9545;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1329,_ctx) ) {
			case 1:
				{
				State = 9543; simple_id();
				}
				break;

			case 2:
				{
				State = 9544; keyword();
				}
				break;
			}
			State = 9547; Match(EQUAL);
			State = 9552;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1330,_ctx) ) {
			case 1:
				{
				State = 9548; simple_id();
				}
				break;

			case 2:
				{
				State = 9549; keyword();
				}
				break;

			case 3:
				{
				State = 9550; on_off();
				}
				break;

			case 4:
				{
				State = 9551; Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_cursorContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_cursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_cursorContext declare_cursor() {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, State);
		EnterRule(_localctx, 770, RULE_declare_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9554; Match(DECLARE);
			State = 9555; cursor_name();
			State = 9587;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1338,_ctx) ) {
			case 1:
				{
				State = 9556; Match(CURSOR);
				State = 9566;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1333,_ctx) ) {
				case 1:
					{
					State = 9557; declare_set_cursor_common();
					State = 9564;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1332,_ctx) ) {
					case 1:
						{
						State = 9558; Match(FOR);
						State = 9559; Match(UPDATE);
						State = 9562;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1331,_ctx) ) {
						case 1:
							{
							State = 9560; Match(OF);
							State = 9561; column_name_list();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 9569;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1334,_ctx) ) {
				case 1:
					{
					State = 9568;
					_la = _input.La(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 9572;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1335,_ctx) ) {
				case 1:
					{
					State = 9571; Match(SCROLL);
					}
					break;
				}
				State = 9574; Match(CURSOR);
				State = 9575; Match(FOR);
				State = 9576; select_statement_standalone();
				State = 9585;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1337,_ctx) ) {
				case 1:
					{
					State = 9577; Match(FOR);
					State = 9583;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1336,_ctx) ) {
					case 1:
						{
						State = 9578; Match(READ);
						State = 9579; Match(ONLY);
						}
						break;

					case 2:
						{
						State = 9580; Match(UPDATE);
						}
						break;

					case 3:
						{
						{
						State = 9581; Match(OF);
						State = 9582; column_name_list();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 9590;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1339,_ctx) ) {
			case 1:
				{
				State = 9589; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_commonContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Declare_set_cursor_common_partialContext[] declare_set_cursor_common_partial() {
			return GetRuleContexts<Declare_set_cursor_common_partialContext>();
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return GetRuleContext<Declare_set_cursor_common_partialContext>(i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_set_cursor_common(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_commonContext declare_set_cursor_common() {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, State);
		EnterRule(_localctx, 772, RULE_declare_set_cursor_common);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9595;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1340,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9592; declare_set_cursor_common_partial();
					}
					} 
				}
				State = 9597;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1340,_ctx);
			}
			State = 9598; Match(FOR);
			State = 9599; select_statement_standalone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_common_partialContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common_partial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common_partial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common_partial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_set_cursor_common_partial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, State);
		EnterRule(_localctx, 774, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			State = 9606;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1341,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9601;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9602;
				_la = _input.La(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9603;
				_la = _input.La(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9604;
				_la = _input.La(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9605; Match(TYPE_WARNING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_cursorContext : ParserRuleContext {
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFetch_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFetch_cursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetch_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_cursorContext fetch_cursor() {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, State);
		EnterRule(_localctx, 776, RULE_fetch_cursor);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9608; Match(FETCH);
			State = 9618;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1343,_ctx) ) {
			case 1:
				{
				State = 9615;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1342,_ctx) ) {
				case 1:
					{
					State = 9609; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 9610; Match(PRIOR);
					}
					break;

				case 3:
					{
					State = 9611; Match(FIRST);
					}
					break;

				case 4:
					{
					State = 9612; Match(LAST);
					}
					break;

				case 5:
					{
					State = 9613;
					_la = _input.La(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 9614; expression(0);
					}
					break;
				}
				State = 9617; Match(FROM);
				}
				break;
			}
			State = 9621;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1344,_ctx) ) {
			case 1:
				{
				State = 9620; Match(GLOBAL);
				}
				break;
			}
			State = 9623; cursor_name();
			State = 9633;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1346,_ctx) ) {
			case 1:
				{
				State = 9624; Match(INTO);
				State = 9625; Match(LOCAL_ID);
				State = 9630;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1345,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9626; Match(COMMA);
						State = 9627; Match(LOCAL_ID);
						}
						} 
					}
					State = 9632;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1345,_ctx);
				}
				}
				break;
			}
			State = 9636;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1347,_ctx) ) {
			case 1:
				{
				State = 9635; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specialContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode IO() { return GetToken(TSqlParser.IO, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode PROFILE() { return GetToken(TSqlParser.PROFILE, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSqlParser.ROWCOUNT, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode IDENTITY_INSERT() { return GetToken(TSqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Special_listContext[] special_list() {
			return GetRuleContexts<Special_listContext>();
		}
		public Special_listContext special_list(int i) {
			return GetRuleContext<Special_listContext>(i);
		}
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_special(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_special(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_special(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_specialContext set_special() {
		Set_specialContext _localctx = new Set_specialContext(_ctx, State);
		EnterRule(_localctx, 778, RULE_set_special);
		int _la;
		try {
			int _alt;
			State = 9699;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1356,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9638; Match(SET);
				State = 9639; id_();
				State = 9643;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1348,_ctx) ) {
				case 1:
					{
					State = 9640; id_();
					}
					break;

				case 2:
					{
					State = 9641; constant_LOCAL_ID();
					}
					break;

				case 3:
					{
					State = 9642; on_off();
					}
					break;
				}
				State = 9646;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1349,_ctx) ) {
				case 1:
					{
					State = 9645; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9648; Match(SET);
				State = 9649; Match(STATISTICS);
				State = 9650;
				_la = _input.La(1);
				if ( !(_la==TIME || _la==XML || _la==IO || _la==PROFILE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9651; on_off();
				State = 9653;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1350,_ctx) ) {
				case 1:
					{
					State = 9652; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9655; Match(SET);
				State = 9656; Match(ROWCOUNT);
				State = 9657;
				_la = _input.La(1);
				if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9659;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1351,_ctx) ) {
				case 1:
					{
					State = 9658; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9661; Match(SET);
				State = 9662; Match(TRANSACTION);
				State = 9663; Match(ISOLATION);
				State = 9664; Match(LEVEL);
				State = 9674;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1352,_ctx) ) {
				case 1:
					{
					State = 9665; Match(READ);
					State = 9666; Match(UNCOMMITTED);
					}
					break;

				case 2:
					{
					State = 9667; Match(READ);
					State = 9668; Match(COMMITTED);
					}
					break;

				case 3:
					{
					State = 9669; Match(REPEATABLE);
					State = 9670; Match(READ);
					}
					break;

				case 4:
					{
					State = 9671; Match(SNAPSHOT);
					}
					break;

				case 5:
					{
					State = 9672; Match(SERIALIZABLE);
					}
					break;

				case 6:
					{
					State = 9673; Match(DECIMAL);
					}
					break;
				}
				State = 9677;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1353,_ctx) ) {
				case 1:
					{
					State = 9676; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9679; Match(SET);
				State = 9680; Match(IDENTITY_INSERT);
				State = 9681; table_name();
				State = 9682; on_off();
				State = 9684;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1354,_ctx) ) {
				case 1:
					{
					State = 9683; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9686; Match(SET);
				State = 9687; special_list();
				State = 9692;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1355,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9688; Match(COMMA);
						State = 9689; special_list();
						}
						} 
					}
					State = 9694;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1355,_ctx);
				}
				State = 9695; on_off();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9697; Match(SET);
				State = 9698; modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_listContext : ParserRuleContext {
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ANSI_DEFAULTS() { return GetToken(TSqlParser.ANSI_DEFAULTS, 0); }
		public ITerminalNode ANSI_NULL_DFLT_OFF() { return GetToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0); }
		public ITerminalNode ANSI_NULL_DFLT_ON() { return GetToken(TSqlParser.ANSI_NULL_DFLT_ON, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ARITHIGNORE() { return GetToken(TSqlParser.ARITHIGNORE, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public ITerminalNode FMTONLY() { return GetToken(TSqlParser.FMTONLY, 0); }
		public ITerminalNode FORCEPLAN() { return GetToken(TSqlParser.FORCEPLAN, 0); }
		public ITerminalNode IMPLICIT_TRANSACTIONS() { return GetToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		public ITerminalNode NOEXEol() { return GetToken(TSqlParser.NOEXEol, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode PARSEONLY() { return GetToken(TSqlParser.PARSEONLY, 0); }
		public ITerminalNode REMOTE_PROC_TRANSACTIONS() { return GetToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0); }
		public ITerminalNode SHOWPLAN_ALL() { return GetToken(TSqlParser.SHOWPLAN_ALL, 0); }
		public ITerminalNode SHOWPLAN_TEXT() { return GetToken(TSqlParser.SHOWPLAN_TEXT, 0); }
		public ITerminalNode SHOWPLAN_XML() { return GetToken(TSqlParser.SHOWPLAN_XML, 0); }
		public ITerminalNode XACT_ABORT() { return GetToken(TSqlParser.XACT_ABORT, 0); }
		public Special_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSpecial_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSpecial_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecial_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Special_listContext special_list() {
		Special_listContext _localctx = new Special_listContext(_ctx, State);
		EnterRule(_localctx, 780, RULE_special_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9701;
			_la = _input.La(1);
			if ( !(((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (ANSI_NULLS - 210)) | (1L << (ANSI_PADDING - 210)) | (1L << (ANSI_WARNINGS - 210)) | (1L << (ARITHABORT - 210)) | (1L << (CONCAT_NULL_YIELDS_NULL - 210)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 210)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (NOCOUNT - 436)) | (1L << (NUMERIC_ROUNDABORT - 436)) | (1L << (QUOTED_IDENTIFIER - 436)))) != 0) || ((((_la - 841)) & ~0x3f) == 0 && ((1L << (_la - 841)) & ((1L << (XACT_ABORT - 841)) | (1L << (ANSI_DEFAULTS - 841)) | (1L << (ANSI_NULL_DFLT_OFF - 841)) | (1L << (ANSI_NULL_DFLT_ON - 841)) | (1L << (ARITHIGNORE - 841)) | (1L << (FMTONLY - 841)) | (1L << (FORCEPLAN - 841)) | (1L << (IMPLICIT_TRANSACTIONS - 841)) | (1L << (NOEXEol - 841)) | (1L << (PARSEONLY - 841)) | (1L << (REMOTE_PROC_TRANSACTIONS - 841)) | (1L << (SHOWPLAN_ALL - 841)) | (1L << (SHOWPLAN_TEXT - 841)) | (1L << (SHOWPLAN_XML - 841)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_LOCAL_IDContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_LOCAL_ID; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_LOCAL_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_LOCAL_ID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_LOCAL_ID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_LOCAL_IDContext constant_LOCAL_ID() {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, State);
		EnterRule(_localctx, 782, RULE_constant_LOCAL_ID);
		try {
			State = 9705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1357,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9703; constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9704; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken op;
		public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Value_callContext value_call() {
			return GetRuleContext<Value_callContext>(0);
		}
		public Query_callContext query_call() {
			return GetRuleContext<Query_callContext>(0);
		}
		public Exist_callContext exist_call() {
			return GetRuleContext<Exist_callContext>(0);
		}
		public Modify_callContext modify_call() {
			return GetRuleContext<Modify_callContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Bracket_expressionContext bracket_expression() {
			return GetRuleContext<Bracket_expressionContext>(0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return GetRuleContext<Unary_operator_expressionContext>(0);
		}
		public Time_zoneContext time_zone() {
			return GetRuleContext<Time_zoneContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode DOLLAR_ACTION() { return GetToken(TSqlParser.DOLLAR_ACTION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 784;
		EnterRecursionRule(_localctx, 784, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9716;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1358,_ctx) ) {
			case 1:
				{
				State = 9708; primitive_expression();
				}
				break;

			case 2:
				{
				State = 9709; function_call();
				}
				break;

			case 3:
				{
				State = 9710; case_expression();
				}
				break;

			case 4:
				{
				State = 9711; full_column_name();
				}
				break;

			case 5:
				{
				State = 9712; bracket_expression();
				}
				break;

			case 6:
				{
				State = 9713; unary_operator_expression();
				}
				break;

			case 7:
				{
				State = 9714; over_clause();
				}
				break;

			case 8:
				{
				State = 9715; Match(DOLLAR_ACTION);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 9739;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1361,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9737;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1360,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9718;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 9719;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 881)) & ~0x3f) == 0 && ((1L << (_la - 881)) & ((1L << (STAR - 881)) | (1L << (DIVIDE - 881)) | (1L << (MODULE - 881)))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9720; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9721;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 9722;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 869)) & ~0x3f) == 0 && ((1L << (_la - 869)) & ((1L << (DOUBLE_BAR - 869)) | (1L << (PLUS - 869)) | (1L << (MINUS - 869)) | (1L << (BIT_OR - 869)) | (1L << (BIT_AND - 869)) | (1L << (BIT_XOR - 869)))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9723; expression(5);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9724;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 9725; Match(DOT);
						State = 9730;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1359,_ctx) ) {
						case 1:
							{
							State = 9726; value_call();
							}
							break;

						case 2:
							{
							State = 9727; query_call();
							}
							break;

						case 3:
							{
							State = 9728; exist_call();
							}
							break;

						case 4:
							{
							State = 9729; modify_call();
							}
							break;
						}
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9732;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 9733; Match(COLLATE);
						State = 9734; id_();
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 9735;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 9736; time_zone();
						}
						break;
					}
					} 
				}
				State = 9741;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1361,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Time_zoneContext : ParserRuleContext {
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(TSqlParser.ZONE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Time_zoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_zone; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime_zone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime_zone(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_zone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_zoneContext time_zone() {
		Time_zoneContext _localctx = new Time_zoneContext(_ctx, State);
		EnterRule(_localctx, 786, RULE_time_zone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9742; Match(AT_KEYWORD);
			State = 9743; Match(TIME);
			State = 9744; Match(ZONE);
			State = 9745; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_expressionContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_expressionContext primitive_expression() {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, State);
		EnterRule(_localctx, 788, RULE_primitive_expression);
		try {
			State = 9751;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1362,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9747; Match(DEFAULT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9748; Match(NULL_);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9749; Match(LOCAL_ID);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9750; constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public ITerminalNode CASE() { return GetToken(TSqlParser.CASE, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public Switch_search_condition_sectionContext[] switch_search_condition_section() {
			return GetRuleContexts<Switch_search_condition_sectionContext>();
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return GetRuleContext<Switch_search_condition_sectionContext>(i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, State);
		EnterRule(_localctx, 790, RULE_case_expression);
		try {
			int _alt;
			State = 9778;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1367,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9753; Match(CASE);
				State = 9754; _localctx.caseExpr = expression(0);
				State = 9756;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9755; switch_section();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9758;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1363,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 9762;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1364,_ctx) ) {
				case 1:
					{
					State = 9760; Match(ELSE);
					State = 9761; _localctx.elseExpr = expression(0);
					}
					break;
				}
				State = 9764; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9766; Match(CASE);
				State = 9768;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9767; switch_search_condition_section();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9770;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1365,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 9774;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1366,_ctx) ) {
				case 1:
					{
					State = 9772; Match(ELSE);
					State = 9773; _localctx.elseExpr = expression(0);
					}
					break;
				}
				State = 9776; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_expressionContext : ParserRuleContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_expressionContext unary_operator_expression() {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, State);
		EnterRule(_localctx, 792, RULE_unary_operator_expression);
		int _la;
		try {
			State = 9784;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1368,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9780; Match(BIT_NOT);
				State = 9781; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9782;
				_localctx.op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9783; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, State);
		EnterRule(_localctx, 794, RULE_bracket_expression);
		try {
			State = 9794;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1369,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9786; Match(LR_BRACKET);
				State = 9787; expression(0);
				State = 9788; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9790; Match(LR_BRACKET);
				State = 9791; subquery();
				State = 9792; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, State);
		EnterRule(_localctx, 796, RULE_constant_expression);
		try {
			State = 9804;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1370,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9796; Match(NULL_);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9797; constant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9798; function_call();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9799; Match(LOCAL_ID);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9800; Match(LR_BRACKET);
				State = 9801; constant_expression();
				State = 9802; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(_ctx, State);
		EnterRule(_localctx, 798, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9806; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public Common_table_expressionContext _common_table_expression;
		public IList<Common_table_expressionContext> _ctes = new List<Common_table_expressionContext>();
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(_ctx, State);
		EnterRule(_localctx, 800, RULE_with_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9808; Match(WITH);
			State = 9809; _localctx._common_table_expression = common_table_expression();
			_localctx._ctes.Add(_localctx._common_table_expression);
			State = 9814;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1371,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9810; Match(COMMA);
					State = 9811; _localctx._common_table_expression = common_table_expression();
					_localctx._ctes.Add(_localctx._common_table_expression);
					}
					} 
				}
				State = 9816;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1371,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Id_Context expression_name;
		public Column_name_listContext columns;
		public Select_statementContext cte_query;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, State);
		EnterRule(_localctx, 802, RULE_common_table_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9817; _localctx.expression_name = id_();
			State = 9822;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1372,_ctx) ) {
			case 1:
				{
				State = 9818; Match(LR_BRACKET);
				State = 9819; _localctx.columns = column_name_list();
				State = 9820; Match(RR_BRACKET);
				}
				break;
			}
			State = 9824; Match(AS);
			State = 9825; Match(LR_BRACKET);
			State = 9826; _localctx.cte_query = select_statement();
			State = 9827; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elemContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_elemContext update_elem() {
		Update_elemContext _localctx = new Update_elemContext(_ctx, State);
		EnterRule(_localctx, 804, RULE_update_elem);
		try {
			State = 9854;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1376,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9829; Match(LOCAL_ID);
				State = 9830; Match(EQUAL);
				State = 9831; full_column_name();
				State = 9834;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1373,_ctx) ) {
				case 1:
					{
					State = 9832; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 9833; assignment_operator();
					}
					break;
				}
				State = 9836; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9840;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1374,_ctx) ) {
				case 1:
					{
					State = 9838; full_column_name();
					}
					break;

				case 2:
					{
					State = 9839; Match(LOCAL_ID);
					}
					break;
				}
				State = 9844;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1375,_ctx) ) {
				case 1:
					{
					State = 9842; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 9843; assignment_operator();
					}
					break;
				}
				State = 9846; expression(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9847; _localctx.udt_column_name = id_();
				State = 9848; Match(DOT);
				State = 9849; _localctx.method_name = id_();
				State = 9850; Match(LR_BRACKET);
				State = 9851; expression_list();
				State = 9852; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elem_mergeContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_elem_mergeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem_merge; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem_merge(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem_merge(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_elem_merge(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_elem_mergeContext update_elem_merge() {
		Update_elem_mergeContext _localctx = new Update_elem_mergeContext(_ctx, State);
		EnterRule(_localctx, 806, RULE_update_elem_merge);
		try {
			State = 9872;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1379,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9858;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1377,_ctx) ) {
				case 1:
					{
					State = 9856; full_column_name();
					}
					break;

				case 2:
					{
					State = 9857; Match(LOCAL_ID);
					}
					break;
				}
				State = 9862;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1378,_ctx) ) {
				case 1:
					{
					State = 9860; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 9861; assignment_operator();
					}
					break;
				}
				State = 9864; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9865; _localctx.udt_column_name = id_();
				State = 9866; Match(DOT);
				State = 9867; _localctx.method_name = id_();
				State = 9868; Match(LR_BRACKET);
				State = 9869; expression_list();
				State = 9870; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		return search_condition(0);
	}

	private Search_conditionContext search_condition(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, _parentState);
		Search_conditionContext _prevctx = _localctx;
		int _startState = 808;
		EnterRecursionRule(_localctx, 808, RULE_search_condition, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 9878;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1380,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9875; Match(NOT);
					}
					} 
				}
				State = 9880;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1380,_ctx);
			}
			State = 9886;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1381,_ctx) ) {
			case 1:
				{
				State = 9881; predicate();
				}
				break;

			case 2:
				{
				State = 9882; Match(LR_BRACKET);
				State = 9883; search_condition(0);
				State = 9884; Match(RR_BRACKET);
				}
				break;
			}
			}
			_ctx.stop = _input.Lt(-1);
			State = 9896;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1383,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9894;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1382,_ctx) ) {
					case 1:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 9888;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 9889; Match(AND);
						State = 9890; search_condition(3);
						}
						break;

					case 2:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 9891;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 9892; Match(OR);
						State = 9893; search_condition(2);
						}
						break;
					}
					} 
				}
				State = 9898;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1383,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Freetext_predicateContext freetext_predicate() {
			return GetRuleContext<Freetext_predicateContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SOME() { return GetToken(TSqlParser.SOME, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(TSqlParser.LIKE, 0); }
		public ITerminalNode ESCAPE() { return GetToken(TSqlParser.ESCAPE, 0); }
		public ITerminalNode IS() { return GetToken(TSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 810, RULE_predicate);
		int _la;
		try {
			int _alt;
			State = 9960;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1389,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9899; Match(EXISTS);
				State = 9900; Match(LR_BRACKET);
				State = 9901; subquery();
				State = 9902; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9904; freetext_predicate();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9905; expression(0);
				State = 9906; comparison_operator();
				State = 9907; expression(0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9909; expression(0);
				State = 9910; comparison_operator();
				State = 9911;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9912; Match(LR_BRACKET);
				State = 9913; subquery();
				State = 9914; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9916; expression(0);
				State = 9920;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1384,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9917; Match(NOT);
						}
						} 
					}
					State = 9922;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1384,_ctx);
				}
				State = 9923; Match(BETWEEN);
				State = 9924; expression(0);
				State = 9925; Match(AND);
				State = 9926; expression(0);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9928; expression(0);
				State = 9932;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1385,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9929; Match(NOT);
						}
						} 
					}
					State = 9934;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1385,_ctx);
				}
				State = 9935; Match(IN);
				State = 9936; Match(LR_BRACKET);
				State = 9939;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1386,_ctx) ) {
				case 1:
					{
					State = 9937; subquery();
					}
					break;

				case 2:
					{
					State = 9938; expression_list();
					}
					break;
				}
				State = 9941; Match(RR_BRACKET);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9943; expression(0);
				State = 9947;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1387,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9944; Match(NOT);
						}
						} 
					}
					State = 9949;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1387,_ctx);
				}
				State = 9950; Match(LIKE);
				State = 9951; expression(0);
				State = 9954;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1388,_ctx) ) {
				case 1:
					{
					State = 9952; Match(ESCAPE);
					State = 9953; expression(0);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9956; expression(0);
				State = 9957; Match(IS);
				State = 9958; null_notnull();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Sql_unionContext _sql_union;
		public IList<Sql_unionContext> _unions = new List<Sql_unionContext>();
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Sql_unionContext[] sql_union() {
			return GetRuleContexts<Sql_unionContext>();
		}
		public Sql_unionContext sql_union(int i) {
			return GetRuleContext<Sql_unionContext>(i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, State);
		EnterRule(_localctx, 812, RULE_query_expression);
		try {
			int _alt;
			State = 9978;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1393,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9967;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1390,_ctx) ) {
				case 1:
					{
					State = 9962; query_specification();
					}
					break;

				case 2:
					{
					State = 9963; Match(LR_BRACKET);
					State = 9964; query_expression();
					State = 9965; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9969; query_specification();
				State = 9971;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1391,_ctx) ) {
				case 1:
					{
					State = 9970; order_by_clause();
					}
					break;
				}
				State = 9974;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9973; _localctx._sql_union = sql_union();
						_localctx._unions.Add(_localctx._sql_union);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9976;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1392,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_unionContext : ParserRuleContext {
		public Query_specificationContext spec;
		public Query_expressionContext op;
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode EXCEPT() { return GetToken(TSqlParser.EXCEPT, 0); }
		public ITerminalNode INTERSECT() { return GetToken(TSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Sql_unionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_union(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_union(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_union(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_unionContext sql_union() {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, State);
		EnterRule(_localctx, 814, RULE_sql_union);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9986;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1395,_ctx) ) {
			case 1:
				{
				State = 9980; Match(UNION);
				State = 9982;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1394,_ctx) ) {
				case 1:
					{
					State = 9981; Match(ALL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 9984; Match(EXCEPT);
				}
				break;

			case 3:
				{
				State = 9985; Match(INTERSECT);
				}
				break;
			}
			State = 9993;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1396,_ctx) ) {
			case 1:
				{
				State = 9988; _localctx.spec = query_specification();
				}
				break;

			case 2:
				{
				{
				State = 9989; Match(LR_BRACKET);
				State = 9990; _localctx.op = query_expression();
				State = 9991; Match(RR_BRACKET);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public IToken allOrDistinct;
		public Top_clauseContext top;
		public Select_listContext columns;
		public Table_nameContext into;
		public Table_sourcesContext from;
		public Search_conditionContext where;
		public IToken groupByAll;
		public Group_by_itemContext _group_by_item;
		public IList<Group_by_itemContext> _groupBys = new List<Group_by_itemContext>();
		public Search_conditionContext having;
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode HAVING() { return GetToken(TSqlParser.HAVING, 0); }
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, State);
		EnterRule(_localctx, 816, RULE_query_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9995; Match(SELECT);
			State = 9997;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1397,_ctx) ) {
			case 1:
				{
				State = 9996;
				_localctx.allOrDistinct = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.allOrDistinct = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 10000;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1398,_ctx) ) {
			case 1:
				{
				State = 9999; _localctx.top = top_clause();
				}
				break;
			}
			State = 10002; _localctx.columns = select_list();
			State = 10005;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1399,_ctx) ) {
			case 1:
				{
				State = 10003; Match(INTO);
				State = 10004; _localctx.into = table_name();
				}
				break;
			}
			State = 10009;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1400,_ctx) ) {
			case 1:
				{
				State = 10007; Match(FROM);
				State = 10008; _localctx.from = table_sources();
				}
				break;
			}
			State = 10013;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1401,_ctx) ) {
			case 1:
				{
				State = 10011; Match(WHERE);
				State = 10012; _localctx.where = search_condition(0);
				}
				break;
			}
			State = 10028;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1404,_ctx) ) {
			case 1:
				{
				State = 10015; Match(GROUP);
				State = 10016; Match(BY);
				State = 10018;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1402,_ctx) ) {
				case 1:
					{
					State = 10017; _localctx.groupByAll = Match(ALL);
					}
					break;
				}
				State = 10020; _localctx._group_by_item = group_by_item();
				_localctx._groupBys.Add(_localctx._group_by_item);
				State = 10025;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1403,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10021; Match(COMMA);
						State = 10022; _localctx._group_by_item = group_by_item();
						_localctx._groupBys.Add(_localctx._group_by_item);
						}
						} 
					}
					State = 10027;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1403,_ctx);
				}
				}
				break;
			}
			State = 10032;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1405,_ctx) ) {
			case 1:
				{
				State = 10030; Match(HAVING);
				State = 10031; _localctx.having = search_condition(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_clauseContext : ParserRuleContext {
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return GetRuleContext<Top_percentContext>(0);
		}
		public Top_countContext top_count() {
			return GetRuleContext<Top_countContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_clauseContext top_clause() {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, State);
		EnterRule(_localctx, 818, RULE_top_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10034; Match(TOP);
			State = 10037;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1406,_ctx) ) {
			case 1:
				{
				State = 10035; top_percent();
				}
				break;

			case 2:
				{
				State = 10036; top_count();
				}
				break;
			}
			State = 10041;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1407,_ctx) ) {
			case 1:
				{
				State = 10039; Match(WITH);
				State = 10040; Match(TIES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_percentContext : ParserRuleContext {
		public IToken percent_constant;
		public ExpressionContext topper_expression;
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_percent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_percent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_percent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_percent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_percentContext top_percent() {
		Top_percentContext _localctx = new Top_percentContext(_ctx, State);
		EnterRule(_localctx, 820, RULE_top_percent);
		int _la;
		try {
			State = 10050;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1408,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10043;
				_localctx.percent_constant = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (DECIMAL - 851)) | (1L << (FLOAT - 851)) | (1L << (REAL - 851)))) != 0)) ) {
					_localctx.percent_constant = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10044; Match(PERCENT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10045; Match(LR_BRACKET);
				State = 10046; _localctx.topper_expression = expression(0);
				State = 10047; Match(RR_BRACKET);
				State = 10048; Match(PERCENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_countContext : ParserRuleContext {
		public IToken count_constant;
		public ExpressionContext topcount_expression;
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_count(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_countContext top_count() {
		Top_countContext _localctx = new Top_countContext(_ctx, State);
		EnterRule(_localctx, 822, RULE_top_count);
		try {
			State = 10057;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1409,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10052; _localctx.count_constant = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10053; Match(LR_BRACKET);
				State = 10054; _localctx.topcount_expression = expression(0);
				State = 10055; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public Order_by_expressionContext _order_by_expression;
		public IList<Order_by_expressionContext> _order_bys = new List<Order_by_expressionContext>();
		public ExpressionContext offset_exp;
		public IToken offset_rows;
		public IToken fetch_offset;
		public ExpressionContext fetch_exp;
		public IToken fetch_rows;
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Order_by_expressionContext[] order_by_expression() {
			return GetRuleContexts<Order_by_expressionContext>();
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return GetRuleContext<Order_by_expressionContext>(i);
		}
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ROW() { return GetTokens(TSqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(TSqlParser.ROW, i);
		}
		public ITerminalNode[] ROWS() { return GetTokens(TSqlParser.ROWS); }
		public ITerminalNode ROWS(int i) {
			return GetToken(TSqlParser.ROWS, i);
		}
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, State);
		EnterRule(_localctx, 824, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10059; Match(ORDER);
			State = 10060; Match(BY);
			State = 10061; _localctx._order_by_expression = order_by_expression();
			_localctx._order_bys.Add(_localctx._order_by_expression);
			State = 10066;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1410,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10062; Match(COMMA);
					State = 10063; _localctx._order_by_expression = order_by_expression();
					_localctx._order_bys.Add(_localctx._order_by_expression);
					}
					} 
				}
				State = 10068;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1410,_ctx);
			}
			State = 10080;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1412,_ctx) ) {
			case 1:
				{
				State = 10069; Match(OFFSET);
				State = 10070; _localctx.offset_exp = expression(0);
				State = 10071;
				_localctx.offset_rows = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ROW || _la==ROWS) ) {
					_localctx.offset_rows = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10078;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1411,_ctx) ) {
				case 1:
					{
					State = 10072; Match(FETCH);
					State = 10073;
					_localctx.fetch_offset = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
						_localctx.fetch_offset = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 10074; _localctx.fetch_exp = expression(0);
					State = 10075;
					_localctx.fetch_rows = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==ROW || _la==ROWS) ) {
						_localctx.fetch_rows = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 10076; Match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BROWSE() { return GetToken(TSqlParser.BROWSE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode RAW() { return GetToken(TSqlParser.RAW, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public Xml_common_directivesContext[] xml_common_directives() {
			return GetRuleContexts<Xml_common_directivesContext>();
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return GetRuleContext<Xml_common_directivesContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(_ctx, State);
		EnterRule(_localctx, 826, RULE_for_clause);
		int _la;
		try {
			int _alt;
			State = 10174;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1431,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10082; Match(FOR);
				State = 10083; Match(BROWSE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10084; Match(FOR);
				State = 10085; Match(XML);
				State = 10093;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1414,_ctx) ) {
				case 1:
					{
					State = 10086; Match(RAW);
					State = 10090;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1413,_ctx) ) {
					case 1:
						{
						State = 10087; Match(LR_BRACKET);
						State = 10088; Match(STRING);
						State = 10089; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 10092; Match(AUTO);
					}
					break;
				}
				State = 10098;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1415,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10095; xml_common_directives();
						}
						} 
					}
					State = 10100;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1415,_ctx);
				}
				State = 10111;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1418,_ctx) ) {
				case 1:
					{
					State = 10101; Match(COMMA);
					State = 10109;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1417,_ctx) ) {
					case 1:
						{
						State = 10102; Match(XMLDATA);
						}
						break;

					case 2:
						{
						State = 10103; Match(XMLSCHEMA);
						State = 10107;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1416,_ctx) ) {
						case 1:
							{
							State = 10104; Match(LR_BRACKET);
							State = 10105; Match(STRING);
							State = 10106; Match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 10118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1420,_ctx) ) {
				case 1:
					{
					State = 10113; Match(COMMA);
					State = 10114; Match(ELEMENTS);
					State = 10116;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1419,_ctx) ) {
					case 1:
						{
						State = 10115;
						_la = _input.La(1);
						if ( !(_la==XSINIL || _la==ABSENT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10120; Match(FOR);
				State = 10121; Match(XML);
				State = 10122; Match(EXPLICIT);
				State = 10126;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1421,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10123; xml_common_directives();
						}
						} 
					}
					State = 10128;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1421,_ctx);
				}
				State = 10131;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1422,_ctx) ) {
				case 1:
					{
					State = 10129; Match(COMMA);
					State = 10130; Match(XMLDATA);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10133; Match(FOR);
				State = 10134; Match(XML);
				State = 10135; Match(PATH);
				State = 10139;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1423,_ctx) ) {
				case 1:
					{
					State = 10136; Match(LR_BRACKET);
					State = 10137; Match(STRING);
					State = 10138; Match(RR_BRACKET);
					}
					break;
				}
				State = 10144;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1424,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10141; xml_common_directives();
						}
						} 
					}
					State = 10146;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1424,_ctx);
				}
				State = 10152;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1426,_ctx) ) {
				case 1:
					{
					State = 10147; Match(COMMA);
					State = 10148; Match(ELEMENTS);
					State = 10150;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1425,_ctx) ) {
					case 1:
						{
						State = 10149;
						_la = _input.La(1);
						if ( !(_la==XSINIL || _la==ABSENT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10154; Match(FOR);
				State = 10155; Match(JSON);
				State = 10156;
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10164;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1428,_ctx) ) {
				case 1:
					{
					State = 10157; Match(COMMA);
					State = 10158; Match(ROOT);
					State = 10162;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1427,_ctx) ) {
					case 1:
						{
						State = 10159; Match(LR_BRACKET);
						State = 10160; Match(STRING);
						State = 10161; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 10168;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1429,_ctx) ) {
				case 1:
					{
					State = 10166; Match(COMMA);
					State = 10167; Match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				State = 10172;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1430,_ctx) ) {
				case 1:
					{
					State = 10170; Match(COMMA);
					State = 10171; Match(WITHOUT_ARRAY_WRAPPER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_common_directivesContext : ParserRuleContext {
		public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_common_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_common_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_common_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_common_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_common_directivesContext xml_common_directives() {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, State);
		EnterRule(_localctx, 828, RULE_xml_common_directives);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10176; Match(COMMA);
			State = 10185;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1433,_ctx) ) {
			case 1:
				{
				State = 10177; Match(BINARY_BASE64);
				}
				break;

			case 2:
				{
				State = 10178; Match(TYPE);
				}
				break;

			case 3:
				{
				State = 10179; Match(ROOT);
				State = 10183;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1432,_ctx) ) {
				case 1:
					{
					State = 10180; Match(LR_BRACKET);
					State = 10181; Match(STRING);
					State = 10182; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expressionContext : ParserRuleContext {
		public ExpressionContext order_by;
		public IToken ascending;
		public IToken descending;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expressionContext order_by_expression() {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, State);
		EnterRule(_localctx, 830, RULE_order_by_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10187; _localctx.order_by = expression(0);
			State = 10190;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1434,_ctx) ) {
			case 1:
				{
				State = 10188; _localctx.ascending = Match(ASC);
				}
				break;

			case 2:
				{
				State = 10189; _localctx.descending = Match(DESC);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, State);
		EnterRule(_localctx, 832, RULE_group_by_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10192; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_clauseContext : ParserRuleContext {
		public OptionContext _option;
		public IList<OptionContext> _options = new List<OptionContext>();
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_clauseContext option_clause() {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, State);
		EnterRule(_localctx, 834, RULE_option_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10194; Match(OPTION);
			State = 10195; Match(LR_BRACKET);
			State = 10196; _localctx._option = option();
			_localctx._options.Add(_localctx._option);
			State = 10201;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1435,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10197; Match(COMMA);
					State = 10198; _localctx._option = option();
					_localctx._options.Add(_localctx._option);
					}
					} 
				}
				State = 10203;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1435,_ctx);
			}
			State = 10204; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IToken number_rows;
		public IToken number_of_processors;
		public IToken number_recursion;
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode PLAN() { return GetToken(TSqlParser.PLAN, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Optimize_for_argContext[] optimize_for_arg() {
			return GetRuleContexts<Optimize_for_argContext>();
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return GetRuleContext<Optimize_for_argContext>(i);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(_ctx, State);
		EnterRule(_localctx, 836, RULE_option);
		int _la;
		try {
			int _alt;
			State = 10251;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1437,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10206; Match(FAST);
				State = 10207; _localctx.number_rows = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10208;
				_la = _input.La(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10209; Match(GROUP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10210;
				_la = _input.La(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10211; Match(UNION);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10212;
				_la = _input.La(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10213; Match(JOIN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10214; Match(EXPAND);
				State = 10215; Match(VIEWS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10216; Match(FORCE);
				State = 10217; Match(ORDER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10218; Match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10219; Match(KEEP);
				State = 10220; Match(PLAN);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10221; Match(KEEPFIXED);
				State = 10222; Match(PLAN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10223; Match(MAXDOP);
				State = 10224; _localctx.number_of_processors = Match(DECIMAL);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10225; Match(MAXRECURSION);
				State = 10226; _localctx.number_recursion = Match(DECIMAL);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10227; Match(OPTIMIZE);
				State = 10228; Match(FOR);
				State = 10229; Match(LR_BRACKET);
				State = 10230; optimize_for_arg();
				State = 10235;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1436,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10231; Match(COMMA);
						State = 10232; optimize_for_arg();
						}
						} 
					}
					State = 10237;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1436,_ctx);
				}
				State = 10238; Match(RR_BRACKET);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10240; Match(OPTIMIZE);
				State = 10241; Match(FOR);
				State = 10242; Match(UNKNOWN);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 10243; Match(PARAMETERIZATION);
				State = 10244;
				_la = _input.La(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 10245; Match(RECOMPILE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 10246; Match(ROBUST);
				State = 10247; Match(PLAN);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 10248; Match(USE);
				State = 10249; Match(PLAN);
				State = 10250; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optimize_for_argContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimize_for_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOptimize_for_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOptimize_for_arg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimize_for_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optimize_for_argContext optimize_for_arg() {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, State);
		EnterRule(_localctx, 838, RULE_optimize_for_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10253; Match(LOCAL_ID);
			State = 10260;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1439,_ctx) ) {
			case 1:
				{
				State = 10254; Match(UNKNOWN);
				}
				break;

			case 2:
				{
				State = 10255; Match(EQUAL);
				State = 10258;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1438,_ctx) ) {
				case 1:
					{
					State = 10256; constant();
					}
					break;

				case 2:
					{
					State = 10257; Match(NULL_);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Select_list_elemContext _select_list_elem;
		public IList<Select_list_elemContext> _selectElement = new List<Select_list_elemContext>();
		public Select_list_elemContext[] select_list_elem() {
			return GetRuleContexts<Select_list_elemContext>();
		}
		public Select_list_elemContext select_list_elem(int i) {
			return GetRuleContext<Select_list_elemContext>(i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(_ctx, State);
		EnterRule(_localctx, 840, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10262; _localctx._select_list_elem = select_list_elem();
			_localctx._selectElement.Add(_localctx._select_list_elem);
			State = 10267;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1440,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10263; Match(COMMA);
					State = 10264; _localctx._select_list_elem = select_list_elem();
					_localctx._selectElement.Add(_localctx._select_list_elem);
					}
					} 
				}
				State = 10269;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1440,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_method_argumentsContext : ParserRuleContext {
		public Execute_var_stringContext _execute_var_string;
		public IList<Execute_var_stringContext> _argument = new List<Execute_var_stringContext>();
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_method_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_method_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_method_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdt_method_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Udt_method_argumentsContext udt_method_arguments() {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, State);
		EnterRule(_localctx, 842, RULE_udt_method_arguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10270; Match(LR_BRACKET);
			State = 10271; _localctx._execute_var_string = execute_var_string();
			_localctx._argument.Add(_localctx._execute_var_string);
			State = 10276;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1441,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10272; Match(COMMA);
					State = 10273; _localctx._execute_var_string = execute_var_string();
					_localctx._argument.Add(_localctx._execute_var_string);
					}
					} 
				}
				State = 10278;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1441,_ctx);
			}
			State = 10279; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsteriskContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public AsteriskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asterisk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsterisk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsterisk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsterisk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsteriskContext asterisk() {
		AsteriskContext _localctx = new AsteriskContext(_ctx, State);
		EnterRule(_localctx, 844, RULE_asterisk);
		int _la;
		try {
			State = 10290;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1443,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10284;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1442,_ctx) ) {
				case 1:
					{
					State = 10281; table_name();
					State = 10282; Match(DOT);
					}
					break;
				}
				State = 10286; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10287;
				_la = _input.La(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10288; Match(DOT);
				State = 10289; Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_elemContext : ParserRuleContext {
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_elemContext column_elem() {
		Column_elemContext _localctx = new Column_elemContext(_ctx, State);
		EnterRule(_localctx, 846, RULE_column_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10298;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1444,_ctx) ) {
			case 1:
				{
				State = 10292; full_column_name();
				}
				break;

			case 2:
				{
				State = 10293; Match(DOLLAR);
				State = 10294; Match(IDENTITY);
				}
				break;

			case 3:
				{
				State = 10295; Match(DOLLAR);
				State = 10296; Match(ROWGUID);
				}
				break;

			case 4:
				{
				State = 10297; Match(NULL_);
				}
				break;
			}
			State = 10301;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1445,_ctx) ) {
			case 1:
				{
				State = 10300; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_elemContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context non_static_attr;
		public Id_Context static_attr;
		public Udt_method_argumentsContext udt_method_arguments() {
			return GetRuleContext<Udt_method_argumentsContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Udt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdt_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Udt_elemContext udt_elem() {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, State);
		EnterRule(_localctx, 848, RULE_udt_elem);
		try {
			State = 10319;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1449,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10303; _localctx.udt_column_name = id_();
				State = 10304; Match(DOT);
				State = 10305; _localctx.non_static_attr = id_();
				State = 10306; udt_method_arguments();
				State = 10308;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1446,_ctx) ) {
				case 1:
					{
					State = 10307; as_column_alias();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10310; _localctx.udt_column_name = id_();
				State = 10311; Match(DOUBLE_COLON);
				State = 10312; _localctx.static_attr = id_();
				State = 10314;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1447,_ctx) ) {
				case 1:
					{
					State = 10313; udt_method_arguments();
					}
					break;
				}
				State = 10317;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1448,_ctx) ) {
				case 1:
					{
					State = 10316; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_elemContext : ParserRuleContext {
		public Column_aliasContext leftAlias;
		public IToken eq;
		public ExpressionContext leftAssignment;
		public ExpressionContext expressionAs;
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_elemContext expression_elem() {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, State);
		EnterRule(_localctx, 850, RULE_expression_elem);
		try {
			State = 10329;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1451,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10321; _localctx.leftAlias = column_alias();
				State = 10322; _localctx.eq = Match(EQUAL);
				State = 10323; _localctx.leftAssignment = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10325; _localctx.expressionAs = expression(0);
				State = 10327;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1450,_ctx) ) {
				case 1:
					{
					State = 10326; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elemContext : ParserRuleContext {
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public Column_elemContext column_elem() {
			return GetRuleContext<Column_elemContext>(0);
		}
		public Udt_elemContext udt_elem() {
			return GetRuleContext<Udt_elemContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Expression_elemContext expression_elem() {
			return GetRuleContext<Expression_elemContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elemContext select_list_elem() {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, State);
		EnterRule(_localctx, 852, RULE_select_list_elem);
		try {
			State = 10354;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1455,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10331; asterisk();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10332; column_elem();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10333; udt_elem();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10334; Match(LOCAL_ID);
				State = 10337;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1452,_ctx) ) {
				case 1:
					{
					State = 10335; assignment_operator();
					}
					break;

				case 2:
					{
					State = 10336; Match(EQUAL);
					}
					break;
				}
				State = 10344;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1453,_ctx) ) {
				case 1:
					{
					State = 10339; expression(0);
					}
					break;

				case 2:
					{
					State = 10340; Match(NEXT);
					State = 10341; Match(VALUE);
					State = 10342; Match(FOR);
					State = 10343; table_name();
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10346; expression_elem();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10347; Match(NEXT);
				State = 10348; Match(VALUE);
				State = 10349; Match(FOR);
				State = 10350; table_name();
				State = 10352;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1454,_ctx) ) {
				case 1:
					{
					State = 10351; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourcesContext : ParserRuleContext {
		public Table_sourceContext _table_source;
		public IList<Table_sourceContext> _source = new List<Table_sourceContext>();
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_sources; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_sources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_sources(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_sources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourcesContext table_sources() {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, State);
		EnterRule(_localctx, 854, RULE_table_sources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10356; _localctx._table_source = table_source();
			_localctx._source.Add(_localctx._table_source);
			State = 10361;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1456,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10357; Match(COMMA);
					State = 10358; _localctx._table_source = table_source();
					_localctx._source.Add(_localctx._table_source);
					}
					} 
				}
				State = 10363;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1456,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, State);
		EnterRule(_localctx, 856, RULE_table_source);
		try {
			State = 10369;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1457,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10364; table_source_item_joined();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10365; Match(LR_BRACKET);
				State = 10366; table_source();
				State = 10367; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_item_joinedContext : ParserRuleContext {
		public Join_partContext _join_part;
		public IList<Join_partContext> _joins = new List<Join_partContext>();
		public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public Join_partContext[] join_part() {
			return GetRuleContexts<Join_partContext>();
		}
		public Join_partContext join_part(int i) {
			return GetRuleContext<Join_partContext>(i);
		}
		public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item_joined; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item_joined(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item_joined(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item_joined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_item_joinedContext table_source_item_joined() {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, State);
		EnterRule(_localctx, 858, RULE_table_source_item_joined);
		try {
			int _alt;
			State = 10387;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1460,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10371; table_source_item();
				State = 10375;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1458,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10372; _localctx._join_part = join_part();
						_localctx._joins.Add(_localctx._join_part);
						}
						} 
					}
					State = 10377;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1458,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10378; Match(LR_BRACKET);
				State = 10379; table_source_item_joined();
				State = 10380; Match(RR_BRACKET);
				State = 10384;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1459,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10381; _localctx._join_part = join_part();
						_localctx._joins.Add(_localctx._join_part);
						}
						} 
					}
					State = 10386;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1459,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_itemContext : ParserRuleContext {
		public IToken loc_id;
		public IToken loc_id_call;
		public Function_callContext loc_fcall;
		public Function_callContext oldstyle_fcall;
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Rowset_functionContext rowset_function() {
			return GetRuleContext<Rowset_functionContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Change_tableContext change_table() {
			return GetRuleContext<Change_tableContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Nodes_methodContext nodes_method() {
			return GetRuleContext<Nodes_methodContext>(0);
		}
		public Open_xmlContext open_xml() {
			return GetRuleContext<Open_xmlContext>(0);
		}
		public Open_jsonContext open_json() {
			return GetRuleContext<Open_jsonContext>(0);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Table_source_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_itemContext table_source_item() {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, State);
		EnterRule(_localctx, 860, RULE_table_source_item);
		try {
			State = 10448;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1475,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10389; table_name_with_hint();
				State = 10391;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1461,_ctx) ) {
				case 1:
					{
					State = 10390; as_table_alias();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10393; full_table_name();
				State = 10395;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1462,_ctx) ) {
				case 1:
					{
					State = 10394; as_table_alias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10397; rowset_function();
				State = 10399;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1463,_ctx) ) {
				case 1:
					{
					State = 10398; as_table_alias();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10401; Match(LR_BRACKET);
				State = 10402; derived_table();
				State = 10403; Match(RR_BRACKET);
				State = 10408;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1465,_ctx) ) {
				case 1:
					{
					State = 10404; as_table_alias();
					State = 10406;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1464,_ctx) ) {
					case 1:
						{
						State = 10405; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10410; change_table();
				State = 10412;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1466,_ctx) ) {
				case 1:
					{
					State = 10411; as_table_alias();
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10414; function_call();
				State = 10419;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1468,_ctx) ) {
				case 1:
					{
					State = 10415; as_table_alias();
					State = 10417;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1467,_ctx) ) {
					case 1:
						{
						State = 10416; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10421; _localctx.loc_id = Match(LOCAL_ID);
				State = 10423;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1469,_ctx) ) {
				case 1:
					{
					State = 10422; as_table_alias();
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10425; nodes_method();
				State = 10430;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1471,_ctx) ) {
				case 1:
					{
					State = 10426; as_table_alias();
					State = 10428;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1470,_ctx) ) {
					case 1:
						{
						State = 10427; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10432; _localctx.loc_id_call = Match(LOCAL_ID);
				State = 10433; Match(DOT);
				State = 10434; _localctx.loc_fcall = function_call();
				State = 10439;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1473,_ctx) ) {
				case 1:
					{
					State = 10435; as_table_alias();
					State = 10437;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1472,_ctx) ) {
					case 1:
						{
						State = 10436; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10441; open_xml();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10442; open_json();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10443; Match(DOUBLE_COLON);
				State = 10444; _localctx.oldstyle_fcall = function_call();
				State = 10446;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1474,_ctx) ) {
				case 1:
					{
					State = 10445; as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_xmlContext : ParserRuleContext {
		public ITerminalNode OPENXML() { return GetToken(TSqlParser.OPENXML, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return GetRuleContext<Schema_declarationContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_xml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_xml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_xml(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_xml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_xmlContext open_xml() {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, State);
		EnterRule(_localctx, 862, RULE_open_xml);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10450; Match(OPENXML);
			State = 10451; Match(LR_BRACKET);
			State = 10452; expression(0);
			State = 10453; Match(COMMA);
			State = 10454; expression(0);
			State = 10457;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1476,_ctx) ) {
			case 1:
				{
				State = 10455; Match(COMMA);
				State = 10456; expression(0);
				}
				break;
			}
			State = 10459; Match(RR_BRACKET);
			State = 10465;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1477,_ctx) ) {
			case 1:
				{
				State = 10460; Match(WITH);
				State = 10461; Match(LR_BRACKET);
				State = 10462; schema_declaration();
				State = 10463; Match(RR_BRACKET);
				}
				break;
			}
			State = 10468;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1478,_ctx) ) {
			case 1:
				{
				State = 10467; as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_jsonContext : ParserRuleContext {
		public ITerminalNode OPENJSON() { return GetToken(TSqlParser.OPENJSON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Json_declarationContext json_declaration() {
			return GetRuleContext<Json_declarationContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Open_jsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_json; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_json(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_json(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_json(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_jsonContext open_json() {
		Open_jsonContext _localctx = new Open_jsonContext(_ctx, State);
		EnterRule(_localctx, 864, RULE_open_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10470; Match(OPENJSON);
			State = 10471; Match(LR_BRACKET);
			State = 10472; expression(0);
			State = 10475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1479,_ctx) ) {
			case 1:
				{
				State = 10473; Match(COMMA);
				State = 10474; expression(0);
				}
				break;
			}
			State = 10477; Match(RR_BRACKET);
			State = 10483;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1480,_ctx) ) {
			case 1:
				{
				State = 10478; Match(WITH);
				State = 10479; Match(LR_BRACKET);
				State = 10480; json_declaration();
				State = 10481; Match(RR_BRACKET);
				}
				break;
			}
			State = 10486;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1481,_ctx) ) {
			case 1:
				{
				State = 10485; as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_declarationContext : ParserRuleContext {
		public Json_column_declarationContext _json_column_declaration;
		public IList<Json_column_declarationContext> _json_col = new List<Json_column_declarationContext>();
		public Json_column_declarationContext[] json_column_declaration() {
			return GetRuleContexts<Json_column_declarationContext>();
		}
		public Json_column_declarationContext json_column_declaration(int i) {
			return GetRuleContext<Json_column_declarationContext>(i);
		}
		public Json_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Json_declarationContext json_declaration() {
		Json_declarationContext _localctx = new Json_declarationContext(_ctx, State);
		EnterRule(_localctx, 866, RULE_json_declaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10488; _localctx._json_column_declaration = json_column_declaration();
			_localctx._json_col.Add(_localctx._json_column_declaration);
			State = 10493;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1482,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10489; Match(COMMA);
					State = 10490; _localctx._json_column_declaration = json_column_declaration();
					_localctx._json_col.Add(_localctx._json_column_declaration);
					}
					} 
				}
				State = 10495;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1482,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_column_declarationContext : ParserRuleContext {
		public Column_declarationContext column_declaration() {
			return GetRuleContext<Column_declarationContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public Json_column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_column_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_column_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_column_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson_column_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Json_column_declarationContext json_column_declaration() {
		Json_column_declarationContext _localctx = new Json_column_declarationContext(_ctx, State);
		EnterRule(_localctx, 868, RULE_json_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10496; column_declaration();
			State = 10499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1483,_ctx) ) {
			case 1:
				{
				State = 10497; Match(AS);
				State = 10498; Match(JSON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_declarationContext : ParserRuleContext {
		public Column_declarationContext _column_declaration;
		public IList<Column_declarationContext> _xml_col = new List<Column_declarationContext>();
		public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSchema_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSchema_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_declarationContext schema_declaration() {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, State);
		EnterRule(_localctx, 870, RULE_schema_declaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10501; _localctx._column_declaration = column_declaration();
			_localctx._xml_col.Add(_localctx._column_declaration);
			State = 10506;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1484,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10502; Match(COMMA);
					State = 10503; _localctx._column_declaration = column_declaration();
					_localctx._xml_col.Add(_localctx._column_declaration);
					}
					} 
				}
				State = 10508;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1484,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, State);
		EnterRule(_localctx, 872, RULE_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10509; id_();
			State = 10510; data_type();
			State = 10512;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1485,_ctx) ) {
			case 1:
				{
				State = 10511; Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tableContext : ParserRuleContext {
		public Change_table_changesContext change_table_changes() {
			return GetRuleContext<Change_table_changesContext>(0);
		}
		public Change_table_versionContext change_table_version() {
			return GetRuleContext<Change_table_versionContext>(0);
		}
		public Change_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tableContext change_table() {
		Change_tableContext _localctx = new Change_tableContext(_ctx, State);
		EnterRule(_localctx, 874, RULE_change_table);
		try {
			State = 10516;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1486,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10514; change_table_changes();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10515; change_table_version();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_table_changesContext : ParserRuleContext {
		public Table_nameContext changetable;
		public IToken changesid;
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Change_table_changesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table_changes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table_changes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table_changes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_table_changes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_table_changesContext change_table_changes() {
		Change_table_changesContext _localctx = new Change_table_changesContext(_ctx, State);
		EnterRule(_localctx, 876, RULE_change_table_changes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10518; Match(CHANGETABLE);
			State = 10519; Match(LR_BRACKET);
			State = 10520; Match(CHANGES);
			State = 10521; _localctx.changetable = table_name();
			State = 10522; Match(COMMA);
			State = 10523;
			_localctx.changesid = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==NULL_ || _la==LOCAL_ID || _la==DECIMAL) ) {
				_localctx.changesid = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10524; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_table_versionContext : ParserRuleContext {
		public Table_nameContext versiontable;
		public Full_column_name_listContext pk_columns;
		public Select_listContext pk_values;
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode VERSION() { return GetToken(TSqlParser.VERSION, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public Change_table_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table_version; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table_version(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table_version(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_table_version(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_table_versionContext change_table_version() {
		Change_table_versionContext _localctx = new Change_table_versionContext(_ctx, State);
		EnterRule(_localctx, 878, RULE_change_table_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10526; Match(CHANGETABLE);
			State = 10527; Match(LR_BRACKET);
			State = 10528; Match(VERSION);
			State = 10529; _localctx.versiontable = table_name();
			State = 10530; Match(COMMA);
			State = 10531; _localctx.pk_columns = full_column_name_list();
			State = 10532; Match(COMMA);
			State = 10533; _localctx.pk_values = select_list();
			State = 10534; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_partContext : ParserRuleContext {
		public Join_onContext join_on() {
			return GetRuleContext<Join_onContext>(0);
		}
		public Cross_joinContext cross_join() {
			return GetRuleContext<Cross_joinContext>(0);
		}
		public Apply_Context apply_() {
			return GetRuleContext<Apply_Context>(0);
		}
		public PivotContext pivot() {
			return GetRuleContext<PivotContext>(0);
		}
		public UnpivotContext unpivot() {
			return GetRuleContext<UnpivotContext>(0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_partContext join_part() {
		Join_partContext _localctx = new Join_partContext(_ctx, State);
		EnterRule(_localctx, 880, RULE_join_part);
		try {
			State = 10541;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1487,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10536; join_on();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10537; cross_join();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10538; apply_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10539; pivot();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10540; unpivot();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_onContext : ParserRuleContext {
		public IToken inner;
		public IToken join_type;
		public IToken outer;
		public IToken join_hint;
		public Table_sourceContext source;
		public Search_conditionContext cond;
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode INNER() { return GetToken(TSqlParser.INNER, 0); }
		public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public Join_onContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_on; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_on(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_on(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_on(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_onContext join_on() {
		Join_onContext _localctx = new Join_onContext(_ctx, State);
		EnterRule(_localctx, 882, RULE_join_on);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10550;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1490,_ctx) ) {
			case 1:
				{
				State = 10544;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1488,_ctx) ) {
				case 1:
					{
					State = 10543; _localctx.inner = Match(INNER);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 10546;
				_localctx.join_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_localctx.join_type = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10548;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1489,_ctx) ) {
				case 1:
					{
					State = 10547; _localctx.outer = Match(OUTER);
					}
					break;
				}
				}
				break;
			}
			State = 10553;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1491,_ctx) ) {
			case 1:
				{
				State = 10552;
				_localctx.join_hint = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
					_localctx.join_hint = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 10555; Match(JOIN);
			State = 10556; _localctx.source = table_source();
			State = 10557; Match(ON);
			State = 10558; _localctx.cond = search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cross_joinContext : ParserRuleContext {
		public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Cross_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cross_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCross_join(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCross_join(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCross_join(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cross_joinContext cross_join() {
		Cross_joinContext _localctx = new Cross_joinContext(_ctx, State);
		EnterRule(_localctx, 884, RULE_cross_join);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10560; Match(CROSS);
			State = 10561; Match(JOIN);
			State = 10562; table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Apply_Context : ParserRuleContext {
		public IToken apply_style;
		public Table_sourceContext source;
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public Apply_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apply_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterApply_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitApply_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApply_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Apply_Context apply_() {
		Apply_Context _localctx = new Apply_Context(_ctx, State);
		EnterRule(_localctx, 886, RULE_apply_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10564;
			_localctx.apply_style = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==CROSS || _la==OUTER) ) {
				_localctx.apply_style = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10565; Match(APPLY);
			State = 10566; _localctx.source = table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PivotContext : ParserRuleContext {
		public ITerminalNode PIVOT() { return GetToken(TSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public PivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PivotContext pivot() {
		PivotContext _localctx = new PivotContext(_ctx, State);
		EnterRule(_localctx, 888, RULE_pivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10568; Match(PIVOT);
			State = 10569; pivot_clause();
			State = 10570; as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpivotContext : ParserRuleContext {
		public ITerminalNode UNPIVOT() { return GetToken(TSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public UnpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpivotContext unpivot() {
		UnpivotContext _localctx = new UnpivotContext(_ctx, State);
		EnterRule(_localctx, 890, RULE_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10572; Match(UNPIVOT);
			State = 10573; unpivot_clause();
			State = 10574; as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_clauseContext : ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_clauseContext pivot_clause() {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, State);
		EnterRule(_localctx, 892, RULE_pivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10576; Match(LR_BRACKET);
			State = 10577; aggregate_windowed_function();
			State = 10578; Match(FOR);
			State = 10579; full_column_name();
			State = 10580; Match(IN);
			State = 10581; column_alias_list();
			State = 10582; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_clauseContext : ParserRuleContext {
		public ExpressionContext unpivot_exp;
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_clauseContext unpivot_clause() {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, State);
		EnterRule(_localctx, 894, RULE_unpivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10584; Match(LR_BRACKET);
			State = 10585; _localctx.unpivot_exp = expression(0);
			State = 10586; Match(FOR);
			State = 10587; full_column_name();
			State = 10588; Match(IN);
			State = 10589; Match(LR_BRACKET);
			State = 10590; full_column_name_list();
			State = 10591; Match(RR_BRACKET);
			State = 10592; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_name_listContext : ParserRuleContext {
		public Full_column_nameContext _full_column_name;
		public IList<Full_column_nameContext> _column = new List<Full_column_nameContext>();
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_name_listContext full_column_name_list() {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, State);
		EnterRule(_localctx, 896, RULE_full_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10594; _localctx._full_column_name = full_column_name();
			_localctx._column.Add(_localctx._full_column_name);
			State = 10599;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1492,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10595; Match(COMMA);
					State = 10596; _localctx._full_column_name = full_column_name();
					_localctx._column.Add(_localctx._full_column_name);
					}
					} 
				}
				State = 10601;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1492,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_name_with_hintContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name_with_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name_with_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name_with_hint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name_with_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_name_with_hintContext table_name_with_hint() {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, State);
		EnterRule(_localctx, 898, RULE_table_name_with_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10602; table_name();
			State = 10604;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1493,_ctx) ) {
			case 1:
				{
				State = 10603; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_functionContext : ParserRuleContext {
		public IToken provider_name;
		public IToken connectionString;
		public IToken sql;
		public IToken data_file;
		public ITerminalNode OPENROWSET() { return GetToken(TSqlParser.OPENROWSET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		public Bulk_optionContext[] bulk_option() {
			return GetRuleContexts<Bulk_optionContext>();
		}
		public Bulk_optionContext bulk_option(int i) {
			return GetRuleContext<Bulk_optionContext>(i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_functionContext rowset_function() {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, State);
		EnterRule(_localctx, 900, RULE_rowset_function);
		try {
			int _alt;
			State = 10632;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1496,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 10606; Match(OPENROWSET);
				State = 10607; Match(LR_BRACKET);
				State = 10608; _localctx.provider_name = Match(STRING);
				State = 10609; Match(COMMA);
				State = 10610; _localctx.connectionString = Match(STRING);
				State = 10611; Match(COMMA);
				State = 10612; _localctx.sql = Match(STRING);
				State = 10613; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 10614; Match(OPENROWSET);
				State = 10615; Match(LR_BRACKET);
				State = 10616; Match(BULK);
				State = 10617; _localctx.data_file = Match(STRING);
				State = 10618; Match(COMMA);
				State = 10628;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1495,_ctx) ) {
				case 1:
					{
					State = 10619; bulk_option();
					State = 10624;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1494,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 10620; Match(COMMA);
							State = 10621; bulk_option();
							}
							} 
						}
						State = 10626;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1494,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 10627; id_();
					}
					break;
				}
				State = 10630; Match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bulk_optionContext : ParserRuleContext {
		public IToken bulk_option_value;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bulk_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBulk_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBulk_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBulk_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bulk_optionContext bulk_option() {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, State);
		EnterRule(_localctx, 902, RULE_bulk_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10634; id_();
			State = 10635; Match(EQUAL);
			State = 10636;
			_localctx.bulk_option_value = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				_localctx.bulk_option_value = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerived_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, State);
		EnterRule(_localctx, 904, RULE_derived_table);
		try {
			State = 10648;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1497,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10638; subquery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10639; Match(LR_BRACKET);
				State = 10640; subquery();
				State = 10641; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10643; table_value_constructor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10644; Match(LR_BRACKET);
				State = 10645; table_value_constructor();
				State = 10646; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	 
		public Function_callContext() { }
		public virtual void CopyFrom(Function_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RANKING_WINDOWED_FUNCContext : Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return GetRuleContext<Ranking_windowed_functionContext>(0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRANKING_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRANKING_WINDOWED_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRANKING_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AGGREGATE_WINDOWED_FUNCContext : Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAGGREGATE_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAGGREGATE_WINDOWED_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAGGREGATE_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ANALYTIC_WINDOWED_FUNCContext : Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return GetRuleContext<Analytic_windowed_functionContext>(0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterANALYTIC_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitANALYTIC_WINDOWED_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitANALYTIC_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BUILT_IN_FUNCContext : Function_callContext {
		public Built_in_functionsContext built_in_functions() {
			return GetRuleContext<Built_in_functionsContext>(0);
		}
		public BUILT_IN_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBUILT_IN_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBUILT_IN_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBUILT_IN_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SCALAR_FUNCTIONContext : Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return GetRuleContext<Scalar_function_nameContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSCALAR_FUNCTION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSCALAR_FUNCTION(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSCALAR_FUNCTION(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FREE_TEXTContext : Function_callContext {
		public Freetext_functionContext freetext_function() {
			return GetRuleContext<Freetext_functionContext>(0);
		}
		public FREE_TEXTContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFREE_TEXT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFREE_TEXT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFREE_TEXT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PARTITION_FUNCContext : Function_callContext {
		public Partition_functionContext partition_function() {
			return GetRuleContext<Partition_functionContext>(0);
		}
		public PARTITION_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPARTITION_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPARTITION_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPARTITION_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(_ctx, State);
		EnterRule(_localctx, 906, RULE_function_call);
		try {
			State = 10663;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1499,_ctx) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 10650; ranking_windowed_function();
				}
				break;

			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 10651; aggregate_windowed_function();
				}
				break;

			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 10652; analytic_windowed_function();
				}
				break;

			case 4:
				_localctx = new BUILT_IN_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 10653; built_in_functions();
				}
				break;

			case 5:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 10654; scalar_function_name();
				State = 10655; Match(LR_BRACKET);
				State = 10657;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1498,_ctx) ) {
				case 1:
					{
					State = 10656; expression_list();
					}
					break;
				}
				State = 10659; Match(RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new FREE_TEXTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 10661; freetext_function();
				}
				break;

			case 7:
				_localctx = new PARTITION_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 10662; partition_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_functionContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context func_name;
		public ITerminalNode DOLLAR_PARTITION() { return GetToken(TSqlParser.DOLLAR_PARTITION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartition_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_functionContext partition_function() {
		Partition_functionContext _localctx = new Partition_functionContext(_ctx, State);
		EnterRule(_localctx, 908, RULE_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10668;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1500,_ctx) ) {
			case 1:
				{
				State = 10665; _localctx.database = id_();
				State = 10666; Match(DOT);
				}
				break;
			}
			State = 10670; Match(DOLLAR_PARTITION);
			State = 10671; Match(DOT);
			State = 10672; _localctx.func_name = id_();
			State = 10673; Match(LR_BRACKET);
			State = 10674; expression(0);
			State = 10675; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freetext_functionContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CONTAINSTABLE() { return GetToken(TSqlParser.CONTAINSTABLE, 0); }
		public ITerminalNode FREETEXTTABLE() { return GetToken(TSqlParser.FREETEXTTABLE, 0); }
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode SEMANTICSIMILARITYTABLE() { return GetToken(TSqlParser.SEMANTICSIMILARITYTABLE, 0); }
		public ITerminalNode SEMANTICKEYPHRASETABLE() { return GetToken(TSqlParser.SEMANTICKEYPHRASETABLE, 0); }
		public ITerminalNode SEMANTICSIMILARITYDETAILSTABLE() { return GetToken(TSqlParser.SEMANTICSIMILARITYDETAILSTABLE, 0); }
		public Freetext_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freetext_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFreetext_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFreetext_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreetext_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Freetext_functionContext freetext_function() {
		Freetext_functionContext _localctx = new Freetext_functionContext(_ctx, State);
		EnterRule(_localctx, 910, RULE_freetext_function);
		int _la;
		try {
			int _alt;
			State = 10745;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1507,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10677;
				_la = _input.La(1);
				if ( !(_la==CONTAINSTABLE || _la==FREETEXTTABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10678; Match(LR_BRACKET);
				State = 10679; table_name();
				State = 10680; Match(COMMA);
				State = 10694;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1502,_ctx) ) {
				case 1:
					{
					State = 10681; full_column_name();
					}
					break;

				case 2:
					{
					State = 10682; Match(LR_BRACKET);
					State = 10683; full_column_name();
					State = 10688;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1501,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 10684; Match(COMMA);
							State = 10685; full_column_name();
							}
							} 
						}
						State = 10690;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1501,_ctx);
					}
					State = 10691; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 10693; Match(STAR);
					}
					break;
				}
				State = 10696; Match(COMMA);
				State = 10697; expression(0);
				State = 10701;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1503,_ctx) ) {
				case 1:
					{
					State = 10698; Match(COMMA);
					State = 10699; Match(LANGUAGE);
					State = 10700; expression(0);
					}
					break;
				}
				State = 10705;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1504,_ctx) ) {
				case 1:
					{
					State = 10703; Match(COMMA);
					State = 10704; expression(0);
					}
					break;
				}
				State = 10707; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10709;
				_la = _input.La(1);
				if ( !(_la==SEMANTICKEYPHRASETABLE || _la==SEMANTICSIMILARITYTABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10710; Match(LR_BRACKET);
				State = 10711; table_name();
				State = 10712; Match(COMMA);
				State = 10726;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1506,_ctx) ) {
				case 1:
					{
					State = 10713; full_column_name();
					}
					break;

				case 2:
					{
					State = 10714; Match(LR_BRACKET);
					State = 10715; full_column_name();
					State = 10720;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1505,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 10716; Match(COMMA);
							State = 10717; full_column_name();
							}
							} 
						}
						State = 10722;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1505,_ctx);
					}
					State = 10723; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 10725; Match(STAR);
					}
					break;
				}
				State = 10728; Match(COMMA);
				State = 10729; expression(0);
				State = 10730; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10732; Match(SEMANTICSIMILARITYDETAILSTABLE);
				State = 10733; Match(LR_BRACKET);
				State = 10734; table_name();
				State = 10735; Match(COMMA);
				State = 10736; full_column_name();
				State = 10737; Match(COMMA);
				State = 10738; expression(0);
				State = 10739; Match(COMMA);
				State = 10740; full_column_name();
				State = 10741; Match(COMMA);
				State = 10742; expression(0);
				State = 10743; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freetext_predicateContext : ParserRuleContext {
		public ITerminalNode CONTAINS() { return GetToken(TSqlParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode FREETEXT() { return GetToken(TSqlParser.FREETEXT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public Freetext_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freetext_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFreetext_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFreetext_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreetext_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Freetext_predicateContext freetext_predicate() {
		Freetext_predicateContext _localctx = new Freetext_predicateContext(_ctx, State);
		EnterRule(_localctx, 912, RULE_freetext_predicate);
		try {
			int _alt;
			State = 10803;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1513,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10747; Match(CONTAINS);
				State = 10748; Match(LR_BRACKET);
				State = 10769;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1509,_ctx) ) {
				case 1:
					{
					State = 10749; full_column_name();
					}
					break;

				case 2:
					{
					State = 10750; Match(LR_BRACKET);
					State = 10751; full_column_name();
					State = 10756;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1508,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 10752; Match(COMMA);
							State = 10753; full_column_name();
							}
							} 
						}
						State = 10758;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1508,_ctx);
					}
					State = 10759; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 10761; Match(STAR);
					}
					break;

				case 4:
					{
					State = 10762; Match(PROPERTY);
					State = 10763; Match(LR_BRACKET);
					State = 10764; full_column_name();
					State = 10765; Match(COMMA);
					State = 10766; expression(0);
					State = 10767; Match(RR_BRACKET);
					}
					break;
				}
				State = 10771; Match(COMMA);
				State = 10772; expression(0);
				State = 10773; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10775; Match(FREETEXT);
				State = 10776; Match(LR_BRACKET);
				State = 10777; table_name();
				State = 10778; Match(COMMA);
				State = 10792;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1511,_ctx) ) {
				case 1:
					{
					State = 10779; full_column_name();
					}
					break;

				case 2:
					{
					State = 10780; Match(LR_BRACKET);
					State = 10781; full_column_name();
					State = 10786;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1510,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 10782; Match(COMMA);
							State = 10783; full_column_name();
							}
							} 
						}
						State = 10788;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1510,_ctx);
					}
					State = 10789; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 10791; Match(STAR);
					}
					break;
				}
				State = 10794; Match(COMMA);
				State = 10795; expression(0);
				State = 10799;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1512,_ctx) ) {
				case 1:
					{
					State = 10796; Match(COMMA);
					State = 10797; Match(LANGUAGE);
					State = 10798; expression(0);
					}
					break;
				}
				State = 10801; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Built_in_functionsContext : ParserRuleContext {
		public Built_in_functionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_built_in_functions; } }
	 
		public Built_in_functionsContext() { }
		public virtual void CopyFrom(Built_in_functionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BINARY_CHECKSUMContext : Built_in_functionsContext {
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public BINARY_CHECKSUMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBINARY_CHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBINARY_CHECKSUM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBINARY_CHECKSUM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CASTContext : Built_in_functionsContext {
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public CASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TRY_CASTContext : Built_in_functionsContext {
		public ITerminalNode TRY_CAST() { return GetToken(TSqlParser.TRY_CAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public TRY_CASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTRY_CAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTRY_CAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTRY_CAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CONVERTContext : Built_in_functionsContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public ITerminalNode CONVERT() { return GetToken(TSqlParser.CONVERT, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CONVERTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONVERT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONVERT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCONVERT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CHECKSUMContext : Built_in_functionsContext {
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public CHECKSUMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCHECKSUM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCHECKSUM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class COALESCEContext : Built_in_functionsContext {
		public ITerminalNode COALESCE() { return GetToken(TSqlParser.COALESCE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public COALESCEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOALESCE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOALESCE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOALESCE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CURRENT_TIMESTAMPContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_TIMESTAMP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_TIMESTAMP(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCURRENT_TIMESTAMP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CURRENT_USERContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_USER() { return GetToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_USER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCURRENT_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEADDContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext number;
		public ExpressionContext date;
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEADDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEADD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEADD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEADD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEDIFFContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date_first;
		public ExpressionContext date_second;
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEDIFFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEDIFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEDIFF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEDIFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATENAMEContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date;
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATENAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATENAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATENAME(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATENAME(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEPARTContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date;
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATEPARTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEPART(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEPART(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEPART(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GETDATEContext : Built_in_functionsContext {
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public GETDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETDATE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGETDATE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GETUTCDATEContext : Built_in_functionsContext {
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public GETUTCDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETUTCDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETUTCDATE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGETUTCDATE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDENTITYContext : Built_in_functionsContext {
		public IToken seed;
		public IToken increment;
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIDENTITY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIDENTITY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIDENTITY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MIN_ACTIVE_ROWVERSIONContext : Built_in_functionsContext {
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMIN_ACTIVE_ROWVERSION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMIN_ACTIVE_ROWVERSION(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMIN_ACTIVE_ROWVERSION(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NULLIFContext : Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NULLIF() { return GetToken(TSqlParser.NULLIF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NULLIFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNULLIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNULLIF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNULLIF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STUFFContext : Built_in_functionsContext {
		public ExpressionContext str;
		public IToken from;
		public IToken to;
		public ExpressionContext str_with;
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public STUFFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTUFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTUFF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTUFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SESSION_USERContext : Built_in_functionsContext {
		public ITerminalNode SESSION_USER() { return GetToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSESSION_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSESSION_USER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSESSION_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SYSTEM_USERContext : Built_in_functionsContext {
		public ITerminalNode SYSTEM_USER() { return GetToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSYSTEM_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSYSTEM_USER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSYSTEM_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class USERContext : Built_in_functionsContext {
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUSER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUSER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUSER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ISNULLContext : Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ISNULLContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterISNULL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitISNULL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitISNULL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XML_DATA_TYPE_FUNCContext : Built_in_functionsContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return GetRuleContext<Xml_data_type_methodsContext>(0);
		}
		public XML_DATA_TYPE_FUNCContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXML_DATA_TYPE_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXML_DATA_TYPE_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXML_DATA_TYPE_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IIFContext : Built_in_functionsContext {
		public Search_conditionContext cond;
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IIFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIIF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIIF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STRINGAGGContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public STRINGAGGContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTRINGAGG(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTRINGAGG(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTRINGAGG(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Built_in_functionsContext built_in_functions() {
		Built_in_functionsContext _localctx = new Built_in_functionsContext(_ctx, State);
		EnterRule(_localctx, 914, RULE_built_in_functions);
		try {
			State = 10951;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1518,_ctx) ) {
			case 1:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 10805; Match(BINARY_CHECKSUM);
				State = 10806; Match(LR_BRACKET);
				State = 10807; Match(STAR);
				State = 10808; Match(RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new CASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 10809; Match(CAST);
				State = 10810; Match(LR_BRACKET);
				State = 10811; expression(0);
				State = 10812; Match(AS);
				State = 10813; data_type();
				State = 10814; Match(RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new TRY_CASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 10816; Match(TRY_CAST);
				State = 10817; Match(LR_BRACKET);
				State = 10818; expression(0);
				State = 10819; Match(AS);
				State = 10820; data_type();
				State = 10821; Match(RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new CONVERTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 10823; Match(CONVERT);
				State = 10824; Match(LR_BRACKET);
				State = 10825; ((CONVERTContext)_localctx).convert_data_type = data_type();
				State = 10826; Match(COMMA);
				State = 10827; ((CONVERTContext)_localctx).convert_expression = expression(0);
				State = 10830;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1514,_ctx) ) {
				case 1:
					{
					State = 10828; Match(COMMA);
					State = 10829; ((CONVERTContext)_localctx).style = expression(0);
					}
					break;
				}
				State = 10832; Match(RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 10834; Match(CHECKSUM);
				State = 10835; Match(LR_BRACKET);
				State = 10836; Match(STAR);
				State = 10837; Match(RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new COALESCEContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 10838; Match(COALESCE);
				State = 10839; Match(LR_BRACKET);
				State = 10840; expression_list();
				State = 10841; Match(RR_BRACKET);
				}
				break;

			case 7:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 10843; Match(CURRENT_TIMESTAMP);
				}
				break;

			case 8:
				_localctx = new CURRENT_USERContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 10844; Match(CURRENT_USER);
				}
				break;

			case 9:
				_localctx = new DATEADDContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 10845; Match(DATEADD);
				State = 10846; Match(LR_BRACKET);
				State = 10847; ((DATEADDContext)_localctx).datepart = Match(ID);
				State = 10848; Match(COMMA);
				State = 10849; ((DATEADDContext)_localctx).number = expression(0);
				State = 10850; Match(COMMA);
				State = 10851; ((DATEADDContext)_localctx).date = expression(0);
				State = 10852; Match(RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new DATEDIFFContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 10854; Match(DATEDIFF);
				State = 10855; Match(LR_BRACKET);
				State = 10856; ((DATEDIFFContext)_localctx).datepart = Match(ID);
				State = 10857; Match(COMMA);
				State = 10858; ((DATEDIFFContext)_localctx).date_first = expression(0);
				State = 10859; Match(COMMA);
				State = 10860; ((DATEDIFFContext)_localctx).date_second = expression(0);
				State = 10861; Match(RR_BRACKET);
				}
				break;

			case 11:
				_localctx = new DATENAMEContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 10863; Match(DATENAME);
				State = 10864; Match(LR_BRACKET);
				State = 10865; ((DATENAMEContext)_localctx).datepart = Match(ID);
				State = 10866; Match(COMMA);
				State = 10867; ((DATENAMEContext)_localctx).date = expression(0);
				State = 10868; Match(RR_BRACKET);
				}
				break;

			case 12:
				_localctx = new DATEPARTContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 10870; Match(DATEPART);
				State = 10871; Match(LR_BRACKET);
				State = 10872; ((DATEPARTContext)_localctx).datepart = Match(ID);
				State = 10873; Match(COMMA);
				State = 10874; ((DATEPARTContext)_localctx).date = expression(0);
				State = 10875; Match(RR_BRACKET);
				}
				break;

			case 13:
				_localctx = new GETDATEContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 10877; Match(GETDATE);
				State = 10878; Match(LR_BRACKET);
				State = 10879; Match(RR_BRACKET);
				}
				break;

			case 14:
				_localctx = new GETUTCDATEContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 10880; Match(GETUTCDATE);
				State = 10881; Match(LR_BRACKET);
				State = 10882; Match(RR_BRACKET);
				}
				break;

			case 15:
				_localctx = new IDENTITYContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 10883; Match(IDENTITY);
				State = 10884; Match(LR_BRACKET);
				State = 10885; data_type();
				State = 10888;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1515,_ctx) ) {
				case 1:
					{
					State = 10886; Match(COMMA);
					State = 10887; ((IDENTITYContext)_localctx).seed = Match(DECIMAL);
					}
					break;
				}
				State = 10892;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1516,_ctx) ) {
				case 1:
					{
					State = 10890; Match(COMMA);
					State = 10891; ((IDENTITYContext)_localctx).increment = Match(DECIMAL);
					}
					break;
				}
				State = 10894; Match(RR_BRACKET);
				}
				break;

			case 16:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 10896; Match(MIN_ACTIVE_ROWVERSION);
				State = 10897; Match(LR_BRACKET);
				State = 10898; Match(RR_BRACKET);
				}
				break;

			case 17:
				_localctx = new NULLIFContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 10899; Match(NULLIF);
				State = 10900; Match(LR_BRACKET);
				State = 10901; ((NULLIFContext)_localctx).left = expression(0);
				State = 10902; Match(COMMA);
				State = 10903; ((NULLIFContext)_localctx).right = expression(0);
				State = 10904; Match(RR_BRACKET);
				}
				break;

			case 18:
				_localctx = new STUFFContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 10906; Match(STUFF);
				State = 10907; Match(LR_BRACKET);
				State = 10908; ((STUFFContext)_localctx).str = expression(0);
				State = 10909; Match(COMMA);
				State = 10910; ((STUFFContext)_localctx).from = Match(DECIMAL);
				State = 10911; Match(COMMA);
				State = 10912; ((STUFFContext)_localctx).to = Match(DECIMAL);
				State = 10913; Match(COMMA);
				State = 10914; ((STUFFContext)_localctx).str_with = expression(0);
				State = 10915; Match(RR_BRACKET);
				}
				break;

			case 19:
				_localctx = new SESSION_USERContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 10917; Match(SESSION_USER);
				}
				break;

			case 20:
				_localctx = new SYSTEM_USERContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 10918; Match(SYSTEM_USER);
				}
				break;

			case 21:
				_localctx = new USERContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 10919; Match(USER);
				}
				break;

			case 22:
				_localctx = new ISNULLContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 10920; Match(ISNULL);
				State = 10921; Match(LR_BRACKET);
				State = 10922; ((ISNULLContext)_localctx).left = expression(0);
				State = 10923; Match(COMMA);
				State = 10924; ((ISNULLContext)_localctx).right = expression(0);
				State = 10925; Match(RR_BRACKET);
				}
				break;

			case 23:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 10927; xml_data_type_methods();
				}
				break;

			case 24:
				_localctx = new IIFContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 10928; Match(IIF);
				State = 10929; Match(LR_BRACKET);
				State = 10930; ((IIFContext)_localctx).cond = search_condition(0);
				State = 10931; Match(COMMA);
				State = 10932; ((IIFContext)_localctx).left = expression(0);
				State = 10933; Match(COMMA);
				State = 10934; ((IIFContext)_localctx).right = expression(0);
				State = 10935; Match(RR_BRACKET);
				}
				break;

			case 25:
				_localctx = new STRINGAGGContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 10937; Match(STRING_AGG);
				State = 10938; Match(LR_BRACKET);
				State = 10939; ((STRINGAGGContext)_localctx).expr = expression(0);
				State = 10940; Match(COMMA);
				State = 10941; ((STRINGAGGContext)_localctx).separator = expression(0);
				State = 10942; Match(RR_BRACKET);
				State = 10949;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1517,_ctx) ) {
				case 1:
					{
					State = 10943; Match(WITHIN);
					State = 10944; Match(GROUP);
					State = 10945; Match(LR_BRACKET);
					State = 10946; order_by_clause();
					State = 10947; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_data_type_methodsContext : ParserRuleContext {
		public Value_methodContext value_method() {
			return GetRuleContext<Value_methodContext>(0);
		}
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Exist_methodContext exist_method() {
			return GetRuleContext<Exist_methodContext>(0);
		}
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_data_type_methods; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_data_type_methods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_data_type_methods(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_data_type_methods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_data_type_methodsContext xml_data_type_methods() {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, State);
		EnterRule(_localctx, 916, RULE_xml_data_type_methods);
		try {
			State = 10957;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1519,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10953; value_method();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10954; query_method();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10955; exist_method();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10956; modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public IToken eventdata;
		public Query_methodContext query;
		public Value_callContext call;
		public Value_callContext value_call() {
			return GetRuleContext<Value_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Value_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_methodContext value_method() {
		Value_methodContext _localctx = new Value_methodContext(_ctx, State);
		EnterRule(_localctx, 918, RULE_value_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10967;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1520,_ctx) ) {
			case 1:
				{
				State = 10959; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 10960; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 10961; _localctx.eventdata = Match(EVENTDATA);
				}
				break;

			case 4:
				{
				State = 10962; _localctx.query = query_method();
				}
				break;

			case 5:
				{
				State = 10963; Match(LR_BRACKET);
				State = 10964; subquery();
				State = 10965; Match(RR_BRACKET);
				}
				break;
			}
			State = 10969; Match(DOT);
			State = 10970; _localctx.call = value_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_callContext : ParserRuleContext {
		public IToken xquery;
		public IToken sqltype;
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Value_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_callContext value_call() {
		Value_callContext _localctx = new Value_callContext(_ctx, State);
		EnterRule(_localctx, 920, RULE_value_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10972; Match(VALUE);
			State = 10973; Match(LR_BRACKET);
			State = 10974; _localctx.xquery = Match(STRING);
			State = 10975; Match(COMMA);
			State = 10976; _localctx.sqltype = Match(STRING);
			State = 10977; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Full_table_nameContext table;
		public Query_callContext call;
		public Query_callContext query_call() {
			return GetRuleContext<Query_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Query_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_methodContext query_method() {
		Query_methodContext _localctx = new Query_methodContext(_ctx, State);
		EnterRule(_localctx, 922, RULE_query_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10986;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1521,_ctx) ) {
			case 1:
				{
				State = 10979; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 10980; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 10981; _localctx.table = full_table_name();
				}
				break;

			case 4:
				{
				State = 10982; Match(LR_BRACKET);
				State = 10983; subquery();
				State = 10984; Match(RR_BRACKET);
				}
				break;
			}
			State = 10988; Match(DOT);
			State = 10989; _localctx.call = query_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_callContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Query_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_callContext query_call() {
		Query_callContext _localctx = new Query_callContext(_ctx, State);
		EnterRule(_localctx, 924, RULE_query_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10991; Match(QUERY);
			State = 10992; Match(LR_BRACKET);
			State = 10993; _localctx.xquery = Match(STRING);
			State = 10994; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Exist_callContext call;
		public Exist_callContext exist_call() {
			return GetRuleContext<Exist_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Exist_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExist_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exist_methodContext exist_method() {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, State);
		EnterRule(_localctx, 926, RULE_exist_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11002;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1522,_ctx) ) {
			case 1:
				{
				State = 10996; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 10997; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 10998; Match(LR_BRACKET);
				State = 10999; subquery();
				State = 11000; Match(RR_BRACKET);
				}
				break;
			}
			State = 11004; Match(DOT);
			State = 11005; _localctx.call = exist_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_callContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Exist_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExist_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exist_callContext exist_call() {
		Exist_callContext _localctx = new Exist_callContext(_ctx, State);
		EnterRule(_localctx, 928, RULE_exist_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11007; Match(EXIST);
			State = 11008; Match(LR_BRACKET);
			State = 11009; _localctx.xquery = Match(STRING);
			State = 11010; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Modify_callContext call;
		public Modify_callContext modify_call() {
			return GetRuleContext<Modify_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Modify_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModify_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Modify_methodContext modify_method() {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, State);
		EnterRule(_localctx, 930, RULE_modify_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11018;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1523,_ctx) ) {
			case 1:
				{
				State = 11012; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 11013; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 11014; Match(LR_BRACKET);
				State = 11015; subquery();
				State = 11016; Match(RR_BRACKET);
				}
				break;
			}
			State = 11020; Match(DOT);
			State = 11021; _localctx.call = modify_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_callContext : ParserRuleContext {
		public IToken xml_dml;
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Modify_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModify_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Modify_callContext modify_call() {
		Modify_callContext _localctx = new Modify_callContext(_ctx, State);
		EnterRule(_localctx, 932, RULE_modify_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11023; Match(MODIFY);
			State = 11024; Match(LR_BRACKET);
			State = 11025; _localctx.xml_dml = Match(STRING);
			State = 11026; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nodes_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public IToken xquery;
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Nodes_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodes_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNodes_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNodes_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodes_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nodes_methodContext nodes_method() {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, State);
		EnterRule(_localctx, 934, RULE_nodes_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11034;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1524,_ctx) ) {
			case 1:
				{
				State = 11028; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 11029; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 11030; Match(LR_BRACKET);
				State = 11031; subquery();
				State = 11032; Match(RR_BRACKET);
				}
				break;
			}
			State = 11036; Match(DOT);
			State = 11037; Match(NODES);
			State = 11038; Match(LR_BRACKET);
			State = 11039; _localctx.xquery = Match(STRING);
			State = 11040; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, State);
		EnterRule(_localctx, 936, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11042; Match(WHEN);
			State = 11043; expression(0);
			State = 11044; Match(THEN);
			State = 11045; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_search_condition_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_search_condition_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_search_condition_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_search_condition_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_search_condition_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_search_condition_sectionContext switch_search_condition_section() {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, State);
		EnterRule(_localctx, 938, RULE_switch_search_condition_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11047; Match(WHEN);
			State = 11048; search_condition(0);
			State = 11049; Match(THEN);
			State = 11050; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_aliasContext : ParserRuleContext {
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_column_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_column_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_aliasContext as_column_alias() {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, State);
		EnterRule(_localctx, 940, RULE_as_column_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11053;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1525,_ctx) ) {
			case 1:
				{
				State = 11052; Match(AS);
				}
				break;
			}
			State = 11055; column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_table_aliasContext : ParserRuleContext {
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_table_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_table_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_table_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_table_aliasContext as_table_alias() {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, State);
		EnterRule(_localctx, 942, RULE_as_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11058;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1526,_ctx) ) {
			case 1:
				{
				State = 11057; Match(AS);
				}
				break;
			}
			State = 11060; table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, State);
		EnterRule(_localctx, 944, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11062; id_();
			State = 11064;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1527,_ctx) ) {
			case 1:
				{
				State = 11063; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_hintsContext : ParserRuleContext {
		public Table_hintContext _table_hint;
		public IList<Table_hintContext> _hint = new List<Table_hintContext>();
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_table_hints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_table_hintsContext with_table_hints() {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, State);
		EnterRule(_localctx, 946, RULE_with_table_hints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11067;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1528,_ctx) ) {
			case 1:
				{
				State = 11066; Match(WITH);
				}
				break;
			}
			State = 11069; Match(LR_BRACKET);
			State = 11070; _localctx._table_hint = table_hint();
			_localctx._hint.Add(_localctx._table_hint);
			State = 11077;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1530,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11072;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1529,_ctx) ) {
					case 1:
						{
						State = 11071; Match(COMMA);
						}
						break;
					}
					State = 11074; _localctx._table_hint = table_hint();
					_localctx._hint.Add(_localctx._table_hint);
					}
					} 
				}
				State = 11079;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1530,_ctx);
			}
			State = 11080; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_with_table_hintsContext : ParserRuleContext {
		public Table_hintContext _table_hint;
		public IList<Table_hintContext> _hint = new List<Table_hintContext>();
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_with_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_with_table_hints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_with_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_with_table_hintsContext insert_with_table_hints() {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, State);
		EnterRule(_localctx, 948, RULE_insert_with_table_hints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11082; Match(WITH);
			State = 11083; Match(LR_BRACKET);
			State = 11084; _localctx._table_hint = table_hint();
			_localctx._hint.Add(_localctx._table_hint);
			State = 11091;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1532,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11086;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1531,_ctx) ) {
					case 1:
						{
						State = 11085; Match(COMMA);
						}
						break;
					}
					State = 11088; _localctx._table_hint = table_hint();
					_localctx._hint.Add(_localctx._table_hint);
					}
					} 
				}
				State = 11093;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1532,_ctx);
			}
			State = 11094; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Index_valueContext[] index_value() {
			return GetRuleContexts<Index_valueContext>();
		}
		public Index_valueContext index_value(int i) {
			return GetRuleContext<Index_valueContext>(i);
		}
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode HOLDLOCK() { return GetToken(TSqlParser.HOLDLOCK, 0); }
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(_ctx, State);
		EnterRule(_localctx, 950, RULE_table_hint);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11097;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1533,_ctx) ) {
			case 1:
				{
				State = 11096; Match(NOEXPAND);
				}
				break;
			}
			State = 11148;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1539,_ctx) ) {
			case 1:
				{
				State = 11099; Match(INDEX);
				State = 11119;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1536,_ctx) ) {
				case 1:
					{
					State = 11100; Match(LR_BRACKET);
					State = 11101; index_value();
					State = 11106;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1534,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11102; Match(COMMA);
							State = 11103; index_value();
							}
							} 
						}
						State = 11108;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1534,_ctx);
					}
					State = 11109; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 11111; index_value();
					State = 11116;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1535,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11112; Match(COMMA);
							State = 11113; index_value();
							}
							} 
						}
						State = 11118;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1535,_ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 11121; Match(INDEX);
				State = 11122; Match(EQUAL);
				State = 11123; index_value();
				}
				break;

			case 3:
				{
				State = 11124; Match(FORCESEEK);
				State = 11139;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1538,_ctx) ) {
				case 1:
					{
					State = 11125; Match(LR_BRACKET);
					State = 11126; index_value();
					State = 11127; Match(LR_BRACKET);
					State = 11128; Match(ID);
					State = 11133;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1537,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11129; Match(COMMA);
							State = 11130; Match(ID);
							}
							} 
						}
						State = 11135;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1537,_ctx);
					}
					State = 11136; Match(RR_BRACKET);
					State = 11137; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 11141; Match(SERIALIZABLE);
				}
				break;

			case 5:
				{
				State = 11142; Match(SNAPSHOT);
				}
				break;

			case 6:
				{
				State = 11143; Match(SPATIAL_WINDOW_MAX_CELLS);
				State = 11144; Match(EQUAL);
				State = 11145; Match(DECIMAL);
				}
				break;

			case 7:
				{
				State = 11146; Match(HOLDLOCK);
				}
				break;

			case 8:
				{
				State = 11147; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_valueContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_valueContext index_value() {
		Index_valueContext _localctx = new Index_valueContext(_ctx, State);
		EnterRule(_localctx, 952, RULE_index_value);
		try {
			State = 11152;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1540,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11150; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11151; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_alias_listContext : ParserRuleContext {
		public Column_aliasContext _column_alias;
		public IList<Column_aliasContext> _alias = new List<Column_aliasContext>();
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_alias_listContext column_alias_list() {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, State);
		EnterRule(_localctx, 954, RULE_column_alias_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11154; Match(LR_BRACKET);
			State = 11155; _localctx._column_alias = column_alias();
			_localctx._alias.Add(_localctx._column_alias);
			State = 11160;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1541,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11156; Match(COMMA);
					State = 11157; _localctx._column_alias = column_alias();
					_localctx._alias.Add(_localctx._column_alias);
					}
					} 
				}
				State = 11162;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1541,_ctx);
			}
			State = 11163; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, State);
		EnterRule(_localctx, 956, RULE_column_alias);
		try {
			State = 11167;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1542,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11165; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11166; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_value_constructorContext : ParserRuleContext {
		public Expression_listContext _expression_list;
		public IList<Expression_listContext> _exps = new List<Expression_listContext>();
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Expression_listContext[] expression_list() {
			return GetRuleContexts<Expression_listContext>();
		}
		public Expression_listContext expression_list(int i) {
			return GetRuleContext<Expression_listContext>(i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_value_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_value_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_value_constructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_value_constructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_value_constructorContext table_value_constructor() {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, State);
		EnterRule(_localctx, 958, RULE_table_value_constructor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11169; Match(VALUES);
			State = 11170; Match(LR_BRACKET);
			State = 11171; _localctx._expression_list = expression_list();
			_localctx._exps.Add(_localctx._expression_list);
			State = 11172; Match(RR_BRACKET);
			State = 11180;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1543,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11173; Match(COMMA);
					State = 11174; Match(LR_BRACKET);
					State = 11175; _localctx._expression_list = expression_list();
					_localctx._exps.Add(_localctx._expression_list);
					State = 11176; Match(RR_BRACKET);
					}
					} 
				}
				State = 11182;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1543,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _exp = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(_ctx, State);
		EnterRule(_localctx, 960, RULE_expression_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11183; _localctx._expression = expression(0);
			_localctx._exp.Add(_localctx._expression);
			State = 11188;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1544,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11184; Match(COMMA);
					State = 11185; _localctx._expression = expression(0);
					_localctx._exp.Add(_localctx._expression);
					}
					} 
				}
				State = 11190;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1544,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ranking_windowed_functionContext : ParserRuleContext {
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranking_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRanking_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRanking_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRanking_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ranking_windowed_functionContext ranking_windowed_function() {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 962, RULE_ranking_windowed_function);
		int _la;
		try {
			State = 11201;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1545,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11191;
				_la = _input.La(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11192; Match(LR_BRACKET);
				State = 11193; Match(RR_BRACKET);
				State = 11194; over_clause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11195; Match(NTILE);
				State = 11196; Match(LR_BRACKET);
				State = 11197; expression(0);
				State = 11198; Match(RR_BRACKET);
				State = 11199; over_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_windowed_functionContext : ParserRuleContext {
		public IToken agg_func;
		public IToken cnt;
		public All_distinct_expressionContext all_distinct_expression() {
			return GetRuleContext<All_distinct_expressionContext>(0);
		}
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_windowed_functionContext aggregate_windowed_function() {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 964, RULE_aggregate_windowed_function);
		int _la;
		try {
			State = 11235;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1549,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11203;
				_localctx.agg_func = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (STDEV - 567)) | (1L << (STDEVP - 567)) | (1L << (SUM - 567)) | (1L << (VAR - 567)) | (1L << (VARP - 567)))) != 0)) ) {
					_localctx.agg_func = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11204; Match(LR_BRACKET);
				State = 11205; all_distinct_expression();
				State = 11206; Match(RR_BRACKET);
				State = 11208;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1546,_ctx) ) {
				case 1:
					{
					State = 11207; over_clause();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11210;
				_localctx.cnt = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
					_localctx.cnt = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11211; Match(LR_BRACKET);
				State = 11214;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1547,_ctx) ) {
				case 1:
					{
					State = 11212; Match(STAR);
					}
					break;

				case 2:
					{
					State = 11213; all_distinct_expression();
					}
					break;
				}
				State = 11216; Match(RR_BRACKET);
				State = 11218;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1548,_ctx) ) {
				case 1:
					{
					State = 11217; over_clause();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11220; Match(CHECKSUM_AGG);
				State = 11221; Match(LR_BRACKET);
				State = 11222; all_distinct_expression();
				State = 11223; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11225; Match(GROUPING);
				State = 11226; Match(LR_BRACKET);
				State = 11227; expression(0);
				State = 11228; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11230; Match(GROUPING_ID);
				State = 11231; Match(LR_BRACKET);
				State = 11232; expression_list();
				State = 11233; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analytic_windowed_functionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode CUME_DIST() { return GetToken(TSqlParser.CUME_DIST, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(TSqlParser.PERCENT_RANK, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(TSqlParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(TSqlParser.PERCENTILE_DISC, 0); }
		public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analytic_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnalytic_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnalytic_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalytic_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Analytic_windowed_functionContext analytic_windowed_function() {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 966, RULE_analytic_windowed_function);
		int _la;
		try {
			State = 11293;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1555,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11237;
				_la = _input.La(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11238; Match(LR_BRACKET);
				State = 11239; expression(0);
				State = 11240; Match(RR_BRACKET);
				State = 11241; over_clause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11243;
				_la = _input.La(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11244; Match(LR_BRACKET);
				State = 11245; expression(0);
				State = 11252;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1551,_ctx) ) {
				case 1:
					{
					State = 11246; Match(COMMA);
					State = 11247; expression(0);
					State = 11250;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1550,_ctx) ) {
					case 1:
						{
						State = 11248; Match(COMMA);
						State = 11249; expression(0);
						}
						break;
					}
					}
					break;
				}
				State = 11254; Match(RR_BRACKET);
				State = 11255; over_clause();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11257;
				_la = _input.La(1);
				if ( !(_la==CUME_DIST || _la==PERCENT_RANK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11258; Match(LR_BRACKET);
				State = 11259; Match(RR_BRACKET);
				State = 11260; Match(OVER);
				State = 11261; Match(LR_BRACKET);
				State = 11265;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1552,_ctx) ) {
				case 1:
					{
					State = 11262; Match(PARTITION);
					State = 11263; Match(BY);
					State = 11264; expression_list();
					}
					break;
				}
				State = 11267; order_by_clause();
				State = 11268; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11270;
				_la = _input.La(1);
				if ( !(_la==PERCENTILE_CONT || _la==PERCENTILE_DISC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11271; Match(LR_BRACKET);
				State = 11272; expression(0);
				State = 11273; Match(RR_BRACKET);
				State = 11274; Match(WITHIN);
				State = 11275; Match(GROUP);
				State = 11276; Match(LR_BRACKET);
				State = 11277; Match(ORDER);
				State = 11278; Match(BY);
				State = 11279; expression(0);
				State = 11281;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1553,_ctx) ) {
				case 1:
					{
					State = 11280;
					_la = _input.La(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 11283; Match(RR_BRACKET);
				State = 11284; Match(OVER);
				State = 11285; Match(LR_BRACKET);
				State = 11289;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1554,_ctx) ) {
				case 1:
					{
					State = 11286; Match(PARTITION);
					State = 11287; Match(BY);
					State = 11288; expression_list();
					}
					break;
				}
				State = 11291; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_distinct_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_distinct_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAll_distinct_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAll_distinct_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_distinct_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_distinct_expressionContext all_distinct_expression() {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, State);
		EnterRule(_localctx, 968, RULE_all_distinct_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1556,_ctx) ) {
			case 1:
				{
				State = 11295;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 11298; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return GetRuleContext<Row_or_range_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, State);
		EnterRule(_localctx, 970, RULE_over_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11300; Match(OVER);
			State = 11301; Match(LR_BRACKET);
			State = 11305;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1557,_ctx) ) {
			case 1:
				{
				State = 11302; Match(PARTITION);
				State = 11303; Match(BY);
				State = 11304; expression_list();
				}
				break;
			}
			State = 11308;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1558,_ctx) ) {
			case 1:
				{
				State = 11307; order_by_clause();
				}
				break;
			}
			State = 11311;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1559,_ctx) ) {
			case 1:
				{
				State = 11310; row_or_range_clause();
				}
				break;
			}
			State = 11313; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_range_clauseContext : ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_range_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRow_or_range_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRow_or_range_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_or_range_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_range_clauseContext row_or_range_clause() {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, State);
		EnterRule(_localctx, 972, RULE_row_or_range_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11315;
			_la = _input.La(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 11316; window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_extent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, State);
		EnterRule(_localctx, 974, RULE_window_frame_extent);
		try {
			State = 11324;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1560,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11318; window_frame_preceding();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11319; Match(BETWEEN);
				State = 11320; window_frame_bound();
				State = 11321; Match(AND);
				State = 11322; window_frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public Window_frame_followingContext window_frame_following() {
			return GetRuleContext<Window_frame_followingContext>(0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, State);
		EnterRule(_localctx, 976, RULE_window_frame_bound);
		try {
			State = 11328;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1561,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11326; window_frame_preceding();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11327; window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_precedingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_preceding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_preceding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_preceding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_preceding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_precedingContext window_frame_preceding() {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, State);
		EnterRule(_localctx, 978, RULE_window_frame_preceding);
		try {
			State = 11336;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1562,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11330; Match(UNBOUNDED);
				State = 11331; Match(PRECEDING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11332; Match(DECIMAL);
				State = 11333; Match(PRECEDING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11334; Match(CURRENT);
				State = 11335; Match(ROW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_followingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_following; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_following(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_following(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_following(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_followingContext window_frame_following() {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, State);
		EnterRule(_localctx, 980, RULE_window_frame_following);
		try {
			State = 11342;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1563,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11338; Match(UNBOUNDED);
				State = 11339; Match(FOLLOWING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11340; Match(DECIMAL);
				State = 11341; Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_optionContext : ParserRuleContext {
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext[] database_filestream_option() {
			return GetRuleContexts<Database_filestream_optionContext>();
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return GetRuleContext<Database_filestream_optionContext>(i);
		}
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_optionContext create_database_option() {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, State);
		EnterRule(_localctx, 982, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			State = 11378;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1567,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11344; Match(FILESTREAM);
				{
				State = 11345; database_filestream_option();
				State = 11350;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1564,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11346; Match(COMMA);
						State = 11347; database_filestream_option();
						}
						} 
					}
					State = 11352;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1564,_ctx);
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11353; Match(DEFAULT_LANGUAGE);
				State = 11354; Match(EQUAL);
				State = 11357;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1565,_ctx) ) {
				case 1:
					{
					State = 11355; id_();
					}
					break;

				case 2:
					{
					State = 11356; Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11359; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 11360; Match(EQUAL);
				State = 11363;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1566,_ctx) ) {
				case 1:
					{
					State = 11361; id_();
					}
					break;

				case 2:
					{
					State = 11362; Match(STRING);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11365; Match(NESTED_TRIGGERS);
				State = 11366; Match(EQUAL);
				State = 11367;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11368; Match(TRANSFORM_NOISE_WORDS);
				State = 11369; Match(EQUAL);
				State = 11370;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11371; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 11372; Match(EQUAL);
				State = 11373; Match(DECIMAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11374; Match(DB_CHAINING);
				State = 11375;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11376; Match(TRUSTWORTHY);
				State = 11377;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_filestream_optionContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_filestream_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_filestream_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_filestream_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_filestream_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_filestream_optionContext database_filestream_option() {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, State);
		EnterRule(_localctx, 984, RULE_database_filestream_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11380; Match(LR_BRACKET);
			State = 11387;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1568,_ctx) ) {
			case 1:
				{
				{
				State = 11381; Match(NON_TRANSACTED_ACCESS);
				State = 11382; Match(EQUAL);
				State = 11383;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				break;

			case 2:
				{
				{
				State = 11384; Match(DIRECTORY_NAME);
				State = 11385; Match(EQUAL);
				State = 11386; Match(STRING);
				}
				}
				break;
			}
			State = 11389; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_file_specContext : ParserRuleContext {
		public File_groupContext file_group() {
			return GetRuleContext<File_groupContext>(0);
		}
		public File_specContext file_spec() {
			return GetRuleContext<File_specContext>(0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_file_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_file_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_file_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_file_specContext database_file_spec() {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, State);
		EnterRule(_localctx, 986, RULE_database_file_spec);
		try {
			State = 11393;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1569,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11391; file_group();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11392; file_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_groupContext : ParserRuleContext {
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public File_specContext[] file_spec() {
			return GetRuleContexts<File_specContext>();
		}
		public File_specContext file_spec(int i) {
			return GetRuleContext<File_specContext>(i);
		}
		public ITerminalNode[] CONTAINS() { return GetTokens(TSqlParser.CONTAINS); }
		public ITerminalNode CONTAINS(int i) {
			return GetToken(TSqlParser.CONTAINS, i);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_groupContext file_group() {
		File_groupContext _localctx = new File_groupContext(_ctx, State);
		EnterRule(_localctx, 988, RULE_file_group);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11395; Match(FILEGROUP);
			State = 11396; id_();
			State = 11399;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1570,_ctx) ) {
			case 1:
				{
				State = 11397; Match(CONTAINS);
				State = 11398; Match(FILESTREAM);
				}
				break;
			}
			State = 11402;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1571,_ctx) ) {
			case 1:
				{
				State = 11401; Match(DEFAULT);
				}
				break;
			}
			State = 11406;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1572,_ctx) ) {
			case 1:
				{
				State = 11404; Match(CONTAINS);
				State = 11405; Match(MEMORY_OPTIMIZED_DATA);
				}
				break;
			}
			State = 11408; file_spec();
			State = 11413;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1573,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11409; Match(COMMA);
					State = 11410; file_spec();
					}
					} 
				}
				State = 11415;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1573,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_specContext : ParserRuleContext {
		public IToken file;
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_specContext file_spec() {
		File_specContext _localctx = new File_specContext(_ctx, State);
		EnterRule(_localctx, 990, RULE_file_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11416; Match(LR_BRACKET);
			State = 11417; Match(NAME);
			State = 11418; Match(EQUAL);
			State = 11421;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1574,_ctx) ) {
			case 1:
				{
				State = 11419; id_();
				}
				break;

			case 2:
				{
				State = 11420; Match(STRING);
				}
				break;
			}
			State = 11424;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1575,_ctx) ) {
			case 1:
				{
				State = 11423; Match(COMMA);
				}
				break;
			}
			State = 11426; Match(FILENAME);
			State = 11427; Match(EQUAL);
			State = 11428; _localctx.file = Match(STRING);
			State = 11430;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1576,_ctx) ) {
			case 1:
				{
				State = 11429; Match(COMMA);
				}
				break;
			}
			State = 11438;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1578,_ctx) ) {
			case 1:
				{
				State = 11432; Match(SIZE);
				State = 11433; Match(EQUAL);
				State = 11434; file_size();
				State = 11436;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1577,_ctx) ) {
				case 1:
					{
					State = 11435; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 11449;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1581,_ctx) ) {
			case 1:
				{
				State = 11440; Match(MAXSIZE);
				State = 11441; Match(EQUAL);
				State = 11444;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1579,_ctx) ) {
				case 1:
					{
					State = 11442; file_size();
					}
					break;

				case 2:
					{
					State = 11443; Match(UNLIMITED);
					}
					break;
				}
				State = 11447;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1580,_ctx) ) {
				case 1:
					{
					State = 11446; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 11457;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1583,_ctx) ) {
			case 1:
				{
				State = 11451; Match(FILEGROWTH);
				State = 11452; Match(EQUAL);
				State = 11453; file_size();
				State = 11455;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1582,_ctx) ) {
				case 1:
					{
					State = 11454; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 11459; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(_ctx, State);
		EnterRule(_localctx, 992, RULE_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11478;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1585,_ctx) ) {
			case 1:
				{
				State = 11461; _localctx.server = id_();
				State = 11462; Match(DOT);
				State = 11463; _localctx.database = id_();
				State = 11464; Match(DOT);
				State = 11465; _localctx.schema = id_();
				State = 11466; Match(DOT);
				}
				break;

			case 2:
				{
				State = 11468; _localctx.database = id_();
				State = 11469; Match(DOT);
				State = 11471;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1584,_ctx) ) {
				case 1:
					{
					State = 11470; _localctx.schema = id_();
					}
					break;
				}
				State = 11473; Match(DOT);
				}
				break;

			case 3:
				{
				State = 11475; _localctx.schema = id_();
				State = 11476; Match(DOT);
				}
				break;
			}
			State = 11480; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_azure_dwContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context object_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_azure_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 994, RULE_entity_name_for_azure_dw);
		try {
			State = 11487;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1586,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11482; _localctx.schema = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11483; _localctx.schema = id_();
				State = 11484; Match(DOT);
				State = 11485; _localctx.object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_parallel_dwContext : ParserRuleContext {
		public Id_Context schema_database;
		public Id_Context schema;
		public Id_Context object_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_parallel_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 996, RULE_entity_name_for_parallel_dw);
		try {
			State = 11494;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1587,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11489; _localctx.schema_database = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11490; _localctx.schema = id_();
				State = 11491; Match(DOT);
				State = 11492; _localctx.object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_table_nameContext : ParserRuleContext {
		public Id_Context linkedServer;
		public Id_Context schema;
		public Id_Context server;
		public Id_Context database;
		public Id_Context table;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_table_nameContext full_table_name() {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, State);
		EnterRule(_localctx, 998, RULE_full_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11519;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1589,_ctx) ) {
			case 1:
				{
				State = 11496; _localctx.linkedServer = id_();
				State = 11497; Match(DOT);
				State = 11498; Match(DOT);
				State = 11499; _localctx.schema = id_();
				State = 11500; Match(DOT);
				}
				break;

			case 2:
				{
				State = 11502; _localctx.server = id_();
				State = 11503; Match(DOT);
				State = 11504; _localctx.database = id_();
				State = 11505; Match(DOT);
				State = 11506; _localctx.schema = id_();
				State = 11507; Match(DOT);
				}
				break;

			case 3:
				{
				State = 11509; _localctx.database = id_();
				State = 11510; Match(DOT);
				State = 11512;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1588,_ctx) ) {
				case 1:
					{
					State = 11511; _localctx.schema = id_();
					}
					break;
				}
				State = 11514; Match(DOT);
				}
				break;

			case 4:
				{
				State = 11516; _localctx.schema = id_();
				State = 11517; Match(DOT);
				}
				break;
			}
			State = 11521; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public IToken blocking_hierarchy;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 1000, RULE_table_name);
		try {
			State = 11549;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1594,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11533;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1591,_ctx) ) {
				case 1:
					{
					State = 11523; _localctx.database = id_();
					State = 11524; Match(DOT);
					State = 11526;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1590,_ctx) ) {
					case 1:
						{
						State = 11525; _localctx.schema = id_();
						}
						break;
					}
					State = 11528; Match(DOT);
					}
					break;

				case 2:
					{
					State = 11530; _localctx.schema = id_();
					State = 11531; Match(DOT);
					}
					break;
				}
				State = 11535; _localctx.table = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11546;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1593,_ctx) ) {
				case 1:
					{
					State = 11536; _localctx.database = id_();
					State = 11537; Match(DOT);
					State = 11539;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1592,_ctx) ) {
					case 1:
						{
						State = 11538; _localctx.schema = id_();
						}
						break;
					}
					State = 11541; Match(DOT);
					}
					break;

				case 2:
					{
					State = 11543; _localctx.schema = id_();
					State = 11544; Match(DOT);
					}
					break;
				}
				State = 11548; _localctx.blocking_hierarchy = Match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, State);
		EnterRule(_localctx, 1002, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11554;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1595,_ctx) ) {
			case 1:
				{
				State = 11551; _localctx.schema = id_();
				State = 11552; Match(DOT);
				}
				break;
			}
			State = 11556; _localctx.name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_schemaContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_schemaContext func_proc_name_schema() {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(_ctx, State);
		EnterRule(_localctx, 1004, RULE_func_proc_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11561;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1596,_ctx) ) {
			case 1:
				{
				{
				State = 11558; _localctx.schema = id_();
				}
				State = 11559; Match(DOT);
				}
				break;
			}
			State = 11563; _localctx.procedure = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_database_schemaContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_database_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_database_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(_ctx, State);
		EnterRule(_localctx, 1006, RULE_func_proc_name_database_schema);
		try {
			State = 11575;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1599,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11566;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1597,_ctx) ) {
				case 1:
					{
					State = 11565; _localctx.database = id_();
					}
					break;
				}
				State = 11568; Match(DOT);
				State = 11570;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1598,_ctx) ) {
				case 1:
					{
					State = 11569; _localctx.schema = id_();
					}
					break;
				}
				State = 11572; Match(DOT);
				State = 11573; _localctx.procedure = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11574; func_proc_name_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_server_database_schemaContext : ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_server_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_server_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_server_database_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_server_database_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(_ctx, State);
		EnterRule(_localctx, 1008, RULE_func_proc_name_server_database_schema);
		try {
			State = 11591;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1603,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11578;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1600,_ctx) ) {
				case 1:
					{
					State = 11577; _localctx.server = id_();
					}
					break;
				}
				State = 11580; Match(DOT);
				State = 11582;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1601,_ctx) ) {
				case 1:
					{
					State = 11581; _localctx.database = id_();
					}
					break;
				}
				State = 11584; Match(DOT);
				State = 11586;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1602,_ctx) ) {
				case 1:
					{
					State = 11585; _localctx.schema = id_();
					}
					break;
				}
				State = 11588; Match(DOT);
				State = 11589; _localctx.procedure = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11590; func_proc_name_database_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_objectContext : ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_object(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_object(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_object(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_objectContext ddl_object() {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, State);
		EnterRule(_localctx, 1010, RULE_ddl_object);
		try {
			State = 11595;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1604,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11593; full_table_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11594; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public Id_Context column_name;
		public Id_Context server;
		public Id_Context schema;
		public Id_Context tablename;
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, State);
		EnterRule(_localctx, 1012, RULE_full_column_name);
		int _la;
		try {
			State = 11628;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1611,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11597;
				_la = _input.La(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11598; Match(DOT);
				State = 11599; _localctx.column_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11601;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1605,_ctx) ) {
				case 1:
					{
					State = 11600; _localctx.server = id_();
					}
					break;
				}
				State = 11603; Match(DOT);
				State = 11605;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1606,_ctx) ) {
				case 1:
					{
					State = 11604; _localctx.schema = id_();
					}
					break;
				}
				State = 11607; Match(DOT);
				State = 11609;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1607,_ctx) ) {
				case 1:
					{
					State = 11608; _localctx.tablename = id_();
					}
					break;
				}
				State = 11611; Match(DOT);
				State = 11612; _localctx.column_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11614;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1608,_ctx) ) {
				case 1:
					{
					State = 11613; _localctx.schema = id_();
					}
					break;
				}
				State = 11616; Match(DOT);
				State = 11618;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1609,_ctx) ) {
				case 1:
					{
					State = 11617; _localctx.tablename = id_();
					}
					break;
				}
				State = 11620; Match(DOT);
				State = 11621; _localctx.column_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11623;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1610,_ctx) ) {
				case 1:
					{
					State = 11622; _localctx.tablename = id_();
					}
					break;
				}
				State = 11625; Match(DOT);
				State = 11626; _localctx.column_name = id_();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11627; _localctx.column_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_list_with_orderContext : ParserRuleContext {
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list_with_order; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list_with_order(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list_with_order(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list_with_order(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_list_with_orderContext column_name_list_with_order() {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, State);
		EnterRule(_localctx, 1014, RULE_column_name_list_with_order);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11630; id_();
			State = 11632;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1612,_ctx) ) {
			case 1:
				{
				State = 11631;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 11641;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1614,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11634; Match(COMMA);
					State = 11635; id_();
					State = 11637;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1613,_ctx) ) {
					case 1:
						{
						State = 11636;
						_la = _input.La(1);
						if ( !(_la==ASC || _la==DESC) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					} 
				}
				State = 11643;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1614,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_name_listContext : ParserRuleContext {
		public Insert_column_idContext _insert_column_id;
		public IList<Insert_column_idContext> _col = new List<Insert_column_idContext>();
		public Insert_column_idContext[] insert_column_id() {
			return GetRuleContexts<Insert_column_idContext>();
		}
		public Insert_column_idContext insert_column_id(int i) {
			return GetRuleContext<Insert_column_idContext>(i);
		}
		public Insert_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_name_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_column_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_name_listContext insert_column_name_list() {
		Insert_column_name_listContext _localctx = new Insert_column_name_listContext(_ctx, State);
		EnterRule(_localctx, 1016, RULE_insert_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11644; _localctx._insert_column_id = insert_column_id();
			_localctx._col.Add(_localctx._insert_column_id);
			State = 11649;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1615,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11645; Match(COMMA);
					State = 11646; _localctx._insert_column_id = insert_column_id();
					_localctx._col.Add(_localctx._insert_column_id);
					}
					} 
				}
				State = 11651;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1615,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_idContext : ParserRuleContext {
		public Id_Context _id_;
		public IList<Id_Context> _ignore = new List<Id_Context>();
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Insert_column_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_column_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_idContext insert_column_id() {
		Insert_column_idContext _localctx = new Insert_column_idContext(_ctx, State);
		EnterRule(_localctx, 1018, RULE_insert_column_id);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11658;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1617,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11653;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1616,_ctx) ) {
					case 1:
						{
						State = 11652; _localctx._id_ = id_();
						_localctx._ignore.Add(_localctx._id_);
						}
						break;
					}
					State = 11655; Match(DOT);
					}
					} 
				}
				State = 11660;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1617,_ctx);
			}
			State = 11661; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public Id_Context _id_;
		public IList<Id_Context> _col = new List<Id_Context>();
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, State);
		EnterRule(_localctx, 1020, RULE_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11663; _localctx._id_ = id_();
			_localctx._col.Add(_localctx._id_);
			State = 11668;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1618,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11664; Match(COMMA);
					State = 11665; _localctx._id_ = id_();
					_localctx._col.Add(_localctx._id_);
					}
					} 
				}
				State = 11670;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1618,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, State);
		EnterRule(_localctx, 1022, RULE_cursor_name);
		try {
			State = 11673;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1619,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11671; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11672; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_offContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_off; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_off(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_off(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_off(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_offContext on_off() {
		On_offContext _localctx = new On_offContext(_ctx, State);
		EnterRule(_localctx, 1024, RULE_on_off);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11675;
			_la = _input.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusteredContext : ParserRuleContext {
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustered; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClustered(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClustered(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClustered(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusteredContext clustered() {
		ClusteredContext _localctx = new ClusteredContext(_ctx, State);
		EnterRule(_localctx, 1026, RULE_clustered);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11677;
			_la = _input.La(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_notnullContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_notnull; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_notnull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_notnull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_notnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_notnullContext null_notnull() {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, State);
		EnterRule(_localctx, 1028, RULE_null_notnull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11680;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1620,_ctx) ) {
			case 1:
				{
				State = 11679; Match(NOT);
				}
				break;
			}
			State = 11682; Match(NULL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_or_defaultContext : ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_or_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_or_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_or_default(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_or_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_or_defaultContext null_or_default() {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, State);
		EnterRule(_localctx, 1030, RULE_null_or_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11695;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1623,_ctx) ) {
			case 1:
				{
				State = 11684; null_notnull();
				}
				break;

			case 2:
				{
				State = 11685; Match(DEFAULT);
				State = 11686; constant_expression();
				State = 11689;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1621,_ctx) ) {
				case 1:
					{
					State = 11687; Match(COLLATE);
					State = 11688; id_();
					}
					break;
				}
				State = 11693;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1622,_ctx) ) {
				case 1:
					{
					State = 11691; Match(WITH);
					State = 11692; Match(VALUES);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_function_nameContext : ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterScalar_function_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitScalar_function_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_function_nameContext scalar_function_name() {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, State);
		EnterRule(_localctx, 1032, RULE_scalar_function_name);
		try {
			State = 11702;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1624,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11697; func_proc_name_server_database_schema();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11698; Match(RIGHT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11699; Match(LEFT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11700; Match(BINARY_CHECKSUM);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11701; Match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_timerContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_timer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_timer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_timer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_conversation_timer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_timerContext begin_conversation_timer() {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, State);
		EnterRule(_localctx, 1034, RULE_begin_conversation_timer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11704; Match(BEGIN);
			State = 11705; Match(CONVERSATION);
			State = 11706; Match(TIMER);
			State = 11707; Match(LR_BRACKET);
			State = 11708; Match(LOCAL_ID);
			State = 11709; Match(RR_BRACKET);
			State = 11710; Match(TIMEOUT);
			State = 11711; Match(EQUAL);
			State = 11712; time();
			State = 11714;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1625,_ctx) ) {
			case 1:
				{
				State = 11713; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_dialogContext : ParserRuleContext {
		public IToken dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public IToken service_broker_guid;
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Service_nameContext[] service_name() {
			return GetRuleContexts<Service_nameContext>();
		}
		public Service_nameContext service_name(int i) {
			return GetRuleContext<Service_nameContext>(i);
		}
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_dialog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_dialog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_dialog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_conversation_dialog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_dialogContext begin_conversation_dialog() {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, State);
		EnterRule(_localctx, 1036, RULE_begin_conversation_dialog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11716; Match(BEGIN);
			State = 11717; Match(DIALOG);
			State = 11719;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1626,_ctx) ) {
			case 1:
				{
				State = 11718; Match(CONVERSATION);
				}
				break;
			}
			State = 11721; _localctx.dialog_handle = Match(LOCAL_ID);
			State = 11722; Match(FROM);
			State = 11723; Match(SERVICE);
			State = 11724; _localctx.initiator_service_name = service_name();
			State = 11725; Match(TO);
			State = 11726; Match(SERVICE);
			State = 11727; _localctx.target_service_name = service_name();
			State = 11730;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1627,_ctx) ) {
			case 1:
				{
				State = 11728; Match(COMMA);
				State = 11729; _localctx.service_broker_guid = Match(STRING);
				}
				break;
			}
			State = 11732; Match(ON);
			State = 11733; Match(CONTRACT);
			State = 11734; contract_name();
			State = 11757;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1633,_ctx) ) {
			case 1:
				{
				State = 11735; Match(WITH);
				State = 11742;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1629,_ctx) ) {
				case 1:
					{
					State = 11736;
					_la = _input.La(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 11737; Match(EQUAL);
					State = 11738; Match(LOCAL_ID);
					State = 11740;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1628,_ctx) ) {
					case 1:
						{
						State = 11739; Match(COMMA);
						}
						break;
					}
					}
					break;
				}
				State = 11750;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1631,_ctx) ) {
				case 1:
					{
					State = 11744; Match(LIFETIME);
					State = 11745; Match(EQUAL);
					State = 11746;
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 11748;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1630,_ctx) ) {
					case 1:
						{
						State = 11747; Match(COMMA);
						}
						break;
					}
					}
					break;
				}
				State = 11755;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1632,_ctx) ) {
				case 1:
					{
					State = 11752; Match(ENCRYPTION);
					State = 11753; Match(EQUAL);
					State = 11754;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			}
			State = 11760;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1634,_ctx) ) {
			case 1:
				{
				State = 11759; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Contract_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContract_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContract_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContract_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Contract_nameContext contract_name() {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, State);
		EnterRule(_localctx, 1038, RULE_contract_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11764;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1635,_ctx) ) {
			case 1:
				{
				State = 11762; id_();
				}
				break;

			case 2:
				{
				State = 11763; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Service_nameContext service_name() {
		Service_nameContext _localctx = new Service_nameContext(_ctx, State);
		EnterRule(_localctx, 1040, RULE_service_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11768;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1636,_ctx) ) {
			case 1:
				{
				State = 11766; id_();
				}
				break;

			case 2:
				{
				State = 11767; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public IToken faliure_code;
		public IToken failure_text;
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnd_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnd_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public End_conversationContext end_conversation() {
		End_conversationContext _localctx = new End_conversationContext(_ctx, State);
		EnterRule(_localctx, 1042, RULE_end_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11770; Match(END);
			State = 11771; Match(CONVERSATION);
			State = 11772; _localctx.conversation_handle = Match(LOCAL_ID);
			State = 11774;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1637,_ctx) ) {
			case 1:
				{
				State = 11773; Match(SEMI);
				}
				break;
			}
			State = 11788;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1640,_ctx) ) {
			case 1:
				{
				State = 11776; Match(WITH);
				State = 11783;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1638,_ctx) ) {
				case 1:
					{
					State = 11777; Match(ERROR);
					State = 11778; Match(EQUAL);
					State = 11779;
					_localctx.faliure_code = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.faliure_code = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 11780; Match(DESCRIPTION);
					State = 11781; Match(EQUAL);
					State = 11782;
					_localctx.failure_text = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.failure_text = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 11786;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1639,_ctx) ) {
				case 1:
					{
					State = 11785; Match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_conversationContext : ParserRuleContext {
		public TimeContext timeout;
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitfor_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_conversationContext waitfor_conversation() {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, State);
		EnterRule(_localctx, 1044, RULE_waitfor_conversation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11791;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1641,_ctx) ) {
			case 1:
				{
				State = 11790; Match(WAITFOR);
				}
				break;
			}
			State = 11793; Match(LR_BRACKET);
			State = 11794; get_conversation();
			State = 11795; Match(RR_BRACKET);
			State = 11801;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1643,_ctx) ) {
			case 1:
				{
				State = 11797;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1642,_ctx) ) {
				case 1:
					{
					State = 11796; Match(COMMA);
					}
					break;
				}
				State = 11799; Match(TIMEOUT);
				State = 11800; _localctx.timeout = time();
				}
				break;
			}
			State = 11804;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1644,_ctx) ) {
			case 1:
				{
				State = 11803; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_conversationContext : ParserRuleContext {
		public IToken conversation_group_id;
		public Queue_idContext queue;
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return GetRuleContext<Queue_idContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGet_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGet_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_conversationContext get_conversation() {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, State);
		EnterRule(_localctx, 1046, RULE_get_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11806; Match(GET);
			State = 11807; Match(CONVERSATION);
			State = 11808; Match(GROUP);
			State = 11809;
			_localctx.conversation_group_id = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_group_id = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 11810; Match(FROM);
			State = 11811; _localctx.queue = queue_id();
			State = 11813;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1645,_ctx) ) {
			case 1:
				{
				State = 11812; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_idContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_idContext queue_id() {
		Queue_idContext _localctx = new Queue_idContext(_ctx, State);
		EnterRule(_localctx, 1048, RULE_queue_id);
		try {
			State = 11822;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1646,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 11815; _localctx.database_name = id_();
				State = 11816; Match(DOT);
				State = 11817; _localctx.schema_name = id_();
				State = 11818; Match(DOT);
				State = 11819; _localctx.name = id_();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11821; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Send_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public ExpressionContext message_type_name;
		public IToken message_body_expression;
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Send_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_send_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSend_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSend_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSend_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Send_conversationContext send_conversation() {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, State);
		EnterRule(_localctx, 1050, RULE_send_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11824; Match(SEND);
			State = 11825; Match(ON);
			State = 11826; Match(CONVERSATION);
			State = 11827;
			_localctx.conversation_handle = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_handle = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 11828; Match(MESSAGE);
			State = 11829; Match(TYPE);
			State = 11830; _localctx.message_type_name = expression(0);
			State = 11834;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1647,_ctx) ) {
			case 1:
				{
				State = 11831; Match(LR_BRACKET);
				State = 11832;
				_localctx.message_body_expression = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					_localctx.message_body_expression = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11833; Match(RR_BRACKET);
				}
				break;
			}
			State = 11837;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1648,_ctx) ) {
			case 1:
				{
				State = 11836; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public IToken scaled;
		public Id_Context ext_type;
		public IToken scale;
		public IToken prec;
		public IToken seed;
		public IToken inc;
		public IToken double_prec;
		public Id_Context unscaled_type;
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSqlParser.VARCHAR, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSqlParser.NVARCHAR, 0); }
		public ITerminalNode BINARY_KEYWORD() { return GetToken(TSqlParser.BINARY_KEYWORD, 0); }
		public ITerminalNode VARBINARY_KEYWORD() { return GetToken(TSqlParser.VARBINARY_KEYWORD, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(TSqlParser.DOUBLE, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(_ctx, State);
		EnterRule(_localctx, 1052, RULE_data_type);
		int _la;
		try {
			State = 11869;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1651,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11839;
				_localctx.scaled = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BINARY_KEYWORD || _la==VARBINARY_KEYWORD || _la==VARCHAR || _la==NVARCHAR) ) {
					_localctx.scaled = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11840; Match(LR_BRACKET);
				State = 11841; Match(MAX);
				State = 11842; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11843; _localctx.ext_type = id_();
				State = 11844; Match(LR_BRACKET);
				State = 11845; _localctx.scale = Match(DECIMAL);
				State = 11846; Match(COMMA);
				State = 11847; _localctx.prec = Match(DECIMAL);
				State = 11848; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11850; _localctx.ext_type = id_();
				State = 11851; Match(LR_BRACKET);
				State = 11852; _localctx.scale = Match(DECIMAL);
				State = 11853; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11855; _localctx.ext_type = id_();
				State = 11856; Match(IDENTITY);
				State = 11862;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1649,_ctx) ) {
				case 1:
					{
					State = 11857; Match(LR_BRACKET);
					State = 11858; _localctx.seed = Match(DECIMAL);
					State = 11859; Match(COMMA);
					State = 11860; _localctx.inc = Match(DECIMAL);
					State = 11861; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11864; _localctx.double_prec = Match(DOUBLE);
				State = 11866;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1650,_ctx) ) {
				case 1:
					{
					State = 11865; Match(PRECISION);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11868; _localctx.unscaled_type = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(_ctx, State);
		EnterRule(_localctx, 1054, RULE_default_value);
		try {
			State = 11874;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1652,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11871; Match(NULL_);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11872; Match(DEFAULT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11873; constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken dollar;
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 1056, RULE_constant);
		int _la;
		try {
			State = 11891;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1656,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11876; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11877; Match(BINARY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11879;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1653,_ctx) ) {
				case 1:
					{
					State = 11878; sign();
					}
					break;
				}
				State = 11881; Match(DECIMAL);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11883;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1654,_ctx) ) {
				case 1:
					{
					State = 11882; sign();
					}
					break;
				}
				State = 11885;
				_la = _input.La(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11887;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1655,_ctx) ) {
				case 1:
					{
					State = 11886; sign();
					}
					break;
				}
				State = 11889; _localctx.dollar = Match(DOLLAR);
				State = 11890;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(_ctx, State);
		EnterRule(_localctx, 1058, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11893;
			_la = _input.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode AUDIT_GUID() { return GetToken(TSqlParser.AUDIT_GUID, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSqlParser.BIGINT, 0); }
		public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode CATCH() { return GetToken(TSqlParser.CATCH, 0); }
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode FAIL_OPERATION() { return GetToken(TSqlParser.FAIL_OPERATION, 0); }
		public ITerminalNode FAILOVER_MODE() { return GetToken(TSqlParser.FAILOVER_MODE, 0); }
		public ITerminalNode FAILURE() { return GetToken(TSqlParser.FAILURE, 0); }
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode FILEPATH() { return GetToken(TSqlParser.FILEPATH, 0); }
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode FILTER() { return GetToken(TSqlParser.FILTER, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode GO_BATCH() { return GetToken(TSqlParser.GO_BATCH, 0); }
		public ITerminalNode GROUP_MAX_REQUESTS() { return GetToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode HIGH() { return GetToken(TSqlParser.HIGH, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode IMPORTANCE() { return GetToken(TSqlParser.IMPORTANCE, 0); }
		public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode INITIATOR() { return GetToken(TSqlParser.INITIATOR, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public ITerminalNode INT() { return GetToken(TSqlParser.INT, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode LISTENER_URL() { return GetToken(TSqlParser.LISTENER_URL, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode LOCATION() { return GetToken(TSqlParser.LOCATION, 0); }
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode LOW() { return GetToken(TSqlParser.LOW, 0); }
		public ITerminalNode MANUAL() { return GetToken(TSqlParser.MANUAL, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode MAX_DOP() { return GetToken(TSqlParser.MAX_DOP, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode MAX_ROLLOVER_FILES() { return GetToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode MEDIUM() { return GetToken(TSqlParser.MEDIUM, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode NO_TRUNCATE() { return GetToken(TSqlParser.NO_TRUNCATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode NORECOVERY() { return GetToken(TSqlParser.NORECOVERY, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode NUMBER() { return GetToken(TSqlParser.NUMBER, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public ITerminalNode OPENJSON() { return GetToken(TSqlParser.OPENJSON, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode QUEUE_DELAY() { return GetToken(TSqlParser.QUEUE_DELAY, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC() { return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode RESERVE_DISK_SPACE() { return GetToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION() { return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode SEEDING_MODE() { return GetToken(TSqlParser.SEEDING_MODE, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode SENT() { return GetToken(TSqlParser.SENT, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSqlParser.SMALLINT, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode STANDBY() { return GetToken(TSqlParser.STANDBY, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode STATUS() { return GetToken(TSqlParser.STATUS, 0); }
		public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode SYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSqlParser.TINYINT, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode TRY() { return GetToken(TSqlParser.TRY, 0); }
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode ALLOW_CONNECTIONS() { return GetToken(TSqlParser.ALLOW_CONNECTIONS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode ASYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode AUTOMATIC() { return GetToken(TSqlParser.AUTOMATIC, 0); }
		public ITerminalNode AVAILABILITY_MODE() { return GetToken(TSqlParser.AVAILABILITY_MODE, 0); }
		public ITerminalNode BEFORE() { return GetToken(TSqlParser.BEFORE, 0); }
		public ITerminalNode BLOCK() { return GetToken(TSqlParser.BLOCK, 0); }
		public ITerminalNode BLOCKSIZE() { return GetToken(TSqlParser.BLOCKSIZE, 0); }
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode BUFFERCOUNT() { return GetToken(TSqlParser.BUFFERCOUNT, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode COMPRESSION() { return GetToken(TSqlParser.COMPRESSION, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode CONTINUE_AFTER_ERROR() { return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode COPY_ONLY() { return GetToken(TSqlParser.COPY_ONLY, 0); }
		public ITerminalNode CUME_DIST() { return GetToken(TSqlParser.CUME_DIST, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode DATA_SOURCE() { return GetToken(TSqlParser.DATA_SOURCE, 0); }
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode DIFFERENTIAL() { return GetToken(TSqlParser.DIFFERENTIAL, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode EXPIREDATE() { return GetToken(TSqlParser.EXPIREDATE, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public ITerminalNode FILE_SNAPSHOT() { return GetToken(TSqlParser.FILE_SNAPSHOT, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public ITerminalNode IO() { return GetToken(TSqlParser.IO, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode INIT() { return GetToken(TSqlParser.INIT, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode MATCHED() { return GetToken(TSqlParser.MATCHED, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode MAXTRANSFER() { return GetToken(TSqlParser.MAXTRANSFER, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode MEDIADESCRIPTION() { return GetToken(TSqlParser.MEDIADESCRIPTION, 0); }
		public ITerminalNode MEDIANAME() { return GetToken(TSqlParser.MEDIANAME, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode MIRROR() { return GetToken(TSqlParser.MIRROR, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode NOFORMAT() { return GetToken(TSqlParser.NOFORMAT, 0); }
		public ITerminalNode NOINIT() { return GetToken(TSqlParser.NOINIT, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode NOREWIND() { return GetToken(TSqlParser.NOREWIND, 0); }
		public ITerminalNode NOSKIP() { return GetToken(TSqlParser.NOSKIP, 0); }
		public ITerminalNode NOUNLOAD() { return GetToken(TSqlParser.NOUNLOAD, 0); }
		public ITerminalNode NO_CHECKSUM() { return GetToken(TSqlParser.NO_CHECKSUM, 0); }
		public ITerminalNode NO_COMPRESSION() { return GetToken(TSqlParser.NO_COMPRESSION, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode ON_FAILURE() { return GetToken(TSqlParser.ON_FAILURE, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode PARAM_NODE() { return GetToken(TSqlParser.PARAM_NODE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(TSqlParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(TSqlParser.PERCENTILE_DISC, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(TSqlParser.PERCENT_RANK, 0); }
		public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public ITerminalNode PREDICATE() { return GetToken(TSqlParser.PREDICATE, 0); }
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode PROFILE() { return GetToken(TSqlParser.PROFILE, 0); }
		public ITerminalNode PYTHON() { return GetToken(TSqlParser.PYTHON, 0); }
		public ITerminalNode R() { return GetToken(TSqlParser.R, 0); }
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode RETAINDAYS() { return GetToken(TSqlParser.RETAINDAYS, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode REWIND() { return GetToken(TSqlParser.REWIND, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode SKIP_KEYWORD() { return GetToken(TSqlParser.SKIP_KEYWORD, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode STOP_ON_ERROR() { return GetToken(TSqlParser.STOP_ON_ERROR, 0); }
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode TAPE() { return GetToken(TSqlParser.TAPE, 0); }
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public ITerminalNode TRY_CAST() { return GetToken(TSqlParser.TRY_CAST, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode UNLOCK() { return GetToken(TSqlParser.UNLOCK, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode URL() { return GetToken(TSqlParser.URL, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode ZONE() { return GetToken(TSqlParser.ZONE, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSqlParser.VARCHAR, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSqlParser.NVARCHAR, 0); }
		public ITerminalNode BINARY_KEYWORD() { return GetToken(TSqlParser.BINARY_KEYWORD, 0); }
		public ITerminalNode VARBINARY_KEYWORD() { return GetToken(TSqlParser.VARBINARY_KEYWORD, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 1060, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11895;
			_la = _input.La(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FILLFACTOR - 68)) | (1L << (OPENJSON - 68)) | (1L << (PRECISION - 68)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (COMMITTED - 256)) | (1L << (COMPATIBILITY_LEVEL - 256)) | (1L << (CONCAT - 256)) | (1L << (CONCAT_NULL_YIELDS_NULL - 256)) | (1L << (CONTENT - 256)) | (1L << (CONTROL - 256)) | (1L << (COOKIE - 256)) | (1L << (COUNT - 256)) | (1L << (COUNT_BIG - 256)) | (1L << (COUNTER - 256)) | (1L << (CPU - 256)) | (1L << (CREATE_NEW - 256)) | (1L << (CREATION_DISPOSITION - 256)) | (1L << (CREDENTIAL - 256)) | (1L << (CRYPTOGRAPHIC - 256)) | (1L << (CUME_DIST - 256)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 256)) | (1L << (CURSOR_DEFAULT - 256)) | (1L << (DATA - 256)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 256)) | (1L << (DATEADD - 256)) | (1L << (DATEDIFF - 256)) | (1L << (DATENAME - 256)) | (1L << (DATEPART - 256)) | (1L << (DAYS - 256)) | (1L << (DB_CHAINING - 256)) | (1L << (DB_FAILOVER - 256)) | (1L << (DECRYPTION - 256)) | (1L << (DEFAULT_DOUBLE_QUOTE - 256)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 256)) | (1L << (DEFAULT_LANGUAGE - 256)) | (1L << (DELAY - 256)) | (1L << (DELAYED_DURABILITY - 256)) | (1L << (DELETED - 256)) | (1L << (DENSE_RANK - 256)) | (1L << (DEPENDENTS - 256)) | (1L << (DES - 256)) | (1L << (DESCRIPTION - 256)) | (1L << (DESX - 256)) | (1L << (DHCP - 256)) | (1L << (DIALOG - 256)) | (1L << (DIRECTORY_NAME - 256)) | (1L << (DISABLE - 256)) | (1L << (DISABLE_BROKER - 256)) | (1L << (DISABLED - 256)) | (1L << (DISK_DRIVE - 256)) | (1L << (DOCUMENT - 256)) | (1L << (DYNAMIC - 256)) | (1L << (ELEMENTS - 256)) | (1L << (EMERGENCY - 256)) | (1L << (EMPTY - 256)) | (1L << (ENABLE - 256)) | (1L << (ENABLE_BROKER - 256)) | (1L << (ENCRYPTED_VALUE - 256)) | (1L << (ENCRYPTION - 256)) | (1L << (ENDPOINT_URL - 256)) | (1L << (ERROR_BROKER_CONVERSATIONS - 256)) | (1L << (EXCLUSIVE - 256)) | (1L << (EXECUTABLE - 256)) | (1L << (EXIST - 256)) | (1L << (EXPAND - 256)) | (1L << (EXPIRY_DATE - 256)) | (1L << (EXPLICIT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (FAIL_OPERATION - 320)) | (1L << (FAILOVER_MODE - 320)) | (1L << (FAILURE - 320)) | (1L << (FAILURE_CONDITION_LEVEL - 320)) | (1L << (FAST - 320)) | (1L << (FAST_FORWARD - 320)) | (1L << (FILEGROUP - 320)) | (1L << (FILEGROWTH - 320)) | (1L << (FILENAME - 320)) | (1L << (FILEPATH - 320)) | (1L << (FILESTREAM - 320)) | (1L << (FILTER - 320)) | (1L << (FIRST - 320)) | (1L << (FIRST_VALUE - 320)) | (1L << (FOLLOWING - 320)) | (1L << (FORCE - 320)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 320)) | (1L << (FORCED - 320)) | (1L << (FORMAT - 320)) | (1L << (FORWARD_ONLY - 320)) | (1L << (FULLSCAN - 320)) | (1L << (FULLTEXT - 320)) | (1L << (GB - 320)) | (1L << (GETDATE - 320)) | (1L << (GETUTCDATE - 320)) | (1L << (GLOBAL - 320)) | (1L << (GO_BATCH - 320)) | (1L << (GO - 320)) | (1L << (GROUP_MAX_REQUESTS - 320)) | (1L << (GROUPING - 320)) | (1L << (GROUPING_ID - 320)) | (1L << (HADR - 320)) | (1L << (HASH - 320)) | (1L << (HEALTH_CHECK_TIMEOUT - 320)) | (1L << (HIGH - 320)) | (1L << (HONOR_BROKER_PRIORITY - 320)) | (1L << (HOURS - 320)) | (1L << (IDENTITY_VALUE - 320)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 320)) | (1L << (IMMEDIATE - 320)) | (1L << (IMPERSONATE - 320)) | (1L << (IMPORTANCE - 320)) | (1L << (INCLUDE_NULL_VALUES - 320)) | (1L << (INCREMENTAL - 320)) | (1L << (INITIATOR - 320)) | (1L << (INPUT - 320)) | (1L << (INSENSITIVE - 320)) | (1L << (INSERTED - 320)) | (1L << (INT - 320)) | (1L << (IP - 320)) | (1L << (ISOLATION - 320)) | (1L << (JOB - 320)) | (1L << (JSON - 320)) | (1L << (KB - 320)) | (1L << (KEEP - 320)) | (1L << (KEEPFIXED - 320)) | (1L << (KEY_SOURCE - 320)) | (1L << (KEYS - 320)) | (1L << (KEYSET - 320)) | (1L << (LAG - 320)) | (1L << (LAST - 320)) | (1L << (LAST_VALUE - 320)) | (1L << (LEAD - 320)) | (1L << (LEVEL - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LIST - 384)) | (1L << (LISTENER - 384)) | (1L << (LISTENER_URL - 384)) | (1L << (LOB_COMPACTION - 384)) | (1L << (LOCAL - 384)) | (1L << (LOCATION - 384)) | (1L << (LOCK - 384)) | (1L << (LOCK_ESCALATION - 384)) | (1L << (LOGIN - 384)) | (1L << (LOOP - 384)) | (1L << (LOW - 384)) | (1L << (MANUAL - 384)) | (1L << (MARK - 384)) | (1L << (MATERIALIZED - 384)) | (1L << (MAX - 384)) | (1L << (MAX_CPU_PERCENT - 384)) | (1L << (MAX_DOP - 384)) | (1L << (MAX_FILES - 384)) | (1L << (MAX_IOPS_PER_VOLUME - 384)) | (1L << (MAX_MEMORY_PERCENT - 384)) | (1L << (MAX_PROCESSES - 384)) | (1L << (MAX_QUEUE_READERS - 384)) | (1L << (MAX_ROLLOVER_FILES - 384)) | (1L << (MAXDOP - 384)) | (1L << (MAXRECURSION - 384)) | (1L << (MAXSIZE - 384)) | (1L << (MB - 384)) | (1L << (MEDIUM - 384)) | (1L << (MEMORY_OPTIMIZED_DATA - 384)) | (1L << (MESSAGE - 384)) | (1L << (MIN - 384)) | (1L << (MIN_ACTIVE_ROWVERSION - 384)) | (1L << (MIN_CPU_PERCENT - 384)) | (1L << (MIN_IOPS_PER_VOLUME - 384)) | (1L << (MIN_MEMORY_PERCENT - 384)) | (1L << (MINUTES - 384)) | (1L << (MIRROR_ADDRESS - 384)) | (1L << (MIXED_PAGE_ALLOCATION - 384)) | (1L << (MODE - 384)) | (1L << (MODIFY - 384)) | (1L << (MOVE - 384)) | (1L << (MULTI_USER - 384)) | (1L << (NAME - 384)) | (1L << (NESTED_TRIGGERS - 384)) | (1L << (NEW_ACCOUNT - 384)) | (1L << (NEW_BROKER - 384)) | (1L << (NEW_PASSWORD - 384)) | (1L << (NEXT - 384)) | (1L << (NO - 384)) | (1L << (NO_TRUNCATE - 384)) | (1L << (NO_WAIT - 384)) | (1L << (NOCOUNT - 384)) | (1L << (NODES - 384)) | (1L << (NOEXPAND - 384)) | (1L << (NON_TRANSACTED_ACCESS - 384)) | (1L << (NORECOMPUTE - 384)) | (1L << (NORECOVERY - 384)) | (1L << (NOWAIT - 384)) | (1L << (NTILE - 384)) | (1L << (NUMANODE - 384)) | (1L << (NUMBER - 384)) | (1L << (NUMERIC_ROUNDABORT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (OBJECT - 448)) | (1L << (OFFLINE - 448)) | (1L << (OFFSET - 448)) | (1L << (OLD_ACCOUNT - 448)) | (1L << (ONLINE - 448)) | (1L << (ONLY - 448)) | (1L << (OPEN_EXISTING - 448)) | (1L << (OPTIMISTIC - 448)) | (1L << (OPTIMIZE - 448)) | (1L << (OUT - 448)) | (1L << (OUTPUT - 448)) | (1L << (OVERRIDE - 448)) | (1L << (OWNER - 448)) | (1L << (PAGE_VERIFY - 448)) | (1L << (PARAMETERIZATION - 448)) | (1L << (PARTITION - 448)) | (1L << (PARTITIONS - 448)) | (1L << (PARTNER - 448)) | (1L << (PATH - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (POISON_MESSAGE_HANDLING - 448)) | (1L << (POOL - 448)) | (1L << (PORT - 448)) | (1L << (PRECEDING - 448)) | (1L << (PRIMARY_ROLE - 448)) | (1L << (PRIOR - 448)) | (1L << (PRIORITY - 448)) | (1L << (PRIORITY_LEVEL - 448)) | (1L << (PRIVATE - 448)) | (1L << (PRIVATE_KEY - 448)) | (1L << (PRIVILEGES - 448)) | (1L << (PROCEDURE_NAME - 448)) | (1L << (PROPERTY - 448)) | (1L << (PROVIDER - 448)) | (1L << (PROVIDER_KEY_NAME - 448)) | (1L << (QUERY - 448)) | (1L << (QUEUE - 448)) | (1L << (QUEUE_DELAY - 448)) | (1L << (QUOTED_IDENTIFIER - 448)) | (1L << (RANGE - 448)) | (1L << (RANK - 448)) | (1L << (RC2 - 448)) | (1L << (RC4 - 448)) | (1L << (RC4_128 - 448)) | (1L << (READ_COMMITTED_SNAPSHOT - 448)) | (1L << (READ_ONLY - 448)) | (1L << (READ_ONLY_ROUTING_LIST - 448)) | (1L << (READ_WRITE - 448)) | (1L << (READONLY - 448)) | (1L << (REBUILD - 448)) | (1L << (RECEIVE - 448)) | (1L << (RECOMPILE - 448)) | (1L << (RECOVERY - 448)) | (1L << (RECURSIVE_TRIGGERS - 448)) | (1L << (RELATIVE - 448)) | (1L << (REMOTE - 448)) | (1L << (REMOTE_SERVICE_NAME - 448)) | (1L << (REMOVE - 448)) | (1L << (REORGANIZE - 448)) | (1L << (REPEATABLE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REPLICA - 512)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 512)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 512)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 512)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 512)) | (1L << (RESERVE_DISK_SPACE - 512)) | (1L << (RESOURCE - 512)) | (1L << (RESOURCE_MANAGER_LOCATION - 512)) | (1L << (RESTRICTED_USER - 512)) | (1L << (RETENTION - 512)) | (1L << (ROBUST - 512)) | (1L << (ROOT - 512)) | (1L << (ROUTE - 512)) | (1L << (ROW - 512)) | (1L << (ROW_NUMBER - 512)) | (1L << (ROWGUID - 512)) | (1L << (ROWS - 512)) | (1L << (SAMPLE - 512)) | (1L << (SCHEMABINDING - 512)) | (1L << (SCOPED - 512)) | (1L << (SCROLL - 512)) | (1L << (SCROLL_LOCKS - 512)) | (1L << (SEARCH - 512)) | (1L << (SECONDARY - 512)) | (1L << (SECONDARY_ONLY - 512)) | (1L << (SECONDARY_ROLE - 512)) | (1L << (SECONDS - 512)) | (1L << (SECRET - 512)) | (1L << (SECURITY - 512)) | (1L << (SECURITY_LOG - 512)) | (1L << (SEEDING_MODE - 512)) | (1L << (SELF - 512)) | (1L << (SEMI_SENSITIVE - 512)) | (1L << (SEND - 512)) | (1L << (SENT - 512)) | (1L << (SEQUENCE - 512)) | (1L << (SERIALIZABLE - 512)) | (1L << (SESSION_TIMEOUT - 512)) | (1L << (SETERROR - 512)) | (1L << (SHARE - 512)) | (1L << (SHOWPLAN - 512)) | (1L << (SIGNATURE - 512)) | (1L << (SIMPLE - 512)) | (1L << (SINGLE_USER - 512)) | (1L << (SIZE - 512)) | (1L << (SMALLINT - 512)) | (1L << (SNAPSHOT - 512)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 512)) | (1L << (STANDBY - 512)) | (1L << (START_DATE - 512)) | (1L << (STATIC - 512)) | (1L << (STATS_STREAM - 512)) | (1L << (STATUS - 512)) | (1L << (STATUSONLY - 512)) | (1L << (STDEV - 512)) | (1L << (STDEVP - 512)) | (1L << (STOPLIST - 512)) | (1L << (STRING_AGG - 512)) | (1L << (STUFF - 512)) | (1L << (SUBJECT - 512)) | (1L << (SUBSCRIPTION - 512)) | (1L << (SUM - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (SUSPEND - 576)) | (1L << (SYMMETRIC - 576)) | (1L << (SYNCHRONOUS_COMMIT - 576)) | (1L << (SYNONYM - 576)) | (1L << (SYSTEM - 576)) | (1L << (TAKE - 576)) | (1L << (TARGET_RECOVERY_TIME - 576)) | (1L << (TB - 576)) | (1L << (TEXTIMAGE_ON - 576)) | (1L << (THROW - 576)) | (1L << (TIES - 576)) | (1L << (TIME - 576)) | (1L << (TIMEOUT - 576)) | (1L << (TIMER - 576)) | (1L << (TINYINT - 576)) | (1L << (TORN_PAGE_DETECTION - 576)) | (1L << (TRANSFORM_NOISE_WORDS - 576)) | (1L << (TRIPLE_DES - 576)) | (1L << (TRIPLE_DES_3KEY - 576)) | (1L << (TRUSTWORTHY - 576)) | (1L << (TRY - 576)) | (1L << (TSQL - 576)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 576)) | (1L << (TYPE - 576)) | (1L << (TYPE_WARNING - 576)) | (1L << (UNBOUNDED - 576)) | (1L << (UNCOMMITTED - 576)) | (1L << (UNKNOWN - 576)) | (1L << (UNLIMITED - 576)) | (1L << (UOW - 576)) | (1L << (USING - 576)) | (1L << (VALID_XML - 576)) | (1L << (VALIDATION - 576)) | (1L << (VALUE - 576)) | (1L << (VAR - 576)) | (1L << (VARBINARY_KEYWORD - 576)) | (1L << (VARP - 576)) | (1L << (VIEW_METADATA - 576)) | (1L << (VIEWS - 576)) | (1L << (WAIT - 576)) | (1L << (WELL_FORMED_XML - 576)) | (1L << (WITHOUT_ARRAY_WRAPPER - 576)) | (1L << (WORK - 576)) | (1L << (WORKLOAD - 576)) | (1L << (XML - 576)) | (1L << (XMLDATA - 576)) | (1L << (XMLNAMESPACES - 576)) | (1L << (XMLSCHEMA - 576)) | (1L << (XSINIL - 576)) | (1L << (ZONE - 576)) | (1L << (ABSENT - 576)) | (1L << (AES - 576)) | (1L << (ALLOW_CONNECTIONS - 576)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 576)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 576)) | (1L << (ANONYMOUS - 576)) | (1L << (APPEND - 576)) | (1L << (APPLICATION - 576)) | (1L << (ASYMMETRIC - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (ASYNCHRONOUS_COMMIT - 640)) | (1L << (AUTHENTICATION - 640)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 640)) | (1L << (AUTOMATIC - 640)) | (1L << (AVAILABILITY_MODE - 640)) | (1L << (BEFORE - 640)) | (1L << (BLOCK - 640)) | (1L << (BLOCKSIZE - 640)) | (1L << (BLOCKING_HIERARCHY - 640)) | (1L << (BUFFER - 640)) | (1L << (BUFFERCOUNT - 640)) | (1L << (CACHE - 640)) | (1L << (CALLED - 640)) | (1L << (CERTIFICATE - 640)) | (1L << (CHANGETABLE - 640)) | (1L << (CHANGES - 640)) | (1L << (CHECK_POLICY - 640)) | (1L << (CHECK_EXPIRATION - 640)) | (1L << (CLASSIFIER_FUNCTION - 640)) | (1L << (CLUSTER - 640)) | (1L << (COMPRESSION - 640)) | (1L << (CONFIGURATION - 640)) | (1L << (CONTAINMENT - 640)) | (1L << (CONTEXT - 640)) | (1L << (CONTINUE_AFTER_ERROR - 640)) | (1L << (CONTRACT - 640)) | (1L << (CONTRACT_NAME - 640)) | (1L << (CONVERSATION - 640)) | (1L << (COPY_ONLY - 640)) | (1L << (CYCLE - 640)) | (1L << (DATA_COMPRESSION - 640)) | (1L << (DATA_SOURCE - 640)) | (1L << (DATABASE_MIRRORING - 640)) | (1L << (DEFAULT_DATABASE - 640)) | (1L << (DEFAULT_SCHEMA - 640)) | (1L << (DIAGNOSTICS - 640)) | (1L << (DIFFERENTIAL - 640)) | (1L << (DTC_SUPPORT - 640)) | (1L << (ENABLED - 640)) | (1L << (ENDPOINT - 640)) | (1L << (ERROR - 640)) | (1L << (EVENT - 640)) | (1L << (EVENTDATA - 640)) | (1L << (EVENT_RETENTION_MODE - 640)) | (1L << (EXECUTABLE_FILE - 640)) | (1L << (EXPIREDATE - 640)) | (1L << (EXTENSION - 640)) | (1L << (EXTERNAL_ACCESS - 640)) | (1L << (FAILOVER - 640)) | (1L << (FAILURECONDITIONLEVEL - 640)) | (1L << (FAN_IN - 640)) | (1L << (FILE_SNAPSHOT - 640)) | (1L << (FORCESEEK - 640)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 640)) | (1L << (GET - 640)) | (1L << (GOVERNOR - 640)) | (1L << (HASHED - 640)) | (1L << (HEALTHCHECKTIMEOUT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (IIF - 704)) | (1L << (IO - 704)) | (1L << (INCLUDE - 704)) | (1L << (INCREMENT - 704)) | (1L << (INFINITE - 704)) | (1L << (INIT - 704)) | (1L << (INSTEAD - 704)) | (1L << (ISNULL - 704)) | (1L << (KERBEROS - 704)) | (1L << (KEY_PATH - 704)) | (1L << (KEY_STORE_PROVIDER_NAME - 704)) | (1L << (LANGUAGE - 704)) | (1L << (LIBRARY - 704)) | (1L << (LIFETIME - 704)) | (1L << (LINUX - 704)) | (1L << (LISTENER_IP - 704)) | (1L << (LISTENER_PORT - 704)) | (1L << (LOCAL_SERVICE_NAME - 704)) | (1L << (LOG - 704)) | (1L << (MATCHED - 704)) | (1L << (MASTER - 704)) | (1L << (MAX_MEMORY - 704)) | (1L << (MAXTRANSFER - 704)) | (1L << (MAXVALUE - 704)) | (1L << (MAX_DISPATCH_LATENCY - 704)) | (1L << (MAX_EVENT_SIZE - 704)) | (1L << (MAX_SIZE - 704)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 704)) | (1L << (MEDIADESCRIPTION - 704)) | (1L << (MEDIANAME - 704)) | (1L << (MEMBER - 704)) | (1L << (MEMORY_PARTITION_MODE - 704)) | (1L << (MESSAGE_FORWARDING - 704)) | (1L << (MESSAGE_FORWARD_SIZE - 704)) | (1L << (MINVALUE - 704)) | (1L << (MIRROR - 704)) | (1L << (MUST_CHANGE - 704)) | (1L << (NOFORMAT - 704)) | (1L << (NOINIT - 704)) | (1L << (NONE - 704)) | (1L << (NOREWIND - 704)) | (1L << (NOSKIP - 704)) | (1L << (NOUNLOAD - 704)) | (1L << (NO_CHECKSUM - 704)) | (1L << (NO_COMPRESSION - 704)) | (1L << (NO_EVENT_LOSS - 704)) | (1L << (NOTIFICATION - 704)) | (1L << (NTLM - 704)) | (1L << (OLD_PASSWORD - 704)) | (1L << (ON_FAILURE - 704)) | (1L << (PAGE - 704)) | (1L << (PARAM_NODE - 704)) | (1L << (PARTIAL - 704)) | (1L << (PASSWORD - 704)) | (1L << (PERMISSION_SET - 704)) | (1L << (PER_CPU - 704)) | (1L << (PER_DB - 704)) | (1L << (PER_NODE - 704)) | (1L << (PERSISTED - 704)) | (1L << (PLATFORM - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (POLICY - 768)) | (1L << (PREDICATE - 768)) | (1L << (PROCESS - 768)) | (1L << (PROFILE - 768)) | (1L << (PYTHON - 768)) | (1L << (R - 768)) | (1L << (READ_WRITE_FILEGROUPS - 768)) | (1L << (REGENERATE - 768)) | (1L << (RELATED_CONVERSATION - 768)) | (1L << (RELATED_CONVERSATION_GROUP - 768)) | (1L << (REQUIRED - 768)) | (1L << (RESET - 768)) | (1L << (RESTART - 768)) | (1L << (RESUME - 768)) | (1L << (RETAINDAYS - 768)) | (1L << (RETURNS - 768)) | (1L << (REWIND - 768)) | (1L << (ROLE - 768)) | (1L << (RSA_512 - 768)) | (1L << (RSA_1024 - 768)) | (1L << (RSA_2048 - 768)) | (1L << (RSA_3072 - 768)) | (1L << (RSA_4096 - 768)) | (1L << (SAFETY - 768)) | (1L << (SAFE - 768)) | (1L << (SCHEDULER - 768)) | (1L << (SCHEME - 768)) | (1L << (SERVER - 768)) | (1L << (SERVICE - 768)) | (1L << (SERVICE_BROKER - 768)) | (1L << (SERVICE_NAME - 768)) | (1L << (SESSION - 768)) | (1L << (SID - 768)) | (1L << (SKIP_KEYWORD - 768)) | (1L << (SOFTNUMA - 768)) | (1L << (SOURCE - 768)) | (1L << (SPECIFICATION - 768)) | (1L << (SPLIT - 768)) | (1L << (SQLDUMPERFLAGS - 768)) | (1L << (SQLDUMPERPATH - 768)) | (1L << (SQLDUMPERTIMEOUT - 768)) | (1L << (STATE - 768)) | (1L << (STATS - 768)) | (1L << (START - 768)) | (1L << (STARTED - 768)) | (1L << (STARTUP_STATE - 768)) | (1L << (STOP - 768)) | (1L << (STOPPED - 768)) | (1L << (STOP_ON_ERROR - 768)) | (1L << (SUPPORTED - 768)) | (1L << (TAPE - 768)) | (1L << (TARGET - 768)) | (1L << (TCP - 768)) | (1L << (TRACK_CAUSALITY - 768)) | (1L << (TRANSFER - 768)) | (1L << (UNCHECKED - 768)) | (1L << (UNLOCK - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (UNSAFE - 832)) | (1L << (URL - 832)) | (1L << (USED - 832)) | (1L << (VERBOSELOGGING - 832)) | (1L << (VISIBILITY - 832)) | (1L << (WINDOWS - 832)) | (1L << (WITHOUT - 832)) | (1L << (WITNESS - 832)) | (1L << (VARCHAR - 832)) | (1L << (NVARCHAR - 832)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_Context : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public Id_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_Context id_() {
		Id_Context _localctx = new Id_Context(_ctx, State);
		EnterRule(_localctx, 1062, RULE_id_);
		try {
			State = 11901;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1657,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11897; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11898; Match(DOUBLE_QUOTE_ID);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11899; Match(SQUARE_BRACKET_ID);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11900; keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_idContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_idContext simple_id() {
		Simple_idContext _localctx = new Simple_idContext(_ctx, State);
		EnterRule(_localctx, 1064, RULE_simple_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11903; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_or_stringContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Id_or_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_or_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId_or_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId_or_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_or_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_or_stringContext id_or_string() {
		Id_or_stringContext _localctx = new Id_or_stringContext(_ctx, State);
		EnterRule(_localctx, 1066, RULE_id_or_string);
		try {
			State = 11907;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1658,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11905; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11906; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, State);
		EnterRule(_localctx, 1068, RULE_comparison_operator);
		try {
			State = 11924;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1659,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11909; Match(EQUAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11910; Match(GREATER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11911; Match(LESS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11912; Match(LESS);
				State = 11913; Match(EQUAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11914; Match(GREATER);
				State = 11915; Match(EQUAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11916; Match(LESS);
				State = 11917; Match(GREATER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11918; Match(EXCLAMATION);
				State = 11919; Match(EQUAL);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11920; Match(EXCLAMATION);
				State = 11921; Match(GREATER);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11922; Match(EXCLAMATION);
				State = 11923; Match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 1070, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11926;
			_la = _input.La(1);
			if ( !(((((_la - 861)) & ~0x3f) == 0 && ((1L << (_la - 861)) & ((1L << (PLUS_ASSIGN - 861)) | (1L << (MINUS_ASSIGN - 861)) | (1L << (MULT_ASSIGN - 861)) | (1L << (DIV_ASSIGN - 861)) | (1L << (MOD_ASSIGN - 861)) | (1L << (AND_ASSIGN - 861)) | (1L << (XOR_ASSIGN - 861)) | (1L << (OR_ASSIGN - 861)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_sizeContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_size(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_size(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_sizeContext file_size() {
		File_sizeContext _localctx = new File_sizeContext(_ctx, State);
		EnterRule(_localctx, 1072, RULE_file_size);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11928; Match(DECIMAL);
			State = 11930;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1660,_ctx) ) {
			case 1:
				{
				State = 11929;
				_la = _input.La(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46: return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);

		case 392: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 404: return search_condition_sempred((Search_conditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 11);

		case 4: return Precpred(_ctx, 10);

		case 5: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool search_condition_sempred(Search_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 2);

		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x38B\x2E9F\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4\x4\xE5"+
		"\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9\t\xE9\x4\xEA\t\xEA"+
		"\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x4\xF0"+
		"\t\xF0\x4\xF1\t\xF1\x4\xF2\t\xF2\x4\xF3\t\xF3\x4\xF4\t\xF4\x4\xF5\t\xF5"+
		"\x4\xF6\t\xF6\x4\xF7\t\xF7\x4\xF8\t\xF8\x4\xF9\t\xF9\x4\xFA\t\xFA\x4\xFB"+
		"\t\xFB\x4\xFC\t\xFC\x4\xFD\t\xFD\x4\xFE\t\xFE\x4\xFF\t\xFF\x4\x100\t\x100"+
		"\x4\x101\t\x101\x4\x102\t\x102\x4\x103\t\x103\x4\x104\t\x104\x4\x105\t"+
		"\x105\x4\x106\t\x106\x4\x107\t\x107\x4\x108\t\x108\x4\x109\t\x109\x4\x10A"+
		"\t\x10A\x4\x10B\t\x10B\x4\x10C\t\x10C\x4\x10D\t\x10D\x4\x10E\t\x10E\x4"+
		"\x10F\t\x10F\x4\x110\t\x110\x4\x111\t\x111\x4\x112\t\x112\x4\x113\t\x113"+
		"\x4\x114\t\x114\x4\x115\t\x115\x4\x116\t\x116\x4\x117\t\x117\x4\x118\t"+
		"\x118\x4\x119\t\x119\x4\x11A\t\x11A\x4\x11B\t\x11B\x4\x11C\t\x11C\x4\x11D"+
		"\t\x11D\x4\x11E\t\x11E\x4\x11F\t\x11F\x4\x120\t\x120\x4\x121\t\x121\x4"+
		"\x122\t\x122\x4\x123\t\x123\x4\x124\t\x124\x4\x125\t\x125\x4\x126\t\x126"+
		"\x4\x127\t\x127\x4\x128\t\x128\x4\x129\t\x129\x4\x12A\t\x12A\x4\x12B\t"+
		"\x12B\x4\x12C\t\x12C\x4\x12D\t\x12D\x4\x12E\t\x12E\x4\x12F\t\x12F\x4\x130"+
		"\t\x130\x4\x131\t\x131\x4\x132\t\x132\x4\x133\t\x133\x4\x134\t\x134\x4"+
		"\x135\t\x135\x4\x136\t\x136\x4\x137\t\x137\x4\x138\t\x138\x4\x139\t\x139"+
		"\x4\x13A\t\x13A\x4\x13B\t\x13B\x4\x13C\t\x13C\x4\x13D\t\x13D\x4\x13E\t"+
		"\x13E\x4\x13F\t\x13F\x4\x140\t\x140\x4\x141\t\x141\x4\x142\t\x142\x4\x143"+
		"\t\x143\x4\x144\t\x144\x4\x145\t\x145\x4\x146\t\x146\x4\x147\t\x147\x4"+
		"\x148\t\x148\x4\x149\t\x149\x4\x14A\t\x14A\x4\x14B\t\x14B\x4\x14C\t\x14C"+
		"\x4\x14D\t\x14D\x4\x14E\t\x14E\x4\x14F\t\x14F\x4\x150\t\x150\x4\x151\t"+
		"\x151\x4\x152\t\x152\x4\x153\t\x153\x4\x154\t\x154\x4\x155\t\x155\x4\x156"+
		"\t\x156\x4\x157\t\x157\x4\x158\t\x158\x4\x159\t\x159\x4\x15A\t\x15A\x4"+
		"\x15B\t\x15B\x4\x15C\t\x15C\x4\x15D\t\x15D\x4\x15E\t\x15E\x4\x15F\t\x15F"+
		"\x4\x160\t\x160\x4\x161\t\x161\x4\x162\t\x162\x4\x163\t\x163\x4\x164\t"+
		"\x164\x4\x165\t\x165\x4\x166\t\x166\x4\x167\t\x167\x4\x168\t\x168\x4\x169"+
		"\t\x169\x4\x16A\t\x16A\x4\x16B\t\x16B\x4\x16C\t\x16C\x4\x16D\t\x16D\x4"+
		"\x16E\t\x16E\x4\x16F\t\x16F\x4\x170\t\x170\x4\x171\t\x171\x4\x172\t\x172"+
		"\x4\x173\t\x173\x4\x174\t\x174\x4\x175\t\x175\x4\x176\t\x176\x4\x177\t"+
		"\x177\x4\x178\t\x178\x4\x179\t\x179\x4\x17A\t\x17A\x4\x17B\t\x17B\x4\x17C"+
		"\t\x17C\x4\x17D\t\x17D\x4\x17E\t\x17E\x4\x17F\t\x17F\x4\x180\t\x180\x4"+
		"\x181\t\x181\x4\x182\t\x182\x4\x183\t\x183\x4\x184\t\x184\x4\x185\t\x185"+
		"\x4\x186\t\x186\x4\x187\t\x187\x4\x188\t\x188\x4\x189\t\x189\x4\x18A\t"+
		"\x18A\x4\x18B\t\x18B\x4\x18C\t\x18C\x4\x18D\t\x18D\x4\x18E\t\x18E\x4\x18F"+
		"\t\x18F\x4\x190\t\x190\x4\x191\t\x191\x4\x192\t\x192\x4\x193\t\x193\x4"+
		"\x194\t\x194\x4\x195\t\x195\x4\x196\t\x196\x4\x197\t\x197\x4\x198\t\x198"+
		"\x4\x199\t\x199\x4\x19A\t\x19A\x4\x19B\t\x19B\x4\x19C\t\x19C\x4\x19D\t"+
		"\x19D\x4\x19E\t\x19E\x4\x19F\t\x19F\x4\x1A0\t\x1A0\x4\x1A1\t\x1A1\x4\x1A2"+
		"\t\x1A2\x4\x1A3\t\x1A3\x4\x1A4\t\x1A4\x4\x1A5\t\x1A5\x4\x1A6\t\x1A6\x4"+
		"\x1A7\t\x1A7\x4\x1A8\t\x1A8\x4\x1A9\t\x1A9\x4\x1AA\t\x1AA\x4\x1AB\t\x1AB"+
		"\x4\x1AC\t\x1AC\x4\x1AD\t\x1AD\x4\x1AE\t\x1AE\x4\x1AF\t\x1AF\x4\x1B0\t"+
		"\x1B0\x4\x1B1\t\x1B1\x4\x1B2\t\x1B2\x4\x1B3\t\x1B3\x4\x1B4\t\x1B4\x4\x1B5"+
		"\t\x1B5\x4\x1B6\t\x1B6\x4\x1B7\t\x1B7\x4\x1B8\t\x1B8\x4\x1B9\t\x1B9\x4"+
		"\x1BA\t\x1BA\x4\x1BB\t\x1BB\x4\x1BC\t\x1BC\x4\x1BD\t\x1BD\x4\x1BE\t\x1BE"+
		"\x4\x1BF\t\x1BF\x4\x1C0\t\x1C0\x4\x1C1\t\x1C1\x4\x1C2\t\x1C2\x4\x1C3\t"+
		"\x1C3\x4\x1C4\t\x1C4\x4\x1C5\t\x1C5\x4\x1C6\t\x1C6\x4\x1C7\t\x1C7\x4\x1C8"+
		"\t\x1C8\x4\x1C9\t\x1C9\x4\x1CA\t\x1CA\x4\x1CB\t\x1CB\x4\x1CC\t\x1CC\x4"+
		"\x1CD\t\x1CD\x4\x1CE\t\x1CE\x4\x1CF\t\x1CF\x4\x1D0\t\x1D0\x4\x1D1\t\x1D1"+
		"\x4\x1D2\t\x1D2\x4\x1D3\t\x1D3\x4\x1D4\t\x1D4\x4\x1D5\t\x1D5\x4\x1D6\t"+
		"\x1D6\x4\x1D7\t\x1D7\x4\x1D8\t\x1D8\x4\x1D9\t\x1D9\x4\x1DA\t\x1DA\x4\x1DB"+
		"\t\x1DB\x4\x1DC\t\x1DC\x4\x1DD\t\x1DD\x4\x1DE\t\x1DE\x4\x1DF\t\x1DF\x4"+
		"\x1E0\t\x1E0\x4\x1E1\t\x1E1\x4\x1E2\t\x1E2\x4\x1E3\t\x1E3\x4\x1E4\t\x1E4"+
		"\x4\x1E5\t\x1E5\x4\x1E6\t\x1E6\x4\x1E7\t\x1E7\x4\x1E8\t\x1E8\x4\x1E9\t"+
		"\x1E9\x4\x1EA\t\x1EA\x4\x1EB\t\x1EB\x4\x1EC\t\x1EC\x4\x1ED\t\x1ED\x4\x1EE"+
		"\t\x1EE\x4\x1EF\t\x1EF\x4\x1F0\t\x1F0\x4\x1F1\t\x1F1\x4\x1F2\t\x1F2\x4"+
		"\x1F3\t\x1F3\x4\x1F4\t\x1F4\x4\x1F5\t\x1F5\x4\x1F6\t\x1F6\x4\x1F7\t\x1F7"+
		"\x4\x1F8\t\x1F8\x4\x1F9\t\x1F9\x4\x1FA\t\x1FA\x4\x1FB\t\x1FB\x4\x1FC\t"+
		"\x1FC\x4\x1FD\t\x1FD\x4\x1FE\t\x1FE\x4\x1FF\t\x1FF\x4\x200\t\x200\x4\x201"+
		"\t\x201\x4\x202\t\x202\x4\x203\t\x203\x4\x204\t\x204\x4\x205\t\x205\x4"+
		"\x206\t\x206\x4\x207\t\x207\x4\x208\t\x208\x4\x209\t\x209\x4\x20A\t\x20A"+
		"\x4\x20B\t\x20B\x4\x20C\t\x20C\x4\x20D\t\x20D\x4\x20E\t\x20E\x4\x20F\t"+
		"\x20F\x4\x210\t\x210\x4\x211\t\x211\x4\x212\t\x212\x4\x213\t\x213\x4\x214"+
		"\t\x214\x4\x215\t\x215\x4\x216\t\x216\x4\x217\t\x217\x4\x218\t\x218\x4"+
		"\x219\t\x219\x4\x21A\t\x21A\x3\x2\a\x2\x436\n\x2\f\x2\xE\x2\x439\v\x2"+
		"\x3\x2\x3\x2\x3\x2\a\x2\x43E\n\x2\f\x2\xE\x2\x441\v\x2\x3\x2\x3\x2\x5"+
		"\x2\x445\n\x2\x3\x3\x3\x3\x5\x3\x449\n\x3\x3\x3\x3\x3\x6\x3\x44D\n\x3"+
		"\r\x3\xE\x3\x44E\x5\x3\x451\n\x3\x3\x3\a\x3\x454\n\x3\f\x3\xE\x3\x457"+
		"\v\x3\x3\x3\x3\x3\a\x3\x45B\n\x3\f\x3\xE\x3\x45E\v\x3\x3\x3\x5\x3\x461"+
		"\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x467\n\x4\x3\x5\x3\x5\x5\x5\x46B\n"+
		"\x5\x3\x5\x3\x5\x5\x5\x46F\n\x5\x3\x5\x3\x5\x5\x5\x473\n\x5\x3\x5\x3\x5"+
		"\x5\x5\x477\n\x5\x3\x5\x3\x5\x5\x5\x47B\n\x5\x3\x5\x3\x5\x5\x5\x47F\n"+
		"\x5\x3\x5\x3\x5\x5\x5\x483\n\x5\x3\x5\x5\x5\x486\n\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x5\x6\x48D\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x52F\n"+
		"\a\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x536\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x544\n\t\x3\n\x3\n\x5\n\x548\n\n"+
		"\x3\n\a\n\x54B\n\n\f\n\xE\n\x54E\v\n\x3\n\x3\n\x5\n\x552\n\n\x3\v\x3\v"+
		"\x5\v\x556\n\v\x3\f\x3\f\x5\f\x55A\n\f\x3\r\x3\r\x3\r\x5\r\x55F\n\r\x3"+
		"\r\x3\r\x3\r\x5\r\x564\n\r\x5\r\x566\n\r\x3\xE\x3\xE\x5\xE\x56A\n\xE\x3"+
		"\xE\x5\xE\x56D\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x574\n\xF\x3\xF"+
		"\x5\xF\x577\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10"+
		"\x580\n\x10\x3\x10\x5\x10\x583\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x14\x5\x14\x58E\n\x14\x3\x14\x6\x14\x591\n\x14"+
		"\r\x14\xE\x14\x592\x3\x14\x3\x14\x3\x14\x5\x14\x598\n\x14\x3\x14\x3\x14"+
		"\x3\x14\x5\x14\x59D\n\x14\x3\x14\a\x14\x5A0\n\x14\f\x14\xE\x14\x5A3\v"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\x5A8\n\x14\x3\x15\x3\x15\x5\x15\x5AC"+
		"\n\x15\x3\x15\x5\x15\x5AF\n\x15\x3\x15\x3\x15\x5\x15\x5B3\n\x15\x3\x15"+
		"\x5\x15\x5B6\n\x15\x3\x15\x5\x15\x5B9\n\x15\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\x5C0\n\x16\x3\x16\x3\x16\x5\x16\x5C4\n\x16\x5\x16\x5C6"+
		"\n\x16\x3\x17\x3\x17\x3\x17\x5\x17\x5CB\n\x17\x3\x17\x3\x17\a\x17\x5CF"+
		"\n\x17\f\x17\xE\x17\x5D2\v\x17\x3\x17\x5\x17\x5D5\n\x17\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x5E0\n\x18\f\x18"+
		"\xE\x18\x5E3\v\x18\x3\x18\x3\x18\x3\x18\x5\x18\x5E8\n\x18\x3\x18\x5\x18"+
		"\x5EB\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x5F2\n\x18\f\x18"+
		"\xE\x18\x5F5\v\x18\x5\x18\x5F7\n\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x60C\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x5\x1B\x614\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x619"+
		"\n\x1B\x3\x1B\x5\x1B\x61C\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x621\n\x1B"+
		"\x3\x1B\x5\x1B\x624\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x629\n\x1B\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x631\n\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x5\x1C\x636\n\x1C\x3\x1C\x5\x1C\x639\n\x1C\x3\x1C\x3\x1C\x3\x1C\x5"+
		"\x1C\x63E\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x644\n\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x5\x1D\x649\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x5!\x65A\n!\x3!\x5"+
		"!\x65D\n!\x3!\x5!\x660\n!\x3!\x5!\x663\n!\x3\"\x3\"\x3\"\x5\"\x668\n\""+
		"\x3#\x3#\x3$\x3$\x3$\x3%\x3%\x5%\x671\n%\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3"+
		"(\x3(\x3(\x3)\x3)\x3)\x3)\x5)\x680\n)\x3*\x3*\x3+\x3+\x3+\x3,\x3,\x3-"+
		"\x3-\x3-\x3.\x3.\x3/\x3/\x3/\x5/\x691\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x69C\n\x30\x3\x30\x3\x30\a\x30"+
		"\x6A0\n\x30\f\x30\xE\x30\x6A3\v\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32"+
		"\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x6B1\n\x34\x3"+
		"\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x5\x38\x6C0\n\x38\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3"+
		":\x5:\x6C9\n:\x3:\x3:\x5:\x6CD\n:\x3:\x6:\x6D0\n:\r:\xE:\x6D1\x3:\x3:"+
		"\x3:\x3:\x5:\x6D8\n:\x3;\x3;\x3;\x3;\x5;\x6DE\n;\x3;\x5;\x6E1\n;\x3;\x6"+
		";\x6E4\n;\r;\xE;\x6E5\x3;\x3;\x3;\x5;\x6EB\n;\x3<\x3<\x3<\x3<\x3<\x3<"+
		"\x5<\x6F3\n<\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x5>\x6FD\n>\x3>\x3>\x3?\x3"+
		"?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x710\n@\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x718\n\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x725"+
		"\n\x41\x5\x41\x727\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x5\x41\x733\n\x41\x5\x41\x735\n\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x5\x41\x73C\n\x41\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x5\x42\x745\n\x42\x3\x43\x3\x43\x3\x43\x3\x43\x5"+
		"\x43\x74B\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x5\x44"+
		"\x754\n\x44\x3\x45\x3\x45\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3H\x3H\x3H\x3"+
		"H\x5H\x762\nH\x3H\x3H\x3H\x3H\x3I\x3I\x3I\x3I\x5I\x76C\nI\x3I\x3I\x3I"+
		"\x3I\x3J\x3J\x3J\x3J\x5J\x776\nJ\x3J\x3J\x3J\x3J\x3K\x3K\x3K\x3K\x3K\x3"+
		"K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K"+
		"\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x5K\x79E\nK\x3L\x3L\x3L\x3"+
		"L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L"+
		"\x5L\x7B5\nL\x3M\x3M\x3N\x3N\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3"+
		"O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O"+
		"\x3O\x3O\x5O\x7D9\nO\x5O\x7DB\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3"+
		"O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x7ED\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O"+
		"\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x805\nO\x3"+
		"O\x5O\x808\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x816"+
		"\nO\x3P\x3P\x3P\x3P\x3P\x3Q\x3Q\x3Q\x3R\x3R\x3R\x3R\x3R\x3S\x3S\x3S\x3"+
		"S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x836\nS\x3S"+
		"\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x848"+
		"\nS\x3S\x5S\x84B\nS\x3S\x3S\x3S\x5S\x850\nS\x3S\x5S\x853\nS\x3S\x3S\x3"+
		"S\x5S\x858\nS\x3S\x5S\x85B\nS\x3S\x3S\x3S\x5S\x860\nS\x3S\x5S\x863\nS"+
		"\x3S\x3S\x3S\x5S\x868\nS\x3S\x5S\x86B\nS\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x873"+
		"\nS\x3S\x5S\x876\nS\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x87E\nS\x3S\x3S\x3S\x3"+
		"S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x88B\nS\x3S\x3S\x3S\x3S\x3S\x3S\x3S"+
		"\x3S\x3S\x5S\x896\nS\x3S\aS\x899\nS\fS\xES\x89C\vS\x3S\x5S\x89F\nS\x3"+
		"S\x3S\x3S\x3S\x5S\x8A5\nS\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S"+
		"\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x8BC\nS\x3S\x3S\x3S\x3S\x3"+
		"S\x3S\x3S\x3S\x3S\x3S\x5S\x8C8\nS\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S"+
		"\x5S\x8D3\nS\x3S\aS\x8D6\nS\fS\xES\x8D9\vS\x3S\x5S\x8DC\nS\x3S\x3S\x3"+
		"S\x3S\x5S\x8E2\nS\x5S\x8E4\nS\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S"+
		"\x3S\x5S\x8F1\nS\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3"+
		"S\x3S\x3S\x3S\x3S\x3S\x6S\x906\nS\rS\xES\x907\x3S\x3S\x3S\x3S\x3S\x5S"+
		"\x90F\nS\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x918\nS\x3S\x3S\x3S\x5S\x91D"+
		"\nS\x3S\x5S\x920\nS\x3S\x3S\x3S\x5S\x925\nS\x3S\x5S\x928\nS\x3S\x3S\x3"+
		"S\x5S\x92D\nS\x3S\x6S\x930\nS\rS\xES\x931\x3S\x3S\x3S\x3S\x3S\x3S\x3S"+
		"\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3"+
		"S\x3S\x5S\x94E\nS\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x956\nS\x3S\x3S\x6S\x95A"+
		"\nS\rS\xES\x95B\x3S\x3S\x3S\x3S\x3S\x5S\x963\nS\x5S\x965\nS\x3S\x3S\x3"+
		"S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x972\nS\x3S\x3S\x3S\x3S\x3S\x5S"+
		"\x979\nS\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x988"+
		"\nS\x3T\x3T\x3U\x3U\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x5"+
		"V\x99A\nV\x3V\x5V\x99D\nV\x5V\x99F\nV\x3V\x3V\x3V\x5V\x9A4\nV\x3V\x3V"+
		"\x5V\x9A8\nV\x3V\x5V\x9AB\nV\x5V\x9AD\nV\x3V\x3V\x3V\x3V\x5V\x9B3\nV\x3"+
		"V\x5V\x9B6\nV\x5V\x9B8\nV\x3V\x3V\x3V\x3V\x5V\x9BE\nV\x5V\x9C0\nV\x3V"+
		"\x3V\x3W\x3W\x3W\x3W\x3W\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3"+
		"X\x3X\x5X\x9D6\nX\x3X\x3X\x3X\x3X\x3X\x3X\x5X\x9DE\nX\x3X\x3X\x3X\x3X"+
		"\x3X\x3X\x5X\x9E6\nX\x6X\x9E8\nX\rX\xEX\x9E9\x3X\x3X\x3X\x3X\x3X\x3X\x3"+
		"X\x5X\x9F3\nX\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y"+
		"\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\xA08\nY\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3"+
		"Z\x3Z\x5Z\xA15\nZ\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z"+
		"\x5Z\xA24\nZ\x6Z\xA26\nZ\rZ\xEZ\xA27\x3[\x3[\x3[\x3[\x3\\\x3\\\x3\\\x3"+
		"\\\x3\\\x3\\\x3]\x3]\x3]\x3]\x3]\x3]\x3^\x3^\x3^\x3^\x3_\x3_\x3_\x3_\x3"+
		"`\x3`\x3`\x3`\x3`\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\xA4B\n\x61\x3\x61"+
		"\x5\x61\xA4E\n\x61\x3\x61\x6\x61\xA51\n\x61\r\x61\xE\x61\xA52\x3\x62\x3"+
		"\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3"+
		"\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\x5"+
		"\x65\xA6A\n\x65\x3\x65\x5\x65\xA6D\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\xA72"+
		"\n\x65\x3\x65\x3\x65\x3\x66\x3\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x3g\x3"+
		"g\x3h\x3h\x3h\x3h\x3h\x3h\x3i\x3i\x3i\x3i\x3i\x3i\x5i\xA8C\ni\x3j\x3j"+
		"\x3j\x3j\x3j\x3j\x3k\x3k\x3k\x3k\x3k\x3k\x5k\xA9A\nk\x3k\x3k\x3k\x5k\xA9F"+
		"\nk\x3k\x3k\x3l\x3l\x3l\x3l\x5l\xAA7\nl\x3l\x6l\xAAA\nl\rl\xEl\xAAB\x3"+
		"l\x3l\x3l\x3l\x3l\x5l\xAB3\nl\x3m\x3m\x3m\x3m\x3m\x3m\x3m\x3n\x3n\x3n"+
		"\x3n\x3n\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x5o\xAC8\no\x3o\x3o\x3p\x3p\x3p\x3"+
		"p\x3p\x3q\x3q\x3q\x3q\x3r\x3r\x3r\x3r\x3s\x3s\x3s\x3s\x3s\x3t\x3t\x3t"+
		"\x3t\x3t\x3u\x3u\x3u\x3u\x3u\x3v\x3v\x3v\x3v\x3v\x5v\xAED\nv\x3v\x3v\x3"+
		"v\x5v\xAF2\nv\x3v\x3v\x3w\x3w\x3w\x3w\x3w\x3w\x3x\x3x\x3x\x3x\x3x\x3y"+
		"\x3y\x3y\x3y\x5y\xB05\ny\x3y\x3y\x3z\x3z\x3z\x3z\x3{\x3{\x3{\x3{\x5{\xB11"+
		"\n{\x3{\x5{\xB14\n{\x3{\x3{\x3{\x5{\xB19\n{\x3{\x5{\xB1C\n{\x3|\x3|\x3"+
		"|\x3|\x5|\xB22\n|\x3|\x3|\x3}\x3}\x3}\x3}\x3}\x3}\x3~\x3~\x3~\x3~\x3~"+
		"\x5~\xB31\n~\x3~\x3~\x3~\x5~\xB36\n~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F\x3\x7F"+
		"\x5\x7F\xB3E\n\x7F\x3\x7F\x5\x7F\xB41\n\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F"+
		"\xB46\n\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F\xB4B\n\x7F\x3\x7F\x5\x7F\xB4E"+
		"\n\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x81\x3\x81\x3\x81\x3\x81"+
		"\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x83\x3\x83\x3\x83"+
		"\x3\x83\x3\x84\x3\x84\x5\x84\xB66\n\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3"+
		"\x84\x5\x84\xB6D\n\x84\x3\x84\x3\x84\x3\x84\x5\x84\xB72\n\x84\x3\x84\x3"+
		"\x84\x3\x84\x5\x84\xB77\n\x84\x3\x84\x3\x84\x3\x84\x6\x84\xB7C\n\x84\r"+
		"\x84\xE\x84\xB7D\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\xB85\n\x85"+
		"\x3\x85\x3\x85\x3\x85\x3\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86"+
		"\x3\x86\x5\x86\xB92\n\x86\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\xB98\n\x87"+
		"\x3\x87\x3\x87\x3\x87\x5\x87\xB9D\n\x87\x3\x87\x3\x87\x3\x88\x3\x88\x3"+
		"\x88\x3\x88\x5\x88\xBA5\n\x88\x3\x88\x3\x88\x3\x89\x3\x89\x3\x89\x3\x89"+
		"\x3\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x5\x8A\xBB5\n"+
		"\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x5\x8B\xBBC\n\x8B\x3\x8B\x3\x8B"+
		"\x3\x8B\x5\x8B\xBC1\n\x8B\x3\x8B\x6\x8B\xBC4\n\x8B\r\x8B\xE\x8B\xBC5\x3"+
		"\x8B\x5\x8B\xBC9\n\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x5\x8B\xBCF\n\x8B\x3"+
		"\x8B\x3\x8B\x3\x8B\x3\x8B\x5\x8B\xBD5\n\x8B\x3\x8C\x3\x8C\x3\x8C\x5\x8C"+
		"\xBDA\n\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xBDF\n\x8C\x3\x8C\x6\x8C\xBE2"+
		"\n\x8C\r\x8C\xE\x8C\xBE3\x3\x8C\x5\x8C\xBE7\n\x8C\x3\x8C\x3\x8C\x3\x8C"+
		"\x3\x8C\x5\x8C\xBED\n\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xBF3\n\x8C"+
		"\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D"+
		"\xBFE\n\x8D\x3\x8D\x5\x8D\xC01\n\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E"+
		"\x3\x8E\x3\x8E\x3\x8E\x5\x8E\xC0B\n\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5"+
		"\x8E\xC11\n\x8E\x6\x8E\xC13\n\x8E\r\x8E\xE\x8E\xC14\x3\x8E\x3\x8E\x5\x8E"+
		"\xC19\n\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3"+
		"\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x90\x3\x90\x3"+
		"\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x5\x90\xC36"+
		"\n\x90\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91"+
		"\x3\x91\x3\x91\x5\x91\xC43\n\x91\x3\x91\x3\x91\x3\x91\x3\x91\x5\x91\xC49"+
		"\n\x91\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92"+
		"\xC53\n\x92\x3\x92\x5\x92\xC56\n\x92\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93"+
		"\x3\x93\x3\x93\x3\x93\x3\x93\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94"+
		"\x3\x94\x3\x94\x3\x94\x5\x94\xC6A\n\x94\x3\x94\x3\x94\x5\x94\xC6E\n\x94"+
		"\x3\x94\x3\x94\x5\x94\xC72\n\x94\x3\x94\x6\x94\xC75\n\x94\r\x94\xE\x94"+
		"\xC76\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x95\x3"+
		"\x95\x3\x95\x3\x95\x3\x95\x5\x95\xC86\n\x95\x3\x95\x3\x95\x3\x95\x3\x95"+
		"\x3\x95\x5\x95\xC8D\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3"+
		"\x95\x5\x95\xC96\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\a\x95\xC9C\n\x95\f"+
		"\x95\xE\x95\xC9F\v\x95\x5\x95\xCA1\n\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCA6"+
		"\n\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCAB\n\x95\x3\x95\x3\x95\x3\x95\x3"+
		"\x95\x6\x95\xCB1\n\x95\r\x95\xE\x95\xCB2\x3\x95\x3\x95\x6\x95\xCB7\n\x95"+
		"\r\x95\xE\x95\xCB8\x3\x95\x3\x95\x5\x95\xCBD\n\x95\x3\x95\x3\x95\a\x95"+
		"\xCC1\n\x95\f\x95\xE\x95\xCC4\v\x95\a\x95\xCC6\n\x95\f\x95\xE\x95\xCC9"+
		"\v\x95\x3\x95\x5\x95\xCCC\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5"+
		"\x95\xCD3\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\a\x95\xCD9\n\x95\f\x95\xE"+
		"\x95\xCDC\v\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCE3\n\x95\x3"+
		"\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCEC\n\x95\x3\x95"+
		"\x3\x95\x3\x95\x5\x95\xCF1\n\x95\x3\x95\x3\x95\x5\x95\xCF5\n\x95\x3\x95"+
		"\x5\x95\xCF8\n\x95\x6\x95\xCFA\n\x95\r\x95\xE\x95\xCFB\x3\x95\x3\x95\a"+
		"\x95\xD00\n\x95\f\x95\xE\x95\xD03\v\x95\a\x95\xD05\n\x95\f\x95\xE\x95"+
		"\xD08\v\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD0F\n\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\a\x95\xD15\n\x95\f\x95\xE\x95\xD18\v\x95\x3\x95"+
		"\x3\x95\x3\x95\x5\x95\xD1D\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD23"+
		"\n\x95\x3\x95\x5\x95\xD26\n\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD2B\n\x95"+
		"\x3\x95\x5\x95\xD2E\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD35"+
		"\n\x95\x5\x95\xD37\n\x95\x3\x95\x5\x95\xD3A\n\x95\x3\x95\x3\x95\x3\x95"+
		"\x3\x95\x5\x95\xD40\n\x95\x3\x95\x5\x95\xD43\n\x95\x3\x95\x3\x95\x3\x95"+
		"\x5\x95\xD48\n\x95\x3\x95\x5\x95\xD4B\n\x95\x3\x95\x3\x95\x3\x95\x5\x95"+
		"\xD50\n\x95\x3\x95\x5\x95\xD53\n\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD58"+
		"\n\x95\x3\x95\x5\x95\xD5B\n\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD60\n\x95"+
		"\x3\x96\x5\x96\xD63\n\x96\x3\x96\x5\x96\xD66\n\x96\x3\x96\x5\x96\xD69"+
		"\n\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x5\x96\xD70\n\x96\x6\x96\xD72"+
		"\n\x96\r\x96\xE\x96\xD73\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97\xD7B"+
		"\n\x97\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\xD82\n\x98\x3\x98\x3"+
		"\x98\x3\x98\x3\x98\x5\x98\xD88\n\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98"+
		"\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\xD95\n\x98\x3\x98\x3"+
		"\x98\x5\x98\xD99\n\x98\x3\x98\x3\x98\x3\x98\x5\x98\xD9E\n\x98\x3\x98\x3"+
		"\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\xDA8\n\x98\x3\x98"+
		"\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\xDB1\n\x98\x3\x98\x3"+
		"\x98\x5\x98\xDB5\n\x98\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99"+
		"\x3\x99\x3\x99\x3\x99\x5\x99\xDC1\n\x99\x3\x99\x3\x99\x3\x99\x3\x99\x5"+
		"\x99\xDC7\n\x99\x3\x99\x3\x99\x3\x99\x6\x99\xDCC\n\x99\r\x99\xE\x99\xDCD"+
		"\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99"+
		"\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x5\x99\xDE2\n"+
		"\x99\x3\x99\x3\x99\x5\x99\xDE6\n\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x5\x9A\xDEE\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x5\x9A\xDF7\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDFD\n\x9A\x3"+
		"\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE03\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x6\x9A\xE0B\n\x9A\r\x9A\xE\x9A\xE0C\x3\x9A\x3\x9A\x3\x9B"+
		"\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x5\x9B\xE17\n\x9B\x3\x9B\x3\x9B\x5"+
		"\x9B\xE1B\n\x9B\x3\x9B\x5\x9B\xE1E\n\x9B\x3\x9B\x3\x9B\x5\x9B\xE22\n\x9B"+
		"\x3\x9B\x3\x9B\x3\x9B\x5\x9B\xE27\n\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x5"+
		"\x9B\xE2D\n\x9B\x3\x9B\x5\x9B\xE30\n\x9B\x3\x9B\x3\x9B\x5\x9B\xE34\n\x9B"+
		"\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x6\x9B\xE3C\n\x9B\r\x9B\xE"+
		"\x9B\xE3D\x3\x9B\x5\x9B\xE41\n\x9B\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C"+
		"\x3\x9C\x5\x9C\xE49\n\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x5"+
		"\x9C\xE51\n\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x5\x9C\xE58\n\x9C\x3"+
		"\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x6\x9C\xE5F\n\x9C\r\x9C\xE\x9C\xE60\x5"+
		"\x9C\xE63\n\x9C\x3\x9C\x3\x9C\x3\x9C\x5\x9C\xE68\n\x9C\x3\x9C\x3\x9C\x3"+
		"\x9C\x3\x9C\x5\x9C\xE6E\n\x9C\x3\x9C\x6\x9C\xE71\n\x9C\r\x9C\xE\x9C\xE72"+
		"\x5\x9C\xE75\n\x9C\x3\x9C\x5\x9C\xE78\n\x9C\x3\x9C\x3\x9C\x3\x9C\x5\x9C"+
		"\xE7D\n\x9C\x3\x9C\x5\x9C\xE80\n\x9C\x3\x9C\x3\x9C\x3\x9C\x5\x9C\xE85"+
		"\n\x9C\x3\x9C\x3\x9C\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D"+
		"\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xE94\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3"+
		"\x9D\x3\x9D\x5\x9D\xE9B\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x6\x9D"+
		"\xEA2\n\x9D\r\x9D\xE\x9D\xEA3\x5\x9D\xEA6\n\x9D\x3\x9D\x3\x9D\x3\x9D\x5"+
		"\x9D\xEAB\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xEB1\n\x9D\x3\x9D\x6"+
		"\x9D\xEB4\n\x9D\r\x9D\xE\x9D\xEB5\x5\x9D\xEB8\n\x9D\x3\x9D\x5\x9D\xEBB"+
		"\n\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xEC0\n\x9D\x3\x9D\x5\x9D\xEC3\n\x9D"+
		"\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xEC8\n\x9D\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x3"+
		"\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E\xED5\n\x9E\x3\x9E"+
		"\x3\x9E\x3\x9E\x5\x9E\xEDA\n\x9E\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3"+
		"\x9F\x3\x9F\x5\x9F\xEE3\n\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xEE8\n\x9F\x3"+
		"\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xEEE\n\x9F\x3\x9F\x3\x9F\x5\x9F\xEF2"+
		"\n\x9F\x3\x9F\x3\x9F\x5\x9F\xEF6\n\x9F\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3"+
		"\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3"+
		"\xA0\x5\xA0\xF07\n\xA0\x5\xA0\xF09\n\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3"+
		"\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF13\n\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1"+
		"\xF18\n\xA1\x5\xA1\xF1A\n\xA1\x3\xA1\x3\xA1\x5\xA1\xF1E\n\xA1\x3\xA2\x3"+
		"\xA2\x3\xA2\x3\xA2\x5\xA2\xF24\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2"+
		"\x3\xA2\x5\xA2\xF2C\n\xA2\x3\xA2\a\xA2\xF2F\n\xA2\f\xA2\xE\xA2\xF32\v"+
		"\xA2\x5\xA2\xF34\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\a\xA2\xF3A\n\xA2\f"+
		"\xA2\xE\xA2\xF3D\v\xA2\x5\xA2\xF3F\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xF44"+
		"\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xF49\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5"+
		"\xA2\xF4E\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xF53\n\xA2\x3\xA2\x3\xA2\x3"+
		"\xA2\x5\xA2\xF58\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xF5D\n\xA2\x3\xA2\x3"+
		"\xA2\x5\xA2\xF61\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xF66\n\xA2\x3\xA3\x3"+
		"\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xF71\n\xA3"+
		"\x3\xA3\a\xA3\xF74\n\xA3\f\xA3\xE\xA3\xF77\v\xA3\x5\xA3\xF79\n\xA3\x3"+
		"\xA3\x5\xA3\xF7C\n\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xF81\n\xA3\x3\xA3\x5"+
		"\xA3\xF84\n\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xF89\n\xA3\x3\xA3\x5\xA3\xF8C"+
		"\n\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xF91\n\xA3\x3\xA3\x5\xA3\xF94\n\xA3"+
		"\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xF99\n\xA3\x3\xA3\x5\xA3\xF9C\n\xA3\x3\xA3"+
		"\x3\xA3\x3\xA3\x5\xA3\xFA1\n\xA3\x3\xA3\x5\xA3\xFA4\n\xA3\x3\xA3\x3\xA3"+
		"\x3\xA3\x5\xA3\xFA9\n\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xFAF\n\xA3"+
		"\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xFB4\n\xA3\x3\xA3\x5\xA3\xFB7\n\xA3\x3\xA3"+
		"\x3\xA3\x3\xA3\x5\xA3\xFBC\n\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5"+
		"\xA3\xFC3\n\xA3\x5\xA3\xFC5\n\xA3\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\xFCB"+
		"\n\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\xFD4\n"+
		"\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\xFD9\n\xA4\x5\xA4\xFDB\n\xA4\x3\xA5\x3"+
		"\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x5\xA5\xFE7"+
		"\n\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x5\xA6\xFED\n\xA6\x3\xA6\x3\xA6\x3"+
		"\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\a\xA6\xFF7\n\xA6\f\xA6\xE\xA6"+
		"\xFFA\v\xA6\x5\xA6\xFFC\n\xA6\x3\xA6\x3\xA6\x3\xA6\x5\xA6\x1001\n\xA6"+
		"\x5\xA6\x1003\n\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3"+
		"\xA7\x5\xA7\x100D\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x1012\n\xA7\x5\xA7"+
		"\x1014\n\xA7\x3\xA7\x3\xA7\x5\xA7\x1018\n\xA7\x3\xA8\x3\xA8\x3\xA8\x3"+
		"\xA8\x5\xA8\x101E\n\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8"+
		"\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8"+
		"\x1030\n\xA8\x5\xA8\x1032\n\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3"+
		"\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA\x1041\n\xAA"+
		"\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA"+
		"\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA\x1053\n\xAA\x3\xAA\x3"+
		"\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA\x105B\n\xAA\x3\xAB\x3\xAB\x3\xAB"+
		"\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x1065\n\xAB\x3\xAC\x3\xAC\x3"+
		"\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3"+
		"\xAC\x3\xAC\x5\xAC\x1075\n\xAC\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD"+
		"\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE"+
		"\x3\xAE\x3\xAE\x3\xAE\x5\xAE\x108A\n\xAE\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3"+
		"\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1095\n\xAF\x3\xAF\x3\xAF\x3\xAF"+
		"\x3\xAF\x5\xAF\x109B\n\xAF\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3"+
		"\xB0\x5\xB0\x10A4\n\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0"+
		"\x5\xB0\x10AD\n\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x5\xB0\x10B3\n\xB0\x3"+
		"\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x5\xB1\x10BC\n\xB1\x3\xB1"+
		"\x3\xB1\x3\xB1\x5\xB1\x10C1\n\xB1\x3\xB1\x5\xB1\x10C4\n\xB1\x3\xB1\x3"+
		"\xB1\x3\xB1\x5\xB1\x10C9\n\xB1\x3\xB1\x5\xB1\x10CC\n\xB1\x3\xB1\x3\xB1"+
		"\x3\xB1\x5\xB1\x10D1\n\xB1\x3\xB1\x5\xB1\x10D4\n\xB1\x3\xB1\x3\xB1\x3"+
		"\xB1\x3\xB1\x3\xB1\x3\xB1\x5\xB1\x10DC\n\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1"+
		"\x5\xB1\x10E2\n\xB1\x6\xB1\x10E4\n\xB1\r\xB1\xE\xB1\x10E5\x3\xB1\x3\xB1"+
		"\x3\xB1\x3\xB1\x3\xB1\x5\xB1\x10ED\n\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x5"+
		"\xB1\x10F3\n\xB1\x6\xB1\x10F5\n\xB1\r\xB1\xE\xB1\x10F6\x3\xB1\x5\xB1\x10FA"+
		"\n\xB1\x5\xB1\x10FC\n\xB1\x3\xB1\x5\xB1\x10FF\n\xB1\x3\xB1\x3\xB1\x3\xB1"+
		"\x5\xB1\x1104\n\xB1\x3\xB1\x5\xB1\x1107\n\xB1\x3\xB1\x3\xB1\x3\xB1\x5"+
		"\xB1\x110C\n\xB1\x3\xB1\x5\xB1\x110F\n\xB1\x3\xB1\x3\xB1\x3\xB1\x5\xB1"+
		"\x1114\n\xB1\x3\xB1\x5\xB1\x1117\n\xB1\x3\xB1\x3\xB1\x3\xB1\x5\xB1\x111C"+
		"\n\xB1\x3\xB1\x5\xB1\x111F\n\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3"+
		"\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x5\xB2\x112E\n\xB2"+
		"\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x5\xB2"+
		"\x1139\n\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3"+
		"\xB3\x3\xB3\x5\xB3\x1145\n\xB3\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4"+
		"\x114C\n\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x1153\n\xB5\x3"+
		"\xB5\x3\xB5\x5\xB5\x1157\n\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x115C\n\xB5"+
		"\x3\xB5\x5\xB5\x115F\n\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x1164\n\xB5\x3"+
		"\xB5\x5\xB5\x1167\n\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x116C\n\xB5\x3\xB5"+
		"\x5\xB5\x116F\n\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5"+
		"\xB5\x1178\n\xB5\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x117F\n\xB6"+
		"\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7"+
		"\x3\xB7\x3\xB7\x3\xB7\x5\xB7\x118E\n\xB7\x3\xB7\x5\xB7\x1191\n\xB7\x3"+
		"\xB7\x3\xB7\x3\xB7\x5\xB7\x1196\n\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8"+
		"\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8\x11A1\n\xB8\x3\xB8\x3\xB8\x3\xB8\x3"+
		"\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8\x11AA\n\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8"+
		"\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8\x11B5\n\xB8\x3\xB8\x3\xB8\x3"+
		"\xB8\x3\xB8\a\xB8\x11BB\n\xB8\f\xB8\xE\xB8\x11BE\v\xB8\x3\xB9\x3\xB9\x3"+
		"\xB9\x3\xB9\x3\xB9\x5\xB9\x11C5\n\xB9\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA"+
		"\x3\xBA\x5\xBA\x11CD\n\xBA\x3\xBA\x3\xBA\x3\xBA\x5\xBA\x11D2\n\xBA\x3"+
		"\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\x11DD"+
		"\n\xBB\x3\xBB\x5\xBB\x11E0\n\xBB\x3\xBB\x3\xBB\x5\xBB\x11E4\n\xBB\x3\xBC"+
		"\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x11EC\n\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x11F0\n\xBC\x3\xBC\x3\xBC\x5\xBC\x11F4\n\xBC\x3\xBC\x3\xBC\x3\xBC"+
		"\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x11FC\n\xBC\x3\xBC\x6\xBC\x11FF\n\xBC\r\xBC"+
		"\xE\xBC\x1200\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x1209\n"+
		"\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x120E\n\xBC\x3\xBC\x3\xBC\a\xBC\x1212"+
		"\n\xBC\f\xBC\xE\xBC\x1215\v\xBC\x6\xBC\x1217\n\xBC\r\xBC\xE\xBC\x1218"+
		"\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x1222\n\xBC\x3"+
		"\xBC\x5\xBC\x1225\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x122A\n\xBC\x3\xBD"+
		"\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x1231\n\xBD\x3\xBD\x3\xBD\x3\xBD\x3"+
		"\xBD\x5\xBD\x1237\n\xBD\x5\xBD\x1239\n\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD"+
		"\x123E\n\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x1244\n\xBD\x3\xBD\x3"+
		"\xBD\x3\xBD\x3\xBD\x5\xBD\x124A\n\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x124F"+
		"\n\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x1255\n\xBD\x3\xBE\x3\xBE\x3"+
		"\xBE\x3\xBE\x3\xBE\x5\xBE\x125C\n\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x1261"+
		"\n\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x1266\n\xBE\x3\xBE\x3\xBE\x3\xBE\x5"+
		"\xBE\x126B\n\xBE\x3\xBE\x5\xBE\x126E\n\xBE\x3\xBE\x3\xBE\x5\xBE\x1272"+
		"\n\xBE\x3\xBE\x5\xBE\x1275\n\xBE\x3\xBE\x3\xBE\x5\xBE\x1279\n\xBE\x3\xBE"+
		"\x3\xBE\x5\xBE\x127D\n\xBE\x3\xBE\x5\xBE\x1280\n\xBE\x3\xBE\x3\xBE\x5"+
		"\xBE\x1284\n\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x1289\n\xBE\x3\xBE\x3\xBE"+
		"\x5\xBE\x128D\n\xBE\x3\xBE\x3\xBE\x5\xBE\x1291\n\xBE\x3\xBF\x3\xBF\x3"+
		"\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x129B\n\xBF\x3\xBF\x3\xBF"+
		"\x3\xBF\x3\xBF\x5\xBF\x12A1\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5"+
		"\xBF\x12A8\n\xBF\x3\xBF\x5\xBF\x12AB\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF"+
		"\x5\xBF\x12B1\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x12B7\n\xBF\x3"+
		"\xBF\x3\xBF\x3\xBF\a\xBF\x12BC\n\xBF\f\xBF\xE\xBF\x12BF\v\xBF\x3\xBF\x3"+
		"\xBF\x3\xBF\x5\xBF\x12C4\n\xBF\x5\xBF\x12C6\n\xBF\x3\xBF\x3\xBF\x3\xBF"+
		"\x5\xBF\x12CB\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x12D1\n\xBF\x3"+
		"\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x12D7\n\xBF\x3\xBF\x3\xBF\x3\xBF\a\xBF"+
		"\x12DC\n\xBF\f\xBF\xE\xBF\x12DF\v\xBF\x3\xBF\x5\xBF\x12E2\n\xBF\x3\xBF"+
		"\x3\xBF\x5\xBF\x12E6\n\xBF\x3\xBF\x5\xBF\x12E9\n\xBF\x3\xBF\x3\xBF\x3"+
		"\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5"+
		"\xBF\x12F7\n\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x12FC\n\xBF\x3\xBF\x3\xBF"+
		"\x5\xBF\x1300\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3"+
		"\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x130D\n\xBF\x3\xBF\x5\xBF\x1310\n\xBF"+
		"\x5\xBF\x1312\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x131A"+
		"\n\xBF\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0"+
		"\x1324\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x132A\n\xC0\x3\xC0\x3"+
		"\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x1331\n\xC0\x3\xC0\x5\xC0\x1334\n\xC0"+
		"\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x133A\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3"+
		"\xC0\x5\xC0\x1340\n\xC0\x3\xC0\x3\xC0\x3\xC0\a\xC0\x1345\n\xC0\f\xC0\xE"+
		"\xC0\x1348\v\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x134D\n\xC0\x5\xC0\x134F"+
		"\n\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x1354\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3"+
		"\xC0\x5\xC0\x135A\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x1360\n\xC0"+
		"\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x1366\n\xC0\x3\xC0\x3\xC0\x3\xC0\a"+
		"\xC0\x136B\n\xC0\f\xC0\xE\xC0\x136E\v\xC0\x3\xC0\x5\xC0\x1371\n\xC0\x3"+
		"\xC0\x3\xC0\x5\xC0\x1375\n\xC0\x3\xC0\x5\xC0\x1378\n\xC0\x3\xC0\x3\xC0"+
		"\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0"+
		"\x5\xC0\x1386\n\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x138B\n\xC0\x3\xC0\x3"+
		"\xC0\x5\xC0\x138F\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0"+
		"\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x139C\n\xC0\x3\xC0\x5\xC0\x139F\n"+
		"\xC0\x5\xC0\x13A1\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0"+
		"\x13A9\n\xC0\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3"+
		"\xC1\x5\xC1\x13B4\n\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\a\xC1\x13BB"+
		"\n\xC1\f\xC1\xE\xC1\x13BE\v\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3"+
		"\xC1\x5\xC1\x13C6\n\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2"+
		"\x3\xC2\x3\xC2\x5\xC2\x13D1\n\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\a"+
		"\xC2\x13D8\n\xC2\f\xC2\xE\xC2\x13DB\v\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2"+
		"\x3\xC2\x3\xC2\x5\xC2\x13E3\n\xC2\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3"+
		"\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x13EF\n\xC3\x3\xC3\x3\xC3\x5\xC3"+
		"\x13F3\n\xC3\x3\xC3\x3\xC3\x3\xC3\x6\xC3\x13F8\n\xC3\r\xC3\xE\xC3\x13F9"+
		"\x5\xC3\x13FC\n\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x1401\n\xC3\x3\xC3\x3"+
		"\xC3\x5\xC3\x1405\n\xC3\x3\xC3\x3\xC3\x3\xC3\x6\xC3\x140A\n\xC3\r\xC3"+
		"\xE\xC3\x140B\x5\xC3\x140E\n\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3"+
		"\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x141C\n\xC3\x3\xC3"+
		"\x3\xC3\x3\xC3\x5\xC3\x1421\n\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3"+
		"\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3"+
		"\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x1437\n\xC3\x3\xC3\x3\xC3\x3\xC3"+
		"\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3"+
		"\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x144D\n\xC3\x3"+
		"\xC3\x3\xC3\x3\xC3\x5\xC3\x1452\n\xC3\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4"+
		"\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x5\xC4\x145F\n\xC4\x3\xC5\x3"+
		"\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x1467\n\xC5\x3\xC6\x3\xC6\x3\xC6"+
		"\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7"+
		"\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x5\xC7\x147B\n\xC7\x3\xC7\x5\xC7\x147E"+
		"\n\xC7\x3\xC7\x3\xC7\a\xC7\x1482\n\xC7\f\xC7\xE\xC7\x1485\v\xC7\x3\xC8"+
		"\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x148C\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3"+
		"\xC8\x3\xC8\x5\xC8\x1493\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x1498\n\xC8"+
		"\x3\xC8\x3\xC8\x5\xC8\x149C\n\xC8\x6\xC8\x149E\n\xC8\r\xC8\xE\xC8\x149F"+
		"\x3\xC8\x5\xC8\x14A3\n\xC8\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x14AA"+
		"\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9"+
		"\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x14BC\n\xC9\x5"+
		"\xC9\x14BE\n\xC9\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA"+
		"\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA"+
		"\x5\xCA\x14D2\n\xCA\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x14D9\n"+
		"\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x14E0\n\xCB\x3\xCB\x3\xCB"+
		"\x3\xCB\x5\xCB\x14E5\n\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x14EA\n\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x14F0\n\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB"+
		"\x14F5\n\xCB\x5\xCB\x14F7\n\xCB\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5"+
		"\xCC\x14FE\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1504\n\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x150A\n\xCC\x3\xCC\x5\xCC\x150D\n\xCC\x3"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1513\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x6\xCC\x151B\n\xCC\r\xCC\xE\xCC\x151C\x3\xCC\x5\xCC\x1520"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1527\n\xCC\x3\xCC\x5"+
		"\xCC\x152A\n\xCC\x3\xCC\x3\xCC\x3\xCC\x6\xCC\x152F\n\xCC\r\xCC\xE\xCC"+
		"\x1530\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x1539\n\xCD\x3"+
		"\xCD\x3\xCD\x5\xCD\x153D\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x1543"+
		"\n\xCD\x3\xCD\x3\xCD\x3\xCD\a\xCD\x1548\n\xCD\f\xCD\xE\xCD\x154B\v\xCD"+
		"\x5\xCD\x154D\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x1554\n"+
		"\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x155A\n\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\x5\xCD\x1561\n\xCD\x3\xCD\x5\xCD\x1564\n\xCD\x3\xCD\x3"+
		"\xCD\x3\xCD\x3\xCD\x5\xCD\x156A\n\xCD\x3\xCD\x3\xCD\x3\xCD\a\xCD\x156F"+
		"\n\xCD\f\xCD\xE\xCD\x1572\v\xCD\x5\xCD\x1574\n\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x157C\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5"+
		"\xCD\x1582\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x1589\n\xCD"+
		"\x3\xCD\x5\xCD\x158C\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x1592\n"+
		"\xCD\x3\xCD\x3\xCD\x3\xCD\a\xCD\x1597\n\xCD\f\xCD\xE\xCD\x159A\v\xCD\x3"+
		"\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x15A1\n\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x15A9\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5"+
		"\xCD\x15AF\n\xCD\x3\xCD\x3\xCD\x3\xCD\a\xCD\x15B4\n\xCD\f\xCD\xE\xCD\x15B7"+
		"\v\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x15C0\n"+
		"\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x15C5\n\xCD\x3\xCE\x3\xCE\x3\xCE\x3\xCE"+
		"\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x5\xCE\x15CF\n\xCE\x3\xCE\x3\xCE\x3\xCE\x3"+
		"\xCE\x5\xCE\x15D5\n\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE"+
		"\x3\xCE\x3\xCE\x3\xCE\x5\xCE\x15E1\n\xCE\x5\xCE\x15E3\n\xCE\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x15EA\n\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF"+
		"\x5\xCF\x15F0\n\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x15F6\n\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x15FC\n\xCF\x3\xCF\x3\xCF\x3\xCF\x6\xCF"+
		"\x1601\n\xCF\r\xCF\xE\xCF\x1602\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x5"+
		"\xD0\x160A\n\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x5\xD0\x1612"+
		"\n\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x5\xD0\x1618\n\xD0\x3\xD0\x3\xD0\x3"+
		"\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x6"+
		"\xD0\x1626\n\xD0\r\xD0\xE\xD0\x1627\x3\xD0\x5\xD0\x162B\n\xD0\x3\xD0\x3"+
		"\xD0\x3\xD0\x5\xD0\x1630\n\xD0\x5\xD0\x1632\n\xD0\x3\xD1\x3\xD1\x3\xD1"+
		"\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x5\xD1\x163E\n\xD1\x3"+
		"\xD1\x3\xD1\x3\xD1\x3\xD1\x5\xD1\x1644\n\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1"+
		"\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x6\xD1\x1652"+
		"\n\xD1\r\xD1\xE\xD1\x1653\x3\xD1\x5\xD1\x1657\n\xD1\x3\xD1\x3\xD1\x3\xD1"+
		"\x5\xD1\x165C\n\xD1\x3\xD1\x5\xD1\x165F\n\xD1\x3\xD1\x3\xD1\x3\xD1\x5"+
		"\xD1\x1664\n\xD1\x5\xD1\x1666\n\xD1\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2"+
		"\x3\xD2\x3\xD2\x5\xD2\x166F\n\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x5"+
		"\xD2\x1676\n\xD2\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3"+
		"\x3\xD3\x3\xD3\x5\xD3\x1682\n\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3"+
		"\xD3\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x5\xD4\x1692"+
		"\n\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\a\xD4\x1699\n\xD4\f\xD4\xE\xD4"+
		"\x169C\v\xD4\x3\xD4\x3\xD4\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x5\xD5\x16A4\n"+
		"\xD5\x3\xD5\x5\xD5\x16A7\n\xD5\x3\xD5\x3\xD5\x3\xD5\x5\xD5\x16AC\n\xD5"+
		"\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x5\xD6\x16B3\n\xD6\x5\xD6\x16B5\n"+
		"\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x5\xD6\x16BB\n\xD6\x5\xD6\x16BD\n\xD6"+
		"\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x5\xD6\x16C5\n\xD6\x5\xD6\x16C7"+
		"\n\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x5\xD6\x16CD\n\xD6\x5\xD6\x16CF\n\xD6"+
		"\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x5\xD6\x16D5\n\xD6\x5\xD6\x16D7\n\xD6\x3"+
		"\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x5\xD6\x16DE\n\xD6\x3\xD6\x5\xD6\x16E1"+
		"\n\xD6\x5\xD6\x16E3\n\xD6\x3\xD6\x5\xD6\x16E6\n\xD6\x3\xD6\x3\xD6\x5\xD6"+
		"\x16EA\n\xD6\x5\xD6\x16EC\n\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3"+
		"\xD6\x3\xD6\x5\xD6\x16F5\n\xD6\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x5\xD7\x16FB"+
		"\n\xD7\x3\xD7\x3\xD7\x5\xD7\x16FF\n\xD7\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x3"+
		"\xD8\x3\xD8\x5\xD8\x1707\n\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8"+
		"\x170E\n\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x1714\n\xD8\x5\xD8\x1716"+
		"\n\xD8\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA"+
		"\x5\xDA\x1721\n\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1726\n\xDA\x3\xDA\x3"+
		"\xDA\x3\xDA\x3\xDA\x5\xDA\x172C\n\xDA\x6\xDA\x172E\n\xDA\r\xDA\xE\xDA"+
		"\x172F\x3\xDA\x3\xDA\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x5\xDB"+
		"\x173A\n\xDB\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x5\xDC\x1742\n"+
		"\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3"+
		"\xDC\x5\xDC\x174E\n\xDC\x3\xDD\x5\xDD\x1751\n\xDD\x3\xDD\x3\xDD\x3\xDD"+
		"\x3\xDD\x3\xDD\x3\xDD\x5\xDD\x1759\n\xDD\x5\xDD\x175B\n\xDD\x3\xDD\x5"+
		"\xDD\x175E\n\xDD\x3\xDD\x3\xDD\x5\xDD\x1762\n\xDD\x3\xDD\x5\xDD\x1765"+
		"\n\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x6\xDD\x176C\n\xDD\r\xDD\xE"+
		"\xDD\x176D\x3\xDD\x5\xDD\x1771\n\xDD\x3\xDD\x5\xDD\x1774\n\xDD\x3\xDD"+
		"\x3\xDD\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x177C\n\xDE\x3\xDE\x3\xDE\x6"+
		"\xDE\x1780\n\xDE\r\xDE\xE\xDE\x1781\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE"+
		"\x5\xDE\x1789\n\xDE\x3\xDE\x3\xDE\x5\xDE\x178D\n\xDE\x3\xDE\x3\xDE\x3"+
		"\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x1798\n\xDE\x3\xDE"+
		"\x3\xDE\x6\xDE\x179C\n\xDE\r\xDE\xE\xDE\x179D\x5\xDE\x17A0\n\xDE\x3\xDF"+
		"\x3\xDF\x3\xDF\x3\xDF\x3\xDF\a\xDF\x17A7\n\xDF\f\xDF\xE\xDF\x17AA\v\xDF"+
		"\x3\xDF\x5\xDF\x17AD\n\xDF\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x5\xE0\x17B4"+
		"\n\xE0\x3\xE0\x3\xE0\x3\xE0\x5\xE0\x17B9\n\xE0\x3\xE1\x5\xE1\x17BC\n\xE1"+
		"\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x5\xE1\x17C4\n\xE1\x3\xE1\x3"+
		"\xE1\x5\xE1\x17C8\n\xE1\x3\xE1\x5\xE1\x17CB\n\xE1\x3\xE1\x3\xE1\x5\xE1"+
		"\x17CF\n\xE1\x3\xE1\x5\xE1\x17D2\n\xE1\x3\xE1\x3\xE1\x5\xE1\x17D6\n\xE1"+
		"\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x5\xE1\x17DD\n\xE1\x3\xE1\x3\xE1\x5"+
		"\xE1\x17E1\n\xE1\x5\xE1\x17E3\n\xE1\x5\xE1\x17E5\n\xE1\x3\xE1\x5\xE1\x17E8"+
		"\n\xE1\x3\xE1\x5\xE1\x17EB\n\xE1\x3\xE1\x5\xE1\x17EE\n\xE1\x3\xE2\x3\xE2"+
		"\x3\xE2\x3\xE2\x5\xE2\x17F4\n\xE2\x3\xE3\x5\xE3\x17F7\n\xE3\x3\xE3\x3"+
		"\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x17FF\n\xE3\x5\xE3\x1801\n\xE3"+
		"\x3\xE3\x5\xE3\x1804\n\xE3\x3\xE3\x3\xE3\x5\xE3\x1808\n\xE3\x3\xE3\x5"+
		"\xE3\x180B\n\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x1811\n\xE3\x3\xE3"+
		"\x5\xE3\x1814\n\xE3\x3\xE3\x3\xE3\x5\xE3\x1818\n\xE3\x3\xE3\x5\xE3\x181B"+
		"\n\xE3\x3\xE3\x5\xE3\x181E\n\xE3\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x5"+
		"\xE4\x1825\n\xE4\x3\xE5\x5\xE5\x1828\n\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5"+
		"\x3\xE5\x5\xE5\x182F\n\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x5\xE5\x1835\n"+
		"\xE5\a\xE5\x1837\n\xE5\f\xE5\xE\xE5\x183A\v\xE5\x3\xE5\x3\xE5\x3\xE5\x3"+
		"\xE5\x3\xE5\x3\xE5\x3\xE5\x5\xE5\x1843\n\xE5\x3\xE5\x5\xE5\x1846\n\xE5"+
		"\x3\xE6\x5\xE6\x1849\n\xE6\x3\xE6\x3\xE6\x3\xE7\x3\xE7\x5\xE7\x184F\n"+
		"\xE7\x3\xE7\x5\xE7\x1852\n\xE7\x3\xE7\x5\xE7\x1855\n\xE7\x3\xE7\x5\xE7"+
		"\x1858\n\xE7\x3\xE8\x3\xE8\x5\xE8\x185C\n\xE8\x3\xE9\x5\xE9\x185F\n\xE9"+
		"\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x5\xE9\x1867\n\xE9\x5\xE9\x1869"+
		"\n\xE9\x3\xE9\x3\xE9\x5\xE9\x186D\n\xE9\x3\xE9\x5\xE9\x1870\n\xE9\x3\xE9"+
		"\x3\xE9\x3\xE9\x3\xE9\a\xE9\x1876\n\xE9\f\xE9\xE\xE9\x1879\v\xE9\x3\xE9"+
		"\x5\xE9\x187C\n\xE9\x3\xE9\x3\xE9\x5\xE9\x1880\n\xE9\x3\xE9\x3\xE9\x3"+
		"\xE9\x3\xE9\x3\xE9\x5\xE9\x1887\n\xE9\x3\xE9\x3\xE9\x5\xE9\x188B\n\xE9"+
		"\x5\xE9\x188D\n\xE9\x5\xE9\x188F\n\xE9\x3\xE9\x5\xE9\x1892\n\xE9\x3\xE9"+
		"\x5\xE9\x1895\n\xE9\x3\xE9\x5\xE9\x1898\n\xE9\x3\xEA\x3\xEA\x3\xEA\x3"+
		"\xEA\a\xEA\x189E\n\xEA\f\xEA\xE\xEA\x18A1\v\xEA\x3\xEA\x3\xEA\x3\xEA\x5"+
		"\xEA\x18A6\n\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x5\xEA\x18AC\n\xEA\x5\xEA"+
		"\x18AE\n\xEA\x3\xEB\x3\xEB\x5\xEB\x18B2\n\xEB\x3\xEB\x5\xEB\x18B5\n\xEB"+
		"\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x5\xEC\x18BD\n\xEC\x3\xEC\x3"+
		"\xEC\x5\xEC\x18C1\n\xEC\x3\xEC\x3\xEC\x3\xEC\a\xEC\x18C6\n\xEC\f\xEC\xE"+
		"\xEC\x18C9\v\xEC\x5\xEC\x18CB\n\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC"+
		"\a\xEC\x18D2\n\xEC\f\xEC\xE\xEC\x18D5\v\xEC\x5\xEC\x18D7\n\xEC\x3\xEC"+
		"\x3\xEC\x5\xEC\x18DB\n\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\a\xEC\x18E1\n\xEC"+
		"\f\xEC\xE\xEC\x18E4\v\xEC\x5\xEC\x18E6\n\xEC\x3\xED\x3\xED\x5\xED\x18EA"+
		"\n\xED\x3\xED\x5\xED\x18ED\n\xED\x3\xED\x3\xED\x3\xED\x3\xED\x3\xED\x3"+
		"\xED\x3\xED\x3\xED\x3\xED\x3\xED\x3\xED\x3\xED\x5\xED\x18FB\n\xED\x3\xED"+
		"\x3\xED\x5\xED\x18FF\n\xED\x3\xED\x5\xED\x1902\n\xED\x3\xED\x3\xED\x5"+
		"\xED\x1906\n\xED\x3\xED\x5\xED\x1909\n\xED\x3\xEE\x3\xEE\x3\xEE\x5\xEE"+
		"\x190E\n\xEE\x5\xEE\x1910\n\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3"+
		"\xEE\x5\xEE\x1918\n\xEE\x3\xEE\x3\xEE\x5\xEE\x191C\n\xEE\x3\xEE\x5\xEE"+
		"\x191F\n\xEE\x3\xEF\x3\xEF\x5\xEF\x1923\n\xEF\x3\xEF\x3\xEF\x3\xEF\x3"+
		"\xEF\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x5\xEF\x192F\n\xEF\x3\xEF"+
		"\x5\xEF\x1932\n\xEF\x3\xEF\x3\xEF\x5\xEF\x1936\n\xEF\x3\xEF\x5\xEF\x1939"+
		"\n\xEF\x3\xF0\x3\xF0\x5\xF0\x193D\n\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3"+
		"\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x5"+
		"\xF0\x194D\n\xF0\x5\xF0\x194F\n\xF0\x5\xF0\x1951\n\xF0\x3\xF0\x5\xF0\x1954"+
		"\n\xF0\x3\xF0\x5\xF0\x1957\n\xF0\x3\xF1\x3\xF1\x3\xF1\x5\xF1\x195C\n\xF1"+
		"\x3\xF1\x5\xF1\x195F\n\xF1\x3\xF1\x3\xF1\x3\xF1\x3\xF1\x5\xF1\x1965\n"+
		"\xF1\x3\xF1\x5\xF1\x1968\n\xF1\x3\xF1\x3\xF1\x3\xF1\a\xF1\x196D\n\xF1"+
		"\f\xF1\xE\xF1\x1970\v\xF1\x3\xF1\x5\xF1\x1973\n\xF1\x5\xF1\x1975\n\xF1"+
		"\x3\xF1\x3\xF1\x3\xF1\x3\xF1\a\xF1\x197B\n\xF1\f\xF1\xE\xF1\x197E\v\xF1"+
		"\x5\xF1\x1980\n\xF1\x3\xF1\x3\xF1\x5\xF1\x1984\n\xF1\x3\xF1\x3\xF1\x3"+
		"\xF1\a\xF1\x1989\n\xF1\f\xF1\xE\xF1\x198C\v\xF1\x5\xF1\x198E\n\xF1\x3"+
		"\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF3\x3\xF3\x5"+
		"\xF3\x199A\n\xF3\x3\xF4\x3\xF4\x3\xF4\x5\xF4\x199F\n\xF4\x3\xF4\x5\xF4"+
		"\x19A2\n\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\a"+
		"\xF4\x19AC\n\xF4\f\xF4\xE\xF4\x19AF\v\xF4\x5\xF4\x19B1\n\xF4\x3\xF4\x3"+
		"\xF4\x3\xF4\x3\xF4\x5\xF4\x19B7\n\xF4\x3\xF4\x3\xF4\x3\xF4\a\xF4\x19BC"+
		"\n\xF4\f\xF4\xE\xF4\x19BF\v\xF4\x3\xF4\x3\xF4\x5\xF4\x19C3\n\xF4\x3\xF4"+
		"\x3\xF4\x3\xF4\x5\xF4\x19C8\n\xF4\x3\xF4\x3\xF4\x6\xF4\x19CC\n\xF4\r\xF4"+
		"\xE\xF4\x19CD\x3\xF5\x3\xF5\x5\xF5\x19D2\n\xF5\x3\xF6\x3\xF6\x3\xF7\x3"+
		"\xF7\x3\xF7\x5\xF7\x19D9\n\xF7\x3\xF7\x5\xF7\x19DC\n\xF7\x3\xF7\x3\xF7"+
		"\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x5\xF7\x19E4\n\xF7\x3\xF7\x3\xF7\x3\xF7\x3"+
		"\xF7\a\xF7\x19EA\n\xF7\f\xF7\xE\xF7\x19ED\v\xF7\x5\xF7\x19EF\n\xF7\x3"+
		"\xF7\x3\xF7\x3\xF7\x3\xF7\a\xF7\x19F5\n\xF7\f\xF7\xE\xF7\x19F8\v\xF7\x3"+
		"\xF7\x3\xF7\x6\xF7\x19FC\n\xF7\r\xF7\xE\xF7\x19FD\x3\xF8\x3\xF8\x3\xF9"+
		"\x3\xF9\x3\xF9\x5\xF9\x1A05\n\xF9\x3\xF9\x5\xF9\x1A08\n\xF9\x3\xF9\x3"+
		"\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\a\xF9\x1A10\n\xF9\f\xF9\xE\xF9\x1A13"+
		"\v\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x5\xF9\x1A19\n\xF9\x3\xF9\x3\xF9\x3"+
		"\xF9\x5\xF9\x1A1E\n\xF9\x3\xF9\x5\xF9\x1A21\n\xF9\x3\xFA\x3\xFA\x3\xFA"+
		"\x3\xFA\x3\xFA\x3\xFA\a\xFA\x1A29\n\xFA\f\xFA\xE\xFA\x1A2C\v\xFA\x5\xFA"+
		"\x1A2E\n\xFA\x3\xFA\x5\xFA\x1A31\n\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3"+
		"\xFA\x3\xFA\x5\xFA\x1A39\n\xFA\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB"+
		"\x3\xFB\a\xFB\x1A42\n\xFB\f\xFB\xE\xFB\x1A45\v\xFB\x5\xFB\x1A47\n\xFB"+
		"\x3\xFB\x5\xFB\x1A4A\n\xFB\x3\xFB\x3\xFB\a\xFB\x1A4E\n\xFB\f\xFB\xE\xFB"+
		"\x1A51\v\xFB\x3\xFB\x3\xFB\x5\xFB\x1A55\n\xFB\x3\xFB\x3\xFB\x5\xFB\x1A59"+
		"\n\xFB\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\a\xFC\x1A61\n\xFC\f\xFC"+
		"\xE\xFC\x1A64\v\xFC\x5\xFC\x1A66\n\xFC\x3\xFC\x5\xFC\x1A69\n\xFC\x3\xFC"+
		"\x3\xFC\a\xFC\x1A6D\n\xFC\f\xFC\xE\xFC\x1A70\v\xFC\x3\xFC\x3\xFC\x3\xFC"+
		"\x5\xFC\x1A75\n\xFC\x3\xFC\x3\xFC\x3\xFD\x3\xFD\x5\xFD\x1A7B\n\xFD\x3"+
		"\xFD\x3\xFD\x3\xFD\x5\xFD\x1A80\n\xFD\x3\xFD\x3\xFD\x5\xFD\x1A84\n\xFD"+
		"\x3\xFD\x3\xFD\x5\xFD\x1A88\n\xFD\x3\xFD\x5\xFD\x1A8B\n\xFD\x3\xFE\x3"+
		"\xFE\x3\xFE\x5\xFE\x1A90\n\xFE\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF"+
		"\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x5\xFF\x1A9E\n\xFF\x3\x100"+
		"\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100"+
		"\x3\x100\x3\x100\x3\x100\x3\x100\x5\x100\x1AAE\n\x100\x3\x100\x3\x100"+
		"\x5\x100\x1AB2\n\x100\x3\x100\x3\x100\x3\x100\x3\x100\x5\x100\x1AB8\n"+
		"\x100\x5\x100\x1ABA\n\x100\x3\x100\x5\x100\x1ABD\n\x100\x3\x101\x3\x101"+
		"\x5\x101\x1AC1\n\x101\x3\x101\x3\x101\x3\x101\x5\x101\x1AC6\n\x101\x3"+
		"\x101\x3\x101\x3\x101\x5\x101\x1ACB\n\x101\x3\x102\x3\x102\x3\x102\x3"+
		"\x102\x3\x102\x3\x102\x5\x102\x1AD3\n\x102\x3\x102\a\x102\x1AD6\n\x102"+
		"\f\x102\xE\x102\x1AD9\v\x102\x3\x102\x5\x102\x1ADC\n\x102\x3\x102\x3\x102"+
		"\x3\x102\x5\x102\x1AE1\n\x102\x3\x102\a\x102\x1AE4\n\x102\f\x102\xE\x102"+
		"\x1AE7\v\x102\x3\x102\x3\x102\x3\x102\x5\x102\x1AEC\n\x102\x3\x102\x3"+
		"\x102\x3\x102\x5\x102\x1AF1\n\x102\x3\x102\x5\x102\x1AF4\n\x102\x3\x103"+
		"\x3\x103\x3\x103\x5\x103\x1AF9\n\x103\x3\x103\x3\x103\x3\x103\x3\x103"+
		"\x5\x103\x1AFF\n\x103\x3\x103\x3\x103\x5\x103\x1B03\n\x103\x3\x104\x3"+
		"\x104\x3\x104\x3\x104\x3\x104\a\x104\x1B0A\n\x104\f\x104\xE\x104\x1B0D"+
		"\v\x104\x3\x104\x3\x104\x3\x104\x3\x104\x3\x104\a\x104\x1B14\n\x104\f"+
		"\x104\xE\x104\x1B17\v\x104\x5\x104\x1B19\n\x104\x3\x105\x3\x105\x3\x105"+
		"\x3\x105\x3\x105\x3\x105\x3\x105\x5\x105\x1B22\n\x105\x3\x105\x3\x105"+
		"\x3\x105\x3\x105\a\x105\x1B28\n\x105\f\x105\xE\x105\x1B2B\v\x105\x5\x105"+
		"\x1B2D\n\x105\x3\x105\x3\x105\x3\x105\x3\x105\x3\x105\x5\x105\x1B34\n"+
		"\x105\x3\x105\x5\x105\x1B37\n\x105\x3\x106\x3\x106\x3\x107\x3\x107\x3"+
		"\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107"+
		"\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\a\x107"+
		"\x1B4E\n\x107\f\x107\xE\x107\x1B51\v\x107\x3\x107\x3\x107\x3\x107\x3\x107"+
		"\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107"+
		"\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x5\x107\x1B66\n\x107"+
		"\x3\x107\x5\x107\x1B69\n\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107"+
		"\x5\x107\x1B70\n\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107"+
		"\x5\x107\x1B78\n\x107\x3\x107\x3\x107\x3\x107\x3\x107\x5\x107\x1B7E\n"+
		"\x107\x3\x107\x5\x107\x1B81\n\x107\x3\x108\x5\x108\x1B84\n\x108\x3\x108"+
		"\x5\x108\x1B87\n\x108\x3\x108\x3\x108\x3\x108\x3\x108\x5\x108\x1B8D\n"+
		"\x108\x3\x108\x3\x108\x5\x108\x1B91\n\x108\x3\x109\x3\x109\x3\x109\x3"+
		"\x109\x3\x109\x3\x109\x5\x109\x1B99\n\x109\x3\x109\x3\x109\x3\x109\x3"+
		"\x109\x3\x109\x3\x109\x3\x10A\x3\x10A\x3\x10A\x3\x10A\x5\x10A\x1BA5\n"+
		"\x10A\x3\x10A\x3\x10A\x3\x10A\x3\x10A\x3\x10A\x3\x10A\x3\x10A\x3\x10A"+
		"\x3\x10A\x3\x10A\x5\x10A\x1BB1\n\x10A\x3\x10A\x3\x10A\x5\x10A\x1BB5\n"+
		"\x10A\x3\x10A\x5\x10A\x1BB8\n\x10A\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3"+
		"\x10B\a\x10B\x1BBF\n\x10B\f\x10B\xE\x10B\x1BC2\v\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\x5\x10B\x1BC7\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\a\x10B\x1BCF\n\x10B\f\x10B\xE\x10B\x1BD2\v\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x5\x10B\x1BDA\n\x10B\x3\x10C\x3\x10C"+
		"\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x5\x10C\x1BE4\n\x10C"+
		"\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x5\x10C\x1BEA\n\x10C\x3\x10C\x3\x10C"+
		"\x3\x10C\x3\x10C\x5\x10C\x1BF0\n\x10C\x3\x10C\x3\x10C\x3\x10C\x3\x10C"+
		"\x3\x10C\x5\x10C\x1BF7\n\x10C\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x5\x10C"+
		"\x1BFD\n\x10C\x3\x10C\x3\x10C\x5\x10C\x1C01\n\x10C\x3\x10C\x3\x10C\x3"+
		"\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x5\x10D\x1C0C\n"+
		"\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D"+
		"\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x5\x10D\x1C1B\n\x10D\x5\x10D"+
		"\x1C1D\n\x10D\x3\x10E\x3\x10E\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F"+
		"\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F"+
		"\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F"+
		"\x5\x10F\x1C38\n\x10F\x3\x110\x3\x110\x3\x110\x3\x110\x3\x110\x3\x110"+
		"\x3\x110\x3\x110\x3\x110\x5\x110\x1C43\n\x110\x3\x110\x3\x110\x3\x110"+
		"\x3\x110\x3\x110\x3\x110\x5\x110\x1C4B\n\x110\x3\x111\x3\x111\x3\x111"+
		"\x3\x111\x3\x111\x3\x111\x3\x111\a\x111\x1C54\n\x111\f\x111\xE\x111\x1C57"+
		"\v\x111\a\x111\x1C59\n\x111\f\x111\xE\x111\x1C5C\v\x111\x5\x111\x1C5E"+
		"\n\x111\x3\x112\x3\x112\x3\x112\x3\x112\x3\x112\x3\x112\x5\x112\x1C66"+
		"\n\x112\x3\x113\x3\x113\x3\x113\x3\x113\x3\x114\x3\x114\x3\x114\x3\x114"+
		"\x5\x114\x1C70\n\x114\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x5\x115"+
		"\x1C77\n\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x5\x115\x1C7E\n"+
		"\x115\x5\x115\x1C80\n\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3"+
		"\x115\x3\x115\x3\x115\x3\x115\x3\x115\x5\x115\x1C8C\n\x115\x3\x115\x3"+
		"\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x5\x115"+
		"\x1C97\n\x115\x3\x115\x3\x115\x5\x115\x1C9B\n\x115\x3\x115\x3\x115\x3"+
		"\x115\x5\x115\x1CA0\n\x115\x3\x115\x5\x115\x1CA3\n\x115\x5\x115\x1CA5"+
		"\n\x115\x3\x115\x5\x115\x1CA8\n\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3"+
		"\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x5\x115\x1CB4\n\x115\x5"+
		"\x115\x1CB6\n\x115\x5\x115\x1CB8\n\x115\x3\x115\x5\x115\x1CBB\n\x115\x3"+
		"\x115\x3\x115\x3\x115\x5\x115\x1CC0\n\x115\x3\x115\x5\x115\x1CC3\n\x115"+
		"\x3\x115\x3\x115\x3\x115\x5\x115\x1CC8\n\x115\x3\x115\x3\x115\x3\x115"+
		"\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x5\x115\x1CD2\n\x115\x3\x115"+
		"\x3\x115\x5\x115\x1CD6\n\x115\x3\x115\x3\x115\x3\x115\x5\x115\x1CDB\n"+
		"\x115\x3\x115\x5\x115\x1CDE\n\x115\x5\x115\x1CE0\n\x115\x3\x115\x5\x115"+
		"\x1CE3\n\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115"+
		"\x3\x115\x3\x115\x3\x115\x5\x115\x1CEF\n\x115\x5\x115\x1CF1\n\x115\x5"+
		"\x115\x1CF3\n\x115\x3\x115\x5\x115\x1CF6\n\x115\x3\x115\x3\x115\x3\x115"+
		"\x3\x115\x5\x115\x1CFC\n\x115\x3\x116\x3\x116\x3\x117\x3\x117\x3\x117"+
		"\x3\x117\x3\x117\x3\x117\x5\x117\x1D06\n\x117\x3\x118\x3\x118\x3\x119"+
		"\x3\x119\x3\x11A\x3\x11A\x3\x11B\x3\x11B\x3\x11B\x3\x11B\x3\x11B\x3\x11B"+
		"\x3\x11B\x3\x11B\x3\x11B\x3\x11B\x3\x11B\x3\x11B\x5\x11B\x1D1A\n\x11B"+
		"\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x5\x11C\x1D20\n\x11C\x3\x11D\x3\x11D"+
		"\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11F\x3\x11F\x3\x120\x3\x120"+
		"\x3\x120\x3\x120\x3\x121\x3\x121\x3\x122\x3\x122\x3\x122\x3\x122\x3\x122"+
		"\x3\x122\x3\x122\x3\x122\x5\x122\x1D39\n\x122\x5\x122\x1D3B\n\x122\x3"+
		"\x123\x3\x123\x3\x123\x3\x124\x3\x124\x3\x124\x3\x125\x3\x125\x3\x126"+
		"\x3\x126\x3\x127\x3\x127\x3\x128\x3\x128\x3\x128\x3\x128\x3\x129\x3\x129"+
		"\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129\x5\x129\x1D55\n\x129"+
		"\x3\x129\x3\x129\x3\x129\x3\x129\x5\x129\x1D5B\n\x129\x3\x129\x3\x129"+
		"\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129\x5\x129\x1D66"+
		"\n\x129\x3\x12A\x3\x12A\x3\x12A\x3\x12A\x3\x12A\x3\x12A\x5\x12A\x1D6E"+
		"\n\x12A\x3\x12A\x5\x12A\x1D71\n\x12A\x3\x12B\x3\x12B\x3\x12B\x3\x12C\x3"+
		"\x12C\x3\x12C\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x5\x12D"+
		"\x1D7F\n\x12D\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x5\x12E"+
		"\x1D87\n\x12E\x3\x12F\x3\x12F\x3\x12F\x3\x12F\x3\x12F\x5\x12F\x1D8E\n"+
		"\x12F\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130"+
		"\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130"+
		"\x3\x130\x3\x130\x3\x130\x3\x130\x5\x130\x1DA5\n\x130\x3\x131\x3\x131"+
		"\x3\x131\x3\x131\x3\x131\x3\x132\x3\x132\x3\x132\x3\x132\x3\x132\x3\x132"+
		"\x5\x132\x1DB2\n\x132\x3\x133\x3\x133\x3\x133\x3\x133\x5\x133\x1DB8\n"+
		"\x133\x3\x133\x3\x133\x3\x133\a\x133\x1DBD\n\x133\f\x133\xE\x133\x1DC0"+
		"\v\x133\x3\x133\x3\x133\x3\x133\a\x133\x1DC5\n\x133\f\x133\xE\x133\x1DC8"+
		"\v\x133\x5\x133\x1DCA\n\x133\x3\x133\x5\x133\x1DCD\n\x133\x3\x134\x3\x134"+
		"\x3\x134\x3\x134\x3\x135\x3\x135\x3\x135\x5\x135\x1DD6\n\x135\x3\x135"+
		"\x3\x135\x3\x135\x3\x135\x3\x136\x3\x136\x3\x136\x3\x136\x5\x136\x1DE0"+
		"\n\x136\x3\x136\x3\x136\x3\x136\a\x136\x1DE5\n\x136\f\x136\xE\x136\x1DE8"+
		"\v\x136\x3\x136\x5\x136\x1DEB\n\x136\x3\x137\x3\x137\x5\x137\x1DEF\n\x137"+
		"\x3\x138\x3\x138\x3\x138\x3\x138\x5\x138\x1DF5\n\x138\x3\x138\x3\x138"+
		"\x3\x138\a\x138\x1DFA\n\x138\f\x138\xE\x138\x1DFD\v\x138\x3\x138\x5\x138"+
		"\x1E00\n\x138\x3\x139\x3\x139\x3\x139\x3\x139\x5\x139\x1E06\n\x139\x3"+
		"\x139\x3\x139\x3\x139\a\x139\x1E0B\n\x139\f\x139\xE\x139\x1E0E\v\x139"+
		"\x3\x139\x3\x139\x3\x139\x3\x139\x5\x139\x1E14\n\x139\x3\x139\x5\x139"+
		"\x1E17\n\x139\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x5\x13A\x1E1D\n\x13A\x3"+
		"\x13A\x3\x13A\x3\x13A\a\x13A\x1E22\n\x13A\f\x13A\xE\x13A\x1E25\v\x13A"+
		"\x3\x13A\x5\x13A\x1E28\n\x13A\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1E2D\n"+
		"\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1E32\n\x13B\x3\x13B\x6\x13B\x1E35"+
		"\n\x13B\r\x13B\xE\x13B\x1E36\x3\x13B\x3\x13B\x3\x13C\x3\x13C\x3\x13C\x3"+
		"\x13C\x5\x13C\x1E3F\n\x13C\x3\x13C\x3\x13C\x5\x13C\x1E43\n\x13C\x3\x13D"+
		"\x3\x13D\x3\x13D\x3\x13D\x5\x13D\x1E49\n\x13D\x3\x13D\x3\x13D\x3\x13D"+
		"\a\x13D\x1E4E\n\x13D\f\x13D\xE\x13D\x1E51\v\x13D\x3\x13D\x5\x13D\x1E54"+
		"\n\x13D\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x5\x13E"+
		"\x1E5D\n\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x5\x13E"+
		"\x1E65\n\x13E\x3\x13F\x3\x13F\x3\x13F\x3\x13F\x5\x13F\x1E6B\n\x13F\x3"+
		"\x13F\x3\x13F\x3\x140\x3\x140\x5\x140\x1E71\n\x140\x3\x141\x3\x141\x3"+
		"\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x142\x3\x142\x3\x142\x3\x142"+
		"\x3\x142\x3\x142\x3\x142\x3\x142\x5\x142\x1E82\n\x142\x3\x142\x3\x142"+
		"\x5\x142\x1E86\n\x142\x3\x142\x3\x142\x3\x142\x3\x143\x3\x143\x3\x143"+
		"\x5\x143\x1E8E\n\x143\x3\x143\x3\x143\x5\x143\x1E92\n\x143\x3\x143\x5"+
		"\x143\x1E95\n\x143\x3\x143\x3\x143\x3\x143\x3\x143\a\x143\x1E9B\n\x143"+
		"\f\x143\xE\x143\x1E9E\v\x143\x3\x143\x5\x143\x1EA1\n\x143\x3\x143\x3\x143"+
		"\x3\x143\x5\x143\x1EA6\n\x143\x3\x143\x3\x143\x5\x143\x1EAA\n\x143\x3"+
		"\x143\x3\x143\x3\x143\x3\x143\x3\x143\x3\x143\a\x143\x1EB2\n\x143\f\x143"+
		"\xE\x143\x1EB5\v\x143\x3\x143\x3\x143\x5\x143\x1EB9\n\x143\x5\x143\x1EBB"+
		"\n\x143\x3\x144\x3\x144\x3\x144\x3\x144\x3\x144\x5\x144\x1EC2\n\x144\x3"+
		"\x145\x3\x145\x5\x145\x1EC6\n\x145\x3\x145\x3\x145\x5\x145\x1ECA\n\x145"+
		"\x3\x145\x3\x145\x5\x145\x1ECE\n\x145\x3\x145\x5\x145\x1ED1\n\x145\x3"+
		"\x145\x3\x145\x5\x145\x1ED5\n\x145\x3\x145\x3\x145\x3\x145\x3\x145\x5"+
		"\x145\x1EDB\n\x145\x3\x145\x3\x145\x5\x145\x1EDF\n\x145\x5\x145\x1EE1"+
		"\n\x145\x3\x146\x3\x146\x3\x146\x3\x146\x3\x146\x5\x146\x1EE8\n\x146\x3"+
		"\x146\x3\x146\x3\x146\a\x146\x1EED\n\x146\f\x146\xE\x146\x1EF0\v\x146"+
		"\x5\x146\x1EF2\n\x146\x3\x146\x5\x146\x1EF5\n\x146\x3\x146\x3\x146\x3"+
		"\x146\a\x146\x1EFA\n\x146\f\x146\xE\x146\x1EFD\v\x146\x3\x146\x3\x146"+
		"\x5\x146\x1F01\n\x146\x3\x146\x6\x146\x1F04\n\x146\r\x146\xE\x146\x1F05"+
		"\x3\x146\x3\x146\x5\x146\x1F0A\n\x146\x3\x146\x3\x146\x3\x146\x3\x146"+
		"\x5\x146\x1F10\n\x146\x6\x146\x1F12\n\x146\r\x146\xE\x146\x1F13\x5\x146"+
		"\x1F16\n\x146\x3\x146\x3\x146\x3\x146\x5\x146\x1F1B\n\x146\x3\x146\x6"+
		"\x146\x1F1E\n\x146\r\x146\xE\x146\x1F1F\x6\x146\x1F22\n\x146\r\x146\xE"+
		"\x146\x1F23\x3\x146\x3\x146\x3\x146\x5\x146\x1F29\n\x146\x3\x146\x3\x146"+
		"\x3\x146\x3\x146\x5\x146\x1F2F\n\x146\x6\x146\x1F31\n\x146\r\x146\xE\x146"+
		"\x1F32\x6\x146\x1F35\n\x146\r\x146\xE\x146\x1F36\x5\x146\x1F39\n\x146"+
		"\x3\x146\x3\x146\x5\x146\x1F3D\n\x146\x3\x146\x3\x146\x5\x146\x1F41\n"+
		"\x146\x3\x146\x3\x146\x5\x146\x1F45\n\x146\x3\x146\x3\x146\x5\x146\x1F49"+
		"\n\x146\x3\x146\x3\x146\x3\x146\x3\x146\x5\x146\x1F4F\n\x146\x3\x146\x5"+
		"\x146\x1F52\n\x146\x3\x146\x3\x146\x3\x146\x3\x146\x5\x146\x1F58\n\x146"+
		"\x3\x146\x3\x146\x5\x146\x1F5C\n\x146\x3\x146\x3\x146\x5\x146\x1F60\n"+
		"\x146\x3\x146\x3\x146\x3\x146\x3\x146\x5\x146\x1F66\n\x146\x3\x146\x3"+
		"\x146\x3\x146\x3\x146\x5\x146\x1F6C\n\x146\x5\x146\x1F6E\n\x146\x3\x146"+
		"\x5\x146\x1F71\n\x146\x3\x146\x3\x146\x5\x146\x1F75\n\x146\x3\x146\x3"+
		"\x146\x5\x146\x1F79\n\x146\x3\x146\x3\x146\x5\x146\x1F7D\n\x146\x3\x146"+
		"\x3\x146\x3\x146\x3\x146\x5\x146\x1F83\n\x146\x3\x146\x5\x146\x1F86\n"+
		"\x146\x3\x146\x3\x146\x3\x146\x3\x146\x5\x146\x1F8C\n\x146\x3\x146\x3"+
		"\x146\x3\x146\x3\x146\x5\x146\x1F92\n\x146\x3\x146\x5\x146\x1F95\n\x146"+
		"\x3\x146\x3\x146\x3\x146\x3\x146\x5\x146\x1F9B\n\x146\x3\x146\x5\x146"+
		"\x1F9E\n\x146\x3\x146\x3\x146\x3\x146\x3\x146\x5\x146\x1FA4\n\x146\x3"+
		"\x146\x5\x146\x1FA7\n\x146\x3\x146\x3\x146\x5\x146\x1FAB\n\x146\x3\x146"+
		"\x3\x146\x5\x146\x1FAF\n\x146\x3\x146\x3\x146\x5\x146\x1FB3\n\x146\x3"+
		"\x146\x3\x146\x3\x146\x5\x146\x1FB8\n\x146\x3\x146\x5\x146\x1FBB\n\x146"+
		"\x3\x146\x3\x146\x5\x146\x1FBF\n\x146\x3\x146\x3\x146\x5\x146\x1FC3\n"+
		"\x146\x3\x146\x3\x146\x3\x146\x3\x146\x3\x146\x3\x146\x3\x146\x3\x146"+
		"\x3\x146\x3\x146\x3\x146\x3\x146\x3\x146\x3\x146\x3\x146\x5\x146\x1FD4"+
		"\n\x146\a\x146\x1FD6\n\x146\f\x146\xE\x146\x1FD9\v\x146\x5\x146\x1FDB"+
		"\n\x146\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147\x5\x147\x1FE2\n\x147\x3"+
		"\x147\x6\x147\x1FE5\n\x147\r\x147\xE\x147\x1FE6\x3\x147\x3\x147\x5\x147"+
		"\x1FEB\n\x147\x3\x147\x3\x147\x3\x147\x3\x147\x5\x147\x1FF1\n\x147\x6"+
		"\x147\x1FF3\n\x147\r\x147\xE\x147\x1FF4\x5\x147\x1FF7\n\x147\x3\x147\x3"+
		"\x147\x3\x147\x5\x147\x1FFC\n\x147\x3\x147\x6\x147\x1FFF\n\x147\r\x147"+
		"\xE\x147\x2000\x6\x147\x2003\n\x147\r\x147\xE\x147\x2004\x3\x147\x3\x147"+
		"\x3\x147\x5\x147\x200A\n\x147\x3\x147\x3\x147\x3\x147\x3\x147\x5\x147"+
		"\x2010\n\x147\x6\x147\x2012\n\x147\r\x147\xE\x147\x2013\x6\x147\x2016"+
		"\n\x147\r\x147\xE\x147\x2017\x5\x147\x201A\n\x147\x3\x147\x3\x147\x5\x147"+
		"\x201E\n\x147\x3\x147\x3\x147\x5\x147\x2022\n\x147\x3\x147\x3\x147\x5"+
		"\x147\x2026\n\x147\x3\x147\x3\x147\x5\x147\x202A\n\x147\x3\x147\x3\x147"+
		"\x3\x147\x3\x147\x5\x147\x2030\n\x147\x3\x147\x5\x147\x2033\n\x147\x3"+
		"\x147\x3\x147\x3\x147\x3\x147\x5\x147\x2039\n\x147\x3\x147\x3\x147\x5"+
		"\x147\x203D\n\x147\x3\x147\x3\x147\x5\x147\x2041\n\x147\x3\x147\x3\x147"+
		"\x3\x147\x3\x147\x5\x147\x2047\n\x147\x3\x147\x3\x147\x3\x147\x3\x147"+
		"\x5\x147\x204D\n\x147\x5\x147\x204F\n\x147\x3\x147\x5\x147\x2052\n\x147"+
		"\x3\x147\x3\x147\x5\x147\x2056\n\x147\x3\x147\x3\x147\x5\x147\x205A\n"+
		"\x147\x3\x147\x3\x147\x5\x147\x205E\n\x147\x3\x147\x3\x147\x3\x147\x3"+
		"\x147\x5\x147\x2064\n\x147\x3\x147\x5\x147\x2067\n\x147\x3\x147\x3\x147"+
		"\x3\x147\x3\x147\x5\x147\x206D\n\x147\x3\x147\x3\x147\x3\x147\x3\x147"+
		"\x5\x147\x2073\n\x147\x3\x147\x5\x147\x2076\n\x147\x3\x147\x3\x147\x3"+
		"\x147\x3\x147\x5\x147\x207C\n\x147\x3\x147\x5\x147\x207F\n\x147\x3\x147"+
		"\x3\x147\x3\x147\x3\x147\x5\x147\x2085\n\x147\x3\x147\x5\x147\x2088\n"+
		"\x147\x3\x147\x3\x147\x5\x147\x208C\n\x147\x3\x147\x3\x147\x5\x147\x2090"+
		"\n\x147\x3\x147\x3\x147\x5\x147\x2094\n\x147\x3\x147\x3\x147\x3\x147\x5"+
		"\x147\x2099\n\x147\x3\x147\x5\x147\x209C\n\x147\x3\x147\x3\x147\x5\x147"+
		"\x20A0\n\x147\x3\x147\x3\x147\x5\x147\x20A4\n\x147\x3\x147\x3\x147\x3"+
		"\x147\x3\x147\x5\x147\x20AA\n\x147\x3\x147\x5\x147\x20AD\n\x147\x3\x147"+
		"\x3\x147\x5\x147\x20B1\n\x147\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147"+
		"\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147"+
		"\x3\x147\x5\x147\x20C2\n\x147\a\x147\x20C4\n\x147\f\x147\xE\x147\x20C7"+
		"\v\x147\x5\x147\x20C9\n\x147\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3"+
		"\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x5\x148\x20D7\n"+
		"\x148\x3\x148\x3\x148\x3\x148\x3\x148\x5\x148\x20DD\n\x148\x3\x148\x3"+
		"\x148\x3\x148\x3\x148\x3\x148\x3\x148\x5\x148\x20E5\n\x148\x3\x148\x3"+
		"\x148\x3\x148\x3\x148\x3\x148\x6\x148\x20EC\n\x148\r\x148\xE\x148\x20ED"+
		"\x3\x148\x5\x148\x20F1\n\x148\x3\x149\x3\x149\x3\x149\x3\x149\x3\x149"+
		"\x3\x149\x3\x149\x3\x149\x3\x149\x3\x149\x3\x149\x3\x149\x3\x149\x3\x14A"+
		"\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14A"+
		"\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x5\x14B"+
		"\x2112\n\x14B\x3\x14C\x3\x14C\x5\x14C\x2116\n\x14C\x3\x14C\x3\x14C\x5"+
		"\x14C\x211A\n\x14C\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x5\x14D\x2121"+
		"\n\x14D\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14F\x3\x14F\x3\x14F\x5\x14F"+
		"\x212A\n\x14F\x3\x150\x3\x150\x3\x150\x3\x150\a\x150\x2130\n\x150\f\x150"+
		"\xE\x150\x2133\v\x150\x5\x150\x2135\n\x150\x3\x150\x5\x150\x2138\n\x150"+
		"\x3\x151\x3\x151\x5\x151\x213C\n\x151\x3\x151\x3\x151\x5\x151\x2140\n"+
		"\x151\x3\x151\x5\x151\x2143\n\x151\x3\x151\x3\x151\x3\x151\x3\x151\a\x151"+
		"\x2149\n\x151\f\x151\xE\x151\x214C\v\x151\x3\x151\x3\x151\x5\x151\x2150"+
		"\n\x151\x3\x151\x3\x151\x3\x151\x5\x151\x2155\n\x151\x3\x151\x3\x151\x5"+
		"\x151\x2159\n\x151\x5\x151\x215B\n\x151\x3\x152\x3\x152\x3\x152\a\x152"+
		"\x2160\n\x152\f\x152\xE\x152\x2163\v\x152\x3\x152\x3\x152\x3\x152\a\x152"+
		"\x2168\n\x152\f\x152\xE\x152\x216B\v\x152\x5\x152\x216D\n\x152\x3\x153"+
		"\x3\x153\x3\x153\x3\x153\x3\x154\x3\x154\x3\x155\x3\x155\x3\x155\x5\x155"+
		"\x2178\n\x155\x3\x155\x3\x155\x3\x155\x5\x155\x217D\n\x155\x3\x156\x3"+
		"\x156\x5\x156\x2181\n\x156\x3\x156\x5\x156\x2184\n\x156\x3\x157\x3\x157"+
		"\x5\x157\x2188\n\x157\x3\x157\x3\x157\x3\x157\x5\x157\x218D\n\x157\x3"+
		"\x157\x3\x157\x3\x157\x3\x157\x3\x157\x5\x157\x2194\n\x157\x5\x157\x2196"+
		"\n\x157\x3\x157\x3\x157\x3\x157\x3\x157\x5\x157\x219C\n\x157\x3\x157\x5"+
		"\x157\x219F\n\x157\x3\x157\x3\x157\x3\x157\x3\x157\a\x157\x21A5\n\x157"+
		"\f\x157\xE\x157\x21A8\v\x157\x3\x157\x3\x157\x3\x157\x5\x157\x21AD\n\x157"+
		"\x3\x157\x3\x157\x5\x157\x21B1\n\x157\x3\x157\x5\x157\x21B4\n\x157\x3"+
		"\x157\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157\x5\x157\x21BD\n"+
		"\x157\x3\x157\x5\x157\x21C0\n\x157\x3\x157\x3\x157\x3\x157\x3\x157\x5"+
		"\x157\x21C6\n\x157\x3\x158\x3\x158\x3\x158\x5\x158\x21CB\n\x158\x3\x159"+
		"\x3\x159\x3\x159\x3\x159\x3\x159\x5\x159\x21D2\n\x159\x3\x159\x3\x159"+
		"\x3\x159\x5\x159\x21D7\n\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159"+
		"\x3\x159\x5\x159\x21DF\n\x159\x3\x15A\x3\x15A\x3\x15A\x5\x15A\x21E4\n"+
		"\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A"+
		"\x3\x15A\x3\x15A\x5\x15A\x21F0\n\x15A\x5\x15A\x21F2\n\x15A\x3\x15B\x3"+
		"\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x5\x15B"+
		"\x21FD\n\x15B\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x5\x15C\x2204\n"+
		"\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\a\x15C\x220C\n\x15C"+
		"\f\x15C\xE\x15C\x220F\v\x15C\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15E\x3"+
		"\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15E"+
		"\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x5\x15E\x2225\n\x15E"+
		"\x3\x15F\x3\x15F\x3\x15F\x3\x15F\x3\x15F\x3\x15F\x3\x15F\x3\x15F\x3\x15F"+
		"\x3\x15F\x3\x15F\x5\x15F\x2232\n\x15F\x3\x160\x3\x160\x3\x160\x3\x160"+
		"\x3\x160\x3\x160\x3\x160\x3\x160\x3\x160\x3\x160\x3\x160\x3\x160\x3\x160"+
		"\x3\x160\x5\x160\x2242\n\x160\x3\x160\x3\x160\x3\x160\x5\x160\x2247\n"+
		"\x160\x3\x160\x3\x160\x3\x160\x3\x160\x3\x160\x5\x160\x224E\n\x160\x3"+
		"\x160\x5\x160\x2251\n\x160\x6\x160\x2253\n\x160\r\x160\xE\x160\x2254\x5"+
		"\x160\x2257\n\x160\x3\x161\x3\x161\x3\x161\x3\x161\x3\x161\x3\x161\x3"+
		"\x161\x3\x161\x3\x161\x3\x161\x3\x161\x3\x161\x3\x161\x3\x161\x3\x161"+
		"\x5\x161\x2268\n\x161\x3\x162\x3\x162\x3\x163\x3\x163\x3\x163\x3\x163"+
		"\x3\x163\x3\x163\x3\x163\x3\x163\x3\x163\x3\x163\x3\x163\x5\x163\x2277"+
		"\n\x163\x3\x164\x3\x164\x3\x164\x3\x164\x3\x164\x3\x164\x5\x164\x227F"+
		"\n\x164\x3\x164\x3\x164\x3\x164\x3\x164\x3\x164\x3\x164\x3\x164\x5\x164"+
		"\x2288\n\x164\x3\x164\x3\x164\x3\x164\x3\x164\x3\x164\x3\x164\x5\x164"+
		"\x2290\n\x164\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x5\x165"+
		"\x2298\n\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x5\x165"+
		"\x22A9\n\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x5\x165\x22B6\n\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x5\x165"+
		"\x22C2\n\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x5\x165\x22DA\n\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x5\x165\x22E1\n\x165\x3\x165"+
		"\x3\x165\x5\x165\x22E5\n\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x5\x165\x22EF\n\x165\x3\x165\x3\x165\x5\x165"+
		"\x22F3\n\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x5\x165"+
		"\x2304\n\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x5\x165\x232B\n\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x5\x165\x2332\n\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x5\x165\x233A\n\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x5\x165\x2346\n\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x5\x165\x235C\n\x165\x3\x165\x3\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x3\x165\x5\x165\x2365\n\x165\x5\x165\x2367\n\x165\x3"+
		"\x166\x3\x166\x3\x166\x3\x166\x5\x166\x236D\n\x166\x3\x166\x3\x166\x3"+
		"\x166\x5\x166\x2372\n\x166\x3\x166\x3\x166\x3\x166\x3\x166\x3\x166\x5"+
		"\x166\x2379\n\x166\x3\x166\x3\x166\x3\x166\x3\x166\x3\x166\x3\x166\x3"+
		"\x166\x3\x166\x3\x166\x3\x166\x3\x166\x5\x166\x2386\n\x166\x5\x166\x2388"+
		"\n\x166\x5\x166\x238A\n\x166\x3\x166\x5\x166\x238D\n\x166\x3\x166\x5\x166"+
		"\x2390\n\x166\x3\x167\x3\x167\x3\x167\x3\x167\x3\x167\x5\x167\x2397\n"+
		"\x167\x3\x167\x5\x167\x239A\n\x167\x3\x167\x3\x167\x3\x167\x3\x167\x5"+
		"\x167\x23A0\n\x167\x3\x167\x3\x167\x3\x167\x5\x167\x23A5\n\x167\x5\x167"+
		"\x23A7\n\x167\x3\x167\x5\x167\x23AA\n\x167\x3\x167\x3\x167\x3\x167\x3"+
		"\x167\x5\x167\x23B0\n\x167\x3\x167\x3\x167\x3\x167\x3\x167\x3\x167\x3"+
		"\x167\x5\x167\x23B8\n\x167\x5\x167\x23BA\n\x167\x3\x167\x5\x167\x23BD"+
		"\n\x167\x3\x167\x3\x167\x5\x167\x23C1\n\x167\x3\x167\x5\x167\x23C4\n\x167"+
		"\x3\x167\x3\x167\x3\x167\x3\x167\x3\x167\x3\x167\x3\x167\x3\x167\x5\x167"+
		"\x23CE\n\x167\x3\x167\x5\x167\x23D1\n\x167\x3\x167\x3\x167\x5\x167\x23D5"+
		"\n\x167\x3\x167\x5\x167\x23D8\n\x167\x3\x167\x3\x167\x3\x167\x3\x167\x5"+
		"\x167\x23DE\n\x167\x3\x167\x5\x167\x23E1\n\x167\x5\x167\x23E3\n\x167\x3"+
		"\x168\x3\x168\x5\x168\x23E7\n\x168\x3\x169\x3\x169\x5\x169\x23EB\n\x169"+
		"\x3\x16A\x3\x16A\x3\x16A\x5\x16A\x23F0\n\x16A\x3\x16B\x3\x16B\x5\x16B"+
		"\x23F4\n\x16B\x3\x16C\x3\x16C\x3\x16C\x5\x16C\x23F9\n\x16C\x3\x16D\x3"+
		"\x16D\x3\x16D\x5\x16D\x23FE\n\x16D\x3\x16E\x3\x16E\x5\x16E\x2402\n\x16E"+
		"\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x5\x16F"+
		"\x240C\n\x16F\x3\x16F\x5\x16F\x240F\n\x16F\x3\x16F\x5\x16F\x2412\n\x16F"+
		"\x3\x170\x3\x170\x3\x170\x3\x170\x3\x170\x3\x170\x5\x170\x241A\n\x170"+
		"\x3\x170\x3\x170\x5\x170\x241E\n\x170\x3\x170\x5\x170\x2421\n\x170\x3"+
		"\x171\x3\x171\x5\x171\x2425\n\x171\x3\x172\x3\x172\x3\x172\x5\x172\x242A"+
		"\n\x172\x3\x173\x3\x173\x3\x173\x3\x173\x3\x174\x3\x174\x5\x174\x2432"+
		"\n\x174\x3\x174\x3\x174\x3\x174\x5\x174\x2437\n\x174\x3\x175\x3\x175\x3"+
		"\x175\x3\x175\x5\x175\x243D\n\x175\x3\x175\a\x175\x2440\n\x175\f\x175"+
		"\xE\x175\x2443\v\x175\x3\x175\x3\x175\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x5\x176\x244B\n\x176\x3\x176\x5\x176\x244E\n\x176\x3\x176\x5\x176\x2451"+
		"\n\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x5\x176\x245C\n\x176\x3\x177\x3\x177\x3\x177\x5\x177\x2461\n"+
		"\x177\x3\x177\x3\x177\x3\x177\x3\x178\x3\x178\x3\x178\x3\x178\x3\x179"+
		"\x3\x179\x5\x179\x246C\n\x179\x3\x179\a\x179\x246F\n\x179\f\x179\xE\x179"+
		"\x2472\v\x179\x3\x17A\x3\x17A\x3\x17A\x5\x17A\x2477\n\x17A\x3\x17B\x3"+
		"\x17B\x3\x17B\x3\x17B\x3\x17B\x5\x17B\x247E\n\x17B\x5\x17B\x2480\n\x17B"+
		"\x3\x17B\x3\x17B\x5\x17B\x2484\n\x17B\x3\x17B\x5\x17B\x2487\n\x17B\x3"+
		"\x17B\x3\x17B\x5\x17B\x248B\n\x17B\x3\x17B\x3\x17B\x5\x17B\x248F\n\x17B"+
		"\x3\x17B\x3\x17B\x3\x17B\x3\x17B\x3\x17B\x3\x17B\x5\x17B\x2497\n\x17B"+
		"\x3\x17B\x3\x17B\x3\x17B\x5\x17B\x249C\n\x17B\x5\x17B\x249E\n\x17B\x3"+
		"\x17B\x5\x17B\x24A1\n\x17B\x3\x17B\a\x17B\x24A4\n\x17B\f\x17B\xE\x17B"+
		"\x24A7\v\x17B\x3\x17C\x3\x17C\x3\x17C\x3\x17C\x3\x17C\x3\x17C\x5\x17C"+
		"\x24AF\n\x17C\x3\x17D\x3\x17D\x5\x17D\x24B3\n\x17D\x3\x17D\x3\x17D\x3"+
		"\x17D\x5\x17D\x24B8\n\x17D\x3\x17D\x5\x17D\x24BB\n\x17D\x3\x17D\x5\x17D"+
		"\x24BE\n\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D\x5\x17D\x24C4\n\x17D\x3"+
		"\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D\x5\x17D\x24CC\n\x17D\x3"+
		"\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D\x5\x17D\x24D4\n\x17D\x3"+
		"\x17D\x5\x17D\x24D7\n\x17D\x3\x17D\x5\x17D\x24DA\n\x17D\x3\x17E\x3\x17E"+
		"\x5\x17E\x24DE\n\x17E\x3\x17E\x3\x17E\x3\x17E\x5\x17E\x24E3\n\x17E\x3"+
		"\x17E\x5\x17E\x24E6\n\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x5\x17E\x24EC"+
		"\n\x17E\x3\x17E\x3\x17E\x5\x17E\x24F0\n\x17E\x3\x17E\x3\x17E\x3\x17E\x3"+
		"\x17E\x5\x17E\x24F6\n\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3"+
		"\x17E\x5\x17E\x24FE\n\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x6\x17E\x2504"+
		"\n\x17E\r\x17E\xE\x17E\x2505\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x5\x17E\x250C"+
		"\n\x17E\x3\x17E\x5\x17E\x250F\n\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3"+
		"\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E"+
		"\x5\x17E\x251E\n\x17E\x3\x17E\x5\x17E\x2521\n\x17E\x3\x17E\x5\x17E\x2524"+
		"\n\x17E\x5\x17E\x2526\n\x17E\x3\x17F\x3\x17F\x3\x17F\x3\x17F\x3\x17F\x3"+
		"\x17F\x3\x17F\x3\x17F\x3\x17F\x5\x17F\x2531\n\x17F\x3\x180\x3\x180\x3"+
		"\x180\x3\x180\x3\x180\x3\x180\x3\x180\x3\x180\x3\x180\x5\x180\x253C\n"+
		"\x180\x3\x181\x3\x181\x3\x181\x3\x181\x3\x181\a\x181\x2543\n\x181\f\x181"+
		"\xE\x181\x2546\v\x181\x3\x181\x3\x181\x3\x182\x3\x182\x5\x182\x254C\n"+
		"\x182\x3\x182\x3\x182\x3\x182\x3\x182\x3\x182\x5\x182\x2553\n\x182\x3"+
		"\x183\x3\x183\x3\x183\x3\x183\x3\x183\x3\x183\x3\x183\x3\x183\x5\x183"+
		"\x255D\n\x183\x5\x183\x255F\n\x183\x5\x183\x2561\n\x183\x3\x183\x5\x183"+
		"\x2564\n\x183\x3\x183\x5\x183\x2567\n\x183\x3\x183\x3\x183\x3\x183\x3"+
		"\x183\x3\x183\x3\x183\x3\x183\x3\x183\x3\x183\x5\x183\x2572\n\x183\x5"+
		"\x183\x2574\n\x183\x5\x183\x2576\n\x183\x3\x183\x5\x183\x2579\n\x183\x3"+
		"\x184\a\x184\x257C\n\x184\f\x184\xE\x184\x257F\v\x184\x3\x184\x3\x184"+
		"\x3\x184\x3\x185\x3\x185\x3\x185\x3\x185\x3\x185\x5\x185\x2589\n\x185"+
		"\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186\x5\x186\x2592"+
		"\n\x186\x3\x186\x5\x186\x2595\n\x186\x3\x186\x5\x186\x2598\n\x186\x3\x186"+
		"\x3\x186\x3\x186\x3\x186\x3\x186\a\x186\x259F\n\x186\f\x186\xE\x186\x25A2"+
		"\v\x186\x5\x186\x25A4\n\x186\x3\x186\x5\x186\x25A7\n\x186\x3\x187\x3\x187"+
		"\x3\x187\x3\x187\x3\x187\x5\x187\x25AE\n\x187\x3\x187\x5\x187\x25B1\n"+
		"\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x5\x187\x25B8\n\x187\x3"+
		"\x187\x3\x187\x3\x187\x3\x187\x5\x187\x25BE\n\x187\x3\x187\x3\x187\x3"+
		"\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187"+
		"\x3\x187\x3\x187\x5\x187\x25CD\n\x187\x3\x187\x5\x187\x25D0\n\x187\x3"+
		"\x187\x3\x187\x3\x187\x3\x187\x3\x187\x5\x187\x25D7\n\x187\x3\x187\x3"+
		"\x187\x3\x187\x3\x187\a\x187\x25DD\n\x187\f\x187\xE\x187\x25E0\v\x187"+
		"\x3\x187\x3\x187\x3\x187\x3\x187\x5\x187\x25E6\n\x187\x3\x188\x3\x188"+
		"\x3\x189\x3\x189\x5\x189\x25EC\n\x189\x3\x18A\x3\x18A\x3\x18A\x3\x18A"+
		"\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x5\x18A\x25F7\n\x18A\x3\x18A"+
		"\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A"+
		"\x3\x18A\x3\x18A\x5\x18A\x2605\n\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A"+
		"\x3\x18A\a\x18A\x260C\n\x18A\f\x18A\xE\x18A\x260F\v\x18A\x3\x18B\x3\x18B"+
		"\x3\x18B\x3\x18B\x3\x18B\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x5\x18C\x261A"+
		"\n\x18C\x3\x18D\x3\x18D\x3\x18D\x6\x18D\x261F\n\x18D\r\x18D\xE\x18D\x2620"+
		"\x3\x18D\x3\x18D\x5\x18D\x2625\n\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D"+
		"\x6\x18D\x262B\n\x18D\r\x18D\xE\x18D\x262C\x3\x18D\x3\x18D\x5\x18D\x2631"+
		"\n\x18D\x3\x18D\x3\x18D\x5\x18D\x2635\n\x18D\x3\x18E\x3\x18E\x3\x18E\x3"+
		"\x18E\x5\x18E\x263B\n\x18E\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3"+
		"\x18F\x3\x18F\x3\x18F\x5\x18F\x2645\n\x18F\x3\x190\x3\x190\x3\x190\x3"+
		"\x190\x3\x190\x3\x190\x3\x190\x3\x190\x5\x190\x264F\n\x190\x3\x191\x3"+
		"\x191\x3\x192\x3\x192\x3\x192\x3\x192\a\x192\x2657\n\x192\f\x192\xE\x192"+
		"\x265A\v\x192\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x5\x193\x2661\n"+
		"\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x194\x3\x194\x3\x194"+
		"\x3\x194\x3\x194\x5\x194\x266D\n\x194\x3\x194\x3\x194\x3\x194\x3\x194"+
		"\x5\x194\x2673\n\x194\x3\x194\x3\x194\x5\x194\x2677\n\x194\x3\x194\x3"+
		"\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x5\x194\x2681\n"+
		"\x194\x3\x195\x3\x195\x5\x195\x2685\n\x195\x3\x195\x3\x195\x5\x195\x2689"+
		"\n\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195"+
		"\x5\x195\x2693\n\x195\x3\x196\x3\x196\a\x196\x2697\n\x196\f\x196\xE\x196"+
		"\x269A\v\x196\x3\x196\x3\x196\x3\x196\x3\x196\x3\x196\x5\x196\x26A1\n"+
		"\x196\x3\x196\x3\x196\x3\x196\x3\x196\x3\x196\x3\x196\a\x196\x26A9\n\x196"+
		"\f\x196\xE\x196\x26AC\v\x196\x3\x197\x3\x197\x3\x197\x3\x197\x3\x197\x3"+
		"\x197\x3\x197\x3\x197\x3\x197\x3\x197\x3\x197\x3\x197\x3\x197\x3\x197"+
		"\x3\x197\x3\x197\x3\x197\x3\x197\x3\x197\a\x197\x26C1\n\x197\f\x197\xE"+
		"\x197\x26C4\v\x197\x3\x197\x3\x197\x3\x197\x3\x197\x3\x197\x3\x197\x3"+
		"\x197\a\x197\x26CD\n\x197\f\x197\xE\x197\x26D0\v\x197\x3\x197\x3\x197"+
		"\x3\x197\x3\x197\x5\x197\x26D6\n\x197\x3\x197\x3\x197\x3\x197\x3\x197"+
		"\a\x197\x26DC\n\x197\f\x197\xE\x197\x26DF\v\x197\x3\x197\x3\x197\x3\x197"+
		"\x3\x197\x5\x197\x26E5\n\x197\x3\x197\x3\x197\x3\x197\x3\x197\x5\x197"+
		"\x26EB\n\x197\x3\x198\x3\x198\x3\x198\x3\x198\x3\x198\x5\x198\x26F2\n"+
		"\x198\x3\x198\x3\x198\x5\x198\x26F6\n\x198\x3\x198\x6\x198\x26F9\n\x198"+
		"\r\x198\xE\x198\x26FA\x5\x198\x26FD\n\x198\x3\x199\x3\x199\x5\x199\x2701"+
		"\n\x199\x3\x199\x3\x199\x5\x199\x2705\n\x199\x3\x199\x3\x199\x3\x199\x3"+
		"\x199\x3\x199\x5\x199\x270C\n\x199\x3\x19A\x3\x19A\x5\x19A\x2710\n\x19A"+
		"\x3\x19A\x5\x19A\x2713\n\x19A\x3\x19A\x3\x19A\x3\x19A\x5\x19A\x2718\n"+
		"\x19A\x3\x19A\x3\x19A\x5\x19A\x271C\n\x19A\x3\x19A\x3\x19A\x5\x19A\x2720"+
		"\n\x19A\x3\x19A\x3\x19A\x3\x19A\x5\x19A\x2725\n\x19A\x3\x19A\x3\x19A\x3"+
		"\x19A\a\x19A\x272A\n\x19A\f\x19A\xE\x19A\x272D\v\x19A\x5\x19A\x272F\n"+
		"\x19A\x3\x19A\x3\x19A\x5\x19A\x2733\n\x19A\x3\x19B\x3\x19B\x3\x19B\x5"+
		"\x19B\x2738\n\x19B\x3\x19B\x3\x19B\x5\x19B\x273C\n\x19B\x3\x19C\x3\x19C"+
		"\x3\x19C\x3\x19C\x3\x19C\x3\x19C\x3\x19C\x5\x19C\x2745\n\x19C\x3\x19D"+
		"\x3\x19D\x3\x19D\x3\x19D\x3\x19D\x5\x19D\x274C\n\x19D\x3\x19E\x3\x19E"+
		"\x3\x19E\x3\x19E\x3\x19E\a\x19E\x2753\n\x19E\f\x19E\xE\x19E\x2756\v\x19E"+
		"\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E"+
		"\x5\x19E\x2761\n\x19E\x5\x19E\x2763\n\x19E\x3\x19F\x3\x19F\x3\x19F\x3"+
		"\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x5\x19F\x276D\n\x19F\x3\x19F\x5"+
		"\x19F\x2770\n\x19F\x3\x19F\a\x19F\x2773\n\x19F\f\x19F\xE\x19F\x2776\v"+
		"\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x5\x19F\x277E\n"+
		"\x19F\x5\x19F\x2780\n\x19F\x5\x19F\x2782\n\x19F\x3\x19F\x3\x19F\x3\x19F"+
		"\x5\x19F\x2787\n\x19F\x5\x19F\x2789\n\x19F\x3\x19F\x3\x19F\x3\x19F\x3"+
		"\x19F\a\x19F\x278F\n\x19F\f\x19F\xE\x19F\x2792\v\x19F\x3\x19F\x3\x19F"+
		"\x5\x19F\x2796\n\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F"+
		"\x5\x19F\x279E\n\x19F\x3\x19F\a\x19F\x27A1\n\x19F\f\x19F\xE\x19F\x27A4"+
		"\v\x19F\x3\x19F\x3\x19F\x3\x19F\x5\x19F\x27A9\n\x19F\x5\x19F\x27AB\n\x19F"+
		"\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x5\x19F"+
		"\x27B5\n\x19F\x5\x19F\x27B7\n\x19F\x3\x19F\x3\x19F\x5\x19F\x27BB\n\x19F"+
		"\x3\x19F\x3\x19F\x5\x19F\x27BF\n\x19F\x5\x19F\x27C1\n\x19F\x3\x1A0\x3"+
		"\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x5\x1A0\x27CA\n\x1A0\x5"+
		"\x1A0\x27CC\n\x1A0\x3\x1A1\x3\x1A1\x3\x1A1\x5\x1A1\x27D1\n\x1A1\x3\x1A2"+
		"\x3\x1A2\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\a\x1A3\x27DA\n\x1A3\f"+
		"\x1A3\xE\x1A3\x27DD\v\x1A3\x3\x1A3\x3\x1A3\x3\x1A4\x3\x1A4\x3\x1A4\x3"+
		"\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4"+
		"\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4"+
		"\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\a\x1A4\x27FC\n\x1A4\f"+
		"\x1A4\xE\x1A4\x27FF\v\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3"+
		"\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x5\x1A4"+
		"\x280E\n\x1A4\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A5\x5\x1A5\x2815\n"+
		"\x1A5\x5\x1A5\x2817\n\x1A5\x3\x1A6\x3\x1A6\x3\x1A6\a\x1A6\x281C\n\x1A6"+
		"\f\x1A6\xE\x1A6\x281F\v\x1A6\x3\x1A7\x3\x1A7\x3\x1A7\x3\x1A7\a\x1A7\x2825"+
		"\n\x1A7\f\x1A7\xE\x1A7\x2828\v\x1A7\x3\x1A7\x3\x1A7\x3\x1A8\x3\x1A8\x3"+
		"\x1A8\x5\x1A8\x282F\n\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x5\x1A8\x2835"+
		"\n\x1A8\x3\x1A9\x3\x1A9\x3\x1A9\x3\x1A9\x3\x1A9\x3\x1A9\x5\x1A9\x283D"+
		"\n\x1A9\x3\x1A9\x5\x1A9\x2840\n\x1A9\x3\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\x3"+
		"\x1AA\x5\x1AA\x2847\n\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\x5\x1AA\x284D"+
		"\n\x1AA\x3\x1AA\x5\x1AA\x2850\n\x1AA\x5\x1AA\x2852\n\x1AA\x3\x1AB\x3\x1AB"+
		"\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x5\x1AB\x285A\n\x1AB\x5\x1AB\x285C\n"+
		"\x1AB\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x5\x1AC\x2864\n"+
		"\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x5\x1AC\x286B\n\x1AC\x3"+
		"\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x5\x1AC\x2873\n\x1AC\x5"+
		"\x1AC\x2875\n\x1AC\x3\x1AD\x3\x1AD\x3\x1AD\a\x1AD\x287A\n\x1AD\f\x1AD"+
		"\xE\x1AD\x287D\v\x1AD\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x5\x1AE"+
		"\x2884\n\x1AE\x3\x1AF\x3\x1AF\a\x1AF\x2888\n\x1AF\f\x1AF\xE\x1AF\x288B"+
		"\v\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\a\x1AF\x2891\n\x1AF\f\x1AF\xE"+
		"\x1AF\x2894\v\x1AF\x5\x1AF\x2896\n\x1AF\x3\x1B0\x3\x1B0\x5\x1B0\x289A"+
		"\n\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x289E\n\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x28A2"+
		"\n\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x28A9\n\x1B0\x5"+
		"\x1B0\x28AB\n\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x28AF\n\x1B0\x3\x1B0\x3\x1B0"+
		"\x3\x1B0\x5\x1B0\x28B4\n\x1B0\x5\x1B0\x28B6\n\x1B0\x3\x1B0\x3\x1B0\x5"+
		"\x1B0\x28BA\n\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x28BF\n\x1B0\x5\x1B0"+
		"\x28C1\n\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x28C8\n"+
		"\x1B0\x5\x1B0\x28CA\n\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x5"+
		"\x1B0\x28D1\n\x1B0\x5\x1B0\x28D3\n\x1B0\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1"+
		"\x3\x1B1\x3\x1B1\x3\x1B1\x5\x1B1\x28DC\n\x1B1\x3\x1B1\x3\x1B1\x3\x1B1"+
		"\x3\x1B1\x3\x1B1\x3\x1B1\x5\x1B1\x28E4\n\x1B1\x3\x1B1\x5\x1B1\x28E7\n"+
		"\x1B1\x3\x1B2\x3\x1B2\x3\x1B2\x3\x1B2\x3\x1B2\x5\x1B2\x28EE\n\x1B2\x3"+
		"\x1B2\x3\x1B2\x3\x1B2\x3\x1B2\x3\x1B2\x3\x1B2\x5\x1B2\x28F6\n\x1B2\x3"+
		"\x1B2\x5\x1B2\x28F9\n\x1B2\x3\x1B3\x3\x1B3\x3\x1B3\a\x1B3\x28FE\n\x1B3"+
		"\f\x1B3\xE\x1B3\x2901\v\x1B3\x3\x1B4\x3\x1B4\x3\x1B4\x5\x1B4\x2906\n\x1B4"+
		"\x3\x1B5\x3\x1B5\x3\x1B5\a\x1B5\x290B\n\x1B5\f\x1B5\xE\x1B5\x290E\v\x1B5"+
		"\x3\x1B6\x3\x1B6\x3\x1B6\x5\x1B6\x2913\n\x1B6\x3\x1B7\x3\x1B7\x5\x1B7"+
		"\x2917\n\x1B7\x3\x1B8\x3\x1B8\x3\x1B8\x3\x1B8\x3\x1B8\x3\x1B8\x3\x1B8"+
		"\x3\x1B8\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9"+
		"\x3\x1B9\x3\x1B9\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x5\x1BA\x2930"+
		"\n\x1BA\x3\x1BB\x5\x1BB\x2933\n\x1BB\x3\x1BB\x3\x1BB\x5\x1BB\x2937\n\x1BB"+
		"\x5\x1BB\x2939\n\x1BB\x3\x1BB\x5\x1BB\x293C\n\x1BB\x3\x1BB\x3\x1BB\x3"+
		"\x1BB\x3\x1BB\x3\x1BB\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BD\x3\x1BD"+
		"\x3\x1BD\x3\x1BD\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BF\x3\x1BF\x3\x1BF"+
		"\x3\x1BF\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0"+
		"\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1"+
		"\x3\x1C1\x3\x1C2\x3\x1C2\x3\x1C2\a\x1C2\x2968\n\x1C2\f\x1C2\xE\x1C2\x296B"+
		"\v\x1C2\x3\x1C3\x3\x1C3\x5\x1C3\x296F\n\x1C3\x3\x1C4\x3\x1C4\x3\x1C4\x3"+
		"\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4"+
		"\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\a\x1C4\x2981\n\x1C4\f\x1C4\xE\x1C4\x2984"+
		"\v\x1C4\x3\x1C4\x5\x1C4\x2987\n\x1C4\x3\x1C4\x3\x1C4\x5\x1C4\x298B\n\x1C4"+
		"\x3\x1C5\x3\x1C5\x3\x1C5\x3\x1C5\x3\x1C6\x3\x1C6\x3\x1C6\x3\x1C6\x3\x1C6"+
		"\x3\x1C6\x3\x1C6\x3\x1C6\x3\x1C6\x3\x1C6\x5\x1C6\x299B\n\x1C6\x3\x1C7"+
		"\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x5\x1C7\x29A4\n\x1C7"+
		"\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x5\x1C7\x29AA\n\x1C7\x3\x1C8\x3\x1C8"+
		"\x3\x1C8\x5\x1C8\x29AF\n\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8"+
		"\x3\x1C8\x3\x1C8\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9"+
		"\x3\x1C9\x3\x1C9\a\x1C9\x29C1\n\x1C9\f\x1C9\xE\x1C9\x29C4\v\x1C9\x3\x1C9"+
		"\x3\x1C9\x3\x1C9\x5\x1C9\x29C9\n\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9"+
		"\x3\x1C9\x5\x1C9\x29D0\n\x1C9\x3\x1C9\x3\x1C9\x5\x1C9\x29D4\n\x1C9\x3"+
		"\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9"+
		"\x3\x1C9\x3\x1C9\a\x1C9\x29E1\n\x1C9\f\x1C9\xE\x1C9\x29E4\v\x1C9\x3\x1C9"+
		"\x3\x1C9\x3\x1C9\x5\x1C9\x29E9\n\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9"+
		"\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9"+
		"\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x5\x1C9\x29FC\n\x1C9\x3\x1CA\x3\x1CA"+
		"\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\a\x1CA\x2A05\n\x1CA\f\x1CA\xE"+
		"\x1CA\x2A08\v\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3"+
		"\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x5\x1CA\x2A14\n\x1CA\x3\x1CA\x3\x1CA\x3"+
		"\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA"+
		"\x3\x1CA\x3\x1CA\a\x1CA\x2A23\n\x1CA\f\x1CA\xE\x1CA\x2A26\v\x1CA\x3\x1CA"+
		"\x3\x1CA\x3\x1CA\x5\x1CA\x2A2B\n\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA"+
		"\x3\x1CA\x5\x1CA\x2A32\n\x1CA\x3\x1CA\x3\x1CA\x5\x1CA\x2A36\n\x1CA\x3"+
		"\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x5\x1CB\x2A51"+
		"\n\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x5\x1CB\x2A8B\n\x1CB\x3\x1CB\x3\x1CB\x5\x1CB"+
		"\x2A8F\n\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x5\x1CB\x2AC8\n\x1CB\x5\x1CB\x2ACA\n\x1CB\x3"+
		"\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x5\x1CC\x2AD0\n\x1CC\x3\x1CD\x3\x1CD\x3"+
		"\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x5\x1CD\x2ADA\n\x1CD\x3"+
		"\x1CD\x3\x1CD\x3\x1CD\x3\x1CE\x3\x1CE\x3\x1CE\x3\x1CE\x3\x1CE\x3\x1CE"+
		"\x3\x1CE\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x5\x1CF"+
		"\x2AED\n\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0"+
		"\x3\x1D0\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x5\x1D1\x2AFD"+
		"\n\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D2\x3\x1D2\x3\x1D2\x3\x1D2\x3\x1D2"+
		"\x3\x1D3\x3\x1D3\x3\x1D3\x3\x1D3\x3\x1D3\x3\x1D3\x5\x1D3\x2B0D\n\x1D3"+
		"\x3\x1D3\x3\x1D3\x3\x1D3\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D5"+
		"\x3\x1D5\x3\x1D5\x3\x1D5\x3\x1D5\x3\x1D5\x5\x1D5\x2B1D\n\x1D5\x3\x1D5"+
		"\x3\x1D5\x3\x1D5\x3\x1D5\x3\x1D5\x3\x1D5\x3\x1D6\x3\x1D6\x3\x1D6\x3\x1D6"+
		"\x3\x1D6\x3\x1D7\x3\x1D7\x3\x1D7\x3\x1D7\x3\x1D7\x3\x1D8\x5\x1D8\x2B30"+
		"\n\x1D8\x3\x1D8\x3\x1D8\x3\x1D9\x5\x1D9\x2B35\n\x1D9\x3\x1D9\x3\x1D9\x3"+
		"\x1DA\x3\x1DA\x5\x1DA\x2B3B\n\x1DA\x3\x1DB\x5\x1DB\x2B3E\n\x1DB\x3\x1DB"+
		"\x3\x1DB\x3\x1DB\x5\x1DB\x2B43\n\x1DB\x3\x1DB\a\x1DB\x2B46\n\x1DB\f\x1DB"+
		"\xE\x1DB\x2B49\v\x1DB\x3\x1DB\x3\x1DB\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC"+
		"\x5\x1DC\x2B51\n\x1DC\x3\x1DC\a\x1DC\x2B54\n\x1DC\f\x1DC\xE\x1DC\x2B57"+
		"\v\x1DC\x3\x1DC\x3\x1DC\x3\x1DD\x5\x1DD\x2B5C\n\x1DD\x3\x1DD\x3\x1DD\x3"+
		"\x1DD\x3\x1DD\x3\x1DD\a\x1DD\x2B63\n\x1DD\f\x1DD\xE\x1DD\x2B66\v\x1DD"+
		"\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\a\x1DD\x2B6D\n\x1DD\f\x1DD\xE"+
		"\x1DD\x2B70\v\x1DD\x5\x1DD\x2B72\n\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD"+
		"\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\a\x1DD\x2B7E\n\x1DD\f"+
		"\x1DD\xE\x1DD\x2B81\v\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x5\x1DD\x2B86\n\x1DD"+
		"\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x5\x1DD\x2B8F"+
		"\n\x1DD\x3\x1DE\x3\x1DE\x5\x1DE\x2B93\n\x1DE\x3\x1DF\x3\x1DF\x3\x1DF\x3"+
		"\x1DF\a\x1DF\x2B99\n\x1DF\f\x1DF\xE\x1DF\x2B9C\v\x1DF\x3\x1DF\x3\x1DF"+
		"\x3\x1E0\x3\x1E0\x5\x1E0\x2BA2\n\x1E0\x3\x1E1\x3\x1E1\x3\x1E1\x3\x1E1"+
		"\x3\x1E1\x3\x1E1\x3\x1E1\x3\x1E1\x3\x1E1\a\x1E1\x2BAD\n\x1E1\f\x1E1\xE"+
		"\x1E1\x2BB0\v\x1E1\x3\x1E2\x3\x1E2\x3\x1E2\a\x1E2\x2BB5\n\x1E2\f\x1E2"+
		"\xE\x1E2\x2BB8\v\x1E2\x3\x1E3\x3\x1E3\x3\x1E3\x3\x1E3\x3\x1E3\x3\x1E3"+
		"\x3\x1E3\x3\x1E3\x3\x1E3\x3\x1E3\x5\x1E3\x2BC4\n\x1E3\x3\x1E4\x3\x1E4"+
		"\x3\x1E4\x3\x1E4\x3\x1E4\x5\x1E4\x2BCB\n\x1E4\x3\x1E4\x3\x1E4\x3\x1E4"+
		"\x3\x1E4\x5\x1E4\x2BD1\n\x1E4\x3\x1E4\x3\x1E4\x5\x1E4\x2BD5\n\x1E4\x3"+
		"\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4"+
		"\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x5\x1E4\x2BE6\n\x1E4"+
		"\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5"+
		"\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2BF5\n\x1E5\x5\x1E5\x2BF7\n"+
		"\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5"+
		"\x3\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2C04\n\x1E5\x3\x1E5\x3\x1E5\x3\x1E5"+
		"\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5"+
		"\x3\x1E5\x3\x1E5\x5\x1E5\x2C14\n\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5"+
		"\x3\x1E5\x3\x1E5\x5\x1E5\x2C1C\n\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2C20\n"+
		"\x1E5\x3\x1E6\x5\x1E6\x2C23\n\x1E6\x3\x1E6\x3\x1E6\x3\x1E7\x3\x1E7\x3"+
		"\x1E7\x3\x1E7\x3\x1E7\x5\x1E7\x2C2C\n\x1E7\x3\x1E7\x5\x1E7\x2C2F\n\x1E7"+
		"\x3\x1E7\x5\x1E7\x2C32\n\x1E7\x3\x1E7\x3\x1E7\x3\x1E8\x3\x1E8\x3\x1E8"+
		"\x3\x1E9\x3\x1E9\x3\x1E9\x3\x1E9\x3\x1E9\x3\x1E9\x5\x1E9\x2C3F\n\x1E9"+
		"\x3\x1EA\x3\x1EA\x5\x1EA\x2C43\n\x1EA\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB"+
		"\x3\x1EB\x3\x1EB\x5\x1EB\x2C4B\n\x1EB\x3\x1EC\x3\x1EC\x3\x1EC\x3\x1EC"+
		"\x5\x1EC\x2C51\n\x1EC\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\a\x1ED\x2C57\n\x1ED"+
		"\f\x1ED\xE\x1ED\x2C5A\v\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x5\x1ED\x2C60"+
		"\n\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x5\x1ED\x2C66\n\x1ED\x3\x1ED\x3"+
		"\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED"+
		"\x3\x1ED\x3\x1ED\x3\x1ED\x5\x1ED\x2C75\n\x1ED\x3\x1EE\x3\x1EE\x3\x1EE"+
		"\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x5\x1EE\x2C7E\n\x1EE\x3\x1EE\x3\x1EE"+
		"\x3\x1EF\x3\x1EF\x5\x1EF\x2C84\n\x1EF\x3\x1F0\x3\x1F0\x3\x1F0\x3\x1F0"+
		"\x5\x1F0\x2C8A\n\x1F0\x3\x1F0\x5\x1F0\x2C8D\n\x1F0\x3\x1F0\x3\x1F0\x5"+
		"\x1F0\x2C91\n\x1F0\x3\x1F0\x3\x1F0\x3\x1F0\a\x1F0\x2C96\n\x1F0\f\x1F0"+
		"\xE\x1F0\x2C99\v\x1F0\x3\x1F1\x3\x1F1\x3\x1F1\x3\x1F1\x3\x1F1\x5\x1F1"+
		"\x2CA0\n\x1F1\x3\x1F1\x5\x1F1\x2CA3\n\x1F1\x3\x1F1\x3\x1F1\x3\x1F1\x3"+
		"\x1F1\x5\x1F1\x2CA9\n\x1F1\x3\x1F1\x3\x1F1\x3\x1F1\x3\x1F1\x5\x1F1\x2CAF"+
		"\n\x1F1\x5\x1F1\x2CB1\n\x1F1\x3\x1F1\x3\x1F1\x3\x1F1\x3\x1F1\x5\x1F1\x2CB7"+
		"\n\x1F1\x3\x1F1\x5\x1F1\x2CBA\n\x1F1\x5\x1F1\x2CBC\n\x1F1\x3\x1F1\x3\x1F1"+
		"\x3\x1F1\x3\x1F1\x5\x1F1\x2CC2\n\x1F1\x5\x1F1\x2CC4\n\x1F1\x3\x1F1\x3"+
		"\x1F1\x3\x1F2\x3\x1F2\x3\x1F2\x3\x1F2\x3\x1F2\x3\x1F2\x3\x1F2\x3\x1F2"+
		"\x3\x1F2\x3\x1F2\x5\x1F2\x2CD2\n\x1F2\x3\x1F2\x3\x1F2\x3\x1F2\x3\x1F2"+
		"\x3\x1F2\x5\x1F2\x2CD9\n\x1F2\x3\x1F2\x3\x1F2\x3\x1F3\x3\x1F3\x3\x1F3"+
		"\x3\x1F3\x3\x1F3\x5\x1F3\x2CE2\n\x1F3\x3\x1F4\x3\x1F4\x3\x1F4\x3\x1F4"+
		"\x3\x1F4\x5\x1F4\x2CE9\n\x1F4\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5"+
		"\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5"+
		"\x3\x1F5\x3\x1F5\x5\x1F5\x2CFB\n\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5"+
		"\x3\x1F5\x5\x1F5\x2D02\n\x1F5\x3\x1F5\x3\x1F5\x3\x1F6\x3\x1F6\x3\x1F6"+
		"\x5\x1F6\x2D09\n\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x5\x1F6"+
		"\x2D10\n\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x5\x1F6\x2D16\n\x1F6\x3"+
		"\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x5\x1F6\x2D1D\n\x1F6\x3\x1F6\x5"+
		"\x1F6\x2D20\n\x1F6\x3\x1F7\x3\x1F7\x3\x1F7\x5\x1F7\x2D25\n\x1F7\x3\x1F7"+
		"\x3\x1F7\x3\x1F8\x3\x1F8\x3\x1F8\x5\x1F8\x2D2C\n\x1F8\x3\x1F8\x3\x1F8"+
		"\x3\x1F9\x5\x1F9\x2D31\n\x1F9\x3\x1F9\x3\x1F9\x5\x1F9\x2D35\n\x1F9\x3"+
		"\x1F9\x3\x1F9\x3\x1F9\x5\x1F9\x2D3A\n\x1F9\x3\x1FA\x5\x1FA\x2D3D\n\x1FA"+
		"\x3\x1FA\x3\x1FA\x5\x1FA\x2D41\n\x1FA\x3\x1FA\x3\x1FA\x5\x1FA\x2D45\n"+
		"\x1FA\x3\x1FA\x3\x1FA\x3\x1FA\x5\x1FA\x2D4A\n\x1FA\x3\x1FB\x3\x1FB\x5"+
		"\x1FB\x2D4E\n\x1FB\x3\x1FC\x3\x1FC\x3\x1FC\x3\x1FC\x5\x1FC\x2D54\n\x1FC"+
		"\x3\x1FC\x3\x1FC\x5\x1FC\x2D58\n\x1FC\x3\x1FC\x3\x1FC\x5\x1FC\x2D5C\n"+
		"\x1FC\x3\x1FC\x3\x1FC\x3\x1FC\x5\x1FC\x2D61\n\x1FC\x3\x1FC\x3\x1FC\x5"+
		"\x1FC\x2D65\n\x1FC\x3\x1FC\x3\x1FC\x3\x1FC\x5\x1FC\x2D6A\n\x1FC\x3\x1FC"+
		"\x3\x1FC\x3\x1FC\x5\x1FC\x2D6F\n\x1FC\x3\x1FD\x3\x1FD\x5\x1FD\x2D73\n"+
		"\x1FD\x3\x1FD\x3\x1FD\x3\x1FD\x5\x1FD\x2D78\n\x1FD\a\x1FD\x2D7A\n\x1FD"+
		"\f\x1FD\xE\x1FD\x2D7D\v\x1FD\x3\x1FE\x3\x1FE\x3\x1FE\a\x1FE\x2D82\n\x1FE"+
		"\f\x1FE\xE\x1FE\x2D85\v\x1FE\x3\x1FF\x5\x1FF\x2D88\n\x1FF\x3\x1FF\a\x1FF"+
		"\x2D8B\n\x1FF\f\x1FF\xE\x1FF\x2D8E\v\x1FF\x3\x1FF\x3\x1FF\x3\x200\x3\x200"+
		"\x3\x200\a\x200\x2D95\n\x200\f\x200\xE\x200\x2D98\v\x200\x3\x201\x3\x201"+
		"\x5\x201\x2D9C\n\x201\x3\x202\x3\x202\x3\x203\x3\x203\x3\x204\x5\x204"+
		"\x2DA3\n\x204\x3\x204\x3\x204\x3\x205\x3\x205\x3\x205\x3\x205\x3\x205"+
		"\x5\x205\x2DAC\n\x205\x3\x205\x3\x205\x5\x205\x2DB0\n\x205\x5\x205\x2DB2"+
		"\n\x205\x3\x206\x3\x206\x3\x206\x3\x206\x3\x206\x5\x206\x2DB9\n\x206\x3"+
		"\x207\x3\x207\x3\x207\x3\x207\x3\x207\x3\x207\x3\x207\x3\x207\x3\x207"+
		"\x3\x207\x5\x207\x2DC5\n\x207\x3\x208\x3\x208\x3\x208\x5\x208\x2DCA\n"+
		"\x208\x3\x208\x3\x208\x3\x208\x3\x208\x3\x208\x3\x208\x3\x208\x3\x208"+
		"\x3\x208\x5\x208\x2DD5\n\x208\x3\x208\x3\x208\x3\x208\x3\x208\x3\x208"+
		"\x3\x208\x3\x208\x3\x208\x5\x208\x2DDF\n\x208\x5\x208\x2DE1\n\x208\x3"+
		"\x208\x3\x208\x3\x208\x3\x208\x5\x208\x2DE7\n\x208\x5\x208\x2DE9\n\x208"+
		"\x3\x208\x3\x208\x3\x208\x5\x208\x2DEE\n\x208\x5\x208\x2DF0\n\x208\x3"+
		"\x208\x5\x208\x2DF3\n\x208\x3\x209\x3\x209\x5\x209\x2DF7\n\x209\x3\x20A"+
		"\x3\x20A\x5\x20A\x2DFB\n\x20A\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x5\x20B"+
		"\x2E01\n\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B"+
		"\x5\x20B\x2E0A\n\x20B\x3\x20B\x5\x20B\x2E0D\n\x20B\x5\x20B\x2E0F\n\x20B"+
		"\x3\x20C\x5\x20C\x2E12\n\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x5\x20C"+
		"\x2E18\n\x20C\x3\x20C\x3\x20C\x5\x20C\x2E1C\n\x20C\x3\x20C\x5\x20C\x2E1F"+
		"\n\x20C\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x5\x20D"+
		"\x2E28\n\x20D\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E"+
		"\x5\x20E\x2E31\n\x20E\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F"+
		"\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x5\x20F\x2E3D\n\x20F\x3\x20F\x5\x20F"+
		"\x2E40\n\x20F\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210"+
		"\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210"+
		"\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210\x3\x210\x5\x210\x2E59"+
		"\n\x210\x3\x210\x3\x210\x5\x210\x2E5D\n\x210\x3\x210\x5\x210\x2E60\n\x210"+
		"\x3\x211\x3\x211\x3\x211\x5\x211\x2E65\n\x211\x3\x212\x3\x212\x3\x212"+
		"\x5\x212\x2E6A\n\x212\x3\x212\x3\x212\x5\x212\x2E6E\n\x212\x3\x212\x3"+
		"\x212\x5\x212\x2E72\n\x212\x3\x212\x3\x212\x5\x212\x2E76\n\x212\x3\x213"+
		"\x3\x213\x3\x214\x3\x214\x3\x215\x3\x215\x3\x215\x3\x215\x5\x215\x2E80"+
		"\n\x215\x3\x216\x3\x216\x3\x217\x3\x217\x5\x217\x2E86\n\x217\x3\x218\x3"+
		"\x218\x3\x218\x3\x218\x3\x218\x3\x218\x3\x218\x3\x218\x3\x218\x3\x218"+
		"\x3\x218\x3\x218\x3\x218\x3\x218\x3\x218\x5\x218\x2E97\n\x218\x3\x219"+
		"\x3\x219\x3\x21A\x3\x21A\x5\x21A\x2E9D\n\x21A\x3\x21A\x2\x2\x5^\x312\x32A"+
		"\x21B\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16"+
		"\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2"+
		"\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2"+
		"J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2"+
		"h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2"+
		"\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2"+
		"\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2"+
		"\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2"+
		"\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2"+
		"\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2"+
		"\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2"+
		"\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2"+
		"\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120"+
		"\x2\x122\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132"+
		"\x2\x134\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144"+
		"\x2\x146\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156"+
		"\x2\x158\x2\x15A\x2\x15C\x2\x15E\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168"+
		"\x2\x16A\x2\x16C\x2\x16E\x2\x170\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A"+
		"\x2\x17C\x2\x17E\x2\x180\x2\x182\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C"+
		"\x2\x18E\x2\x190\x2\x192\x2\x194\x2\x196\x2\x198\x2\x19A\x2\x19C\x2\x19E"+
		"\x2\x1A0\x2\x1A2\x2\x1A4\x2\x1A6\x2\x1A8\x2\x1AA\x2\x1AC\x2\x1AE\x2\x1B0"+
		"\x2\x1B2\x2\x1B4\x2\x1B6\x2\x1B8\x2\x1BA\x2\x1BC\x2\x1BE\x2\x1C0\x2\x1C2"+
		"\x2\x1C4\x2\x1C6\x2\x1C8\x2\x1CA\x2\x1CC\x2\x1CE\x2\x1D0\x2\x1D2\x2\x1D4"+
		"\x2\x1D6\x2\x1D8\x2\x1DA\x2\x1DC\x2\x1DE\x2\x1E0\x2\x1E2\x2\x1E4\x2\x1E6"+
		"\x2\x1E8\x2\x1EA\x2\x1EC\x2\x1EE\x2\x1F0\x2\x1F2\x2\x1F4\x2\x1F6\x2\x1F8"+
		"\x2\x1FA\x2\x1FC\x2\x1FE\x2\x200\x2\x202\x2\x204\x2\x206\x2\x208\x2\x20A"+
		"\x2\x20C\x2\x20E\x2\x210\x2\x212\x2\x214\x2\x216\x2\x218\x2\x21A\x2\x21C"+
		"\x2\x21E\x2\x220\x2\x222\x2\x224\x2\x226\x2\x228\x2\x22A\x2\x22C\x2\x22E"+
		"\x2\x230\x2\x232\x2\x234\x2\x236\x2\x238\x2\x23A\x2\x23C\x2\x23E\x2\x240"+
		"\x2\x242\x2\x244\x2\x246\x2\x248\x2\x24A\x2\x24C\x2\x24E\x2\x250\x2\x252"+
		"\x2\x254\x2\x256\x2\x258\x2\x25A\x2\x25C\x2\x25E\x2\x260\x2\x262\x2\x264"+
		"\x2\x266\x2\x268\x2\x26A\x2\x26C\x2\x26E\x2\x270\x2\x272\x2\x274\x2\x276"+
		"\x2\x278\x2\x27A\x2\x27C\x2\x27E\x2\x280\x2\x282\x2\x284\x2\x286\x2\x288"+
		"\x2\x28A\x2\x28C\x2\x28E\x2\x290\x2\x292\x2\x294\x2\x296\x2\x298\x2\x29A"+
		"\x2\x29C\x2\x29E\x2\x2A0\x2\x2A2\x2\x2A4\x2\x2A6\x2\x2A8\x2\x2AA\x2\x2AC"+
		"\x2\x2AE\x2\x2B0\x2\x2B2\x2\x2B4\x2\x2B6\x2\x2B8\x2\x2BA\x2\x2BC\x2\x2BE"+
		"\x2\x2C0\x2\x2C2\x2\x2C4\x2\x2C6\x2\x2C8\x2\x2CA\x2\x2CC\x2\x2CE\x2\x2D0"+
		"\x2\x2D2\x2\x2D4\x2\x2D6\x2\x2D8\x2\x2DA\x2\x2DC\x2\x2DE\x2\x2E0\x2\x2E2"+
		"\x2\x2E4\x2\x2E6\x2\x2E8\x2\x2EA\x2\x2EC\x2\x2EE\x2\x2F0\x2\x2F2\x2\x2F4"+
		"\x2\x2F6\x2\x2F8\x2\x2FA\x2\x2FC\x2\x2FE\x2\x300\x2\x302\x2\x304\x2\x306"+
		"\x2\x308\x2\x30A\x2\x30C\x2\x30E\x2\x310\x2\x312\x2\x314\x2\x316\x2\x318"+
		"\x2\x31A\x2\x31C\x2\x31E\x2\x320\x2\x322\x2\x324\x2\x326\x2\x328\x2\x32A"+
		"\x2\x32C\x2\x32E\x2\x330\x2\x332\x2\x334\x2\x336\x2\x338\x2\x33A\x2\x33C"+
		"\x2\x33E\x2\x340\x2\x342\x2\x344\x2\x346\x2\x348\x2\x34A\x2\x34C\x2\x34E"+
		"\x2\x350\x2\x352\x2\x354\x2\x356\x2\x358\x2\x35A\x2\x35C\x2\x35E\x2\x360"+
		"\x2\x362\x2\x364\x2\x366\x2\x368\x2\x36A\x2\x36C\x2\x36E\x2\x370\x2\x372"+
		"\x2\x374\x2\x376\x2\x378\x2\x37A\x2\x37C\x2\x37E\x2\x380\x2\x382\x2\x384"+
		"\x2\x386\x2\x388\x2\x38A\x2\x38C\x2\x38E\x2\x390\x2\x392\x2\x394\x2\x396"+
		"\x2\x398\x2\x39A\x2\x39C\x2\x39E\x2\x3A0\x2\x3A2\x2\x3A4\x2\x3A6\x2\x3A8"+
		"\x2\x3AA\x2\x3AC\x2\x3AE\x2\x3B0\x2\x3B2\x2\x3B4\x2\x3B6\x2\x3B8\x2\x3BA"+
		"\x2\x3BC\x2\x3BE\x2\x3C0\x2\x3C2\x2\x3C4\x2\x3C6\x2\x3C8\x2\x3CA\x2\x3CC"+
		"\x2\x3CE\x2\x3D0\x2\x3D2\x2\x3D4\x2\x3D6\x2\x3D8\x2\x3DA\x2\x3DC\x2\x3DE"+
		"\x2\x3E0\x2\x3E2\x2\x3E4\x2\x3E6\x2\x3E8\x2\x3EA\x2\x3EC\x2\x3EE\x2\x3F0"+
		"\x2\x3F2\x2\x3F4\x2\x3F6\x2\x3F8\x2\x3FA\x2\x3FC\x2\x3FE\x2\x400\x2\x402"+
		"\x2\x404\x2\x406\x2\x408\x2\x40A\x2\x40C\x2\x40E\x2\x410\x2\x412\x2\x414"+
		"\x2\x416\x2\x418\x2\x41A\x2\x41C\x2\x41E\x2\x420\x2\x422\x2\x424\x2\x426"+
		"\x2\x428\x2\x42A\x2\x42C\x2\x42E\x2\x430\x2\x432\x2\x2\x9D\x3\x2\x354"+
		"\x355\x4\x2\x354\x354\x357\x357\x4\x2\x122\x122\x24D\x24E\x4\x2\x354\x355"+
		"\x357\x357\x5\x2\x1BD\x1BD\x229\x229\x2D5\x2D5\x5\x2\x351\x351\x354\x354"+
		"\x357\x357\x5\x2\x2B7\x2B7\x31B\x31B\x342\x342\x4\x2nnpp\x3\x2\x357\x358"+
		"\x3\x2\x315\x319\x4\x2\x10D\x10D\x1C8\x1C8\x4\x2\x97\x97\x1C2\x1C2\x5"+
		"\x2++\x97\x97\x1C2\x1C2\x4\x2\x139\x139\x2D8\x2D8\x5\x2++\x1C2\x1C2\x31F"+
		"\x31F\x4\x2MM\x31D\x31D\x4\x2++\x31F\x31F\x5\x2\x80\x80\x219\x21A\x2EC"+
		"\x2EC\x4\x2\x244\x244\x282\x282\x4\x2\x18D\x18D\x286\x286\x4\x2\x4\x4"+
		"\x1F4\x1F4\x5\x2\x4\x4\x1B3\x1B3\x1F2\x1F2\x4\x2\x5\x5##\x4\x2\x3\x3\x39"+
		"\x39\x4\x2\x13C\x13C\x22A\x22A\x4\x2\x12D\x12D\x136\x136\x4\x2\x355\x355"+
		"\x357\x357\x4\x2\x177\x177\x19C\x19C\x4\x2\x27C\x27D\x2F2\x2F2\x5\x2\x2EC"+
		"\x2EC\x2FD\x2FD\x2FF\x2FF\x4\x2\x332\x332\x335\x335\x4\x2\x6\x6xx\x4\x2"+
		"\x3\x3\x9E\x9E\x4\x2\x2D1\x2D1\x348\x348\x3\x2\x306\x307\x4\x2\x355\x355"+
		"\x357\x358\x4\x2\x2E9\x2E9\x341\x341\x4\x2\x65\x65\x32B\x32B\x4\x2\x89"+
		"\x89\x12D\x12D\x4\x2\x31\x31OO\x6\x2\x30\x30ZZ\x99\x99\xB2\xB2\x4\x2\x14D"+
		"\x14D\x289\x289\x4\x2ZZ\xB2\xB2\x4\x2\x30\x30\xB2\xB2\x5\x2\x158\x158"+
		"\x19C\x19C\x249\x249\x4\x2\x25F\x25F\x355\x355\x5\x2!!\xA0\xA0\x142\x142"+
		"\x4\x2//\x357\x357\x4\x2//\x355\x355\x4\x2\x186\x186\x357\x357\x5\x2\x158"+
		"\x158\x177\x177\x19C\x19C\x4\x2GGKK\x5\x2\x164\x164\x18C\x18C\x19D\x19D"+
		"\x4\x2\x61\x61\x91\x91\x5\x2\a\a\x16E\x16E\x33B\x33B\x4\x2\x2EC\x2EC\x2FA"+
		"\x2FA\x5\x2\x1D5\x1D5\x1E5\x1E5\x265\x265\x3\x2\x82\x83\x5\x2\x30\x30"+
		"ZZ\xB2\xB2\x4\x2GG\xCD\xCD\x4\x2\x1CB\x1CC\x1F5\x1F5\x4\x2||\x212\x212"+
		"\x4\x2\x4\x4XX\x5\x2\x18\x18ii\xB0\xB0\x5\x2\x139\x139\x214\x214\x269"+
		"\x269\x5\x2\xA4\xA4\xDD\xDD\x12D\x12D\x4\x2\x15\x15hh\x5\x2\x222\x222"+
		"\x28A\x28A\x2EC\x2EC\x4\x2\x1F2\x1F2\x1F4\x1F6\x5\x2\x11A\x11A\x166\x166"+
		"\x1A5\x1A5\x4\x2\x15B\x15B\x186\x186\x5\x2\x4\x4\x357\x357\x37C\x37D\x5"+
		"\x2gg\x2CA\x2CA\x2F4\x2F4\x5\x2\x12F\x12F\x30C\x30C\x338\x338\x4\x2\x12F"+
		"\x12F\x2AE\x2AE\x5\x2\x4\x4\x1D4\x1D4\x34A\x34A\x4\x2LLnn\x5\x2\x134\x134"+
		"\x1C3\x1C3\x1C6\x1C6\x4\x2\x1F2\x1F2\x1F4\x1F4\x5\x2\x1AB\x1AB\x20A\x20A"+
		"\x22E\x22E\x5\x2\xD2\xD2\x12F\x12F\x153\x153\x4\x2\x242\x242\x310\x310"+
		"\x4\x2\x153\x153\x22D\x22D\x5\x2LL\xF2\xF2\x22D\x22D\x5\x2\xFC\xFC\x251"+
		"\x251\x2EC\x2EC\x4\x2\x1A5\x1A5\x21C\x21C\x4\x2\x45\x45\x148\x148\x5\x2"+
		"\x33\x33\x33A\x33A\x343\x343\x4\x2\x298\x298\x2F1\x2F1\x4\x2\x2C7\x2C7"+
		"\x2EB\x2EB\x4\x2\x2EE\x2EE\x327\x327\x4\x2\x154\x154\x2EA\x2EA\x4\x2\xFC"+
		"\xFC\x2F0\x2F0\x4\x2\x29E\x29E\x337\x337\x4\x2\x2ED\x2ED\x313\x313\x4"+
		"\x2\x64\x64\x2EF\x2EF\x4\x2\xC9\xCB\x255\x255\x4\x2\xB5\xB5\x18A\x18A"+
		"\x3\x2\x1CB\x1CC\x4\x2\x45\x45\x358\x358\x4\x2\x11D\x11D\x139\x139\x4"+
		"\x2\x140\x140\x234\x234\a\x2\xC9\xCB\x127\x127\x129\x129\x1EE\x1F0\x254"+
		"\x255\x4\x2\x2F3\x2F3\x323\x323\x4\x2\xDB\xDB\x314\x314\x4\x2++\x2D5\x2D5"+
		"\x3\x2\xAA\xAB\x6\x2\xF3\xF3\x1CE\x1CE\x222\x222\x357\x357\x4\x2\x18\x18"+
		"ii\x4\x2\x106\x106\x131\x131\x4\x2\b\b\x1D\x1D\x4\x2\x170\x170\x223\x223"+
		"\x4\x2\x155\x155\x216\x216\x6\x2\x132\x132\x147\x147\x17C\x17C\x235\x235"+
		"\x5\x2\x1C9\x1C9\x1F2\x1F2\x217\x217\x4\x2\xC1\xC1\x1FC\x1FC\x6\x2\x24D"+
		"\x24D\x270\x270\x2C3\x2C3\x305\x305\v\x2\xD4\xD6\xD9\xD9\x105\x105\x112"+
		"\x112\x1B6\x1B6\x1C1\x1C1\x1EB\x1EB\x34B\x34B\x37E\x38A\x3\x2\x373\x375"+
		"\x5\x2\x367\x367\x376\x377\x379\x37B\x3\x2\x376\x377\x5\x2\x4\x4\a\a\xA1"+
		"\xA1\x4\x2\x4\x4\x34\x34\x4\x2\x355\x355\x359\x35A\x4\x2\x20F\x20F\x212"+
		"\x212\x4\x2\x14E\x14E\x1B2\x1B2\x4\x2\x274\x274\x278\x278\x4\x2\xDD\xDD"+
		"\x1D5\x1D5\x4\x2yy\x162\x162\x5\x2\x65\x65\x104\x104\x162\x162\x5\x2\x65"+
		"\x65\x162\x162\x18B\x18B\x4\x2\x124\x124\x171\x171\x4\x2kk\x354\x355\x5"+
		"\x2LL\x61\x61\x91\x91\x6\x2\x65\x65\x162\x162\x18B\x18B\x1FD\x1FD\x4\x2"+
		"$$zz\x4\x2  JJ\x4\x2\x9A\x9A\x9C\x9C\x5\x2\x125\x125\x1ED\x1ED\x210\x210"+
		"\t\x2\xE7\xE7\x190\x190\x1A0\x1A0\x239\x23A\x241\x241\x266\x266\x268\x268"+
		"\x3\x2\x109\x10A\x4\x2\x14F\x14F\x17F\x17F\x4\x2\x17D\x17D\x180\x180\x4"+
		"\x2\x111\x111\x1D6\x1D6\x3\x2\x1D7\x1D8\x4\x2\t\t\x32\x32\x4\x2\x1EC\x1EC"+
		"\x212\x212\x5\x2LLnn\x1F2\x1F2\x3\x2\x30A\x30B\x5\x2\xEB\xEB\x267\x267"+
		"\x34C\x34D\x3\x2\x359\x35A\x4\x2\x355\x355\x359\x359%\x2\x46\x46uu\x7F"+
		"\x7F\xC1\xC3\xC5\xE3\xE6\xF8\xFA\x100\x102\x120\x122\x1B0\x1B2\x1BB\x1BD"+
		"\x1CE\x1D0\x1F5\x1F7\x21D\x21F\x23E\x240\x251\x253\x25F\x261\x275\x278"+
		"\x278\x27A\x282\x284\x289\x28B\x298\x29B\x2A6\x2A9\x2CF\x2D1\x2D5\x2D7"+
		"\x2DC\x2DE\x2F6\x2F8\x30D\x30F\x31D\x31F\x323\x326\x32B\x32D\x338\x33A"+
		"\x33C\x33E\x346\x348\x34A\x34C\x34D\x3\x2\x35F\x366\a\x2\x158\x158\x177"+
		"\x177\x19C\x19C\x249\x249\x375\x375\x3678\x2\x444\x3\x2\x2\x2\x4\x460"+
		"\x3\x2\x2\x2\x6\x466\x3\x2\x2\x2\b\x485\x3\x2\x2\x2\n\x48C\x3\x2\x2\x2"+
		"\f\x52E\x3\x2\x2\x2\xE\x535\x3\x2\x2\x2\x10\x543\x3\x2\x2\x2\x12\x545"+
		"\x3\x2\x2\x2\x14\x553\x3\x2\x2\x2\x16\x557\x3\x2\x2\x2\x18\x565\x3\x2"+
		"\x2\x2\x1A\x567\x3\x2\x2\x2\x1C\x56E\x3\x2\x2\x2\x1E\x578\x3\x2\x2\x2"+
		" \x584\x3\x2\x2\x2\"\x586\x3\x2\x2\x2$\x588\x3\x2\x2\x2&\x58A\x3\x2\x2"+
		"\x2(\x5A9\x3\x2\x2\x2*\x5BA\x3\x2\x2\x2,\x5C7\x3\x2\x2\x2.\x5F6\x3\x2"+
		"\x2\x2\x30\x5F8\x3\x2\x2\x2\x32\x60B\x3\x2\x2\x2\x34\x60D\x3\x2\x2\x2"+
		"\x36\x62A\x3\x2\x2\x2\x38\x63F\x3\x2\x2\x2:\x64C\x3\x2\x2\x2<\x651\x3"+
		"\x2\x2\x2>\x655\x3\x2\x2\x2@\x659\x3\x2\x2\x2\x42\x664\x3\x2\x2\x2\x44"+
		"\x669\x3\x2\x2\x2\x46\x66B\x3\x2\x2\x2H\x670\x3\x2\x2\x2J\x672\x3\x2\x2"+
		"\x2L\x674\x3\x2\x2\x2N\x677\x3\x2\x2\x2P\x67B\x3\x2\x2\x2R\x681\x3\x2"+
		"\x2\x2T\x683\x3\x2\x2\x2V\x686\x3\x2\x2\x2X\x688\x3\x2\x2\x2Z\x68B\x3"+
		"\x2\x2\x2\\\x690\x3\x2\x2\x2^\x69B\x3\x2\x2\x2`\x6A4\x3\x2\x2\x2\x62\x6A8"+
		"\x3\x2\x2\x2\x64\x6AA\x3\x2\x2\x2\x66\x6B0\x3\x2\x2\x2h\x6B2\x3\x2\x2"+
		"\x2j\x6B4\x3\x2\x2\x2l\x6B7\x3\x2\x2\x2n\x6BF\x3\x2\x2\x2p\x6C1\x3\x2"+
		"\x2\x2r\x6C3\x3\x2\x2\x2t\x6D9\x3\x2\x2\x2v\x6EC\x3\x2\x2\x2x\x6F4\x3"+
		"\x2\x2\x2z\x6F8\x3\x2\x2\x2|\x700\x3\x2\x2\x2~\x70F\x3\x2\x2\x2\x80\x711"+
		"\x3\x2\x2\x2\x82\x73D\x3\x2\x2\x2\x84\x746\x3\x2\x2\x2\x86\x753\x3\x2"+
		"\x2\x2\x88\x755\x3\x2\x2\x2\x8A\x757\x3\x2\x2\x2\x8C\x759\x3\x2\x2\x2"+
		"\x8E\x75D\x3\x2\x2\x2\x90\x767\x3\x2\x2\x2\x92\x771\x3\x2\x2\x2\x94\x79D"+
		"\x3\x2\x2\x2\x96\x7B4\x3\x2\x2\x2\x98\x7B6\x3\x2\x2\x2\x9A\x7B8\x3\x2"+
		"\x2\x2\x9C\x815\x3\x2\x2\x2\x9E\x817\x3\x2\x2\x2\xA0\x81C\x3\x2\x2\x2"+
		"\xA2\x81F\x3\x2\x2\x2\xA4\x987\x3\x2\x2\x2\xA6\x989\x3\x2\x2\x2\xA8\x98B"+
		"\x3\x2\x2\x2\xAA\x98D\x3\x2\x2\x2\xAC\x9C3\x3\x2\x2\x2\xAE\x9C8\x3\x2"+
		"\x2\x2\xB0\x9F4\x3\x2\x2\x2\xB2\xA0B\x3\x2\x2\x2\xB4\xA29\x3\x2\x2\x2"+
		"\xB6\xA2D\x3\x2\x2\x2\xB8\xA33\x3\x2\x2\x2\xBA\xA39\x3\x2\x2\x2\xBC\xA3D"+
		"\x3\x2\x2\x2\xBE\xA41\x3\x2\x2\x2\xC0\xA46\x3\x2\x2\x2\xC2\xA54\x3\x2"+
		"\x2\x2\xC4\xA5A\x3\x2\x2\x2\xC6\xA5F\x3\x2\x2\x2\xC8\xA65\x3\x2\x2\x2"+
		"\xCA\xA75\x3\x2\x2\x2\xCC\xA79\x3\x2\x2\x2\xCE\xA7F\x3\x2\x2\x2\xD0\xA85"+
		"\x3\x2\x2\x2\xD2\xA8D\x3\x2\x2\x2\xD4\xA93\x3\x2\x2\x2\xD6\xAA2\x3\x2"+
		"\x2\x2\xD8\xAB4\x3\x2\x2\x2\xDA\xABB\x3\x2\x2\x2\xDC\xAC0\x3\x2\x2\x2"+
		"\xDE\xACB\x3\x2\x2\x2\xE0\xAD0\x3\x2\x2\x2\xE2\xAD4\x3\x2\x2\x2\xE4\xAD8"+
		"\x3\x2\x2\x2\xE6\xADD\x3\x2\x2\x2\xE8\xAE2\x3\x2\x2\x2\xEA\xAE7\x3\x2"+
		"\x2\x2\xEC\xAF5\x3\x2\x2\x2\xEE\xAFB\x3\x2\x2\x2\xF0\xB00\x3\x2\x2\x2"+
		"\xF2\xB08\x3\x2\x2\x2\xF4\xB0C\x3\x2\x2\x2\xF6\xB1D\x3\x2\x2\x2\xF8\xB25"+
		"\x3\x2\x2\x2\xFA\xB2B\x3\x2\x2\x2\xFC\xB39\x3\x2\x2\x2\xFE\xB4F\x3\x2"+
		"\x2\x2\x100\xB54\x3\x2\x2\x2\x102\xB5A\x3\x2\x2\x2\x104\xB5F\x3\x2\x2"+
		"\x2\x106\xB63\x3\x2\x2\x2\x108\xB7F\x3\x2\x2\x2\x10A\xB8A\x3\x2\x2\x2"+
		"\x10C\xB93\x3\x2\x2\x2\x10E\xBA0\x3\x2\x2\x2\x110\xBA8\x3\x2\x2\x2\x112"+
		"\xBAD\x3\x2\x2\x2\x114\xBB8\x3\x2\x2\x2\x116\xBD6\x3\x2\x2\x2\x118\xBF4"+
		"\x3\x2\x2\x2\x11A\xC02\x3\x2\x2\x2\x11C\xC1A\x3\x2\x2\x2\x11E\xC2A\x3"+
		"\x2\x2\x2\x120\xC37\x3\x2\x2\x2\x122\xC4A\x3\x2\x2\x2\x124\xC57\x3\x2"+
		"\x2\x2\x126\xC60\x3\x2\x2\x2\x128\xC7E\x3\x2\x2\x2\x12A\xD71\x3\x2\x2"+
		"\x2\x12C\xD7A\x3\x2\x2\x2\x12E\xDB4\x3\x2\x2\x2\x130\xDE5\x3\x2\x2\x2"+
		"\x132\xDE7\x3\x2\x2\x2\x134\xE10\x3\x2\x2\x2\x136\xE42\x3\x2\x2\x2\x138"+
		"\xE88\x3\x2\x2\x2\x13A\xECB\x3\x2\x2\x2\x13C\xEDB\x3\x2\x2\x2\x13E\xEF7"+
		"\x3\x2\x2\x2\x140\xF0A\x3\x2\x2\x2\x142\xF1F\x3\x2\x2\x2\x144\xF67\x3"+
		"\x2\x2\x2\x146\xFC6\x3\x2\x2\x2\x148\xFDC\x3\x2\x2\x2\x14A\xFE8\x3\x2"+
		"\x2\x2\x14C\x1004\x3\x2\x2\x2\x14E\x1019\x3\x2\x2\x2\x150\x1033\x3\x2"+
		"\x2\x2\x152\x103C\x3\x2\x2\x2\x154\x105C\x3\x2\x2\x2\x156\x1066\x3\x2"+
		"\x2\x2\x158\x1076\x3\x2\x2\x2\x15A\x1082\x3\x2\x2\x2\x15C\x108B\x3\x2"+
		"\x2\x2\x15E\x109C\x3\x2\x2\x2\x160\x10B4\x3\x2\x2\x2\x162\x1120\x3\x2"+
		"\x2\x2\x164\x113A\x3\x2\x2\x2\x166\x1146\x3\x2\x2\x2\x168\x114D\x3\x2"+
		"\x2\x2\x16A\x1179\x3\x2\x2\x2\x16C\x1184\x3\x2\x2\x2\x16E\x1197\x3\x2"+
		"\x2\x2\x170\x11BF\x3\x2\x2\x2\x172\x11C6\x3\x2\x2\x2\x174\x11D3\x3\x2"+
		"\x2\x2\x176\x11E5\x3\x2\x2\x2\x178\x122B\x3\x2\x2\x2\x17A\x1256\x3\x2"+
		"\x2\x2\x17C\x1292\x3\x2\x2\x2\x17E\x131B\x3\x2\x2\x2\x180\x13AA\x3\x2"+
		"\x2\x2\x182\x13C7\x3\x2\x2\x2\x184\x13E4\x3\x2\x2\x2\x186\x1453\x3\x2"+
		"\x2\x2\x188\x1460\x3\x2\x2\x2\x18A\x1468\x3\x2\x2\x2\x18C\x1470\x3\x2"+
		"\x2\x2\x18E\x1486\x3\x2\x2\x2\x190\x14A4\x3\x2\x2\x2\x192\x14BF\x3\x2"+
		"\x2\x2\x194\x14D3\x3\x2\x2\x2\x196\x14F8\x3\x2\x2\x2\x198\x15C4\x3\x2"+
		"\x2\x2\x19A\x15E2\x3\x2\x2\x2\x19C\x15E4\x3\x2\x2\x2\x19E\x1604\x3\x2"+
		"\x2\x2\x1A0\x1633\x3\x2\x2\x2\x1A2\x1667\x3\x2\x2\x2\x1A4\x1677\x3\x2"+
		"\x2\x2\x1A6\x1689\x3\x2\x2\x2\x1A8\x169F\x3\x2\x2\x2\x1AA\x16AD\x3\x2"+
		"\x2\x2\x1AC\x16F6\x3\x2\x2\x2\x1AE\x1715\x3\x2\x2\x2\x1B0\x1717\x3\x2"+
		"\x2\x2\x1B2\x171B\x3\x2\x2\x2\x1B4\x1739\x3\x2\x2\x2\x1B6\x173B\x3\x2"+
		"\x2\x2\x1B8\x1750\x3\x2\x2\x2\x1BA\x179F\x3\x2\x2\x2\x1BC\x17AC\x3\x2"+
		"\x2\x2\x1BE\x17AE\x3\x2\x2\x2\x1C0\x17BB\x3\x2\x2\x2\x1C2\x17F3\x3\x2"+
		"\x2\x2\x1C4\x17F6\x3\x2\x2\x2\x1C6\x1824\x3\x2\x2\x2\x1C8\x1827\x3\x2"+
		"\x2\x2\x1CA\x1848\x3\x2\x2\x2\x1CC\x184C\x3\x2\x2\x2\x1CE\x185B\x3\x2"+
		"\x2\x2\x1D0\x185E\x3\x2\x2\x2\x1D2\x1899\x3\x2\x2\x2\x1D4\x18B1\x3\x2"+
		"\x2\x2\x1D6\x18B6\x3\x2\x2\x2\x1D8\x18E7\x3\x2\x2\x2\x1DA\x190A\x3\x2"+
		"\x2\x2\x1DC\x1920\x3\x2\x2\x2\x1DE\x193A\x3\x2\x2\x2\x1E0\x195E\x3\x2"+
		"\x2\x2\x1E2\x198F\x3\x2\x2\x2\x1E4\x1999\x3\x2\x2\x2\x1E6\x19A1\x3\x2"+
		"\x2\x2\x1E8\x19D1\x3\x2\x2\x2\x1EA\x19D3\x3\x2\x2\x2\x1EC\x19DB\x3\x2"+
		"\x2\x2\x1EE\x19FF\x3\x2\x2\x2\x1F0\x1A07\x3\x2\x2\x2\x1F2\x1A22\x3\x2"+
		"\x2\x2\x1F4\x1A3A\x3\x2\x2\x2\x1F6\x1A5A\x3\x2\x2\x2\x1F8\x1A78\x3\x2"+
		"\x2\x2\x1FA\x1A8F\x3\x2\x2\x2\x1FC\x1A9D\x3\x2\x2\x2\x1FE\x1A9F\x3\x2"+
		"\x2\x2\x200\x1ABE\x3\x2\x2\x2\x202\x1ACC\x3\x2\x2\x2\x204\x1AF5\x3\x2"+
		"\x2\x2\x206\x1B04\x3\x2\x2\x2\x208\x1B1A\x3\x2\x2\x2\x20A\x1B38\x3\x2"+
		"\x2\x2\x20C\x1B3A\x3\x2\x2\x2\x20E\x1B86\x3\x2\x2\x2\x210\x1B92\x3\x2"+
		"\x2\x2\x212\x1BA0\x3\x2\x2\x2\x214\x1BD9\x3\x2\x2\x2\x216\x1BDB\x3\x2"+
		"\x2\x2\x218\x1C1C\x3\x2\x2\x2\x21A\x1C1E\x3\x2\x2\x2\x21C\x1C37\x3\x2"+
		"\x2\x2\x21E\x1C4A\x3\x2\x2\x2\x220\x1C4C\x3\x2\x2\x2\x222\x1C65\x3\x2"+
		"\x2\x2\x224\x1C67\x3\x2\x2\x2\x226\x1C6F\x3\x2\x2\x2\x228\x1C71\x3\x2"+
		"\x2\x2\x22A\x1CFD\x3\x2\x2\x2\x22C\x1D05\x3\x2\x2\x2\x22E\x1D07\x3\x2"+
		"\x2\x2\x230\x1D09\x3\x2\x2\x2\x232\x1D0B\x3\x2\x2\x2\x234\x1D19\x3\x2"+
		"\x2\x2\x236\x1D1F\x3\x2\x2\x2\x238\x1D21\x3\x2\x2\x2\x23A\x1D23\x3\x2"+
		"\x2\x2\x23C\x1D28\x3\x2\x2\x2\x23E\x1D2A\x3\x2\x2\x2\x240\x1D2E\x3\x2"+
		"\x2\x2\x242\x1D3A\x3\x2\x2\x2\x244\x1D3C\x3\x2\x2\x2\x246\x1D3F\x3\x2"+
		"\x2\x2\x248\x1D42\x3\x2\x2\x2\x24A\x1D44\x3\x2\x2\x2\x24C\x1D46\x3\x2"+
		"\x2\x2\x24E\x1D48\x3\x2\x2\x2\x250\x1D65\x3\x2\x2\x2\x252\x1D67\x3\x2"+
		"\x2\x2\x254\x1D72\x3\x2\x2\x2\x256\x1D75\x3\x2\x2\x2\x258\x1D7E\x3\x2"+
		"\x2\x2\x25A\x1D86\x3\x2\x2\x2\x25C\x1D8D\x3\x2\x2\x2\x25E\x1DA4\x3\x2"+
		"\x2\x2\x260\x1DA6\x3\x2\x2\x2\x262\x1DB1\x3\x2\x2\x2\x264\x1DB3\x3\x2"+
		"\x2\x2\x266\x1DCE\x3\x2\x2\x2\x268\x1DD5\x3\x2\x2\x2\x26A\x1DDB\x3\x2"+
		"\x2\x2\x26C\x1DEE\x3\x2\x2\x2\x26E\x1DF0\x3\x2\x2\x2\x270\x1E01\x3\x2"+
		"\x2\x2\x272\x1E18\x3\x2\x2\x2\x274\x1E29\x3\x2\x2\x2\x276\x1E3A\x3\x2"+
		"\x2\x2\x278\x1E44\x3\x2\x2\x2\x27A\x1E55\x3\x2\x2\x2\x27C\x1E66\x3\x2"+
		"\x2\x2\x27E\x1E70\x3\x2\x2\x2\x280\x1E72\x3\x2\x2\x2\x282\x1E79\x3\x2"+
		"\x2\x2\x284\x1EBA\x3\x2\x2\x2\x286\x1EC1\x3\x2\x2\x2\x288\x1EE0\x3\x2"+
		"\x2\x2\x28A\x1EE2\x3\x2\x2\x2\x28C\x1FDC\x3\x2\x2\x2\x28E\x20CA\x3\x2"+
		"\x2\x2\x290\x20F2\x3\x2\x2\x2\x292\x20FF\x3\x2\x2\x2\x294\x210D\x3\x2"+
		"\x2\x2\x296\x2115\x3\x2\x2\x2\x298\x211B\x3\x2\x2\x2\x29A\x2122\x3\x2"+
		"\x2\x2\x29C\x2126\x3\x2\x2\x2\x29E\x212B\x3\x2\x2\x2\x2A0\x215A\x3\x2"+
		"\x2\x2\x2A2\x216C\x3\x2\x2\x2\x2A4\x216E\x3\x2\x2\x2\x2A6\x2172\x3\x2"+
		"\x2\x2\x2A8\x217C\x3\x2\x2\x2\x2AA\x2183\x3\x2\x2\x2\x2AC\x21C5\x3\x2"+
		"\x2\x2\x2AE\x21CA\x3\x2\x2\x2\x2B0\x21CC\x3\x2\x2\x2\x2B2\x21F1\x3\x2"+
		"\x2\x2\x2B4\x21F3\x3\x2\x2\x2\x2B6\x2203\x3\x2\x2\x2\x2B8\x2210\x3\x2"+
		"\x2\x2\x2BA\x2224\x3\x2\x2\x2\x2BC\x2231\x3\x2\x2\x2\x2BE\x2256\x3\x2"+
		"\x2\x2\x2C0\x2267\x3\x2\x2\x2\x2C2\x2269\x3\x2\x2\x2\x2C4\x2276\x3\x2"+
		"\x2\x2\x2C6\x228F\x3\x2\x2\x2\x2C8\x2366\x3\x2\x2\x2\x2CA\x238F\x3\x2"+
		"\x2\x2\x2CC\x23E2\x3\x2\x2\x2\x2CE\x23E4\x3\x2\x2\x2\x2D0\x23E8\x3\x2"+
		"\x2\x2\x2D2\x23EC\x3\x2\x2\x2\x2D4\x23F1\x3\x2\x2\x2\x2D6\x23F5\x3\x2"+
		"\x2\x2\x2D8\x23FA\x3\x2\x2\x2\x2DA\x23FF\x3\x2\x2\x2\x2DC\x2403\x3\x2"+
		"\x2\x2\x2DE\x2413\x3\x2\x2\x2\x2E0\x2424\x3\x2\x2\x2\x2E2\x2426\x3\x2"+
		"\x2\x2\x2E4\x242B\x3\x2\x2\x2\x2E6\x242F\x3\x2\x2\x2\x2E8\x2438\x3\x2"+
		"\x2\x2\x2EA\x245B\x3\x2\x2\x2\x2EC\x245D\x3\x2\x2\x2\x2EE\x2465\x3\x2"+
		"\x2\x2\x2F0\x2469\x3\x2\x2\x2\x2F2\x2476\x3\x2\x2\x2\x2F4\x2478\x3\x2"+
		"\x2\x2\x2F6\x24A8\x3\x2\x2\x2\x2F8\x24B2\x3\x2\x2\x2\x2FA\x24DD\x3\x2"+
		"\x2\x2\x2FC\x2527\x3\x2\x2\x2\x2FE\x2532\x3\x2\x2\x2\x300\x253D\x3\x2"+
		"\x2\x2\x302\x254B\x3\x2\x2\x2\x304\x2554\x3\x2\x2\x2\x306\x257D\x3\x2"+
		"\x2\x2\x308\x2588\x3\x2\x2\x2\x30A\x258A\x3\x2\x2\x2\x30C\x25E5\x3\x2"+
		"\x2\x2\x30E\x25E7\x3\x2\x2\x2\x310\x25EB\x3\x2\x2\x2\x312\x25F6\x3\x2"+
		"\x2\x2\x314\x2610\x3\x2\x2\x2\x316\x2619\x3\x2\x2\x2\x318\x2634\x3\x2"+
		"\x2\x2\x31A\x263A\x3\x2\x2\x2\x31C\x2644\x3\x2\x2\x2\x31E\x264E\x3\x2"+
		"\x2\x2\x320\x2650\x3\x2\x2\x2\x322\x2652\x3\x2\x2\x2\x324\x265B\x3\x2"+
		"\x2\x2\x326\x2680\x3\x2\x2\x2\x328\x2692\x3\x2\x2\x2\x32A\x2694\x3\x2"+
		"\x2\x2\x32C\x26EA\x3\x2\x2\x2\x32E\x26FC\x3\x2\x2\x2\x330\x2704\x3\x2"+
		"\x2\x2\x332\x270D\x3\x2\x2\x2\x334\x2734\x3\x2\x2\x2\x336\x2744\x3\x2"+
		"\x2\x2\x338\x274B\x3\x2\x2\x2\x33A\x274D\x3\x2\x2\x2\x33C\x27C0\x3\x2"+
		"\x2\x2\x33E\x27C2\x3\x2\x2\x2\x340\x27CD\x3\x2\x2\x2\x342\x27D2\x3\x2"+
		"\x2\x2\x344\x27D4\x3\x2\x2\x2\x346\x280D\x3\x2\x2\x2\x348\x280F\x3\x2"+
		"\x2\x2\x34A\x2818\x3\x2\x2\x2\x34C\x2820\x3\x2\x2\x2\x34E\x2834\x3\x2"+
		"\x2\x2\x350\x283C\x3\x2\x2\x2\x352\x2851\x3\x2\x2\x2\x354\x285B\x3\x2"+
		"\x2\x2\x356\x2874\x3\x2\x2\x2\x358\x2876\x3\x2\x2\x2\x35A\x2883\x3\x2"+
		"\x2\x2\x35C\x2895\x3\x2\x2\x2\x35E\x28D2\x3\x2\x2\x2\x360\x28D4\x3\x2"+
		"\x2\x2\x362\x28E8\x3\x2\x2\x2\x364\x28FA\x3\x2\x2\x2\x366\x2902\x3\x2"+
		"\x2\x2\x368\x2907\x3\x2\x2\x2\x36A\x290F\x3\x2\x2\x2\x36C\x2916\x3\x2"+
		"\x2\x2\x36E\x2918\x3\x2\x2\x2\x370\x2920\x3\x2\x2\x2\x372\x292F\x3\x2"+
		"\x2\x2\x374\x2938\x3\x2\x2\x2\x376\x2942\x3\x2\x2\x2\x378\x2946\x3\x2"+
		"\x2\x2\x37A\x294A\x3\x2\x2\x2\x37C\x294E\x3\x2\x2\x2\x37E\x2952\x3\x2"+
		"\x2\x2\x380\x295A\x3\x2\x2\x2\x382\x2964\x3\x2\x2\x2\x384\x296C\x3\x2"+
		"\x2\x2\x386\x298A\x3\x2\x2\x2\x388\x298C\x3\x2\x2\x2\x38A\x299A\x3\x2"+
		"\x2\x2\x38C\x29A9\x3\x2\x2\x2\x38E\x29AE\x3\x2\x2\x2\x390\x29FB\x3\x2"+
		"\x2\x2\x392\x2A35\x3\x2\x2\x2\x394\x2AC9\x3\x2\x2\x2\x396\x2ACF\x3\x2"+
		"\x2\x2\x398\x2AD9\x3\x2\x2\x2\x39A\x2ADE\x3\x2\x2\x2\x39C\x2AEC\x3\x2"+
		"\x2\x2\x39E\x2AF1\x3\x2\x2\x2\x3A0\x2AFC\x3\x2\x2\x2\x3A2\x2B01\x3\x2"+
		"\x2\x2\x3A4\x2B0C\x3\x2\x2\x2\x3A6\x2B11\x3\x2\x2\x2\x3A8\x2B1C\x3\x2"+
		"\x2\x2\x3AA\x2B24\x3\x2\x2\x2\x3AC\x2B29\x3\x2\x2\x2\x3AE\x2B2F\x3\x2"+
		"\x2\x2\x3B0\x2B34\x3\x2\x2\x2\x3B2\x2B38\x3\x2\x2\x2\x3B4\x2B3D\x3\x2"+
		"\x2\x2\x3B6\x2B4C\x3\x2\x2\x2\x3B8\x2B5B\x3\x2\x2\x2\x3BA\x2B92\x3\x2"+
		"\x2\x2\x3BC\x2B94\x3\x2\x2\x2\x3BE\x2BA1\x3\x2\x2\x2\x3C0\x2BA3\x3\x2"+
		"\x2\x2\x3C2\x2BB1\x3\x2\x2\x2\x3C4\x2BC3\x3\x2\x2\x2\x3C6\x2BE5\x3\x2"+
		"\x2\x2\x3C8\x2C1F\x3\x2\x2\x2\x3CA\x2C22\x3\x2\x2\x2\x3CC\x2C26\x3\x2"+
		"\x2\x2\x3CE\x2C35\x3\x2\x2\x2\x3D0\x2C3E\x3\x2\x2\x2\x3D2\x2C42\x3\x2"+
		"\x2\x2\x3D4\x2C4A\x3\x2\x2\x2\x3D6\x2C50\x3\x2\x2\x2\x3D8\x2C74\x3\x2"+
		"\x2\x2\x3DA\x2C76\x3\x2\x2\x2\x3DC\x2C83\x3\x2\x2\x2\x3DE\x2C85\x3\x2"+
		"\x2\x2\x3E0\x2C9A\x3\x2\x2\x2\x3E2\x2CD8\x3\x2\x2\x2\x3E4\x2CE1\x3\x2"+
		"\x2\x2\x3E6\x2CE8\x3\x2\x2\x2\x3E8\x2D01\x3\x2\x2\x2\x3EA\x2D1F\x3\x2"+
		"\x2\x2\x3EC\x2D24\x3\x2\x2\x2\x3EE\x2D2B\x3\x2\x2\x2\x3F0\x2D39\x3\x2"+
		"\x2\x2\x3F2\x2D49\x3\x2\x2\x2\x3F4\x2D4D\x3\x2\x2\x2\x3F6\x2D6E\x3\x2"+
		"\x2\x2\x3F8\x2D70\x3\x2\x2\x2\x3FA\x2D7E\x3\x2\x2\x2\x3FC\x2D8C\x3\x2"+
		"\x2\x2\x3FE\x2D91\x3\x2\x2\x2\x400\x2D9B\x3\x2\x2\x2\x402\x2D9D\x3\x2"+
		"\x2\x2\x404\x2D9F\x3\x2\x2\x2\x406\x2DA2\x3\x2\x2\x2\x408\x2DB1\x3\x2"+
		"\x2\x2\x40A\x2DB8\x3\x2\x2\x2\x40C\x2DBA\x3\x2\x2\x2\x40E\x2DC6\x3\x2"+
		"\x2\x2\x410\x2DF6\x3\x2\x2\x2\x412\x2DFA\x3\x2\x2\x2\x414\x2DFC\x3\x2"+
		"\x2\x2\x416\x2E11\x3\x2\x2\x2\x418\x2E20\x3\x2\x2\x2\x41A\x2E30\x3\x2"+
		"\x2\x2\x41C\x2E32\x3\x2\x2\x2\x41E\x2E5F\x3\x2\x2\x2\x420\x2E64\x3\x2"+
		"\x2\x2\x422\x2E75\x3\x2\x2\x2\x424\x2E77\x3\x2\x2\x2\x426\x2E79\x3\x2"+
		"\x2\x2\x428\x2E7F\x3\x2\x2\x2\x42A\x2E81\x3\x2\x2\x2\x42C\x2E85\x3\x2"+
		"\x2\x2\x42E\x2E96\x3\x2\x2\x2\x430\x2E98\x3\x2\x2\x2\x432\x2E9A\x3\x2"+
		"\x2\x2\x434\x436\x5\x4\x3\x2\x435\x434\x3\x2\x2\x2\x436\x439\x3\x2\x2"+
		"\x2\x437\x435\x3\x2\x2\x2\x437\x438\x3\x2\x2\x2\x438\x43A\x3\x2\x2\x2"+
		"\x439\x437\x3\x2\x2\x2\x43A\x445\a\x2\x2\x3\x43B\x43F\x5\x29E\x150\x2"+
		"\x43C\x43E\x5\x2CE\x168\x2\x43D\x43C\x3\x2\x2\x2\x43E\x441\x3\x2\x2\x2"+
		"\x43F\x43D\x3\x2\x2\x2\x43F\x440\x3\x2\x2\x2\x440\x442\x3\x2\x2\x2\x441"+
		"\x43F\x3\x2\x2\x2\x442\x443\a\x2\x2\x3\x443\x445\x3\x2\x2\x2\x444\x437"+
		"\x3\x2\x2\x2\x444\x43B\x3\x2\x2\x2\x445\x3\x3\x2\x2\x2\x446\x461\x5\x2CE"+
		"\x168\x2\x447\x449\x5\x29E\x150\x2\x448\x447\x3\x2\x2\x2\x448\x449\x3"+
		"\x2\x2\x2\x449\x450\x3\x2\x2\x2\x44A\x451\x5\x2CE\x168\x2\x44B\x44D\x5"+
		"\b\x5\x2\x44C\x44B\x3\x2\x2\x2\x44D\x44E\x3\x2\x2\x2\x44E\x44C\x3\x2\x2"+
		"\x2\x44E\x44F\x3\x2\x2\x2\x44F\x451\x3\x2\x2\x2\x450\x44A\x3\x2\x2\x2"+
		"\x450\x44C\x3\x2\x2\x2\x451\x455\x3\x2\x2\x2\x452\x454\x5\x2D0\x169\x2"+
		"\x453\x452\x3\x2\x2\x2\x454\x457\x3\x2\x2\x2\x455\x453\x3\x2\x2\x2\x455"+
		"\x456\x3\x2\x2\x2\x456\x461\x3\x2\x2\x2\x457\x455\x3\x2\x2\x2\x458\x45C"+
		"\x5\x6\x4\x2\x459\x45B\x5\x2D0\x169\x2\x45A\x459\x3\x2\x2\x2\x45B\x45E"+
		"\x3\x2\x2\x2\x45C\x45A\x3\x2\x2\x2\x45C\x45D\x3\x2\x2\x2\x45D\x461\x3"+
		"\x2\x2\x2\x45E\x45C\x3\x2\x2\x2\x45F\x461\x5\x2D0\x169\x2\x460\x446\x3"+
		"\x2\x2\x2\x460\x448\x3\x2\x2\x2\x460\x458\x3\x2\x2\x2\x460\x45F\x3\x2"+
		"\x2\x2\x461\x5\x3\x2\x2\x2\x462\x467\x5\x1F0\xF9\x2\x463\x467\x5\x1E0"+
		"\xF1\x2\x464\x467\x5\x1E4\xF3\x2\x465\x467\x5\x208\x105\x2\x466\x462\x3"+
		"\x2\x2\x2\x466\x463\x3\x2\x2\x2\x466\x464\x3\x2\x2\x2\x466\x465\x3\x2"+
		"\x2\x2\x467\a\x3\x2\x2\x2\x468\x46A\x5\n\x6\x2\x469\x46B\a\x370\x2\x2"+
		"\x46A\x469\x3\x2\x2\x2\x46A\x46B\x3\x2\x2\x2\x46B\x486\x3\x2\x2\x2\x46C"+
		"\x46E\x5\x10\t\x2\x46D\x46F\a\x370\x2\x2\x46E\x46D\x3\x2\x2\x2\x46E\x46F"+
		"\x3\x2\x2\x2\x46F\x486\x3\x2\x2\x2\x470\x472\x5\x32\x1A\x2\x471\x473\a"+
		"\x370\x2\x2\x472\x471\x3\x2\x2\x2\x472\x473\x3\x2\x2\x2\x473\x486\x3\x2"+
		"\x2\x2\x474\x476\x5\f\a\x2\x475\x477\a\x370\x2\x2\x476\x475\x3\x2\x2\x2"+
		"\x476\x477\x3\x2\x2\x2\x477\x486\x3\x2\x2\x2\x478\x47A\x5\x2DC\x16F\x2"+
		"\x479\x47B\a\x370\x2\x2\x47A\x479\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2\x47B"+
		"\x486\x3\x2\x2\x2\x47C\x47E\x5\x2DE\x170\x2\x47D\x47F\a\x370\x2\x2\x47E"+
		"\x47D\x3\x2\x2\x2\x47E\x47F\x3\x2\x2\x2\x47F\x486\x3\x2\x2\x2\x480\x482"+
		"\x5\xE\b\x2\x481\x483\a\x370\x2\x2\x482\x481\x3\x2\x2\x2\x482\x483\x3"+
		"\x2\x2\x2\x483\x486\x3\x2\x2\x2\x484\x486\a\x370\x2\x2\x485\x468\x3\x2"+
		"\x2\x2\x485\x46C\x3\x2\x2\x2\x485\x470\x3\x2\x2\x2\x485\x474\x3\x2\x2"+
		"\x2\x485\x478\x3\x2\x2\x2\x485\x47C\x3\x2\x2\x2\x485\x480\x3\x2\x2\x2"+
		"\x485\x484\x3\x2\x2\x2\x486\t\x3\x2\x2\x2\x487\x48D\x5\x1B8\xDD\x2\x488"+
		"\x48D\x5\x1C0\xE1\x2\x489\x48D\x5\x1C4\xE3\x2\x48A\x48D\x5\x1CA\xE6\x2"+
		"\x48B\x48D\x5\x1D0\xE9\x2\x48C\x487\x3\x2\x2\x2\x48C\x488\x3\x2\x2\x2"+
		"\x48C\x489\x3\x2\x2\x2\x48C\x48A\x3\x2\x2\x2\x48C\x48B\x3\x2\x2\x2\x48D"+
		"\v\x3\x2\x2\x2\x48E\x52F\x5\x34\x1B\x2\x48F\x52F\x5<\x1F\x2\x490\x52F"+
		"\x5v<\x2\x491\x52F\x5\x84\x43\x2\x492\x52F\x5\x90I\x2\x493\x52F\x5\x92"+
		"J\x2\x494\x52F\x5\x8EH\x2\x495\x52F\x5\xA0Q\x2\x496\x52F\x5\xAEX\x2\x497"+
		"\x52F\x5\xB0Y\x2\x498\x52F\x5\x11E\x90\x2\x499\x52F\x5\x122\x92\x2\x49A"+
		"\x52F\x5\x212\x10A\x2\x49B\x52F\x5\x164\xB3\x2\x49C\x52F\x5\x228\x115"+
		"\x2\x49D\x52F\x5\x128\x95\x2\x49E\x52F\x5\x130\x99\x2\x49F\x52F\x5\x132"+
		"\x9A\x2\x4A0\x52F\x5\x136\x9C\x2\x4A1\x52F\x5\x13A\x9E\x2\x4A2\x52F\x5"+
		"\x13E\xA0\x2\x4A3\x52F\x5\x146\xA4\x2\x4A4\x52F\x5\x14A\xA6\x2\x4A5\x52F"+
		"\x5\x142\xA2\x2\x4A6\x52F\x5\x152\xAA\x2\x4A7\x52F\x5\x14E\xA8\x2\x4A8"+
		"\x52F\x5\x156\xAC\x2\x4A9\x52F\x5\x158\xAD\x2\x4AA\x52F\x5\x15A\xAE\x2"+
		"\x4AB\x52F\x5\x15C\xAF\x2\x4AC\x52F\x5\x162\xB2\x2\x4AD\x52F\x5\x172\xBA"+
		"\x2\x4AE\x52F\x5\x16C\xB7\x2\x4AF\x52F\x5\x178\xBD\x2\x4B0\x52F\x5\x17C"+
		"\xBF\x2\x4B1\x52F\x5\x180\xC1\x2\x4B2\x52F\x5\x184\xC3\x2\x4B3\x52F\x5"+
		"\x186\xC4\x2\x4B4\x52F\x5\x18A\xC6\x2\x4B5\x52F\x5\x18C\xC7\x2\x4B6\x52F"+
		"\x5\x190\xC9\x2\x4B7\x52F\x5\x192\xCA\x2\x4B8\x52F\x5\x20C\x107\x2\x4B9"+
		"\x52F\x5\x196\xCC\x2\x4BA\x52F\x5\x19C\xCF\x2\x4BB\x52F\x5\x19E\xD0\x2"+
		"\x4BC\x52F\x5\x36\x1C\x2\x4BD\x52F\x5r:\x2\x4BE\x52F\x5\x80\x41\x2\x4BF"+
		"\x52F\x5\xB2Z\x2\x4C0\x52F\x5\x11C\x8F\x2\x4C1\x52F\x5\x120\x91\x2\x4C2"+
		"\x52F\x5\x124\x93\x2\x4C3\x52F\x5\x1D6\xEC\x2\x4C4\x52F\x5\x166\xB4\x2"+
		"\x4C5\x52F\x5\x126\x94\x2\x4C6\x52F\x5\x134\x9B\x2\x4C7\x52F\x5\x138\x9D"+
		"\x2\x4C8\x52F\x5\x13C\x9F\x2\x4C9\x52F\x5\x140\xA1\x2\x4CA\x52F\x5\x1D8"+
		"\xED\x2\x4CB\x52F\x5\x1DA\xEE\x2\x4CC\x52F\x5\x1DC\xEF\x2\x4CD\x52F\x5"+
		"\x148\xA5\x2\x4CE\x52F\x5\x14C\xA7\x2\x4CF\x52F\x5\x144\xA3\x2\x4D0\x52F"+
		"\x5\x154\xAB\x2\x4D1\x52F\x5\x150\xA9\x2\x4D2\x52F\x5\xAAV\x2\x4D3\x52F"+
		"\x5\x15E\xB0\x2\x4D4\x52F\x5\x160\xB1\x2\x4D5\x52F\x5\x168\xB5\x2\x4D6"+
		"\x52F\x5\x16A\xB6\x2\x4D7\x52F\x5\x16E\xB8\x2\x4D8\x52F\x5\x170\xB9\x2"+
		"\x4D9\x52F\x5\x174\xBB\x2\x4DA\x52F\x5\x176\xBC\x2\x4DB\x52F\x5\x17A\xBE"+
		"\x2\x4DC\x52F\x5\x17E\xC0\x2\x4DD\x52F\x5\x182\xC2\x2\x4DE\x52F\x5\x188"+
		"\xC5\x2\x4DF\x52F\x5\x18E\xC8\x2\x4E0\x52F\x5\x1FE\x100\x2\x4E1\x52F\x5"+
		"\x194\xCB\x2\x4E2\x52F\x5\x202\x102\x2\x4E3\x52F\x5\x27A\x13E\x2\x4E4"+
		"\x52F\x5\x198\xCD\x2\x4E5\x52F\x5\x19A\xCE\x2\x4E6\x52F\x5\x1A0\xD1\x2"+
		"\x4E7\x52F\x5\x1DE\xF0\x2\x4E8\x52F\x5\x1A2\xD2\x2\x4E9\x52F\x5\x1A4\xD3"+
		"\x2\x4EA\x52F\x5\x1A6\xD4\x2\x4EB\x52F\x5\x38\x1D\x2\x4EC\x52F\x5:\x1E"+
		"\x2\x4ED\x52F\x5t;\x2\x4EE\x52F\x5\x82\x42\x2\x4EF\x52F\x5\x9EP\x2\x4F0"+
		"\x52F\x5\xACW\x2\x4F1\x52F\x5\xB4[\x2\x4F2\x52F\x5\xB6\\\x2\x4F3\x52F"+
		"\x5\xB8]\x2\x4F4\x52F\x5\xBA^\x2\x4F5\x52F\x5\xBC_\x2\x4F6\x52F\x5\xBE"+
		"`\x2\x4F7\x52F\x5\xC0\x61\x2\x4F8\x52F\x5\xC2\x62\x2\x4F9\x52F\x5\xC4"+
		"\x63\x2\x4FA\x52F\x5\xC6\x64\x2\x4FB\x52F\x5\xF0y\x2\x4FC\x52F\x5\xC8"+
		"\x65\x2\x4FD\x52F\x5\xCA\x66\x2\x4FE\x52F\x5\xD6l\x2\x4FF\x52F\x5\xD8"+
		"m\x2\x500\x52F\x5\xCCg\x2\x501\x52F\x5\xCEh\x2\x502\x52F\x5\xD0i\x2\x503"+
		"\x52F\x5\xD2j\x2\x504\x52F\x5\xD4k\x2\x505\x52F\x5\xDAn\x2\x506\x52F\x5"+
		"\xDCo\x2\x507\x52F\x5\xDEp\x2\x508\x52F\x5\x272\x13A\x2\x509\x52F\x5\x264"+
		"\x133\x2\x50A\x52F\x5\xE0q\x2\x50B\x52F\x5\xE2r\x2\x50C\x52F\x5\xE4s\x2"+
		"\x50D\x52F\x5\xE6t\x2\x50E\x52F\x5\xE8u\x2\x50F\x52F\x5\x26A\x136\x2\x510"+
		"\x52F\x5\xEAv\x2\x511\x52F\x5\xECw\x2\x512\x52F\x5\xEEx\x2\x513\x52F\x5"+
		"\xF2z\x2\x514\x52F\x5\xF4{\x2\x515\x52F\x5\xF6|\x2\x516\x52F\x5\xF8}\x2"+
		"\x517\x52F\x5\xFA~\x2\x518\x52F\x5\xFC\x7F\x2\x519\x52F\x5\xFE\x80\x2"+
		"\x51A\x52F\x5\x100\x81\x2\x51B\x52F\x5\x102\x82\x2\x51C\x52F\x5\x104\x83"+
		"\x2\x51D\x52F\x5\x106\x84\x2\x51E\x52F\x5\x274\x13B\x2\x51F\x52F\x5\x108"+
		"\x85\x2\x520\x52F\x5\x10A\x86\x2\x521\x52F\x5\x10C\x87\x2\x522\x52F\x5"+
		"\x276\x13C\x2\x523\x52F\x5\x26C\x137\x2\x524\x52F\x5\x27C\x13F\x2\x525"+
		"\x52F\x5\x10E\x88\x2\x526\x52F\x5\x278\x13D\x2\x527\x52F\x5\x110\x89\x2"+
		"\x528\x52F\x5\x112\x8A\x2\x529\x52F\x5\x114\x8B\x2\x52A\x52F\x5\x116\x8C"+
		"\x2\x52B\x52F\x5\x118\x8D\x2\x52C\x52F\x5\x11A\x8E\x2\x52D\x52F\x5\x200"+
		"\x101\x2\x52E\x48E\x3\x2\x2\x2\x52E\x48F\x3\x2\x2\x2\x52E\x490\x3\x2\x2"+
		"\x2\x52E\x491\x3\x2\x2\x2\x52E\x492\x3\x2\x2\x2\x52E\x493\x3\x2\x2\x2"+
		"\x52E\x494\x3\x2\x2\x2\x52E\x495\x3\x2\x2\x2\x52E\x496\x3\x2\x2\x2\x52E"+
		"\x497\x3\x2\x2\x2\x52E\x498\x3\x2\x2\x2\x52E\x499\x3\x2\x2\x2\x52E\x49A"+
		"\x3\x2\x2\x2\x52E\x49B\x3\x2\x2\x2\x52E\x49C\x3\x2\x2\x2\x52E\x49D\x3"+
		"\x2\x2\x2\x52E\x49E\x3\x2\x2\x2\x52E\x49F\x3\x2\x2\x2\x52E\x4A0\x3\x2"+
		"\x2\x2\x52E\x4A1\x3\x2\x2\x2\x52E\x4A2\x3\x2\x2\x2\x52E\x4A3\x3\x2\x2"+
		"\x2\x52E\x4A4\x3\x2\x2\x2\x52E\x4A5\x3\x2\x2\x2\x52E\x4A6\x3\x2\x2\x2"+
		"\x52E\x4A7\x3\x2\x2\x2\x52E\x4A8\x3\x2\x2\x2\x52E\x4A9\x3\x2\x2\x2\x52E"+
		"\x4AA\x3\x2\x2\x2\x52E\x4AB\x3\x2\x2\x2\x52E\x4AC\x3\x2\x2\x2\x52E\x4AD"+
		"\x3\x2\x2\x2\x52E\x4AE\x3\x2\x2\x2\x52E\x4AF\x3\x2\x2\x2\x52E\x4B0\x3"+
		"\x2\x2\x2\x52E\x4B1\x3\x2\x2\x2\x52E\x4B2\x3\x2\x2\x2\x52E\x4B3\x3\x2"+
		"\x2\x2\x52E\x4B4\x3\x2\x2\x2\x52E\x4B5\x3\x2\x2\x2\x52E\x4B6\x3\x2\x2"+
		"\x2\x52E\x4B7\x3\x2\x2\x2\x52E\x4B8\x3\x2\x2\x2\x52E\x4B9\x3\x2\x2\x2"+
		"\x52E\x4BA\x3\x2\x2\x2\x52E\x4BB\x3\x2\x2\x2\x52E\x4BC\x3\x2\x2\x2\x52E"+
		"\x4BD\x3\x2\x2\x2\x52E\x4BE\x3\x2\x2\x2\x52E\x4BF\x3\x2\x2\x2\x52E\x4C0"+
		"\x3\x2\x2\x2\x52E\x4C1\x3\x2\x2\x2\x52E\x4C2\x3\x2\x2\x2\x52E\x4C3\x3"+
		"\x2\x2\x2\x52E\x4C4\x3\x2\x2\x2\x52E\x4C5\x3\x2\x2\x2\x52E\x4C6\x3\x2"+
		"\x2\x2\x52E\x4C7\x3\x2\x2\x2\x52E\x4C8\x3\x2\x2\x2\x52E\x4C9\x3\x2\x2"+
		"\x2\x52E\x4CA\x3\x2\x2\x2\x52E\x4CB\x3\x2\x2\x2\x52E\x4CC\x3\x2\x2\x2"+
		"\x52E\x4CD\x3\x2\x2\x2\x52E\x4CE\x3\x2\x2\x2\x52E\x4CF\x3\x2\x2\x2\x52E"+
		"\x4D0\x3\x2\x2\x2\x52E\x4D1\x3\x2\x2\x2\x52E\x4D2\x3\x2\x2\x2\x52E\x4D3"+
		"\x3\x2\x2\x2\x52E\x4D4\x3\x2\x2\x2\x52E\x4D5\x3\x2\x2\x2\x52E\x4D6\x3"+
		"\x2\x2\x2\x52E\x4D7\x3\x2\x2\x2\x52E\x4D8\x3\x2\x2\x2\x52E\x4D9\x3\x2"+
		"\x2\x2\x52E\x4DA\x3\x2\x2\x2\x52E\x4DB\x3\x2\x2\x2\x52E\x4DC\x3\x2\x2"+
		"\x2\x52E\x4DD\x3\x2\x2\x2\x52E\x4DE\x3\x2\x2\x2\x52E\x4DF\x3\x2\x2\x2"+
		"\x52E\x4E0\x3\x2\x2\x2\x52E\x4E1\x3\x2\x2\x2\x52E\x4E2\x3\x2\x2\x2\x52E"+
		"\x4E3\x3\x2\x2\x2\x52E\x4E4\x3\x2\x2\x2\x52E\x4E5\x3\x2\x2\x2\x52E\x4E6"+
		"\x3\x2\x2\x2\x52E\x4E7\x3\x2\x2\x2\x52E\x4E8\x3\x2\x2\x2\x52E\x4E9\x3"+
		"\x2\x2\x2\x52E\x4EA\x3\x2\x2\x2\x52E\x4EB\x3\x2\x2\x2\x52E\x4EC\x3\x2"+
		"\x2\x2\x52E\x4ED\x3\x2\x2\x2\x52E\x4EE\x3\x2\x2\x2\x52E\x4EF\x3\x2\x2"+
		"\x2\x52E\x4F0\x3\x2\x2\x2\x52E\x4F1\x3\x2\x2\x2\x52E\x4F2\x3\x2\x2\x2"+
		"\x52E\x4F3\x3\x2\x2\x2\x52E\x4F4\x3\x2\x2\x2\x52E\x4F5\x3\x2\x2\x2\x52E"+
		"\x4F6\x3\x2\x2\x2\x52E\x4F7\x3\x2\x2\x2\x52E\x4F8\x3\x2\x2\x2\x52E\x4F9"+
		"\x3\x2\x2\x2\x52E\x4FA\x3\x2\x2\x2\x52E\x4FB\x3\x2\x2\x2\x52E\x4FC\x3"+
		"\x2\x2\x2\x52E\x4FD\x3\x2\x2\x2\x52E\x4FE\x3\x2\x2\x2\x52E\x4FF\x3\x2"+
		"\x2\x2\x52E\x500\x3\x2\x2\x2\x52E\x501\x3\x2\x2\x2\x52E\x502\x3\x2\x2"+
		"\x2\x52E\x503\x3\x2\x2\x2\x52E\x504\x3\x2\x2\x2\x52E\x505\x3\x2\x2\x2"+
		"\x52E\x506\x3\x2\x2\x2\x52E\x507\x3\x2\x2\x2\x52E\x508\x3\x2\x2\x2\x52E"+
		"\x509\x3\x2\x2\x2\x52E\x50A\x3\x2\x2\x2\x52E\x50B\x3\x2\x2\x2\x52E\x50C"+
		"\x3\x2\x2\x2\x52E\x50D\x3\x2\x2\x2\x52E\x50E\x3\x2\x2\x2\x52E\x50F\x3"+
		"\x2\x2\x2\x52E\x510\x3\x2\x2\x2\x52E\x511\x3\x2\x2\x2\x52E\x512\x3\x2"+
		"\x2\x2\x52E\x513\x3\x2\x2\x2\x52E\x514\x3\x2\x2\x2\x52E\x515\x3\x2\x2"+
		"\x2\x52E\x516\x3\x2\x2\x2\x52E\x517\x3\x2\x2\x2\x52E\x518\x3\x2\x2\x2"+
		"\x52E\x519\x3\x2\x2\x2\x52E\x51A\x3\x2\x2\x2\x52E\x51B\x3\x2\x2\x2\x52E"+
		"\x51C\x3\x2\x2\x2\x52E\x51D\x3\x2\x2\x2\x52E\x51E\x3\x2\x2\x2\x52E\x51F"+
		"\x3\x2\x2\x2\x52E\x520\x3\x2\x2\x2\x52E\x521\x3\x2\x2\x2\x52E\x522\x3"+
		"\x2\x2\x2\x52E\x523\x3\x2\x2\x2\x52E\x524\x3\x2\x2\x2\x52E\x525\x3\x2"+
		"\x2\x2\x52E\x526\x3\x2\x2\x2\x52E\x527\x3\x2\x2\x2\x52E\x528\x3\x2\x2"+
		"\x2\x52E\x529\x3\x2\x2\x2\x52E\x52A\x3\x2\x2\x2\x52E\x52B\x3\x2\x2\x2"+
		"\x52E\x52C\x3\x2\x2\x2\x52E\x52D\x3\x2\x2\x2\x52F\r\x3\x2\x2\x2\x530\x536"+
		"\x5\x28A\x146\x2\x531\x536\x5\x28C\x147\x2\x532\x536\x5\x28E\x148\x2\x533"+
		"\x536\x5\x290\x149\x2\x534\x536\x5\x292\x14A\x2\x535\x530\x3\x2\x2\x2"+
		"\x535\x531\x3\x2\x2\x2\x535\x532\x3\x2\x2\x2\x535\x533\x3\x2\x2\x2\x535"+
		"\x534\x3\x2\x2\x2\x536\xF\x3\x2\x2\x2\x537\x544\x5\x12\n\x2\x538\x544"+
		"\x5\x14\v\x2\x539\x544\x5\x16\f\x2\x53A\x544\x5\x18\r\x2\x53B\x544\x5"+
		"\x1C\xF\x2\x53C\x544\x5\x1A\xE\x2\x53D\x544\x5\x1E\x10\x2\x53E\x544\x5"+
		"&\x14\x2\x53F\x544\x5(\x15\x2\x540\x544\x5*\x16\x2\x541\x544\x5,\x17\x2"+
		"\x542\x544\x5.\x18\x2\x543\x537\x3\x2\x2\x2\x543\x538\x3\x2\x2\x2\x543"+
		"\x539\x3\x2\x2\x2\x543\x53A\x3\x2\x2\x2\x543\x53B\x3\x2\x2\x2\x543\x53C"+
		"\x3\x2\x2\x2\x543\x53D\x3\x2\x2\x2\x543\x53E\x3\x2\x2\x2\x543\x53F\x3"+
		"\x2\x2\x2\x543\x540\x3\x2\x2\x2\x543\x541\x3\x2\x2\x2\x543\x542\x3\x2"+
		"\x2\x2\x544\x11\x3\x2\x2\x2\x545\x547\a\r\x2\x2\x546\x548\a\x370\x2\x2"+
		"\x547\x546\x3\x2\x2\x2\x547\x548\x3\x2\x2\x2\x548\x54C\x3\x2\x2\x2\x549"+
		"\x54B\x5\b\x5\x2\x54A\x549\x3\x2\x2\x2\x54B\x54E\x3\x2\x2\x2\x54C\x54A"+
		"\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2\x54D\x54F\x3\x2\x2\x2\x54E\x54C\x3"+
		"\x2\x2\x2\x54F\x551\a<\x2\x2\x550\x552\a\x370\x2\x2\x551\x550\x3\x2\x2"+
		"\x2\x551\x552\x3\x2\x2\x2\x552\x13\x3\x2\x2\x2\x553\x555\a\xF\x2\x2\x554"+
		"\x556\a\x370\x2\x2\x555\x554\x3\x2\x2\x2\x555\x556\x3\x2\x2\x2\x556\x15"+
		"\x3\x2\x2\x2\x557\x559\a!\x2\x2\x558\x55A\a\x370\x2\x2\x559\x558\x3\x2"+
		"\x2\x2\x559\x55A\x3\x2\x2\x2\x55A\x17\x3\x2\x2\x2\x55B\x55C\aN\x2\x2\x55C"+
		"\x55E\x5\x428\x215\x2\x55D\x55F\a\x370\x2\x2\x55E\x55D\x3\x2\x2\x2\x55E"+
		"\x55F\x3\x2\x2\x2\x55F\x566\x3\x2\x2\x2\x560\x561\x5\x428\x215\x2\x561"+
		"\x563\a\x371\x2\x2\x562\x564\a\x370\x2\x2\x563\x562\x3\x2\x2\x2\x563\x564"+
		"\x3\x2\x2\x2\x564\x566\x3\x2\x2\x2\x565\x55B\x3\x2\x2\x2\x565\x560\x3"+
		"\x2\x2\x2\x566\x19\x3\x2\x2\x2\x567\x569\a\x8E\x2\x2\x568\x56A\x5\x312"+
		"\x18A\x2\x569\x568\x3\x2\x2\x2\x569\x56A\x3\x2\x2\x2\x56A\x56C\x3\x2\x2"+
		"\x2\x56B\x56D\a\x370\x2\x2\x56C\x56B\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2"+
		"\x56D\x1B\x3\x2\x2\x2\x56E\x56F\aV\x2\x2\x56F\x570\x5\x32A\x196\x2\x570"+
		"\x573\x5\b\x5\x2\x571\x572\a;\x2\x2\x572\x574\x5\b\x5\x2\x573\x571\x3"+
		"\x2\x2\x2\x573\x574\x3\x2\x2\x2\x574\x576\x3\x2\x2\x2\x575\x577\a\x370"+
		"\x2\x2\x576\x575\x3\x2\x2\x2\x576\x577\x3\x2\x2\x2\x577\x1D\x3\x2\x2\x2"+
		"\x578\x57F\a\x24B\x2\x2\x579\x57A\x5 \x11\x2\x57A\x57B\a\x36F\x2\x2\x57B"+
		"\x57C\x5\"\x12\x2\x57C\x57D\a\x36F\x2\x2\x57D\x57E\x5$\x13\x2\x57E\x580"+
		"\x3\x2\x2\x2\x57F\x579\x3\x2\x2\x2\x57F\x580\x3\x2\x2\x2\x580\x582\x3"+
		"\x2\x2\x2\x581\x583\a\x370\x2\x2\x582\x581\x3\x2\x2\x2\x582\x583\x3\x2"+
		"\x2\x2\x583\x1F\x3\x2\x2\x2\x584\x585\t\x2\x2\x2\x585!\x3\x2\x2\x2\x586"+
		"\x587\t\x3\x2\x2\x587#\x3\x2\x2\x2\x588\x589\t\x2\x2\x2\x589%\x3\x2\x2"+
		"\x2\x58A\x58B\a\r\x2\x2\x58B\x58D\a\x257\x2\x2\x58C\x58E\a\x370\x2\x2"+
		"\x58D\x58C\x3\x2\x2\x2\x58D\x58E\x3\x2\x2\x2\x58E\x590\x3\x2\x2\x2\x58F"+
		"\x591\x5\b\x5\x2\x590\x58F\x3\x2\x2\x2\x591\x592\x3\x2\x2\x2\x592\x590"+
		"\x3\x2\x2\x2\x592\x593\x3\x2\x2\x2\x593\x594\x3\x2\x2\x2\x594\x595\a<"+
		"\x2\x2\x595\x597\a\x257\x2\x2\x596\x598\a\x370\x2\x2\x597\x596\x3\x2\x2"+
		"\x2\x597\x598\x3\x2\x2\x2\x598\x599\x3\x2\x2\x2\x599\x59A\a\r\x2\x2\x59A"+
		"\x59C\a\xF8\x2\x2\x59B\x59D\a\x370\x2\x2\x59C\x59B\x3\x2\x2\x2\x59C\x59D"+
		"\x3\x2\x2\x2\x59D\x5A1\x3\x2\x2\x2\x59E\x5A0\x5\b\x5\x2\x59F\x59E\x3\x2"+
		"\x2\x2\x5A0\x5A3\x3\x2\x2\x2\x5A1\x59F\x3\x2\x2\x2\x5A1\x5A2\x3\x2\x2"+
		"\x2\x5A2\x5A4\x3\x2\x2\x2\x5A3\x5A1\x3\x2\x2\x2\x5A4\x5A5\a<\x2\x2\x5A5"+
		"\x5A7\a\xF8\x2\x2\x5A6\x5A8\a\x370\x2\x2\x5A7\x5A6\x3\x2\x2\x2\x5A7\x5A8"+
		"\x3\x2\x2\x2\x5A8\'\x3\x2\x2\x2\x5A9\x5AB\a\xB9\x2\x2\x5AA\x5AC\x5\x1C8"+
		"\xE5\x2\x5AB\x5AA\x3\x2\x2\x2\x5AB\x5AC\x3\x2\x2\x2\x5AC\x5AE\x3\x2\x2"+
		"\x2\x5AD\x5AF\a\x36F\x2\x2\x5AE\x5AD\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2\x2"+
		"\x5AF\x5B2\x3\x2\x2\x2\x5B0\x5B1\t\x4\x2\x2\x5B1\x5B3\x5\x1CE\xE8\x2\x5B2"+
		"\x5B0\x3\x2\x2\x2\x5B2\x5B3\x3\x2\x2\x2\x5B3\x5B5\x3\x2\x2\x2\x5B4\x5B6"+
		"\x5\x312\x18A\x2\x5B5\x5B4\x3\x2\x2\x2\x5B5\x5B6\x3\x2\x2\x2\x5B6\x5B8"+
		"\x3\x2\x2\x2\x5B7\x5B9\a\x370\x2\x2\x5B8\x5B7\x3\x2\x2\x2\x5B8\x5B9\x3"+
		"\x2\x2\x2\x5B9)\x3\x2\x2\x2\x5BA\x5BB\a\xBC\x2\x2\x5BB\x5C5\x5\x32A\x196"+
		"\x2\x5BC\x5C6\x5\b\x5\x2\x5BD\x5BF\a\xF\x2\x2\x5BE\x5C0\a\x370\x2\x2\x5BF"+
		"\x5BE\x3\x2\x2\x2\x5BF\x5C0\x3\x2\x2\x2\x5C0\x5C6\x3\x2\x2\x2\x5C1\x5C3"+
		"\a!\x2\x2\x5C2\x5C4\a\x370\x2\x2\x5C3\x5C2\x3\x2\x2\x2\x5C3\x5C4\x3\x2"+
		"\x2\x2\x5C4\x5C6\x3\x2\x2\x2\x5C5\x5BC\x3\x2\x2\x2\x5C5\x5BD\x3\x2\x2"+
		"\x2\x5C5\x5C1\x3\x2\x2\x2\x5C6+\x3\x2\x2\x2\x5C7\x5CA\a\x81\x2\x2\x5C8"+
		"\x5CB\x5\x312\x18A\x2\x5C9\x5CB\a\x351\x2\x2\x5CA\x5C8\x3\x2\x2\x2\x5CA"+
		"\x5C9\x3\x2\x2\x2\x5CB\x5D0\x3\x2\x2\x2\x5CC\x5CD\a\x36F\x2\x2\x5CD\x5CF"+
		"\a\x354\x2\x2\x5CE\x5CC\x3\x2\x2\x2\x5CF\x5D2\x3\x2\x2\x2\x5D0\x5CE\x3"+
		"\x2\x2\x2\x5D0\x5D1\x3\x2\x2\x2\x5D1\x5D4\x3\x2\x2\x2\x5D2\x5D0\x3\x2"+
		"\x2\x2\x5D3\x5D5\a\x370\x2\x2\x5D4\x5D3\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2"+
		"\x2\x5D5-\x3\x2\x2\x2\x5D6\x5D7\a\x85\x2\x2\x5D7\x5D8\a\x36D\x2\x2\x5D8"+
		"\x5D9\t\x5\x2\x2\x5D9\x5DA\a\x36F\x2\x2\x5DA\x5DB\x5\x310\x189\x2\x5DB"+
		"\x5DC\a\x36F\x2\x2\x5DC\x5E1\x5\x310\x189\x2\x5DD\x5DE\a\x36F\x2\x2\x5DE"+
		"\x5E0\x5\x310\x189\x2\x5DF\x5DD\x3\x2\x2\x2\x5E0\x5E3\x3\x2\x2\x2\x5E1"+
		"\x5DF\x3\x2\x2\x2\x5E1\x5E2\x3\x2\x2\x2\x5E2\x5E4\x3\x2\x2\x2\x5E3\x5E1"+
		"\x3\x2\x2\x2\x5E4\x5E7\a\x36E\x2\x2\x5E5\x5E6\a\xBD\x2\x2\x5E6\x5E8\t"+
		"\x6\x2\x2\x5E7\x5E5\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8\x5EA\x3\x2"+
		"\x2\x2\x5E9\x5EB\a\x370\x2\x2\x5EA\x5E9\x3\x2\x2\x2\x5EA\x5EB\x3\x2\x2"+
		"\x2\x5EB\x5F7\x3\x2\x2\x2\x5EC\x5ED\a\x85\x2\x2\x5ED\x5EE\a\x355\x2\x2"+
		"\x5EE\x5F3\t\a\x2\x2\x5EF\x5F0\a\x36F\x2\x2\x5F0\x5F2\t\x5\x2\x2\x5F1"+
		"\x5EF\x3\x2\x2\x2\x5F2\x5F5\x3\x2\x2\x2\x5F3\x5F1\x3\x2\x2\x2\x5F3\x5F4"+
		"\x3\x2\x2\x2\x5F4\x5F7\x3\x2\x2\x2\x5F5\x5F3\x3\x2\x2\x2\x5F6\x5D6\x3"+
		"\x2\x2\x2\x5F6\x5EC\x3\x2\x2\x2\x5F7/\x3\x2\x2\x2\x5F8\x5F9\a\x370\x2"+
		"\x2\x5F9\x31\x3\x2\x2\x2\x5FA\x60C\x5\x284\x143\x2\x5FB\x60C\x5\x29C\x14F"+
		"\x2\x5FC\x60C\x5\x288\x145\x2\x5FD\x60C\x5\x1B4\xDB\x2\x5FE\x60C\x5\x1B2"+
		"\xDA\x2\x5FF\x60C\x5\x1A8\xD5\x2\x600\x60C\x5\x1AC\xD7\x2\x601\x60C\x5"+
		"\x294\x14B\x2\x602\x60C\x5\x1B6\xDC\x2\x603\x60C\x5\x2AC\x157\x2\x604"+
		"\x60C\x5\x2CA\x166\x2\x605\x60C\x5\x2CC\x167\x2\x606\x60C\x5\x2D2\x16A"+
		"\x2\x607\x60C\x5\x2D4\x16B\x2\x608\x60C\x5\x2D6\x16C\x2\x609\x60C\x5\x2D8"+
		"\x16D\x2\x60A\x60C\x5\x2DA\x16E\x2\x60B\x5FA\x3\x2\x2\x2\x60B\x5FB\x3"+
		"\x2\x2\x2\x60B\x5FC\x3\x2\x2\x2\x60B\x5FD\x3\x2\x2\x2\x60B\x5FE\x3\x2"+
		"\x2\x2\x60B\x5FF\x3\x2\x2\x2\x60B\x600\x3\x2\x2\x2\x60B\x601\x3\x2\x2"+
		"\x2\x60B\x602\x3\x2\x2\x2\x60B\x603\x3\x2\x2\x2\x60B\x604\x3\x2\x2\x2"+
		"\x60B\x605\x3\x2\x2\x2\x60B\x606\x3\x2\x2\x2\x60B\x607\x3\x2\x2\x2\x60B"+
		"\x608\x3\x2\x2\x2\x60B\x609\x3\x2\x2\x2\x60B\x60A\x3\x2\x2\x2\x60C\x33"+
		"\x3\x2\x2\x2\x60D\x60E\a\x5\x2\x2\x60E\x60F\a\x280\x2\x2\x60F\x610\a\x314"+
		"\x2\x2\x610\x611\x5\x428\x215\x2\x611\x618\a\xBD\x2\x2\x612\x614\a\x36F"+
		"\x2\x2\x613\x612\x3\x2\x2\x2\x613\x614\x3\x2\x2\x2\x614\x615\x3\x2\x2"+
		"\x2\x615\x616\a\x1AC\x2\x2\x616\x617\a\x35B\x2\x2\x617\x619\x5\x428\x215"+
		"\x2\x618\x613\x3\x2\x2\x2\x618\x619\x3\x2\x2\x2\x619\x620\x3\x2\x2\x2"+
		"\x61A\x61C\a\x36F\x2\x2\x61B\x61A\x3\x2\x2\x2\x61B\x61C\x3\x2\x2\x2\x61C"+
		"\x61D\x3\x2\x2\x2\x61D\x61E\a\x2FB\x2\x2\x61E\x61F\a\x35B\x2\x2\x61F\x621"+
		"\a\x357\x2\x2\x620\x61B\x3\x2\x2\x2\x620\x621\x3\x2\x2\x2\x621\x628\x3"+
		"\x2\x2\x2\x622\x624\a\x36F\x2\x2\x623\x622\x3\x2\x2\x2\x623\x624\x3\x2"+
		"\x2\x2\x624\x625\x3\x2\x2\x2\x625\x626\a\x2AA\x2\x2\x626\x627\a\x35B\x2"+
		"\x2\x627\x629\x5\x428\x215\x2\x628\x623\x3\x2\x2\x2\x628\x629\x3\x2\x2"+
		"\x2\x629\x35\x3\x2\x2\x2\x62A\x62B\a#\x2\x2\x62B\x62C\a\x280\x2\x2\x62C"+
		"\x62D\a\x314\x2\x2\x62D\x62E\x5\x428\x215\x2\x62E\x635\a\xBD\x2\x2\x62F"+
		"\x631\a\x36F\x2\x2\x630\x62F\x3\x2\x2\x2\x630\x631\x3\x2\x2\x2\x631\x632"+
		"\x3\x2\x2\x2\x632\x633\a\x2FB\x2\x2\x633\x634\a\x35B\x2\x2\x634\x636\a"+
		"\x357\x2\x2\x635\x630\x3\x2\x2\x2\x635\x636\x3\x2\x2\x2\x636\x63D\x3\x2"+
		"\x2\x2\x637\x639\a\x36F\x2\x2\x638\x637\x3\x2\x2\x2\x638\x639\x3\x2\x2"+
		"\x2\x639\x63A\x3\x2\x2\x2\x63A\x63B\a\x2AA\x2\x2\x63B\x63C\a\x35B\x2\x2"+
		"\x63C\x63E\x5\x428\x215\x2\x63D\x638\x3\x2\x2\x2\x63D\x63E\x3\x2\x2\x2"+
		"\x63E\x37\x3\x2\x2\x2\x63F\x640\a\x39\x2\x2\x640\x643\a\xCE\x2\x2\x641"+
		"\x642\aV\x2\x2\x642\x644\a\x41\x2\x2\x643\x641\x3\x2\x2\x2\x643\x644\x3"+
		"\x2\x2\x2\x644\x648\x3\x2\x2\x2\x645\x646\x5\x428\x215\x2\x646\x647\a"+
		"\x368\x2\x2\x647\x649\x3\x2\x2\x2\x648\x645\x3\x2\x2\x2\x648\x649\x3\x2"+
		"\x2\x2\x649\x64A\x3\x2\x2\x2\x64A\x64B\x5\x428\x215\x2\x64B\x39\x3\x2"+
		"\x2\x2\x64C\x64D\a\x39\x2\x2\x64D\x64E\a\x280\x2\x2\x64E\x64F\a\x314\x2"+
		"\x2\x64F\x650\x5\x428\x215\x2\x650;\x3\x2\x2\x2\x651\x652\x5> \x2\x652"+
		"\x653\x5\x428\x215\x2\x653\x654\x5@!\x2\x654=\x3\x2\x2\x2\x655\x656\a"+
		"\x5\x2\x2\x656\x657\a\xDA\x2\x2\x657?\x3\x2\x2\x2\x658\x65A\x5\x42\"\x2"+
		"\x659\x658\x3\x2\x2\x2\x659\x65A\x3\x2\x2\x2\x65A\x65C\x3\x2\x2\x2\x65B"+
		"\x65D\x5X-\x2\x65C\x65B\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\x65F\x3"+
		"\x2\x2\x2\x65E\x660\x5\x46$\x2\x65F\x65E\x3\x2\x2\x2\x65F\x660\x3\x2\x2"+
		"\x2\x660\x662\x3\x2\x2\x2\x661\x663\x5L\'\x2\x662\x661\x3\x2\x2\x2\x662"+
		"\x663\x3\x2\x2\x2\x663\x41\x3\x2\x2\x2\x664\x667\x5\x44#\x2\x665\x668"+
		"\x5\\/\x2\x666\x668\x5T+\x2\x667\x665\x3\x2\x2\x2\x667\x666\x3\x2\x2\x2"+
		"\x668\x43\x3\x2\x2\x2\x669\x66A\aK\x2\x2\x66A\x45\x3\x2\x2\x2\x66B\x66C"+
		"\x5J&\x2\x66C\x66D\x5H%\x2\x66DG\x3\x2\x2\x2\x66E\x671\a\x4\x2\x2\x66F"+
		"\x671\x5n\x38\x2\x670\x66E\x3\x2\x2\x2\x670\x66F\x3\x2\x2\x2\x671I\x3"+
		"\x2\x2\x2\x672\x673\a\x39\x2\x2\x673K\x3\x2\x2\x2\x674\x675\x5N(\x2\x675"+
		"\x676\x5P)\x2\x676M\x3\x2\x2\x2\x677\x678\a\x3\x2\x2\x678\x679\a\x45\x2"+
		"\x2\x679\x67A\aK\x2\x2\x67AO\x3\x2\x2\x2\x67B\x67F\x5R*\x2\x67C\x67D\x5"+
		"V,\x2\x67D\x67E\x5\x428\x215\x2\x67E\x680\x3\x2\x2\x2\x67F\x67C\x3\x2"+
		"\x2\x2\x67F\x680\x3\x2\x2\x2\x680Q\x3\x2\x2\x2\x681\x682\a\x357\x2\x2"+
		"\x682S\x3\x2\x2\x2\x683\x684\x5V,\x2\x684\x685\x5\x428\x215\x2\x685U\x3"+
		"\x2\x2\x2\x686\x687\a\b\x2\x2\x687W\x3\x2\x2\x2\x688\x689\x5Z.\x2\x689"+
		"\x68A\x5^\x30\x2\x68AY\x3\x2\x2\x2\x68B\x68C\a\xBD\x2\x2\x68C[\x3\x2\x2"+
		"\x2\x68D\x691\x5`\x31\x2\x68E\x691\x5j\x36\x2\x68F\x691\a\x357\x2\x2\x690"+
		"\x68D\x3\x2\x2\x2\x690\x68E\x3\x2\x2\x2\x690\x68F\x3\x2\x2\x2\x691]\x3"+
		"\x2\x2\x2\x692\x693\b\x30\x1\x2\x693\x694\a\x2FC\x2\x2\x694\x695\a\x35B"+
		"\x2\x2\x695\x69C\t\b\x2\x2\x696\x697\a\x346\x2\x2\x697\x698\a\x35B\x2"+
		"\x2\x698\x69C\t\t\x2\x2\x699\x69A\a\x340\x2\x2\x69A\x69C\a\x114\x2\x2"+
		"\x69B\x692\x3\x2\x2\x2\x69B\x696\x3\x2\x2\x2\x69B\x699\x3\x2\x2\x2\x69C"+
		"\x6A1\x3\x2\x2\x2\x69D\x69E\f\x3\x2\x2\x69E\x6A0\a\x36F\x2\x2\x69F\x69D"+
		"\x3\x2\x2\x2\x6A0\x6A3\x3\x2\x2\x2\x6A1\x69F\x3\x2\x2\x2\x6A1\x6A2\x3"+
		"\x2\x2\x2\x6A2_\x3\x2\x2\x2\x6A3\x6A1\x3\x2\x2\x2\x6A4\x6A5\x5\x64\x33"+
		"\x2\x6A5\x6A6\x5\x62\x32\x2\x6A6\x6A7\x5\x66\x34\x2\x6A7\x61\x3\x2\x2"+
		"\x2\x6A8\x6A9\x5\x428\x215\x2\x6A9\x63\x3\x2\x2\x2\x6AA\x6AB\a\x37\x2"+
		"\x2\x6AB\x65\x3\x2\x2\x2\x6AC\x6AD\x5h\x35\x2\x6AD\x6AE\x5\x66\x34\x2"+
		"\x6AE\x6B1\x3\x2\x2\x2\x6AF\x6B1\x5\x428\x215\x2\x6B0\x6AC\x3\x2\x2\x2"+
		"\x6B0\x6AF\x3\x2\x2\x2\x6B1g\x3\x2\x2\x2\x6B2\x6B3\a\v\x2\x2\x6B3i\x3"+
		"\x2\x2\x2\x6B4\x6B5\x5l\x37\x2\x6B5\x6B6\x5\x66\x34\x2\x6B6k\x3\x2\x2"+
		"\x2\x6B7\x6B8\a\x130\x2\x2\x6B8m\x3\x2\x2\x2\x6B9\x6BA\x5p\x39\x2\x6BA"+
		"\x6BB\x5j\x36\x2\x6BB\x6BC\a\x352\x2\x2\x6BC\x6BD\a\x36F\x2\x2\x6BD\x6C0"+
		"\x3\x2\x2\x2\x6BE\x6C0\x5j\x36\x2\x6BF\x6B9\x3\x2\x2\x2\x6BF\x6BE\x3\x2"+
		"\x2\x2\x6C0o\x3\x2\x2\x2\x6C1\x6C2\a\x352\x2\x2\x6C2q\x3\x2\x2\x2\x6C3"+
		"\x6C4\a#\x2\x2\x6C4\x6C5\a\xDA\x2\x2\x6C5\x6C8\x5\x428\x215\x2\x6C6\x6C7"+
		"\a\n\x2\x2\x6C7\x6C9\x5\x428\x215\x2\x6C8\x6C6\x3\x2\x2\x2\x6C8\x6C9\x3"+
		"\x2\x2\x2\x6C9\x6CA\x3\x2\x2\x2\x6CA\x6CF\aK\x2\x2\x6CB\x6CD\a\x36F\x2"+
		"\x2\x6CC\x6CB\x3\x2\x2\x2\x6CC\x6CD\x3\x2\x2\x2\x6CD\x6CE\x3\x2\x2\x2"+
		"\x6CE\x6D0\t\n\x2\x2\x6CF\x6CC\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1"+
		"\x6CF\x3\x2\x2\x2\x6D1\x6D2\x3\x2\x2\x2\x6D2\x6D7\x3\x2\x2\x2\x6D3\x6D4"+
		"\a\xBD\x2\x2\x6D4\x6D5\a\x2FC\x2\x2\x6D5\x6D6\a\x35B\x2\x2\x6D6\x6D8\t"+
		"\b\x2\x2\x6D7\x6D3\x3\x2\x2\x2\x6D7\x6D8\x3\x2\x2\x2\x6D8s\x3\x2\x2\x2"+
		"\x6D9\x6DA\a\x39\x2\x2\x6DA\x6DD\a\xDA\x2\x2\x6DB\x6DC\aV\x2\x2\x6DC\x6DE"+
		"\a\x41\x2\x2\x6DD\x6DB\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6E3\x3"+
		"\x2\x2\x2\x6DF\x6E1\a\x36F\x2\x2\x6E0\x6DF\x3\x2\x2\x2\x6E0\x6E1\x3\x2"+
		"\x2\x2\x6E1\x6E2\x3\x2\x2\x2\x6E2\x6E4\x5\x428\x215\x2\x6E3\x6E0\x3\x2"+
		"\x2\x2\x6E4\x6E5\x3\x2\x2\x2\x6E5\x6E3\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2"+
		"\x2\x6E6\x6EA\x3\x2\x2\x2\x6E7\x6E8\a\xBD\x2\x2\x6E8\x6E9\a\x1B3\x2\x2"+
		"\x6E9\x6EB\a\x126\x2\x2\x6EA\x6E7\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB"+
		"u\x3\x2\x2\x2\x6EC\x6ED\x5x=\x2\x6ED\x6F2\x5\x428\x215\x2\x6EE\x6F3\x5"+
		"z>\x2\x6EF\x6F0\a\x1FF\x2\x2\x6F0\x6F1\a\x1E1\x2\x2\x6F1\x6F3\a_\x2\x2"+
		"\x6F2\x6EE\x3\x2\x2\x2\x6F2\x6EF\x3\x2\x2\x2\x6F3w\x3\x2\x2\x2\x6F4\x6F5"+
		"\a\x5\x2\x2\x6F5\x6F6\a\x281\x2\x2\x6F6\x6F7\a_\x2\x2\x6F7y\x3\x2\x2\x2"+
		"\x6F8\x6F9\x5|?\x2\x6F9\x6FC\x5~@\x2\x6FA\x6FB\a\x36F\x2\x2\x6FB\x6FD"+
		"\x5~@\x2\x6FC\x6FA\x3\x2\x2\x2\x6FC\x6FD\x3\x2\x2\x2\x6FD\x6FE\x3\x2\x2"+
		"\x2\x6FE\x6FF\a\x36E\x2\x2\x6FF{\x3\x2\x2\x2\x700\x701\a\xBD\x2\x2\x701"+
		"\x702\a\x1E1\x2\x2\x702\x703\a_\x2\x2\x703\x704\a\x36D\x2\x2\x704}\x3"+
		"\x2\x2\x2\x705\x706\a\x11D\x2\x2\x706\x707\a\x12\x2\x2\x707\x708\a\x2FB"+
		"\x2\x2\x708\x709\a\x35B\x2\x2\x709\x710\a\x357\x2\x2\x70A\x70B\a\x139"+
		"\x2\x2\x70B\x70C\a\x12\x2\x2\x70C\x70D\a\x2FB\x2\x2\x70D\x70E\a\x35B\x2"+
		"\x2\x70E\x710\a\x357\x2\x2\x70F\x705\x3\x2\x2\x2\x70F\x70A\x3\x2\x2\x2"+
		"\x710\x7F\x3\x2\x2\x2\x711\x712\a#\x2\x2\x712\x713\a\x281\x2\x2\x713\x714"+
		"\a_\x2\x2\x714\x717\x5\x428\x215\x2\x715\x716\a\n\x2\x2\x716\x718\x5\x428"+
		"\x215\x2\x717\x715\x3\x2\x2\x2\x717\x718\x3\x2\x2\x2\x718\x726\x3\x2\x2"+
		"\x2\x719\x724\aK\x2\x2\x71A\x71B\a\x45\x2\x2\x71B\x71C\a\x35B\x2\x2\x71C"+
		"\x725\a\x357\x2\x2\x71D\x71E\a\x2B4\x2\x2\x71E\x71F\a\x35B\x2\x2\x71F"+
		"\x725\a\x357\x2\x2\x720\x721\a\xDA\x2\x2\x721\x725\x5\x428\x215\x2\x722"+
		"\x723\a\x1E6\x2\x2\x723\x725\x5\x428\x215\x2\x724\x71A\x3\x2\x2\x2\x724"+
		"\x71D\x3\x2\x2\x2\x724\x720\x3\x2\x2\x2\x724\x722\x3\x2\x2\x2\x725\x727"+
		"\x3\x2\x2\x2\x726\x719\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2\x727\x734\x3"+
		"\x2\x2\x2\x728\x732\a\xBD\x2\x2\x729\x72A\a\xCF\x2\x2\x72A\x72B\a\x35B"+
		"\x2\x2\x72B\x733\t\v\x2\x2\x72C\x72D\a\x1E7\x2\x2\x72D\x72E\a\x35B\x2"+
		"\x2\x72E\x733\a\x357\x2\x2\x72F\x730\a\x10E\x2\x2\x730\x731\a\x35B\x2"+
		"\x2\x731\x733\t\f\x2\x2\x732\x729\x3\x2\x2\x2\x732\x72C\x3\x2\x2\x2\x732"+
		"\x72F\x3\x2\x2\x2\x733\x735\x3\x2\x2\x2\x734\x728\x3\x2\x2\x2\x734\x735"+
		"\x3\x2\x2\x2\x735\x73B\x3\x2\x2\x2\x736\x737\a\x139\x2\x2\x737\x738\a"+
		"\x12\x2\x2\x738\x739\a\x2FB\x2\x2\x739\x73A\a\x35B\x2\x2\x73A\x73C\a\x357"+
		"\x2\x2\x73B\x736\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C\x81\x3\x2\x2\x2"+
		"\x73D\x73E\a\x39\x2\x2\x73E\x73F\a\x281\x2\x2\x73F\x740\a_\x2\x2\x740"+
		"\x744\x5\x428\x215\x2\x741\x742\a\x1FF\x2\x2\x742\x743\a\x1E6\x2\x2\x743"+
		"\x745\a_\x2\x2\x744\x741\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745\x83\x3"+
		"\x2\x2\x2\x746\x74A\x5\x8CG\x2\x747\x748\x5\x94K\x2\x748\x749\x5\x8A\x46"+
		"\x2\x749\x74B\x3\x2\x2\x2\x74A\x747\x3\x2\x2\x2\x74A\x74B\x3\x2\x2\x2"+
		"\x74B\x74C\x3\x2\x2\x2\x74C\x74D\x5\x3E2\x1F2\x2\x74D\x74E\x5\x88\x45"+
		"\x2\x74E\x74F\x5\x86\x44\x2\x74F\x85\x3\x2\x2\x2\x750\x754\x5\x428\x215"+
		"\x2\x751\x752\a\x97\x2\x2\x752\x754\a\x1CE\x2\x2\x753\x750\x3\x2\x2\x2"+
		"\x753\x751\x3\x2\x2\x2\x754\x87\x3\x2\x2\x2\x755\x756\a\xA8\x2\x2\x756"+
		"\x89\x3\x2\x2\x2\x757\x758\a\x372\x2\x2\x758\x8B\x3\x2\x2\x2\x759\x75A"+
		"\a\x5\x2\x2\x75A\x75B\a\n\x2\x2\x75B\x75C\ap\x2\x2\x75C\x8D\x3\x2\x2\x2"+
		"\x75D\x761\x5\x8CG\x2\x75E\x75F\x5\x96L\x2\x75F\x760\x5\x8A\x46\x2\x760"+
		"\x762\x3\x2\x2\x2\x761\x75E\x3\x2\x2\x2\x761\x762\x3\x2\x2\x2\x762\x763"+
		"\x3\x2\x2\x2\x763\x764\x5\x3E2\x1F2\x2\x764\x765\x5\x88\x45\x2\x765\x766"+
		"\x5\x86\x44\x2\x766\x8F\x3\x2\x2\x2\x767\x76B\x5\x8CG\x2\x768\x769\x5"+
		"\x98M\x2\x769\x76A\x5\x8A\x46\x2\x76A\x76C\x3\x2\x2\x2\x76B\x768\x3\x2"+
		"\x2\x2\x76B\x76C\x3\x2\x2\x2\x76C\x76D\x3\x2\x2\x2\x76D\x76E\x5\x3E4\x1F3"+
		"\x2\x76E\x76F\x5\x88\x45\x2\x76F\x770\x5\x86\x44\x2\x770\x91\x3\x2\x2"+
		"\x2\x771\x775\x5\x8CG\x2\x772\x773\x5\x9AN\x2\x773\x774\x5\x8A\x46\x2"+
		"\x774\x776\x3\x2\x2\x2\x775\x772\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776"+
		"\x777\x3\x2\x2\x2\x777\x778\x5\x3E6\x1F4\x2\x778\x779\x5\x88\x45\x2\x779"+
		"\x77A\x5\x86\x44\x2\x77A\x93\x3\x2\x2\x2\x77B\x79E\a\x1C2\x2\x2\x77C\x79E"+
		"\a\xDA\x2\x2\x77D\x77E\a\x281\x2\x2\x77E\x79E\a_\x2\x2\x77F\x780\a\xE6"+
		"\x2\x2\x780\x79E\aP\x2\x2\x781\x79E\a\x291\x2\x2\x782\x79E\a\x29F\x2\x2"+
		"\x783\x79E\a\x25A\x2\x2\x784\x79E\a+\x2\x2\x785\x79E\a\x2AF\x2\x2\x786"+
		"\x787\a\x157\x2\x2\x787\x79E\a\xF7\x2\x2\x788\x789\a\x157\x2\x2\x789\x79E"+
		"\a\x23B\x2\x2\x78A\x78B\a\x19F\x2\x2\x78B\x79E\a\x25A\x2\x2\x78C\x78D"+
		"\a\x1FD\x2\x2\x78D\x78E\a\x320\x2\x2\x78E\x79E\a\xEE\x2\x2\x78F\x79E\a"+
		"\x314\x2\x2\x790\x79E\a\x20E\x2\x2\x791\x79E\a\x97\x2\x2\x792\x793\a\x218"+
		"\x2\x2\x793\x794\a\x1E5\x2\x2\x794\x79E\a\x182\x2\x2\x795\x796\a\x31F"+
		"\x2\x2\x796\x79E\a\x314\x2\x2\x797\x79E\a\x320\x2\x2\x798\x799\a\x243"+
		"\x2\x2\x799\x79E\a_\x2\x2\x79A\x79B\a\x270\x2\x2\x79B\x79C\a\x97\x2\x2"+
		"\x79C\x79E\a\xFF\x2\x2\x79D\x77B\x3\x2\x2\x2\x79D\x77C\x3\x2\x2\x2\x79D"+
		"\x77D\x3\x2\x2\x2\x79D\x77F\x3\x2\x2\x2\x79D\x781\x3\x2\x2\x2\x79D\x782"+
		"\x3\x2\x2\x2\x79D\x783\x3\x2\x2\x2\x79D\x784\x3\x2\x2\x2\x79D\x785\x3"+
		"\x2\x2\x2\x79D\x786\x3\x2\x2\x2\x79D\x788\x3\x2\x2\x2\x79D\x78A\x3\x2"+
		"\x2\x2\x79D\x78C\x3\x2\x2\x2\x79D\x78F\x3\x2\x2\x2\x79D\x790\x3\x2\x2"+
		"\x2\x79D\x791\x3\x2\x2\x2\x79D\x792\x3\x2\x2\x2\x79D\x795\x3\x2\x2\x2"+
		"\x79D\x797\x3\x2\x2\x2\x79D\x798\x3\x2\x2\x2\x79D\x79A\x3\x2\x2\x2\x79E"+
		"\x95\x3\x2\x2\x2\x79F\x7B5\a\x1C2\x2\x2\x7A0\x7B5\a\xDA\x2\x2\x7A1\x7A2"+
		"\a\x281\x2\x2\x7A2\x7B5\a_\x2\x2\x7A3\x7B5\a\x291\x2\x2\x7A4\x7B5\a\x25A"+
		"\x2\x2\x7A5\x7B5\a+\x2\x2\x7A6\x7A7\a\x157\x2\x2\x7A7\x7B5\a\xF7\x2\x2"+
		"\x7A8\x7A9\a\x157\x2\x2\x7A9\x7B5\a\x23B\x2\x2\x7AA\x7B5\a\x314\x2\x2"+
		"\x7AB\x7B5\a\x97\x2\x2\x7AC\x7AD\a\x218\x2\x2\x7AD\x7AE\a\x1E5\x2\x2\x7AE"+
		"\x7B5\a\x182\x2\x2\x7AF\x7B0\a\x243\x2\x2\x7B0\x7B5\a_\x2\x2\x7B1\x7B2"+
		"\a\x270\x2\x2\x7B2\x7B3\a\x97\x2\x2\x7B3\x7B5\a\xFF\x2\x2\x7B4\x79F\x3"+
		"\x2\x2\x2\x7B4\x7A0\x3\x2\x2\x2\x7B4\x7A1\x3\x2\x2\x2\x7B4\x7A3\x3\x2"+
		"\x2\x2\x7B4\x7A4\x3\x2\x2\x2\x7B4\x7A5\x3\x2\x2\x2\x7B4\x7A6\x3\x2\x2"+
		"\x2\x7B4\x7A8\x3\x2\x2\x2\x7B4\x7AA\x3\x2\x2\x2\x7B4\x7AB\x3\x2\x2\x2"+
		"\x7B4\x7AC\x3\x2\x2\x2\x7B4\x7AF\x3\x2\x2\x2\x7B4\x7B1\x3\x2\x2\x2\x7B5"+
		"\x97\x3\x2\x2\x2\x7B6\x7B7\t\r\x2\x2\x7B7\x99\x3\x2\x2\x2\x7B8\x7B9\t"+
		"\xE\x2\x2\x7B9\x9B\x3\x2\x2\x2\x7BA\x7BB\a\x280\x2\x2\x7BB\x816\a\x314"+
		"\x2\x2\x7BC\x816\a\xDA\x2\x2\x7BD\x7BE\a\x281\x2\x2\x7BE\x816\a_\x2\x2"+
		"\x7BF\x816\a\xDB\x2\x2\x7C0\x7C1\a\xE6\x2\x2\x7C1\x816\aP\x2\x2\x7C2\x7C3"+
		"\a\xF0\x2\x2\x7C3\x816\a\x1DF\x2\x2\x7C4\x816\a\x291\x2\x2\x7C5\x7C6\a"+
		"\x1B\x2\x2\x7C6\x7C7\t\xF\x2\x2\x7C7\x816\a_\x2\x2\x7C8\x816\a\x29F\x2"+
		"\x2\x7C9\x816\a\x10F\x2\x2\x7CA\x7CB\a\x110\x2\x2\x7CB\x816\a\x1E6\x2"+
		"\x2\x7CC\x7DA\a+\x2\x2\x7CD\x7CE\a\xDB\x2\x2\x7CE\x7DB\a\x32A\x2\x2\x7CF"+
		"\x7D0\a\x139\x2\x2\x7D0\x7DB\a_\x2\x2\x7D1\x7D2\a\x2B1\x2\x2\x7D2\x7DB"+
		"\a\x323\x2\x2\x7D3\x7D8\a\x215\x2\x2\x7D4\x7D9\a\x29B\x2\x2\x7D5\x7D9"+
		"\a\x10F\x2\x2\x7D6\x7D7\a\x208\x2\x2\x7D7\x7D9\a\x2BF\x2\x2\x7D8\x7D4"+
		"\x3\x2\x2\x2\x7D8\x7D5\x3\x2\x2\x2\x7D8\x7D6\x3\x2\x2\x2\x7D9\x7DB\x3"+
		"\x2\x2\x2\x7DA\x7CD\x3\x2\x2\x2\x7DA\x7CF\x3\x2\x2\x2\x7DA\x7D1\x3\x2"+
		"\x2\x2\x7DA\x7D3\x3\x2\x2\x2\x7DA\x7DB\x3\x2\x2\x2\x7DB\x816\x3\x2\x2"+
		"\x2\x7DC\x816\a\x2AF\x2\x2\x7DD\x7DE\a\x2B1\x2\x2\x7DE\x816\a\x323\x2"+
		"\x2\x7DF\x7E0\a\x2F3\x2\x2\x7E0\x816\t\x10\x2\x2\x7E1\x7EC\a\x43\x2\x2"+
		"\x7E2\x7E3\a\x114\x2\x2\x7E3\x7ED\a\x329\x2\x2\x7E4\x7E5\a\x45\x2\x2\x7E5"+
		"\x7ED\a\x154\x2\x2\x7E6\x7ED\a\x2CE\x2\x2\x7E7\x7E8\a\x208\x2\x2\x7E8"+
		"\x7ED\a\x1DA\x2\x2\x7E9\x7ED\a\xA4\x2\x2\x7EA\x7ED\a\xF7\x2\x2\x7EB\x7ED"+
		"\a\x23B\x2\x2\x7EC\x7E2\x3\x2\x2\x2\x7EC\x7E4\x3\x2\x2\x2\x7EC\x7E6\x3"+
		"\x2\x2\x2\x7EC\x7E7\x3\x2\x2\x2\x7EC\x7E9\x3\x2\x2\x2\x7EC\x7EA\x3\x2"+
		"\x2\x2\x7EC\x7EB\x3\x2\x2\x2\x7ED\x816\x3\x2\x2\x2\x7EE\x816\a\x18A\x2"+
		"\x2\x7EF\x7F0\a\x2D8\x2\x2\x7F0\x816\a_\x2\x2\x7F1\x7F2\a\x19F\x2\x2\x7F2"+
		"\x816\a\x25A\x2\x2\x7F3\x816\a\x1C2\x2\x2\x7F4\x7F5\a\x1D2\x2\x2\x7F5"+
		"\x816\t\x11\x2\x2\x7F6\x7F7\a\x1FD\x2\x2\x7F7\x7F8\a\x320\x2\x2\x7F8\x816"+
		"\a\xEE\x2\x2\x7F9\x7FA\a\x208\x2\x2\x7FA\x816\a\x2BF\x2\x2\x7FB\x816\a"+
		"\x314\x2\x2\x7FC\x816\a\x20E\x2\x2\x7FD\x816\a\x97\x2\x2\x7FE\x7FF\a\x218"+
		"\x2\x2\x7FF\x800\a\x1E5\x2\x2\x800\x816\a\x182\x2\x2\x801\x807\a\x31F"+
		"\x2\x2\x802\x804\a\xDB\x2\x2\x803\x805\a\x32A\x2\x2\x804\x803\x3\x2\x2"+
		"\x2\x804\x805\x3\x2\x2\x2\x805\x808\x3\x2\x2\x2\x806\x808\a\x314\x2\x2"+
		"\x807\x802\x3\x2\x2\x2\x807\x806\x3\x2\x2\x2\x807\x808\x3\x2\x2\x2\x808"+
		"\x816\x3\x2\x2\x2\x809\x816\a\x320\x2\x2\x80A\x80B\a\x32C\x2\x2\x80B\x816"+
		"\a\x18A\x2\x2\x80C\x80D\a\x243\x2\x2\x80D\x816\a_\x2\x2\x80E\x80F\a\xAC"+
		"\x2\x2\x80F\x816\t\x12\x2\x2\x810\x816\a\x25A\x2\x2\x811\x816\a\xB5\x2"+
		"\x2\x812\x813\a\x270\x2\x2\x813\x814\a\x97\x2\x2\x814\x816\a\xFF\x2\x2"+
		"\x815\x7BA\x3\x2\x2\x2\x815\x7BC\x3\x2\x2\x2\x815\x7BD\x3\x2\x2\x2\x815"+
		"\x7BF\x3\x2\x2\x2\x815\x7C0\x3\x2\x2\x2\x815\x7C2\x3\x2\x2\x2\x815\x7C4"+
		"\x3\x2\x2\x2\x815\x7C5\x3\x2\x2\x2\x815\x7C8\x3\x2\x2\x2\x815\x7C9\x3"+
		"\x2\x2\x2\x815\x7CA\x3\x2\x2\x2\x815\x7CC\x3\x2\x2\x2\x815\x7DC\x3\x2"+
		"\x2\x2\x815\x7DD\x3\x2\x2\x2\x815\x7DF\x3\x2\x2\x2\x815\x7E1\x3\x2\x2"+
		"\x2\x815\x7EE\x3\x2\x2\x2\x815\x7EF\x3\x2\x2\x2\x815\x7F1\x3\x2\x2\x2"+
		"\x815\x7F3\x3\x2\x2\x2\x815\x7F4\x3\x2\x2\x2\x815\x7F6\x3\x2\x2\x2\x815"+
		"\x7F9\x3\x2\x2\x2\x815\x7FB\x3\x2\x2\x2\x815\x7FC\x3\x2\x2\x2\x815\x7FD"+
		"\x3\x2\x2\x2\x815\x7FE\x3\x2\x2\x2\x815\x801\x3\x2\x2\x2\x815\x809\x3"+
		"\x2\x2\x2\x815\x80A\x3\x2\x2\x2\x815\x80C\x3\x2\x2\x2\x815\x80E\x3\x2"+
		"\x2\x2\x815\x810\x3\x2\x2\x2\x815\x811\x3\x2\x2\x2\x815\x812\x3\x2\x2"+
		"\x2\x816\x9D\x3\x2\x2\x2\x817\x818\a\x39\x2\x2\x818\x819\a\xE6\x2\x2\x819"+
		"\x81A\aP\x2\x2\x81A\x81B\x5\x428\x215\x2\x81B\x9F\x3\x2\x2\x2\x81C\x81D"+
		"\x5\xA2R\x2\x81D\x81E\x5\xA4S\x2\x81E\xA1\x3\x2\x2\x2\x81F\x820\a\x5\x2"+
		"\x2\x820\x821\a\xE6\x2\x2\x821\x822\aP\x2\x2\x822\x823\x5\x428\x215\x2"+
		"\x823\xA3\x3\x2\x2\x2\x824\x825\a\x9E\x2\x2\x825\x835\a\x36D\x2\x2\x826"+
		"\x827\a\x285\x2\x2\x827\x828\a\x35B\x2\x2\x828\x836\t\x13\x2\x2\x829\x82A"+
		"\a\x145\x2\x2\x82A\x82B\a\x35B\x2\x2\x82B\x836\a\x355\x2\x2\x82C\x82D"+
		"\a\x163\x2\x2\x82D\x82E\a\x35B\x2\x2\x82E\x836\a\x355\x2\x2\x82F\x830"+
		"\a\x11C\x2\x2\x830\x831\a\x35B\x2\x2\x831\x836\t\t\x2\x2\x832\x833\a\x206"+
		"\x2\x2\x833\x834\a\x35B\x2\x2\x834\x836\a\x355\x2\x2\x835\x826\x3\x2\x2"+
		"\x2\x835\x829\x3\x2\x2\x2\x835\x82C\x3\x2\x2\x2\x835\x82F\x3\x2\x2\x2"+
		"\x835\x832\x3\x2\x2\x2\x836\x837\x3\x2\x2\x2\x837\x988\a\x36E\x2\x2\x838"+
		"\x839\a\x3\x2\x2\x839\x83A\a+\x2\x2\x83A\x988\x5\x428\x215\x2\x83B\x83C"+
		"\a\x1FF\x2\x2\x83C\x83D\a+\x2\x2\x83D\x988\x5\x428\x215\x2\x83E\x83F\a"+
		"\x3\x2\x2\x83F\x840\a\x202\x2\x2\x840\x841\ap\x2\x2\x841\x842\a\x357\x2"+
		"\x2\x842\x843\a\xBD\x2\x2\x843\x847\a\x36D\x2\x2\x844\x845\a\x13A\x2\x2"+
		"\x845\x846\a\x35B\x2\x2\x846\x848\a\x357\x2\x2\x847\x844\x3\x2\x2\x2\x847"+
		"\x848\x3\x2\x2\x2\x848\x84F\x3\x2\x2\x2\x849\x84B\a\x36F\x2\x2\x84A\x849"+
		"\x3\x2\x2\x2\x84A\x84B\x3\x2\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x84D\a\x287"+
		"\x2\x2\x84D\x84E\a\x35B\x2\x2\x84E\x850\t\x14\x2\x2\x84F\x84A\x3\x2\x2"+
		"\x2\x84F\x850\x3\x2\x2\x2\x850\x857\x3\x2\x2\x2\x851\x853\a\x36F\x2\x2"+
		"\x852\x851\x3\x2\x2\x2\x852\x853\x3\x2\x2\x2\x853\x854\x3\x2\x2\x2\x854"+
		"\x855\a\x143\x2\x2\x855\x856\a\x35B\x2\x2\x856\x858\t\x15\x2\x2\x857\x852"+
		"\x3\x2\x2\x2\x857\x858\x3\x2\x2\x2\x858\x85F\x3\x2\x2\x2\x859\x85B\a\x36F"+
		"\x2\x2\x85A\x859\x3\x2\x2\x2\x85A\x85B\x3\x2\x2\x2\x85B\x85C\x3\x2\x2"+
		"\x2\x85C\x85D\a\x221\x2\x2\x85D\x85E\a\x35B\x2\x2\x85E\x860\t\x15\x2\x2"+
		"\x85F\x85A\x3\x2\x2\x2\x85F\x860\x3\x2\x2\x2\x860\x867\x3\x2\x2\x2\x861"+
		"\x863\a\x36F\x2\x2\x862\x861\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863\x864"+
		"\x3\x2\x2\x2\x864\x865\a\xE8\x2\x2\x865\x866\a\x35B\x2\x2\x866\x868\a"+
		"\x355\x2\x2\x867\x862\x3\x2\x2\x2\x867\x868\x3\x2\x2\x2\x868\x872\x3\x2"+
		"\x2\x2\x869\x86B\a\x36F\x2\x2\x86A\x869\x3\x2\x2\x2\x86A\x86B\x3\x2\x2"+
		"\x2\x86B\x86C\x3\x2\x2\x2\x86C\x86D\a\x1DD\x2\x2\x86D\x86E\a\x36D\x2\x2"+
		"\x86E\x86F\a\x27B\x2\x2\x86F\x870\a\x35B\x2\x2\x870\x871\t\x16\x2\x2\x871"+
		"\x873\a\x36E\x2\x2\x872\x86A\x3\x2\x2\x2\x872\x873\x3\x2\x2\x2\x873\x87D"+
		"\x3\x2\x2\x2\x874\x876\a\x36F\x2\x2\x875\x874\x3\x2\x2\x2\x875\x876\x3"+
		"\x2\x2\x2\x876\x877\x3\x2\x2\x2\x877\x878\a\x21B\x2\x2\x878\x879\a\x36D"+
		"\x2\x2\x879\x87A\a\x27B\x2\x2\x87A\x87B\a\x35B\x2\x2\x87B\x87C\a\x1F2"+
		"\x2\x2\x87C\x87E\a\x36E\x2\x2\x87D\x875\x3\x2\x2\x2\x87D\x87E\x3\x2\x2"+
		"\x2\x87E\x87F\x3\x2\x2\x2\x87F\x988\a\x36E\x2\x2\x880\x881\a\x21B\x2\x2"+
		"\x881\x88A\a\x36D\x2\x2\x882\x883\a\x27B\x2\x2\x883\x884\a\x35B\x2\x2"+
		"\x884\x88B\t\x17\x2\x2\x885\x886\a\x1F3\x2\x2\x886\x887\a\x35B\x2\x2\x887"+
		"\x888\a\x36D\x2\x2\x888\x889\a\x357\x2\x2\x889\x88B\a\x36E\x2\x2\x88A"+
		"\x882\x3\x2\x2\x2\x88A\x885\x3\x2\x2\x2\x88B\x988\x3\x2\x2\x2\x88C\x88D"+
		"\a\x1DD\x2\x2\x88D\x8A4\a\x36D\x2\x2\x88E\x88F\a\x27B\x2\x2\x88F\x890"+
		"\a\x35B\x2\x2\x890\x8A5\t\x17\x2\x2\x891\x892\a\x1F3\x2\x2\x892\x893\a"+
		"\x35B\x2\x2\x893\x89E\a\x36D\x2\x2\x894\x896\a\x36F\x2\x2\x895\x894\x3"+
		"\x2\x2\x2\x895\x896\x3\x2\x2\x2\x896\x897\x3\x2\x2\x2\x897\x899\a\x357"+
		"\x2\x2\x898\x895\x3\x2\x2\x2\x899\x89C\x3\x2\x2\x2\x89A\x898\x3\x2\x2"+
		"\x2\x89A\x89B\x3\x2\x2\x2\x89B\x89F\x3\x2\x2\x2\x89C\x89A\x3\x2\x2\x2"+
		"\x89D\x89F\a\x2EC\x2\x2\x89E\x89A\x3\x2\x2\x2\x89E\x89D\x3\x2\x2\x2\x89F"+
		"\x8A0\x3\x2\x2\x2\x8A0\x8A5\a\x36E\x2\x2\x8A1\x8A2\a\x228\x2\x2\x8A2\x8A3"+
		"\a\x35B\x2\x2\x8A3\x8A5\a\x355\x2\x2\x8A4\x88E\x3\x2\x2\x2\x8A4\x891\x3"+
		"\x2\x2\x2\x8A4\x8A1\x3\x2\x2\x2\x8A5\x988\x3\x2\x2\x2\x8A6\x8A7\a\x1A9"+
		"\x2\x2\x8A7\x8A8\a\x202\x2\x2\x8A8\x8A9\ap\x2\x2\x8A9\x8E3\a\x357\x2\x2"+
		"\x8AA\x8AB\a\xBD\x2\x2\x8AB\x8BB\a\x36D\x2\x2\x8AC\x8AD\a\x13A\x2\x2\x8AD"+
		"\x8AE\a\x35B\x2\x2\x8AE\x8BC\a\x357\x2\x2\x8AF\x8B0\a\x287\x2\x2\x8B0"+
		"\x8B1\a\x35B\x2\x2\x8B1\x8BC\t\x14\x2\x2\x8B2\x8B3\a\x143\x2\x2\x8B3\x8B4"+
		"\a\x35B\x2\x2\x8B4\x8BC\t\x15\x2\x2\x8B5\x8B6\a\x221\x2\x2\x8B6\x8B7\a"+
		"\x35B\x2\x2\x8B7\x8BC\t\x15\x2\x2\x8B8\x8B9\a\xE8\x2\x2\x8B9\x8BA\a\x35B"+
		"\x2\x2\x8BA\x8BC\a\x355\x2\x2\x8BB\x8AC\x3\x2\x2\x2\x8BB\x8AF\x3\x2\x2"+
		"\x2\x8BB\x8B2\x3\x2\x2\x2\x8BB\x8B5\x3\x2\x2\x2\x8BB\x8B8\x3\x2\x2\x2"+
		"\x8BC\x8E4\x3\x2\x2\x2\x8BD\x8BE\a\x21B\x2\x2\x8BE\x8C7\a\x36D\x2\x2\x8BF"+
		"\x8C0\a\x27B\x2\x2\x8C0\x8C1\a\x35B\x2\x2\x8C1\x8C8\t\x17\x2\x2\x8C2\x8C3"+
		"\a\x1F3\x2\x2\x8C3\x8C4\a\x35B\x2\x2\x8C4\x8C5\a\x36D\x2\x2\x8C5\x8C6"+
		"\a\x357\x2\x2\x8C6\x8C8\a\x36E\x2\x2\x8C7\x8BF\x3\x2\x2\x2\x8C7\x8C2\x3"+
		"\x2\x2\x2\x8C8\x8E4\x3\x2\x2\x2\x8C9\x8CA\a\x1DD\x2\x2\x8CA\x8E1\a\x36D"+
		"\x2\x2\x8CB\x8CC\a\x27B\x2\x2\x8CC\x8CD\a\x35B\x2\x2\x8CD\x8E2\t\x17\x2"+
		"\x2\x8CE\x8CF\a\x1F3\x2\x2\x8CF\x8D0\a\x35B\x2\x2\x8D0\x8DB\a\x36D\x2"+
		"\x2\x8D1\x8D3\a\x36F\x2\x2\x8D2\x8D1\x3\x2\x2\x2\x8D2\x8D3\x3\x2\x2\x2"+
		"\x8D3\x8D4\x3\x2\x2\x2\x8D4\x8D6\a\x357\x2\x2\x8D5\x8D2\x3\x2\x2\x2\x8D6"+
		"\x8D9\x3\x2\x2\x2\x8D7\x8D5\x3\x2\x2\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x8DC"+
		"\x3\x2\x2\x2\x8D9\x8D7\x3\x2\x2\x2\x8DA\x8DC\a\x2EC\x2\x2\x8DB\x8D7\x3"+
		"\x2\x2\x2\x8DB\x8DA\x3\x2\x2\x2\x8DC\x8DD\x3\x2\x2\x2\x8DD\x8E2\a\x36E"+
		"\x2\x2\x8DE\x8DF\a\x228\x2\x2\x8DF\x8E0\a\x35B\x2\x2\x8E0\x8E2\a\x355"+
		"\x2\x2\x8E1\x8CB\x3\x2\x2\x2\x8E1\x8CE\x3\x2\x2\x2\x8E1\x8DE\x3\x2\x2"+
		"\x2\x8E2\x8E4\x3\x2\x2\x2\x8E3\x8AA\x3\x2\x2\x2\x8E3\x8BD\x3\x2\x2\x2"+
		"\x8E3\x8C9\x3\x2\x2\x2\x8E4\x8E5\x3\x2\x2\x2\x8E5\x988\a\x36E\x2\x2\x8E6"+
		"\x8E7\a\x1FF\x2\x2\x8E7\x8E8\a\x202\x2\x2\x8E8\x8E9\ap\x2\x2\x8E9\x988"+
		"\a\x357\x2\x2\x8EA\x988\a^\x2\x2\x8EB\x8EC\a^\x2\x2\x8EC\x8ED\a\xE6\x2"+
		"\x2\x8ED\x8EE\aP\x2\x2\x8EE\x905\ap\x2\x2\x8EF\x8F1\a\x36F\x2\x2\x8F0"+
		"\x8EF\x3\x2\x2\x2\x8F0\x8F1\x3\x2\x2\x2\x8F1\x8F2\x3\x2\x2\x2\x8F2\x8F3"+
		"\a\x357\x2\x2\x8F3\x8F4\a\xBD\x2\x2\x8F4\x8F5\a\x36D\x2\x2\x8F5\x8F6\a"+
		"\x184\x2\x2\x8F6\x8F7\a\x35B\x2\x2\x8F7\x8F8\a\x357\x2\x2\x8F8\x8F9\a"+
		"\x36F\x2\x2\x8F9\x8FA\a\x287\x2\x2\x8FA\x8FB\a\x35B\x2\x2\x8FB\x8FC\t"+
		"\x14\x2\x2\x8FC\x8FD\a\x36F\x2\x2\x8FD\x8FE\a\x143\x2\x2\x8FE\x8FF\a\x35B"+
		"\x2\x2\x8FF\x900\a\x18D\x2\x2\x900\x901\a\x36F\x2\x2\x901\x902\a\x221"+
		"\x2\x2\x902\x903\a\x35B\x2\x2\x903\x904\t\x15\x2\x2\x904\x906\a\x36E\x2"+
		"\x2\x905\x8F0\x3\x2\x2\x2\x906\x907\x3\x2\x2\x2\x907\x905\x3\x2\x2\x2"+
		"\x907\x908\x3\x2\x2\x2\x908\x988\x3\x2\x2\x2\x909\x90A\a\x1A9\x2\x2\x90A"+
		"\x90B\a\xE6\x2\x2\x90B\x90C\aP\x2\x2\x90C\x92F\ap\x2\x2\x90D\x90F\a\x36F"+
		"\x2\x2\x90E\x90D\x3\x2\x2\x2\x90E\x90F\x3\x2\x2\x2\x90F\x910\x3\x2\x2"+
		"\x2\x910\x911\a\x357\x2\x2\x911\x912\a\xBD\x2\x2\x912\x913\a\x36D\x2\x2"+
		"\x913\x914\a\x184\x2\x2\x914\x915\a\x35B\x2\x2\x915\x91C\a\x357\x2\x2"+
		"\x916\x918\a\x36F\x2\x2\x917\x916\x3\x2\x2\x2\x917\x918\x3\x2\x2\x2\x918"+
		"\x919\x3\x2\x2\x2\x919\x91A\a\x287\x2\x2\x91A\x91B\a\x35B\x2\x2\x91B\x91D"+
		"\t\x14\x2\x2\x91C\x917\x3\x2\x2\x2\x91C\x91D\x3\x2\x2\x2\x91D\x924\x3"+
		"\x2\x2\x2\x91E\x920\a\x36F\x2\x2\x91F\x91E\x3\x2\x2\x2\x91F\x920\x3\x2"+
		"\x2\x2\x920\x921\x3\x2\x2\x2\x921\x922\a\x143\x2\x2\x922\x923\a\x35B\x2"+
		"\x2\x923\x925\a\x18D\x2\x2\x924\x91F\x3\x2\x2\x2\x924\x925\x3\x2\x2\x2"+
		"\x925\x92C\x3\x2\x2\x2\x926\x928\a\x36F\x2\x2\x927\x926\x3\x2\x2\x2\x927"+
		"\x928\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\x92A\a\x221\x2\x2\x92A\x92B"+
		"\a\x35B\x2\x2\x92B\x92D\t\x15\x2\x2\x92C\x927\x3\x2\x2\x2\x92C\x92D\x3"+
		"\x2\x2\x2\x92D\x92E\x3\x2\x2\x2\x92E\x930\a\x36E\x2\x2\x92F\x90E\x3\x2"+
		"\x2\x2\x930\x931\x3\x2\x2\x2\x931\x92F\x3\x2\x2\x2\x931\x932\x3\x2\x2"+
		"\x2\x932\x988\x3\x2\x2\x2\x933\x934\aO\x2\x2\x934\x935\a#\x2\x2\x935\x936"+
		"\a\a\x2\x2\x936\x988\a+\x2\x2\x937\x938\a\x31\x2\x2\x938\x939\a#\x2\x2"+
		"\x939\x93A\a\a\x2\x2\x93A\x988\a+\x2\x2\x93B\x988\a\x2B8\x2\x2\x93C\x988"+
		"\a\x152\x2\x2\x93D\x93E\a\x3\x2\x2\x93E\x93F\a\x183\x2\x2\x93F\x940\a"+
		"\x357\x2\x2\x940\x964\a\x36D\x2\x2\x941\x942\a\xBD\x2\x2\x942\x943\a\x12A"+
		"\x2\x2\x943\x944\ap\x2\x2\x944\x945\a\x36D\x2\x2\x945\x946\x5\xA6T\x2"+
		"\x946\x947\x5\xA6T\x2\x947\x948\a\x36E\x2\x2\x948\x965\x3\x2\x2\x2\x949"+
		"\x94A\a\xBD\x2\x2\x94A\x94B\a\x173\x2\x2\x94B\x959\a\x36D\x2\x2\x94C\x94E"+
		"\a\x36F\x2\x2\x94D\x94C\x3\x2\x2\x2\x94D\x94E\x3\x2\x2\x2\x94E\x94F\x3"+
		"\x2\x2\x2\x94F\x955\a\x36D\x2\x2\x950\x951\x5\xA6T\x2\x951\x952\a\x36F"+
		"\x2\x2\x952\x953\x5\xA6T\x2\x953\x956\x3\x2\x2\x2\x954\x956\x5\xA8U\x2"+
		"\x955\x950\x3\x2\x2\x2\x955\x954\x3\x2\x2\x2\x956\x957\x3\x2\x2\x2\x957"+
		"\x958\a\x36E\x2\x2\x958\x95A\x3\x2\x2\x2\x959\x94D\x3\x2\x2\x2\x95A\x95B"+
		"\x3\x2\x2\x2\x95B\x959\x3\x2\x2\x2\x95B\x95C\x3\x2\x2\x2\x95C\x95D\x3"+
		"\x2\x2\x2\x95D\x962\a\x36E\x2\x2\x95E\x95F\a\x36F\x2\x2\x95F\x960\a\x1DB"+
		"\x2\x2\x960\x961\a\x35B\x2\x2\x961\x963\a\x355\x2\x2\x962\x95E\x3\x2\x2"+
		"\x2\x962\x963\x3\x2\x2\x2\x963\x965\x3\x2\x2\x2\x964\x941\x3\x2\x2\x2"+
		"\x964\x949\x3\x2\x2\x2\x965\x966\x3\x2\x2\x2\x966\x967\a\x36E\x2\x2\x967"+
		"\x988\x3\x2\x2\x2\x968\x969\a\x1A9\x2\x2\x969\x978\a\x183\x2\x2\x96A\x96B"+
		"\a\x3\x2\x2\x96B\x96C\a\x173\x2\x2\x96C\x971\a\x36D\x2\x2\x96D\x96E\x5"+
		"\xA6T\x2\x96E\x96F\x5\xA6T\x2\x96F\x972\x3\x2\x2\x2\x970\x972\x5\xA8U"+
		"\x2\x971\x96D\x3\x2\x2\x2\x971\x970\x3\x2\x2\x2\x972\x973\x3\x2\x2\x2"+
		"\x973\x974\a\x36E\x2\x2\x974\x979\x3\x2\x2\x2\x975\x976\a\x1DB\x2\x2\x976"+
		"\x977\a\x35B\x2\x2\x977\x979\a\x355\x2\x2\x978\x96A\x3\x2\x2\x2\x978\x975"+
		"\x3\x2\x2\x2\x979\x988\x3\x2\x2\x2\x97A\x97B\a\x30F\x2\x2\x97B\x97C\a"+
		"\x183\x2\x2\x97C\x988\a\x357\x2\x2\x97D\x97E\a\x1FF\x2\x2\x97E\x97F\a"+
		"\x183\x2\x2\x97F\x988\a\x357\x2\x2\x980\x988\a\x1C3\x2\x2\x981\x982\a"+
		"\xBD\x2\x2\x982\x983\a\x36D\x2\x2\x983\x984\a\x2AD\x2\x2\x984\x985\a\x35B"+
		"\x2\x2\x985\x986\a\x2FE\x2\x2\x986\x988\a\x36E\x2\x2\x987\x824\x3\x2\x2"+
		"\x2\x987\x838\x3\x2\x2\x2\x987\x83B\x3\x2\x2\x2\x987\x83E\x3\x2\x2\x2"+
		"\x987\x880\x3\x2\x2\x2\x987\x88C\x3\x2\x2\x2\x987\x8A6\x3\x2\x2\x2\x987"+
		"\x8E6\x3\x2\x2\x2\x987\x8EA\x3\x2\x2\x2\x987\x8EB\x3\x2\x2\x2\x987\x909"+
		"\x3\x2\x2\x2\x987\x933\x3\x2\x2\x2\x987\x937\x3\x2\x2\x2\x987\x93B\x3"+
		"\x2\x2\x2\x987\x93C\x3\x2\x2\x2\x987\x93D\x3\x2\x2\x2\x987\x968\x3\x2"+
		"\x2\x2\x987\x97A\x3\x2\x2\x2\x987\x97D\x3\x2\x2\x2\x987\x980\x3\x2\x2"+
		"\x2\x987\x981\x3\x2\x2\x2\x988\xA5\x3\x2\x2\x2\x989\x98A\a\x357\x2\x2"+
		"\x98A\xA7\x3\x2\x2\x2\x98B\x98C\a\x357\x2\x2\x98C\xA9\x3\x2\x2\x2\x98D"+
		"\x98E\t\x18\x2\x2\x98E\x98F\a\xF0\x2\x2\x98F\x990\a\x1DF\x2\x2\x990\x991"+
		"\x5\x428\x215\x2\x991\x992\aG\x2\x2\x992\x993\a\x2A1\x2\x2\x993\x994\a"+
		"\x9E\x2\x2\x994\x99E\a\x36D\x2\x2\x995\x996\a\x2A0\x2\x2\x996\x999\a\x35B"+
		"\x2\x2\x997\x99A\x5\x428\x215\x2\x998\x99A\a\a\x2\x2\x999\x997\x3\x2\x2"+
		"\x2\x999\x998\x3\x2\x2\x2\x99A\x99C\x3\x2\x2\x2\x99B\x99D\a\x36F\x2\x2"+
		"\x99C\x99B\x3\x2\x2\x2\x99C\x99D\x3\x2\x2\x2\x99D\x99F\x3\x2\x2\x2\x99E"+
		"\x995\x3\x2\x2\x2\x99E\x99F\x3\x2\x2\x2\x99F\x9AC\x3\x2\x2\x2\x9A0\x9A1"+
		"\a\x2D4\x2\x2\x9A1\x9A7\a\x35B\x2\x2\x9A2\x9A4\a\x38\x2\x2\x9A3\x9A2\x3"+
		"\x2\x2\x2\x9A3\x9A4\x3\x2\x2\x2\x9A4\x9A5\x3\x2\x2\x2\x9A5\x9A8\x5\x428"+
		"\x215\x2\x9A6\x9A8\a\a\x2\x2\x9A7\x9A3\x3\x2\x2\x2\x9A7\x9A6\x3\x2\x2"+
		"\x2\x9A8\x9AA\x3\x2\x2\x2\x9A9\x9AB\a\x36F\x2\x2\x9AA\x9A9\x3\x2\x2\x2"+
		"\x9AA\x9AB\x3\x2\x2\x2\x9AB\x9AD\x3\x2\x2\x2\x9AC\x9A0\x3\x2\x2\x2\x9AC"+
		"\x9AD\x3\x2\x2\x2\x9AD\x9B7\x3\x2\x2\x2\x9AE\x9AF\a\x1FE\x2\x2\x9AF\x9B2"+
		"\a\x35B\x2\x2\x9B0\x9B3\a\x357\x2\x2\x9B1\x9B3\a\a\x2\x2\x9B2\x9B0\x3"+
		"\x2\x2\x2\x9B2\x9B1\x3\x2\x2\x2\x9B3\x9B5\x3\x2\x2\x2\x9B4\x9B6\a\x36F"+
		"\x2\x2\x9B5\x9B4\x3\x2\x2\x2\x9B5\x9B6\x3\x2\x2\x2\x9B6\x9B8\x3\x2\x2"+
		"\x2\x9B7\x9AE\x3\x2\x2\x2\x9B7\x9B8\x3\x2\x2\x2\x9B8\x9BF\x3\x2\x2\x2"+
		"\x9B9\x9BA\a\x1E0\x2\x2\x9BA\x9BD\a\x35B\x2\x2\x9BB\x9BE\a\x355\x2\x2"+
		"\x9BC\x9BE\a/\x2\x2\x9BD\x9BB\x3\x2\x2\x2\x9BD\x9BC\x3\x2\x2\x2\x9BE\x9C0"+
		"\x3\x2\x2\x2\x9BF\x9B9\x3\x2\x2\x2\x9BF\x9C0\x3\x2\x2\x2\x9C0\x9C1\x3"+
		"\x2\x2\x2\x9C1\x9C2\a\x36E\x2\x2\x9C2\xAB\x3\x2\x2\x2\x9C3\x9C4\a\x39"+
		"\x2\x2\x9C4\x9C5\a\xF0\x2\x2\x9C5\x9C6\a\x1DF\x2\x2\x9C6\x9C7\x5\x428"+
		"\x215\x2\x9C7\xAD\x3\x2\x2\x2\x9C8\x9C9\a\x5\x2\x2\x9C9\x9CA\a\x291\x2"+
		"\x2\x9CA\x9F2\x5\x428\x215\x2\x9CB\x9CC\a\x1FF\x2\x2\x9CC\x9F3\a\x1E2"+
		"\x2\x2\x9CD\x9CE\a\xBD\x2\x2\x9CE\x9CF\a\x1E1\x2\x2\x9CF\x9D0\a_\x2\x2"+
		"\x9D0\x9E7\a\x36D\x2\x2\x9D1\x9D2\a\x45\x2\x2\x9D2\x9D3\a\x35B\x2\x2\x9D3"+
		"\x9D5\a\x357\x2\x2\x9D4\x9D6\a\x36F\x2\x2\x9D5\x9D4\x3\x2\x2\x2\x9D5\x9D6"+
		"\x3\x2\x2\x2\x9D6\x9E8\x3\x2\x2\x2\x9D7\x9D8\a\x11D\x2\x2\x9D8\x9D9\a"+
		"\x12\x2\x2\x9D9\x9DA\a\x2FB\x2\x2\x9DA\x9DB\a\x35B\x2\x2\x9DB\x9DD\a\x357"+
		"\x2\x2\x9DC\x9DE\a\x36F\x2\x2\x9DD\x9DC\x3\x2\x2\x2\x9DD\x9DE\x3\x2\x2"+
		"\x2\x9DE\x9E8\x3\x2\x2\x2\x9DF\x9E0\a\x139\x2\x2\x9E0\x9E1\a\x12\x2\x2"+
		"\x9E1\x9E2\a\x2FB\x2\x2\x9E2\x9E3\a\x35B\x2\x2\x9E3\x9E5\a\x357\x2\x2"+
		"\x9E4\x9E6\a\x36F\x2\x2\x9E5\x9E4\x3\x2\x2\x2\x9E5\x9E6\x3\x2\x2\x2\x9E6"+
		"\x9E8\x3\x2\x2\x2\x9E7\x9D1\x3\x2\x2\x2\x9E7\x9D7\x3\x2\x2\x2\x9E7\x9DF"+
		"\x3\x2\x2\x2\x9E8\x9E9\x3\x2\x2\x2\x9E9\x9E7\x3\x2\x2\x2\x9E9\x9EA\x3"+
		"\x2\x2\x2\x9EA\x9EB\x3\x2\x2\x2\x9EB\x9F3\a\x36E\x2\x2\x9EC\x9ED\a\xBD"+
		"\x2\x2\x9ED\x9EE\a\xC7\x2\x2\x9EE\x9EF\aG\x2\x2\x9EF\x9F0\a\xE9\x2\x2"+
		"\x9F0\x9F1\a\x35B\x2\x2\x9F1\x9F3\t\t\x2\x2\x9F2\x9CB\x3\x2\x2\x2\x9F2"+
		"\x9CD\x3\x2\x2\x2\x9F2\x9EC\x3\x2\x2\x2\x9F3\xAF\x3\x2\x2\x2\x9F4\x9F5"+
		"\a\x5\x2\x2\x9F5\x9F6\a\x1B\x2\x2\x9F6\x9F7\a\x139\x2\x2\x9F7\x9F8\a_"+
		"\x2\x2\x9F8\x9F9\x5\x428\x215\x2\x9F9\x9FA\t\x19\x2\x2\x9FA\x9FB\a\x265"+
		"\x2\x2\x9FB\x9FC\a\x36D\x2\x2\x9FC\x9FD\a\x100\x2\x2\x9FD\x9FE\a\x35B"+
		"\x2\x2\x9FE\xA07\x5\x428\x215\x2\x9FF\xA00\a\x36F\x2\x2\xA00\xA01\a\xCF"+
		"\x2\x2\xA01\xA02\a\x35B\x2\x2\xA02\xA03\a\x357\x2\x2\xA03\xA04\a\x36F"+
		"\x2\x2\xA04\xA05\a\x138\x2\x2\xA05\xA06\a\x35B\x2\x2\xA06\xA08\a\x358"+
		"\x2\x2\xA07\x9FF\x3\x2\x2\x2\xA07\xA08\x3\x2\x2\x2\xA08\xA09\x3\x2\x2"+
		"\x2\xA09\xA0A\a\x36E\x2\x2\xA0A\xB1\x3\x2\x2\x2\xA0B\xA0C\a#\x2\x2\xA0C"+
		"\xA0D\a\x1B\x2\x2\xA0D\xA0E\a\x139\x2\x2\xA0E\xA0F\a_\x2\x2\xA0F\xA10"+
		"\x5\x428\x215\x2\xA10\xA11\a\xBD\x2\x2\xA11\xA25\a\xB6\x2\x2\xA12\xA14"+
		"\a\x36D\x2\x2\xA13\xA15\a\x36F\x2\x2\xA14\xA13\x3\x2\x2\x2\xA14\xA15\x3"+
		"\x2\x2\x2\xA15\xA16\x3\x2\x2\x2\xA16\xA17\a\x100\x2\x2\xA17\xA18\a\x35B"+
		"\x2\x2\xA18\xA19\x5\x428\x215\x2\xA19\xA1A\a\x36F\x2\x2\xA1A\xA1B\a\xCF"+
		"\x2\x2\xA1B\xA1C\a\x35B\x2\x2\xA1C\xA1D\a\x357\x2\x2\xA1D\xA1E\a\x36F"+
		"\x2\x2\xA1E\xA1F\a\x138\x2\x2\xA1F\xA20\a\x35B\x2\x2\xA20\xA21\a\x358"+
		"\x2\x2\xA21\xA23\a\x36E\x2\x2\xA22\xA24\a\x36F\x2\x2\xA23\xA22\x3\x2\x2"+
		"\x2\xA23\xA24\x3\x2\x2\x2\xA24\xA26\x3\x2\x2\x2\xA25\xA12\x3\x2\x2\x2"+
		"\xA26\xA27\x3\x2\x2\x2\xA27\xA25\x3\x2\x2\x2\xA27\xA28\x3\x2\x2\x2\xA28"+
		"\xB3\x3\x2\x2\x2\xA29\xA2A\a\x39\x2\x2\xA2A\xA2B\a\x291\x2\x2\xA2B\xA2C"+
		"\x5\x428\x215\x2\xA2C\xB5\x3\x2\x2\x2\xA2D\xA2E\a\x39\x2\x2\xA2E\xA2F"+
		"\a\x1B\x2\x2\xA2F\xA30\a\x139\x2\x2\xA30\xA31\a_\x2\x2\xA31\xA32\x5\x428"+
		"\x215\x2\xA32\xB7\x3\x2\x2\x2\xA33\xA34\a\x39\x2\x2\xA34\xA35\a\x1B\x2"+
		"\x2\xA35\xA36\a\x2D8\x2\x2\xA36\xA37\a_\x2\x2\xA37\xA38\x5\x428\x215\x2"+
		"\xA38\xB9\x3\x2\x2\x2\xA39\xA3A\a\x39\x2\x2\xA3A\xA3B\a\x29F\x2\x2\xA3B"+
		"\xA3C\x5\x428\x215\x2\xA3C\xBB\x3\x2\x2\x2\xA3D\xA3E\a\x39\x2\x2\xA3E"+
		"\xA3F\a\x10F\x2\x2\xA3F\xA40\x5\x428\x215\x2\xA40\xBD\x3\x2\x2\x2\xA41"+
		"\xA42\a\x39\x2\x2\xA42\xA43\a\x110\x2\x2\xA43\xA44\a\x1E6\x2\x2\xA44\xA45"+
		"\x5\x428\x215\x2\xA45\xBF\x3\x2\x2\x2\xA46\xA47\a\x39\x2\x2\xA47\xA4A"+
		"\a+\x2\x2\xA48\xA49\aV\x2\x2\xA49\xA4B\a\x41\x2\x2\xA4A\xA48\x3\x2\x2"+
		"\x2\xA4A\xA4B\x3\x2\x2\x2\xA4B\xA50\x3\x2\x2\x2\xA4C\xA4E\a\x36F\x2\x2"+
		"\xA4D\xA4C\x3\x2\x2\x2\xA4D\xA4E\x3\x2\x2\x2\xA4E\xA4F\x3\x2\x2\x2\xA4F"+
		"\xA51\x5\x428\x215\x2\xA50\xA4D\x3\x2\x2\x2\xA51\xA52\x3\x2\x2\x2\xA52"+
		"\xA50\x3\x2\x2\x2\xA52\xA53\x3\x2\x2\x2\xA53\xC1\x3\x2\x2\x2\xA54\xA55"+
		"\a\x39\x2\x2\xA55\xA56\a+\x2\x2\xA56\xA57\a\xDB\x2\x2\xA57\xA58\a\x32A"+
		"\x2\x2\xA58\xA59\x5\x428\x215\x2\xA59\xC3\x3\x2\x2\x2\xA5A\xA5B\a\x39"+
		"\x2\x2\xA5B\xA5C\a+\x2\x2\xA5C\xA5D\a\x139\x2\x2\xA5D\xA5E\a_\x2\x2\xA5E"+
		"\xC5\x3\x2\x2\x2\xA5F\xA60\a\x39\x2\x2\xA60\xA61\a+\x2\x2\xA61\xA62\a"+
		"\x215\x2\x2\xA62\xA63\a\x10F\x2\x2\xA63\xA64\x5\x428\x215\x2\xA64\xC7"+
		"\x3\x2\x2\x2\xA65\xA66\a\x39\x2\x2\xA66\xA69\a/\x2\x2\xA67\xA68\aV\x2"+
		"\x2\xA68\xA6A\a\x41\x2\x2\xA69\xA67\x3\x2\x2\x2\xA69\xA6A\x3\x2\x2\x2"+
		"\xA6A\xA6C\x3\x2\x2\x2\xA6B\xA6D\a\x36F\x2\x2\xA6C\xA6B\x3\x2\x2\x2\xA6C"+
		"\xA6D\x3\x2\x2\x2\xA6D\xA71\x3\x2\x2\x2\xA6E\xA6F\x5\x428\x215\x2\xA6F"+
		"\xA70\a\x368\x2\x2\xA70\xA72\x3\x2\x2\x2\xA71\xA6E\x3\x2\x2\x2\xA71\xA72"+
		"\x3\x2\x2\x2\xA72\xA73\x3\x2\x2\x2\xA73\xA74\x5\x428\x215\x2\xA74\xC9"+
		"\x3\x2\x2\x2\xA75\xA76\a\x39\x2\x2\xA76\xA77\a\x2AF\x2\x2\xA77\xA78\x5"+
		"\x428\x215\x2\xA78\xCB\x3\x2\x2\x2\xA79\xA7A\a\x39\x2\x2\xA7A\xA7B\a\x43"+
		"\x2\x2\xA7B\xA7C\a\x114\x2\x2\xA7C\xA7D\a\x329\x2\x2\xA7D\xA7E\x5\x428"+
		"\x215\x2\xA7E\xCD\x3\x2\x2\x2\xA7F\xA80\a\x39\x2\x2\xA80\xA81\a\x43\x2"+
		"\x2\xA81\xA82\a\x45\x2\x2\xA82\xA83\a\x154\x2\x2\xA83\xA84\x5\x428\x215"+
		"\x2\xA84\xCF\x3\x2\x2\x2\xA85\xA86\a\x39\x2\x2\xA86\xA87\a\x43\x2\x2\xA87"+
		"\xA88\a\x2CE\x2\x2\xA88\xA8B\x5\x428\x215\x2\xA89\xA8A\a\n\x2\x2\xA8A"+
		"\xA8C\x5\x428\x215\x2\xA8B\xA89\x3\x2\x2\x2\xA8B\xA8C\x3\x2\x2\x2\xA8C"+
		"\xD1\x3\x2\x2\x2\xA8D\xA8E\a\x39\x2\x2\xA8E\xA8F\a\x43\x2\x2\xA8F\xA90"+
		"\a\x208\x2\x2\xA90\xA91\a\x1DA\x2\x2\xA91\xA92\x5\x428\x215\x2\xA92\xD3"+
		"\x3\x2\x2\x2\xA93\xA94\a\x39\x2\x2\xA94\xA95\a\x43\x2\x2\xA95\xA99\a\xA4"+
		"\x2\x2\xA96\xA97\x5\x428\x215\x2\xA97\xA98\a\x368\x2\x2\xA98\xA9A\x3\x2"+
		"\x2\x2\xA99\xA96\x3\x2\x2\x2\xA99\xA9A\x3\x2\x2\x2\xA9A\xA9E\x3\x2\x2"+
		"\x2\xA9B\xA9C\x5\x428\x215\x2\xA9C\xA9D\a\x368\x2\x2\xA9D\xA9F\x3\x2\x2"+
		"\x2\xA9E\xA9B\x3\x2\x2\x2\xA9E\xA9F\x3\x2\x2\x2\xA9F\xAA0\x3\x2\x2\x2"+
		"\xAA0\xAA1\x5\x428\x215\x2\xAA1\xD5\x3\x2\x2\x2\xAA2\xAA3\a\x39\x2\x2"+
		"\xAA3\xAA4\a\x2B1\x2\x2\xAA4\xAA9\a\x2F3\x2\x2\xAA5\xAA7\a\x36F\x2\x2"+
		"\xAA6\xAA5\x3\x2\x2\x2\xAA6\xAA7\x3\x2\x2\x2\xAA7\xAA8\x3\x2\x2\x2\xAA8"+
		"\xAAA\x5\x428\x215\x2\xAA9\xAA6\x3\x2\x2\x2\xAAA\xAAB\x3\x2\x2\x2\xAAB"+
		"\xAA9\x3\x2\x2\x2\xAAB\xAAC\x3\x2\x2\x2\xAAC\xAAD\x3\x2\x2\x2\xAAD\xAB2"+
		"\ap\x2\x2\xAAE\xAB3\a\x31F\x2\x2\xAAF\xAB3\a+\x2\x2\xAB0\xAB1\a\x1E9\x2"+
		"\x2\xAB1\xAB3\x5\x428\x215\x2\xAB2\xAAE\x3\x2\x2\x2\xAB2\xAAF\x3\x2\x2"+
		"\x2\xAB2\xAB0\x3\x2\x2\x2\xAB3\xD7\x3\x2\x2\x2\xAB4\xAB5\a\x39\x2\x2\xAB5"+
		"\xAB6\a\x2B1\x2\x2\xAB6\xAB7\a\x323\x2\x2\xAB7\xAB8\x5\x428\x215\x2\xAB8"+
		"\xAB9\ap\x2\x2\xAB9\xABA\a\x31F\x2\x2\xABA\xD9\x3\x2\x2\x2\xABB\xABC\a"+
		"\x39\x2\x2\xABC\xABD\a\x157\x2\x2\xABD\xABE\a\xF7\x2\x2\xABE\xABF\x5\x428"+
		"\x215\x2\xABF\xDB\x3\x2\x2\x2\xAC0\xAC1\a\x39\x2\x2\xAC1\xAC2\a\x157\x2"+
		"\x2\xAC2\xAC3\aX\x2\x2\xAC3\xAC7\ap\x2\x2\xAC4\xAC5\x5\x428\x215\x2\xAC5"+
		"\xAC6\a\x368\x2\x2\xAC6\xAC8\x3\x2\x2\x2\xAC7\xAC4\x3\x2\x2\x2\xAC7\xAC8"+
		"\x3\x2\x2\x2\xAC8\xAC9\x3\x2\x2\x2\xAC9\xACA\x5\x428\x215\x2\xACA\xDD"+
		"\x3\x2\x2\x2\xACB\xACC\a\x39\x2\x2\xACC\xACD\a\x157\x2\x2\xACD\xACE\a"+
		"\x23B\x2\x2\xACE\xACF\x5\x428\x215\x2\xACF\xDF\x3\x2\x2\x2\xAD0\xAD1\a"+
		"\x39\x2\x2\xAD1\xAD2\a\x18A\x2\x2\xAD2\xAD3\x5\x428\x215\x2\xAD3\xE1\x3"+
		"\x2\x2\x2\xAD4\xAD5\a\x39\x2\x2\xAD5\xAD6\a\x2D8\x2\x2\xAD6\xAD7\a_\x2"+
		"\x2\xAD7\xE3\x3\x2\x2\x2\xAD8\xAD9\a\x39\x2\x2\xAD9\xADA\a\x19F\x2\x2"+
		"\xADA\xADB\a\x25A\x2\x2\xADB\xADC\x5\x428\x215\x2\xADC\xE5\x3\x2\x2\x2"+
		"\xADD\xADE\a\x39\x2\x2\xADE\xADF\a\x1D2\x2\x2\xADF\xAE0\aM\x2\x2\xAE0"+
		"\xAE1\x5\x428\x215\x2\xAE1\xE7\x3\x2\x2\x2\xAE2\xAE3\a\x39\x2\x2\xAE3"+
		"\xAE4\a\x1D2\x2\x2\xAE4\xAE5\a\x31D\x2\x2\xAE5\xAE6\x5\x428\x215\x2\xAE6"+
		"\xE9\x3\x2\x2\x2\xAE7\xAE8\a\x39\x2\x2\xAE8\xAEC\a\x1E9\x2\x2\xAE9\xAEA"+
		"\x5\x428\x215\x2\xAEA\xAEB\a\x368\x2\x2\xAEB\xAED\x3\x2\x2\x2\xAEC\xAE9"+
		"\x3\x2\x2\x2\xAEC\xAED\x3\x2\x2\x2\xAED\xAF1\x3\x2\x2\x2\xAEE\xAEF\x5"+
		"\x428\x215\x2\xAEF\xAF0\a\x368\x2\x2\xAF0\xAF2\x3\x2\x2\x2\xAF1\xAEE\x3"+
		"\x2\x2\x2\xAF1\xAF2\x3\x2\x2\x2\xAF2\xAF3\x3\x2\x2\x2\xAF3\xAF4\x5\x428"+
		"\x215\x2\xAF4\xEB\x3\x2\x2\x2\xAF5\xAF6\a\x39\x2\x2\xAF6\xAF7\a\x1FD\x2"+
		"\x2\xAF7\xAF8\a\x320\x2\x2\xAF8\xAF9\a\xEE\x2\x2\xAF9\xAFA\x5\x428\x215"+
		"\x2\xAFA\xED\x3\x2\x2\x2\xAFB\xAFC\a\x39\x2\x2\xAFC\xAFD\a\x208\x2\x2"+
		"\xAFD\xAFE\a\x1DA\x2\x2\xAFE\xAFF\x5\x428\x215\x2\xAFF\xEF\x3\x2\x2\x2"+
		"\xB00\xB01\a\x39\x2\x2\xB01\xB04\a\x314\x2\x2\xB02\xB03\aV\x2\x2\xB03"+
		"\xB05\a\x41\x2\x2\xB04\xB02\x3\x2\x2\x2\xB04\xB05\x3\x2\x2\x2\xB05\xB06"+
		"\x3\x2\x2\x2\xB06\xB07\x5\x428\x215\x2\xB07\xF1\x3\x2\x2\x2\xB08\xB09"+
		"\a\x39\x2\x2\xB09\xB0A\a\x20E\x2\x2\xB0A\xB0B\x5\x428\x215\x2\xB0B\xF3"+
		"\x3\x2\x2\x2\xB0C\xB0D\a\x39\x2\x2\xB0D\xB10\a\x95\x2\x2\xB0E\xB0F\aV"+
		"\x2\x2\xB0F\xB11\a\x41\x2\x2\xB10\xB0E\x3\x2\x2\x2\xB10\xB11\x3\x2\x2"+
		"\x2\xB11\xB1B\x3\x2\x2\x2\xB12\xB14\a\x36F\x2\x2\xB13\xB12\x3\x2\x2\x2"+
		"\xB13\xB14\x3\x2\x2\x2\xB14\xB18\x3\x2\x2\x2\xB15\xB16\x5\x428\x215\x2"+
		"\xB16\xB17\a\x368\x2\x2\xB17\xB19\x3\x2\x2\x2\xB18\xB15\x3\x2\x2\x2\xB18"+
		"\xB19\x3\x2\x2\x2\xB19\xB1A\x3\x2\x2\x2\xB1A\xB1C\x5\x428\x215\x2\xB1B"+
		"\xB13\x3\x2\x2\x2\xB1B\xB1C\x3\x2\x2\x2\xB1C\xF5\x3\x2\x2\x2\xB1D\xB1E"+
		"\a\x39\x2\x2\xB1E\xB21\a\x97\x2\x2\xB1F\xB20\aV\x2\x2\xB20\xB22\a\x41"+
		"\x2\x2\xB21\xB1F\x3\x2\x2\x2\xB21\xB22\x3\x2\x2\x2\xB22\xB23\x3\x2\x2"+
		"\x2\xB23\xB24\x5\x428\x215\x2\xB24\xF7\x3\x2\x2\x2\xB25\xB26\a\x39\x2"+
		"\x2\xB26\xB27\a\x218\x2\x2\xB27\xB28\a\x1E5\x2\x2\xB28\xB29\a\x182\x2"+
		"\x2\xB29\xB2A\x5\x428\x215\x2\xB2A\xF9\x3\x2\x2\x2\xB2B\xB2C\a\x39\x2"+
		"\x2\xB2C\xB2D\a\x21F\x2\x2\xB2D\xB30\a\x302\x2\x2\xB2E\xB2F\aV\x2\x2\xB2F"+
		"\xB31\a\x41\x2\x2\xB30\xB2E\x3\x2\x2\x2\xB30\xB31\x3\x2\x2\x2\xB31\xB35"+
		"\x3\x2\x2\x2\xB32\xB33\x5\x428\x215\x2\xB33\xB34\a\x368\x2\x2\xB34\xB36"+
		"\x3\x2\x2\x2\xB35\xB32\x3\x2\x2\x2\xB35\xB36\x3\x2\x2\x2\xB36\xB37\x3"+
		"\x2\x2\x2\xB37\xB38\x5\x428\x215\x2\xB38\xFB\x3\x2\x2\x2\xB39\xB3A\a\x39"+
		"\x2\x2\xB3A\xB3D\a\x226\x2\x2\xB3B\xB3C\aV\x2\x2\xB3C\xB3E\a\x41\x2\x2"+
		"\xB3D\xB3B\x3\x2\x2\x2\xB3D\xB3E\x3\x2\x2\x2\xB3E\xB4D\x3\x2\x2\x2\xB3F"+
		"\xB41\a\x36F\x2\x2\xB40\xB3F\x3\x2\x2\x2\xB40\xB41\x3\x2\x2\x2\xB41\xB45"+
		"\x3\x2\x2\x2\xB42\xB43\x5\x428\x215\x2\xB43\xB44\a\x368\x2\x2\xB44\xB46"+
		"\x3\x2\x2\x2\xB45\xB42\x3\x2\x2\x2\xB45\xB46\x3\x2\x2\x2\xB46\xB4A\x3"+
		"\x2\x2\x2\xB47\xB48\x5\x428\x215\x2\xB48\xB49\a\x368\x2\x2\xB49\xB4B\x3"+
		"\x2\x2\x2\xB4A\xB47\x3\x2\x2\x2\xB4A\xB4B\x3\x2\x2\x2\xB4B\xB4C\x3\x2"+
		"\x2\x2\xB4C\xB4E\x5\x428\x215\x2\xB4D\xB40\x3\x2\x2\x2\xB4D\xB4E\x3\x2"+
		"\x2\x2\xB4E\xFD\x3\x2\x2\x2\xB4F\xB50\a\x39\x2\x2\xB50\xB51\a\x31F\x2"+
		"\x2\xB51\xB52\a\xDB\x2\x2\xB52\xB53\x5\x428\x215\x2\xB53\xFF\x3\x2\x2"+
		"\x2\xB54\xB55\a\x39\x2\x2\xB55\xB56\a\x31F\x2\x2\xB56\xB57\a\xDB\x2\x2"+
		"\xB57\xB58\a\x32A\x2\x2\xB58\xB59\x5\x428\x215\x2\xB59\x101\x3\x2\x2\x2"+
		"\xB5A\xB5B\a\x39\x2\x2\xB5B\xB5C\a\x31F\x2\x2\xB5C\xB5D\a\x314\x2\x2\xB5D"+
		"\xB5E\x5\x428\x215\x2\xB5E\x103\x3\x2\x2\x2\xB5F\xB60\a\x39\x2\x2\xB60"+
		"\xB61\a\x320\x2\x2\xB61\xB62\x5\x428\x215\x2\xB62\x105\x3\x2\x2\x2\xB63"+
		"\xB65\a\x39\x2\x2\xB64\xB66\a\x10B\x2\x2\xB65\xB64\x3\x2\x2\x2\xB65\xB66"+
		"\x3\x2\x2\x2\xB66\xB67\x3\x2\x2\x2\xB67\xB68\a\x22C\x2\x2\xB68\xB6C\a"+
		"K\x2\x2\xB69\xB6A\x5\x428\x215\x2\xB6A\xB6B\a\x368\x2\x2\xB6B\xB6D\x3"+
		"\x2\x2\x2\xB6C\xB69\x3\x2\x2\x2\xB6C\xB6D\x3\x2\x2\x2\xB6D\xB6E\x3\x2"+
		"\x2\x2\xB6E\xB6F\x5\x428\x215\x2\xB6F\xB7B\a\x12\x2\x2\xB70\xB72\a\x36F"+
		"\x2\x2\xB71\xB70\x3\x2\x2\x2\xB71\xB72\x3\x2\x2\x2\xB72\xB73\x3\x2\x2"+
		"\x2\xB73\xB74\a\x291\x2\x2\xB74\xB7C\x5\x428\x215\x2\xB75\xB77\a\x36F"+
		"\x2\x2\xB76\xB75\x3\x2\x2\x2\xB76\xB77\x3\x2\x2\x2\xB77\xB78\x3\x2\x2"+
		"\x2\xB78\xB79\a\x281\x2\x2\xB79\xB7A\a_\x2\x2\xB7A\xB7C\x5\x428\x215\x2"+
		"\xB7B\xB71\x3\x2\x2\x2\xB7B\xB76\x3\x2\x2\x2\xB7C\xB7D\x3\x2\x2\x2\xB7D"+
		"\xB7B\x3\x2\x2\x2\xB7D\xB7E\x3\x2\x2\x2\xB7E\x107\x3\x2\x2\x2\xB7F\xB80"+
		"\a\x39\x2\x2\xB80\xB84\a\xA2\x2\x2\xB81\xB82\x5\x428\x215\x2\xB82\xB83"+
		"\a\x368\x2\x2\xB83\xB85\x3\x2\x2\x2\xB84\xB81\x3\x2\x2\x2\xB84\xB85\x3"+
		"\x2\x2\x2\xB85\xB86\x3\x2\x2\x2\xB86\xB87\x5\x428\x215\x2\xB87\xB88\a"+
		"\x368\x2\x2\xB88\xB89\x5\x428\x215\x2\xB89\x109\x3\x2\x2\x2\xB8A\xB8B"+
		"\a\x39\x2\x2\xB8B\xB8C\a\x243\x2\x2\xB8C\xB8D\a_\x2\x2\xB8D\xB91\x5\x428"+
		"\x215\x2\xB8E\xB8F\a\x1FF\x2\x2\xB8F\xB90\a\x1E6\x2\x2\xB90\xB92\a_\x2"+
		"\x2\xB91\xB8E\x3\x2\x2\x2\xB91\xB92\x3\x2\x2\x2\xB92\x10B\x3\x2\x2\x2"+
		"\xB93\xB94\a\x39\x2\x2\xB94\xB97\a\x245\x2\x2\xB95\xB96\aV\x2\x2\xB96"+
		"\xB98\a\x41\x2\x2\xB97\xB95\x3\x2\x2\x2\xB97\xB98\x3\x2\x2\x2\xB98\xB9C"+
		"\x3\x2\x2\x2\xB99\xB9A\x5\x428\x215\x2\xB9A\xB9B\a\x368\x2\x2\xB9B\xB9D"+
		"\x3\x2\x2\x2\xB9C\xB99\x3\x2\x2\x2\xB9C\xB9D\x3\x2\x2\x2\xB9D\xB9E\x3"+
		"\x2\x2\x2\xB9E\xB9F\x5\x428\x215\x2\xB9F\x10D\x3\x2\x2\x2\xBA0\xBA1\a"+
		"\x39\x2\x2\xBA1\xBA4\a\xB5\x2\x2\xBA2\xBA3\aV\x2\x2\xBA3\xBA5\a\x41\x2"+
		"\x2\xBA4\xBA2\x3\x2\x2\x2\xBA4\xBA5\x3\x2\x2\x2\xBA5\xBA6\x3\x2\x2\x2"+
		"\xBA6\xBA7\x5\x428\x215\x2\xBA7\x10F\x3\x2\x2\x2\xBA8\xBA9\a\x39\x2\x2"+
		"\xBA9\xBAA\a\x26F\x2\x2\xBAA\xBAB\aP\x2\x2\xBAB\xBAC\x5\x428\x215\x2\xBAC"+
		"\x111\x3\x2\x2\x2\xBAD\xBAE\a\x39\x2\x2\xBAE\xBAF\a\x270\x2\x2\xBAF\xBB0"+
		"\a\x97\x2\x2\xBB0\xBB4\a\xFF\x2\x2\xBB1\xBB2\x5\x428\x215\x2\xBB2\xBB3"+
		"\a\x368\x2\x2\xBB3\xBB5\x3\x2\x2\x2\xBB4\xBB1\x3\x2\x2\x2\xBB4\xBB5\x3"+
		"\x2\x2\x2\xBB5\xBB6\x3\x2\x2\x2\xBB6\xBB7\x5\x428\x215\x2\xBB7\x113\x3"+
		"\x2\x2\x2\xBB8\xBB9\a\x12D\x2\x2\xBB9\xBC8\a\xAC\x2\x2\xBBA\xBBC\a\x36F"+
		"\x2\x2\xBBB\xBBA\x3\x2\x2\x2\xBBB\xBBC\x3\x2\x2\x2\xBBC\xBC0\x3\x2\x2"+
		"\x2\xBBD\xBBE\x5\x428\x215\x2\xBBE\xBBF\a\x368\x2\x2\xBBF\xBC1\x3\x2\x2"+
		"\x2\xBC0\xBBD\x3\x2\x2\x2\xBC0\xBC1\x3\x2\x2\x2\xBC1\xBC2\x3\x2\x2\x2"+
		"\xBC2\xBC4\x5\x428\x215\x2\xBC3\xBBB\x3\x2\x2\x2\xBC4\xBC5\x3\x2\x2\x2"+
		"\xBC5\xBC3\x3\x2\x2\x2\xBC5\xBC6\x3\x2\x2\x2\xBC6\xBC9\x3\x2\x2\x2\xBC7"+
		"\xBC9\a\x4\x2\x2\xBC8\xBC3\x3\x2\x2\x2\xBC8\xBC7\x3\x2\x2\x2\xBC9\xBCA"+
		"\x3\x2\x2\x2\xBCA\xBD4\ap\x2\x2\xBCB\xBCC\x5\x428\x215\x2\xBCC\xBCD\a"+
		"\x368\x2\x2\xBCD\xBCF\x3\x2\x2\x2\xBCE\xBCB\x3\x2\x2\x2\xBCE\xBCF\x3\x2"+
		"\x2\x2\xBCF\xBD0\x3\x2\x2\x2\xBD0\xBD5\x5\x428\x215\x2\xBD1\xBD5\a+\x2"+
		"\x2\xBD2\xBD3\a\x4\x2\x2\xBD3\xBD5\a\x31F\x2\x2\xBD4\xBCE\x3\x2\x2\x2"+
		"\xBD4\xBD1\x3\x2\x2\x2\xBD4\xBD2\x3\x2\x2\x2\xBD5\x115\x3\x2\x2\x2\xBD6"+
		"\xBD7\a\x136\x2\x2\xBD7\xBE6\a\xAC\x2\x2\xBD8\xBDA\a\x36F\x2\x2\xBD9\xBD8"+
		"\x3\x2\x2\x2\xBD9\xBDA\x3\x2\x2\x2\xBDA\xBDE\x3\x2\x2\x2\xBDB\xBDC\x5"+
		"\x428\x215\x2\xBDC\xBDD\a\x368\x2\x2\xBDD\xBDF\x3\x2\x2\x2\xBDE\xBDB\x3"+
		"\x2\x2\x2\xBDE\xBDF\x3\x2\x2\x2\xBDF\xBE0\x3\x2\x2\x2\xBE0\xBE2\x5\x428"+
		"\x215\x2\xBE1\xBD9\x3\x2\x2\x2\xBE2\xBE3\x3\x2\x2\x2\xBE3\xBE1\x3\x2\x2"+
		"\x2\xBE3\xBE4\x3\x2\x2\x2\xBE4\xBE7\x3\x2\x2\x2\xBE5\xBE7\a\x4\x2\x2\xBE6"+
		"\xBE1\x3\x2\x2\x2\xBE6\xBE5\x3\x2\x2\x2\xBE7\xBE8\x3\x2\x2\x2\xBE8\xBF2"+
		"\ap\x2\x2\xBE9\xBEA\x5\x428\x215\x2\xBEA\xBEB\a\x368\x2\x2\xBEB\xBED\x3"+
		"\x2\x2\x2\xBEC\xBE9\x3\x2\x2\x2\xBEC\xBED\x3\x2\x2\x2\xBED\xBEE\x3\x2"+
		"\x2\x2\xBEE\xBF3\x5\x428\x215\x2\xBEF\xBF3\a+\x2\x2\xBF0\xBF1\a\x4\x2"+
		"\x2\xBF1\xBF3\a\x31F\x2\x2\xBF2\xBEC\x3\x2\x2\x2\xBF2\xBEF\x3\x2\x2\x2"+
		"\xBF2\xBF0\x3\x2\x2\x2\xBF3\x117\x3\x2\x2\x2\xBF4\xBF5\a\x188\x2\x2\xBF5"+
		"\xBF6\a\xA4\x2\x2\xBF6\xBF7\x5\x3EA\x1F6\x2\xBF7\xBF8\aW\x2\x2\xBF8\xBF9"+
		"\t\x1A\x2\x2\xBF9\xBFD\a\x1A8\x2\x2\xBFA\xBFB\a\x26B\x2\x2\xBFB\xBFE\a"+
		"\x355\x2\x2\xBFC\xBFE\a\x1BD\x2\x2\xBFD\xBFA\x3\x2\x2\x2\xBFD\xBFC\x3"+
		"\x2\x2\x2\xBFD\xBFE\x3\x2\x2\x2\xBFE\xC00\x3\x2\x2\x2\xBFF\xC01\a\x370"+
		"\x2\x2\xC00\xBFF\x3\x2\x2\x2\xC00\xC01\x3\x2\x2\x2\xC01\x119\x3\x2\x2"+
		"\x2\xC02\xC03\a\xAD\x2\x2\xC03\xC04\a\xA4\x2\x2\xC04\xC18\x5\x3EA\x1F6"+
		"\x2\xC05\xC06\a\xBD\x2\x2\xC06\xC07\a\x36D\x2\x2\xC07\xC08\a\x1D3\x2\x2"+
		"\xC08\xC12\a\x36D\x2\x2\xC09\xC0B\a\x36F\x2\x2\xC0A\xC09\x3\x2\x2\x2\xC0A"+
		"\xC0B\x3\x2\x2\x2\xC0B\xC10\x3\x2\x2\x2\xC0C\xC11\a\x355\x2\x2\xC0D\xC0E"+
		"\a\x355\x2\x2\xC0E\xC0F\a\xA8\x2\x2\xC0F\xC11\a\x355\x2\x2\xC10\xC0C\x3"+
		"\x2\x2\x2\xC10\xC0D\x3\x2\x2\x2\xC11\xC13\x3\x2\x2\x2\xC12\xC0A\x3\x2"+
		"\x2\x2\xC13\xC14\x3\x2\x2\x2\xC14\xC12\x3\x2\x2\x2\xC14\xC15\x3\x2\x2"+
		"\x2\xC15\xC16\x3\x2\x2\x2\xC16\xC17\a\x36E\x2\x2\xC17\xC19\a\x36E\x2\x2"+
		"\xC18\xC05\x3\x2\x2\x2\xC18\xC19\x3\x2\x2\x2\xC19\x11B\x3\x2\x2\x2\xC1A"+
		"\xC1B\a#\x2\x2\xC1B\xC1C\a\x1B\x2\x2\xC1C\xC1D\a\x2D8\x2\x2\xC1D\xC1E"+
		"\a_\x2\x2\xC1E\xC1F\x5\x428\x215\x2\xC1F\xC20\a\xBD\x2\x2\xC20\xC21\a"+
		"\x36D\x2\x2\xC21\xC22\a\x2CC\x2\x2\xC22\xC23\a\x35B\x2\x2\xC23\xC24\a"+
		"\x357\x2\x2\xC24\xC25\a\x36F\x2\x2\xC25\xC26\a\x2CB\x2\x2\xC26\xC27\a"+
		"\x35B\x2\x2\xC27\xC28\a\x357\x2\x2\xC28\xC29\a\x36E\x2\x2\xC29\x11D\x3"+
		"\x2\x2\x2\xC2A\xC2B\a\x5\x2\x2\xC2B\xC2C\a\x10F\x2\x2\xC2C\xC2D\x5\x428"+
		"\x215\x2\xC2D\xC2E\a\xBD\x2\x2\xC2E\xC2F\aS\x2\x2\xC2F\xC30\a\x35B\x2"+
		"\x2\xC30\xC35\a\x357\x2\x2\xC31\xC32\a\x36F\x2\x2\xC32\xC33\a\x21D\x2"+
		"\x2\xC33\xC34\a\x35B\x2\x2\xC34\xC36\a\x357\x2\x2\xC35\xC31\x3\x2\x2\x2"+
		"\xC35\xC36\x3\x2\x2\x2\xC36\x11F\x3\x2\x2\x2\xC37\xC38\a#\x2\x2\xC38\xC39"+
		"\a\x10F\x2\x2\xC39\xC3A\x5\x428\x215\x2\xC3A\xC3B\a\xBD\x2\x2\xC3B\xC3C"+
		"\aS\x2\x2\xC3C\xC3D\a\x35B\x2\x2\xC3D\xC42\a\x357\x2\x2\xC3E\xC3F\a\x36F"+
		"\x2\x2\xC3F\xC40\a\x21D\x2\x2\xC40\xC41\a\x35B\x2\x2\xC41\xC43\a\x357"+
		"\x2\x2\xC42\xC3E\x3\x2\x2\x2\xC42\xC43\x3\x2\x2\x2\xC43\xC48\x3\x2\x2"+
		"\x2\xC44\xC45\aG\x2\x2\xC45\xC46\a\x110\x2\x2\xC46\xC47\a\x1E6\x2\x2\xC47"+
		"\xC49\x5\x428\x215\x2\xC48\xC44\x3\x2\x2\x2\xC48\xC49\x3\x2\x2\x2\xC49"+
		"\x121\x3\x2\x2\x2\xC4A\xC4B\a\x5\x2\x2\xC4B\xC4C\a\x110\x2\x2\xC4C\xC4D"+
		"\a\x1E6\x2\x2\xC4D\xC52\x5\x428\x215\x2\xC4E\xC4F\aK\x2\x2\xC4F\xC50\a"+
		"\x45\x2\x2\xC50\xC51\a\x35B\x2\x2\xC51\xC53\a\x357\x2\x2\xC52\xC4E\x3"+
		"\x2\x2\x2\xC52\xC53\x3\x2\x2\x2\xC53\xC55\x3\x2\x2\x2\xC54\xC56\t\x1B"+
		"\x2\x2\xC55\xC54\x3\x2\x2\x2\xC55\xC56\x3\x2\x2\x2\xC56\x123\x3\x2\x2"+
		"\x2\xC57\xC58\a#\x2\x2\xC58\xC59\a\x110\x2\x2\xC59\xC5A\a\x1E6\x2\x2\xC5A"+
		"\xC5B\x5\x428\x215\x2\xC5B\xC5C\aK\x2\x2\xC5C\xC5D\a\x45\x2\x2\xC5D\xC5E"+
		"\a\x35B\x2\x2\xC5E\xC5F\a\x357\x2\x2\xC5F\x125\x3\x2\x2\x2\xC60\xC61\a"+
		"#\x2\x2\xC61\xC62\a\x2B1\x2\x2\xC62\xC63\a\x2F3\x2\x2\xC63\xC64\x5\x428"+
		"\x215\x2\xC64\xC69\ap\x2\x2\xC65\xC6A\a\x31F\x2\x2\xC66\xC6A\a+\x2\x2"+
		"\xC67\xC68\a\x1E9\x2\x2\xC68\xC6A\x5\x428\x215\x2\xC69\xC65\x3\x2\x2\x2"+
		"\xC69\xC66\x3\x2\x2\x2\xC69\xC67\x3\x2\x2\x2\xC6A\xC6D\x3\x2\x2\x2\xC6B"+
		"\xC6C\a\xBD\x2\x2\xC6C\xC6E\a\x2BA\x2\x2\xC6D\xC6B\x3\x2\x2\x2\xC6D\xC6E"+
		"\x3\x2\x2\x2\xC6E\xC6F\x3\x2\x2\x2\xC6F\xC74\aG\x2\x2\xC70\xC72\a\x36F"+
		"\x2\x2\xC71\xC70\x3\x2\x2\x2\xC71\xC72\x3\x2\x2\x2\xC72\xC73\x3\x2\x2"+
		"\x2\xC73\xC75\x5\x428\x215\x2\xC74\xC71\x3\x2\x2\x2\xC75\xC76\x3\x2\x2"+
		"\x2\xC76\xC74\x3\x2\x2\x2\xC76\xC77\x3\x2\x2\x2\xC77\xC78\x3\x2\x2\x2"+
		"\xC78\xC79\a\xA8\x2\x2\xC79\xC7A\a\x320\x2\x2\xC7A\xC7B\a\x357\x2\x2\xC7B"+
		"\xC7C\a\x36F\x2\x2\xC7C\xC7D\a\x357\x2\x2\xC7D\x127\x3\x2\x2\x2\xC7E\xC7F"+
		"\t\x18\x2\x2\xC7F\xC80\a\x2B1\x2\x2\xC80\xC81\a\x323\x2\x2\xC81\xC82\x5"+
		"\x428\x215\x2\xC82\xC83\ap\x2\x2\xC83\xCC7\a\x31F\x2\x2\xC84\xC86\a\x36F"+
		"\x2\x2\xC85\xC84\x3\x2\x2\x2\xC85\xC86\x3\x2\x2\x2\xC86\xC87\x3\x2\x2"+
		"\x2\xC87\xC88\a\x3\x2\x2\xC88\xC8C\a\x2B1\x2\x2\xC89\xC8A\x5\x428\x215"+
		"\x2\xC8A\xC8B\a\x368\x2\x2\xC8B\xC8D\x3\x2\x2\x2\xC8C\xC89\x3\x2\x2\x2"+
		"\xC8C\xC8D\x3\x2\x2\x2\xC8D\xC8E\x3\x2\x2\x2\xC8E\xC8F\x5\x428\x215\x2"+
		"\xC8F\xC90\a\x368\x2\x2\xC90\xC91\x5\x428\x215\x2\xC91\xCC2\x3\x2\x2\x2"+
		"\xC92\xCA0\a\x36D\x2\x2\xC93\xC9D\a\x9E\x2\x2\xC94\xC96\a\x36F\x2\x2\xC95"+
		"\xC94\x3\x2\x2\x2\xC95\xC96\x3\x2\x2\x2\xC96\xC97\x3\x2\x2\x2\xC97\xC98"+
		"\x5\x428\x215\x2\xC98\xC99\a\x35B\x2\x2\xC99\xC9A\t\x1C\x2\x2\xC9A\xC9C"+
		"\x3\x2\x2\x2\xC9B\xC95\x3\x2\x2\x2\xC9C\xC9F\x3\x2\x2\x2\xC9D\xC9B\x3"+
		"\x2\x2\x2\xC9D\xC9E\x3\x2\x2\x2\xC9E\xCA1\x3\x2\x2\x2\xC9F\xC9D\x3\x2"+
		"\x2\x2\xCA0\xC93\x3\x2\x2\x2\xCA0\xCA1\x3\x2\x2\x2\xCA1\xCB6\x3\x2\x2"+
		"\x2\xCA2\xCA3\a\xC5\x2\x2\xCA3\xCB0\a\x36D\x2\x2\xCA4\xCA6\a\x36F\x2\x2"+
		"\xCA5\xCA4\x3\x2\x2\x2\xCA5\xCA6\x3\x2\x2\x2\xCA6\xCAA\x3\x2\x2\x2\xCA7"+
		"\xCA8\x5\x428\x215\x2\xCA8\xCA9\a\x368\x2\x2\xCA9\xCAB\x3\x2\x2\x2\xCAA"+
		"\xCA7\x3\x2\x2\x2\xCAA\xCAB\x3\x2\x2\x2\xCAB\xCAC\x3\x2\x2\x2\xCAC\xCAD"+
		"\x5\x428\x215\x2\xCAD\xCAE\a\x368\x2\x2\xCAE\xCAF\x5\x428\x215\x2\xCAF"+
		"\xCB1\x3\x2\x2\x2\xCB0\xCA5\x3\x2\x2\x2\xCB1\xCB2\x3\x2\x2\x2\xCB2\xCB0"+
		"\x3\x2\x2\x2\xCB2\xCB3\x3\x2\x2\x2\xCB3\xCB4\x3\x2\x2\x2\xCB4\xCB5\a\x36E"+
		"\x2\x2\xCB5\xCB7\x3\x2\x2\x2\xCB6\xCA2\x3\x2\x2\x2\xCB7\xCB8\x3\x2\x2"+
		"\x2\xCB8\xCB6\x3\x2\x2\x2\xCB8\xCB9\x3\x2\x2\x2\xCB9\xCBC\x3\x2\x2\x2"+
		"\xCBA\xCBB\a\xBB\x2\x2\xCBB\xCBD\x5\x12A\x96\x2\xCBC\xCBA\x3\x2\x2\x2"+
		"\xCBC\xCBD\x3\x2\x2\x2\xCBD\xCBE\x3\x2\x2\x2\xCBE\xCBF\a\x36E\x2\x2\xCBF"+
		"\xCC1\x3\x2\x2\x2\xCC0\xC92\x3\x2\x2\x2\xCC1\xCC4\x3\x2\x2\x2\xCC2\xCC0"+
		"\x3\x2\x2\x2\xCC2\xCC3\x3\x2\x2\x2\xCC3\xCC6\x3\x2\x2\x2\xCC4\xCC2\x3"+
		"\x2\x2\x2\xCC5\xC85\x3\x2\x2\x2\xCC6\xCC9\x3\x2\x2\x2\xCC7\xCC5\x3\x2"+
		"\x2\x2\xCC7\xCC8\x3\x2\x2\x2\xCC8\xCDA\x3\x2\x2\x2\xCC9\xCC7\x3\x2\x2"+
		"\x2\xCCA\xCCC\a\x36F\x2\x2\xCCB\xCCA\x3\x2\x2\x2\xCCB\xCCC\x3\x2\x2\x2"+
		"\xCCC\xCCD\x3\x2\x2\x2\xCCD\xCCE\a\x39\x2\x2\xCCE\xCD2\a\x2B1\x2\x2\xCCF"+
		"\xCD0\x5\x428\x215\x2\xCD0\xCD1\a\x368\x2\x2\xCD1\xCD3\x3\x2\x2\x2\xCD2"+
		"\xCCF\x3\x2\x2\x2\xCD2\xCD3\x3\x2\x2\x2\xCD3\xCD4\x3\x2\x2\x2\xCD4\xCD5"+
		"\x5\x428\x215\x2\xCD5\xCD6\a\x368\x2\x2\xCD6\xCD7\x5\x428\x215\x2\xCD7"+
		"\xCD9\x3\x2\x2\x2\xCD8\xCCB\x3\x2\x2\x2\xCD9\xCDC\x3\x2\x2\x2\xCDA\xCD8"+
		"\x3\x2\x2\x2\xCDA\xCDB\x3\x2\x2\x2\xCDB\xD06\x3\x2\x2\x2\xCDC\xCDA\x3"+
		"\x2\x2\x2\xCDD\xCDE\a\x3\x2\x2\xCDE\xCE2\a\x33B\x2\x2\xCDF\xCE0\x5\x428"+
		"\x215\x2\xCE0\xCE1\a\x368\x2\x2\xCE1\xCE3\x3\x2\x2\x2\xCE2\xCDF\x3\x2"+
		"\x2\x2\xCE2\xCE3\x3\x2\x2\x2\xCE3\xCE4\x3\x2\x2\x2\xCE4\xCE5\x5\x428\x215"+
		"\x2\xCE5\xCE6\a\x368\x2\x2\xCE6\xCE7\x5\x428\x215\x2\xCE7\xD01\x3\x2\x2"+
		"\x2\xCE8\xCE9\a\x36D\x2\x2\xCE9\xCF9\a\x9E\x2\x2\xCEA\xCEC\a\x36F\x2\x2"+
		"\xCEB\xCEA\x3\x2\x2\x2\xCEB\xCEC\x3\x2\x2\x2\xCEC\xCED\x3\x2\x2\x2\xCED"+
		"\xCEE\x5\x428\x215\x2\xCEE\xCF7\a\x35B\x2\x2\xCEF\xCF1\a\x36D\x2\x2\xCF0"+
		"\xCEF\x3\x2\x2\x2\xCF0\xCF1\x3\x2\x2\x2\xCF1\xCF2\x3\x2\x2\x2\xCF2\xCF4"+
		"\a\x355\x2\x2\xCF3\xCF5\a\x36E\x2\x2\xCF4\xCF3\x3\x2\x2\x2\xCF4\xCF5\x3"+
		"\x2\x2\x2\xCF5\xCF8\x3\x2\x2\x2\xCF6\xCF8\a\x357\x2\x2\xCF7\xCF0\x3\x2"+
		"\x2\x2\xCF7\xCF6\x3\x2\x2\x2\xCF8\xCFA\x3\x2\x2\x2\xCF9\xCEB\x3\x2\x2"+
		"\x2\xCFA\xCFB\x3\x2\x2\x2\xCFB\xCF9\x3\x2\x2\x2\xCFB\xCFC\x3\x2\x2\x2"+
		"\xCFC\xCFD\x3\x2\x2\x2\xCFD\xCFE\a\x36E\x2\x2\xCFE\xD00\x3\x2\x2\x2\xCFF"+
		"\xCE8\x3\x2\x2\x2\xD00\xD03\x3\x2\x2\x2\xD01\xCFF\x3\x2\x2\x2\xD01\xD02"+
		"\x3\x2\x2\x2\xD02\xD05\x3\x2\x2\x2\xD03\xD01\x3\x2\x2\x2\xD04\xCDD\x3"+
		"\x2\x2\x2\xD05\xD08\x3\x2\x2\x2\xD06\xD04\x3\x2\x2\x2\xD06\xD07\x3\x2"+
		"\x2\x2\xD07\xD16\x3\x2\x2\x2\xD08\xD06\x3\x2\x2\x2\xD09\xD0A\a\x39\x2"+
		"\x2\xD0A\xD0E\a\x33B\x2\x2\xD0B\xD0C\x5\x428\x215\x2\xD0C\xD0D\a\x368"+
		"\x2\x2\xD0D\xD0F\x3\x2\x2\x2\xD0E\xD0B\x3\x2\x2\x2\xD0E\xD0F\x3\x2\x2"+
		"\x2\xD0F\xD10\x3\x2\x2\x2\xD10\xD11\x5\x428\x215\x2\xD11\xD12\a\x368\x2"+
		"\x2\xD12\xD13\x5\x428\x215\x2\xD13\xD15\x3\x2\x2\x2\xD14\xD09\x3\x2\x2"+
		"\x2\xD15\xD18\x3\x2\x2\x2\xD16\xD14\x3\x2\x2\x2\xD16\xD17\x3\x2\x2\x2"+
		"\xD17\xD5A\x3\x2\x2\x2\xD18\xD16\x3\x2\x2\x2\xD19\xD1A\a\xBD\x2\x2\xD1A"+
		"\xD22\a\x36D\x2\x2\xD1B\xD1D\a\x36F\x2\x2\xD1C\xD1B\x3\x2\x2\x2\xD1C\xD1D"+
		"\x3\x2\x2\x2\xD1D\xD1E\x3\x2\x2\x2\xD1E\xD1F\a\x2D9\x2\x2\xD1F\xD20\a"+
		"\x35B\x2\x2\xD20\xD21\a\x355\x2\x2\xD21\xD23\t\x1D\x2\x2\xD22\xD1C\x3"+
		"\x2\x2\x2\xD22\xD23\x3\x2\x2\x2\xD23\xD2A\x3\x2\x2\x2\xD24\xD26\a\x36F"+
		"\x2\x2\xD25\xD24\x3\x2\x2\x2\xD25\xD26\x3\x2\x2\x2\xD26\xD27\x3\x2\x2"+
		"\x2\xD27\xD28\a\x2B3\x2\x2\xD28\xD29\a\x35B\x2\x2\xD29\xD2B\t\x1E\x2\x2"+
		"\xD2A\xD25\x3\x2\x2\x2\xD2A\xD2B\x3\x2\x2\x2\xD2B\xD36\x3\x2\x2\x2\xD2C"+
		"\xD2E\a\x36F\x2\x2\xD2D\xD2C\x3\x2\x2\x2\xD2D\xD2E\x3\x2\x2\x2\xD2E\xD2F"+
		"\x3\x2\x2\x2\xD2F\xD30\a\x2DC\x2\x2\xD30\xD34\a\x35B\x2\x2\xD31\xD32\a"+
		"\x355\x2\x2\xD32\xD35\a\x21C\x2\x2\xD33\xD35\a\x2C6\x2\x2\xD34\xD31\x3"+
		"\x2\x2\x2\xD34\xD33\x3\x2\x2\x2\xD35\xD37\x3\x2\x2\x2\xD36\xD2D\x3\x2"+
		"\x2\x2\xD36\xD37\x3\x2\x2\x2\xD37\xD3F\x3\x2\x2\x2\xD38\xD3A\a\x36F\x2"+
		"\x2\xD39\xD38\x3\x2\x2\x2\xD39\xD3A\x3\x2\x2\x2\xD3A\xD3B\x3\x2\x2\x2"+
		"\xD3B\xD3C\a\x2DE\x2\x2\xD3C\xD3D\a\x35B\x2\x2\xD3D\xD3E\a\x355\x2\x2"+
		"\xD3E\xD40\t\x1D\x2\x2\xD3F\xD39\x3\x2\x2\x2\xD3F\xD40\x3\x2\x2\x2\xD40"+
		"\xD47\x3\x2\x2\x2\xD41\xD43\a\x36F\x2\x2\xD42\xD41\x3\x2\x2\x2\xD42\xD43"+
		"\x3\x2\x2\x2\xD43\xD44\x3\x2\x2\x2\xD44\xD45\a\x2E4\x2\x2\xD45\xD46\a"+
		"\x35B\x2\x2\xD46\xD48\t\x1F\x2\x2\xD47\xD42\x3\x2\x2\x2\xD47\xD48\x3\x2"+
		"\x2\x2\xD48\xD4F\x3\x2\x2\x2\xD49\xD4B\a\x36F\x2\x2\xD4A\xD49\x3\x2\x2"+
		"\x2\xD4A\xD4B\x3\x2\x2\x2\xD4B\xD4C\x3\x2\x2\x2\xD4C\xD4D\a\x33E\x2\x2"+
		"\xD4D\xD4E\a\x35B\x2\x2\xD4E\xD50\t\t\x2\x2\xD4F\xD4A\x3\x2\x2\x2\xD4F"+
		"\xD50\x3\x2\x2\x2\xD50\xD57\x3\x2\x2\x2\xD51\xD53\a\x36F\x2\x2\xD52\xD51"+
		"\x3\x2\x2\x2\xD52\xD53\x3\x2\x2\x2\xD53\xD54\x3\x2\x2\x2\xD54\xD55\a\x334"+
		"\x2\x2\xD55\xD56\a\x35B\x2\x2\xD56\xD58\t\t\x2\x2\xD57\xD52\x3\x2\x2\x2"+
		"\xD57\xD58\x3\x2\x2\x2\xD58\xD59\x3\x2\x2\x2\xD59\xD5B\a\x36E\x2\x2\xD5A"+
		"\xD19\x3\x2\x2\x2\xD5A\xD5B\x3\x2\x2\x2\xD5B\xD5F\x3\x2\x2\x2\xD5C\xD5D"+
		"\a\x330\x2\x2\xD5D\xD5E\a\x35B\x2\x2\xD5E\xD60\t \x2\x2\xD5F\xD5C\x3\x2"+
		"\x2\x2\xD5F\xD60\x3\x2\x2\x2\xD60\x129\x3\x2\x2\x2\xD61\xD63\a\x36F\x2"+
		"\x2\xD62\xD61\x3\x2\x2\x2\xD62\xD63\x3\x2\x2\x2\xD63\xD65\x3\x2\x2\x2"+
		"\xD64\xD66\t!\x2\x2\xD65\xD64\x3\x2\x2\x2\xD65\xD66\x3\x2\x2\x2\xD66\xD68"+
		"\x3\x2\x2\x2\xD67\xD69\aj\x2\x2\xD68\xD67\x3\x2\x2\x2\xD68\xD69\x3\x2"+
		"\x2\x2\xD69\xD6F\x3\x2\x2\x2\xD6A\xD70\x5\x12C\x97\x2\xD6B\xD6C\a\x36D"+
		"\x2\x2\xD6C\xD6D\x5\x12A\x96\x2\xD6D\xD6E\a\x36E\x2\x2\xD6E\xD70\x3\x2"+
		"\x2\x2\xD6F\xD6A\x3\x2\x2\x2\xD6F\xD6B\x3\x2\x2\x2\xD70\xD72\x3\x2\x2"+
		"\x2\xD71\xD62\x3\x2\x2\x2\xD72\xD73\x3\x2\x2\x2\xD73\xD71\x3\x2\x2\x2"+
		"\xD73\xD74\x3\x2\x2\x2\xD74\x12B\x3\x2\x2\x2\xD75\xD7B\x5\x12E\x98\x2"+
		"\xD76\xD77\a\x36D\x2\x2\xD77\xD78\x5\x12A\x96\x2\xD78\xD79\a\x36E\x2\x2"+
		"\xD79\xD7B\x3\x2\x2\x2\xD7A\xD75\x3\x2\x2\x2\xD7A\xD76\x3\x2\x2\x2\xD7B"+
		"\x12D\x3\x2\x2\x2\xD7C\xD99\x5\x428\x215\x2\xD7D\xD88\x5\x428\x215\x2"+
		"\xD7E\xD7F\x5\x428\x215\x2\xD7F\xD80\a\x368\x2\x2\xD80\xD82\x3\x2\x2\x2"+
		"\xD81\xD7E\x3\x2\x2\x2\xD81\xD82\x3\x2\x2\x2\xD82\xD83\x3\x2\x2\x2\xD83"+
		"\xD84\x5\x428\x215\x2\xD84\xD85\a\x368\x2\x2\xD85\xD86\x5\x428\x215\x2"+
		"\xD86\xD88\x3\x2\x2\x2\xD87\xD7D\x3\x2\x2\x2\xD87\xD81\x3\x2\x2\x2\xD88"+
		"\xD94\x3\x2\x2\x2\xD89\xD95\a\x35B\x2\x2\xD8A\xD8B\a\x35D\x2\x2\xD8B\xD95"+
		"\a\x35C\x2\x2\xD8C\xD8D\a\x35E\x2\x2\xD8D\xD95\a\x35B\x2\x2\xD8E\xD95"+
		"\a\x35C\x2\x2\xD8F\xD90\a\x35C\x2\x2\xD90\xD95\a\x35B\x2\x2\xD91\xD95"+
		"\a\x35D\x2\x2\xD92\xD93\a\x35D\x2\x2\xD93\xD95\a\x35B\x2\x2\xD94\xD89"+
		"\x3\x2\x2\x2\xD94\xD8A\x3\x2\x2\x2\xD94\xD8C\x3\x2\x2\x2\xD94\xD8E\x3"+
		"\x2\x2\x2\xD94\xD8F\x3\x2\x2\x2\xD94\xD91\x3\x2\x2\x2\xD94\xD92\x3\x2"+
		"\x2\x2\xD95\xD96\x3\x2\x2\x2\xD96\xD97\t\x1C\x2\x2\xD97\xD99\x3\x2\x2"+
		"\x2\xD98\xD7C\x3\x2\x2\x2\xD98\xD87\x3\x2\x2\x2\xD99\xDB5\x3\x2\x2\x2"+
		"\xD9A\xD9B\x5\x428\x215\x2\xD9B\xD9C\a\x368\x2\x2\xD9C\xD9E\x3\x2\x2\x2"+
		"\xD9D\xD9A\x3\x2\x2\x2\xD9D\xD9E\x3\x2\x2\x2\xD9E\xD9F\x3\x2\x2\x2\xD9F"+
		"\xDA0\x5\x428\x215\x2\xDA0\xDA1\a\x368\x2\x2\xDA1\xDA2\x5\x428\x215\x2"+
		"\xDA2\xDB0\a\x36D\x2\x2\xDA3\xDB1\x5\x428\x215\x2\xDA4\xDA5\x5\x428\x215"+
		"\x2\xDA5\xDA6\a\x368\x2\x2\xDA6\xDA8\x3\x2\x2\x2\xDA7\xDA4\x3\x2\x2\x2"+
		"\xDA7\xDA8\x3\x2\x2\x2\xDA8\xDA9\x3\x2\x2\x2\xDA9\xDAA\x5\x428\x215\x2"+
		"\xDAA\xDAB\a\x368\x2\x2\xDAB\xDAC\x5\x428\x215\x2\xDAC\xDAD\x3\x2\x2\x2"+
		"\xDAD\xDAE\a\x36F\x2\x2\xDAE\xDAF\t\x1C\x2\x2\xDAF\xDB1\x3\x2\x2\x2\xDB0"+
		"\xDA3\x3\x2\x2\x2\xDB0\xDA7\x3\x2\x2\x2\xDB1\xDB2\x3\x2\x2\x2\xDB2\xDB3"+
		"\a\x36E\x2\x2\xDB3\xDB5\x3\x2\x2\x2\xDB4\xD98\x3\x2\x2\x2\xDB4\xD9D\x3"+
		"\x2\x2\x2\xDB5\x12F\x3\x2\x2\x2\xDB6\xDB7\a\x5\x2\x2\xDB7\xDB8\a\x43\x2"+
		"\x2\xDB8\xDB9\a\x114\x2\x2\xDB9\xDBA\a\x329\x2\x2\xDBA\xDBB\x5\x428\x215"+
		"\x2\xDBB\xDCB\a\x9E\x2\x2\xDBC\xDBD\a\x187\x2\x2\xDBD\xDBE\a\x35B\x2\x2"+
		"\xDBE\xDC0\a\x357\x2\x2\xDBF\xDC1\a\x36F\x2\x2\xDC0\xDBF\x3\x2\x2\x2\xDC0"+
		"\xDC1\x3\x2\x2\x2\xDC1\xDCC\x3\x2\x2\x2\xDC2\xDC3\a\x209\x2\x2\xDC3\xDC4"+
		"\a\x35B\x2\x2\xDC4\xDC6\a\x357\x2\x2\xDC5\xDC7\a\x36F\x2\x2\xDC6\xDC5"+
		"\x3\x2\x2\x2\xDC6\xDC7\x3\x2\x2\x2\xDC7\xDCC\x3\x2\x2\x2\xDC8\xDC9\a\x10F"+
		"\x2\x2\xDC9\xDCA\a\x35B\x2\x2\xDCA\xDCC\x5\x428\x215\x2\xDCB\xDBC\x3\x2"+
		"\x2\x2\xDCB\xDC2\x3\x2\x2\x2\xDCB\xDC8\x3\x2\x2\x2\xDCC\xDCD\x3\x2\x2"+
		"\x2\xDCD\xDCB\x3\x2\x2\x2\xDCD\xDCE\x3\x2\x2\x2\xDCE\xDE6\x3\x2\x2\x2"+
		"\xDCF\xDD0\a\x5\x2\x2\xDD0\xDD1\a\x43\x2\x2\xDD1\xDD2\a\x114\x2\x2\xDD2"+
		"\xDD3\a\x329\x2\x2\xDD3\xDD4\x5\x428\x215\x2\xDD4\xDD5\a\xBD\x2\x2\xDD5"+
		"\xDD6\a\x36D\x2\x2\xDD6\xDD7\a\x25A\x2\x2\xDD7\xDD8\a\x35B\x2\x2\xDD8"+
		"\xDD9\a\xEF\x2\x2\xDD9\xDDA\a\x36F\x2\x2\xDDA\xDDB\a\x187\x2\x2\xDDB\xDDC"+
		"\a\x35B\x2\x2\xDDC\xDE1\a\x357\x2\x2\xDDD\xDDE\a\x36F\x2\x2\xDDE\xDDF"+
		"\a\x10F\x2\x2\xDDF\xDE0\a\x35B\x2\x2\xDE0\xDE2\x5\x428\x215\x2\xDE1\xDDD"+
		"\x3\x2\x2\x2\xDE1\xDE2\x3\x2\x2\x2\xDE2\xDE3\x3\x2\x2\x2\xDE3\xDE4\a\x36E"+
		"\x2\x2\xDE4\xDE6\x3\x2\x2\x2\xDE5\xDB6\x3\x2\x2\x2\xDE5\xDCF\x3\x2\x2"+
		"\x2\xDE6\x131\x3\x2\x2\x2\xDE7\xDE8\a\x5\x2\x2\xDE8\xDE9\a\x43\x2\x2\xDE9"+
		"\xDEA\a\x2CE\x2\x2\xDEA\xDED\x5\x428\x215\x2\xDEB\xDEC\a\n\x2\x2\xDEC"+
		"\xDEE\x5\x428\x215\x2\xDED\xDEB\x3\x2\x2\x2\xDED\xDEE\x3\x2\x2\x2\xDEE"+
		"\xDEF\x3\x2\x2\x2\xDEF\xDF0\t\"\x2\x2\xDF0\xDF1\a\x36D\x2\x2\xDF1\xDF2"+
		"\a\x106\x2\x2\xDF2\xDF6\a\x35B\x2\x2\xDF3\xDF7\a\x357\x2\x2\xDF4\xDF7"+
		"\a\x358\x2\x2\xDF5\xDF7\a\x2EC\x2\x2\xDF6\xDF3\x3\x2\x2\x2\xDF6\xDF4\x3"+
		"\x2\x2\x2\xDF6\xDF5\x3\x2\x2\x2\xDF7\xDF8\x3\x2\x2\x2\xDF8\xDF9\a\x36F"+
		"\x2\x2\xDF9\xDFA\a\x301\x2\x2\xDFA\xDFC\a\x35B\x2\x2\xDFB\xDFD\t#\x2\x2"+
		"\xDFC\xDFB\x3\x2\x2\x2\xDFC\xDFD\x3\x2\x2\x2\xDFD\xDFE\x3\x2\x2\x2\xDFE"+
		"\xDFF\a\x36E\x2\x2\xDFF\xE00\x3\x2\x2\x2\xE00\xE0A\a\xBD\x2\x2\xE01\xE03"+
		"\a\x36F\x2\x2\xE02\xE01\x3\x2\x2\x2\xE02\xE03\x3\x2\x2\x2\xE03\xE04\x3"+
		"\x2\x2\x2\xE04\xE05\a\x2CD\x2\x2\xE05\xE06\a\x35B\x2\x2\xE06\xE0B\t$\x2"+
		"\x2\xE07\xE08\a\x2A5\x2\x2\xE08\xE09\a\x35B\x2\x2\xE09\xE0B\x5\x428\x215"+
		"\x2\xE0A\xE02\x3\x2\x2\x2\xE0A\xE07\x3\x2\x2\x2\xE0B\xE0C\x3\x2\x2\x2"+
		"\xE0C\xE0A\x3\x2\x2\x2\xE0C\xE0D\x3\x2\x2\x2\xE0D\xE0E\x3\x2\x2\x2\xE0E"+
		"\xE0F\a\x36E\x2\x2\xE0F\x133\x3\x2\x2\x2\xE10\xE11\a#\x2\x2\xE11\xE12"+
		"\a\x43\x2\x2\xE12\xE13\a\x2CE\x2\x2\xE13\xE16\x5\x428\x215\x2\xE14\xE15"+
		"\a\n\x2\x2\xE15\xE17\x5\x428\x215\x2\xE16\xE14\x3\x2\x2\x2\xE16\xE17\x3"+
		"\x2\x2\x2\xE17\xE18\x3\x2\x2\x2\xE18\xE1A\aK\x2\x2\xE19\xE1B\a\x36F\x2"+
		"\x2\xE1A\xE19\x3\x2\x2\x2\xE1A\xE1B\x3\x2\x2\x2\xE1B\xE1D\x3\x2\x2\x2"+
		"\xE1C\xE1E\a\x36D\x2\x2\xE1D\xE1C\x3\x2\x2\x2\xE1D\xE1E\x3\x2\x2\x2\xE1E"+
		"\xE21\x3\x2\x2\x2\xE1F\xE20\a\x106\x2\x2\xE20\xE22\a\x35B\x2\x2\xE21\xE1F"+
		"\x3\x2\x2\x2\xE21\xE22\x3\x2\x2\x2\xE22\xE26\x3\x2\x2\x2\xE23\xE27\a\x357"+
		"\x2\x2\xE24\xE27\a\x358\x2\x2\xE25\xE27\a\x2EC\x2\x2\xE26\xE23\x3\x2\x2"+
		"\x2\xE26\xE24\x3\x2\x2\x2\xE26\xE25\x3\x2\x2\x2\xE27\xE2F\x3\x2\x2\x2"+
		"\xE28\xE29\a\x36F\x2\x2\xE29\xE2A\a\x301\x2\x2\xE2A\xE2C\a\x35B\x2\x2"+
		"\xE2B\xE2D\t#\x2\x2\xE2C\xE2B\x3\x2\x2\x2\xE2C\xE2D\x3\x2\x2\x2\xE2D\xE2E"+
		"\x3\x2\x2\x2\xE2E\xE30\a\x36E\x2\x2\xE2F\xE28\x3\x2\x2\x2\xE2F\xE30\x3"+
		"\x2\x2\x2\xE30\xE40\x3\x2\x2\x2\xE31\xE3B\a\xBD\x2\x2\xE32\xE34\a\x36F"+
		"\x2\x2\xE33\xE32\x3\x2\x2\x2\xE33\xE34\x3\x2\x2\x2\xE34\xE35\x3\x2\x2"+
		"\x2\xE35\xE36\a\x2CD\x2\x2\xE36\xE37\a\x35B\x2\x2\xE37\xE3C\t$\x2\x2\xE38"+
		"\xE39\a\x2A5\x2\x2\xE39\xE3A\a\x35B\x2\x2\xE3A\xE3C\x5\x428\x215\x2\xE3B"+
		"\xE33\x3\x2\x2\x2\xE3B\xE38\x3\x2\x2\x2\xE3C\xE3D\x3\x2\x2\x2\xE3D\xE3B"+
		"\x3\x2\x2\x2\xE3D\xE3E\x3\x2\x2\x2\xE3E\xE3F\x3\x2\x2\x2\xE3F\xE41\a\x36E"+
		"\x2\x2\xE40\xE31\x3\x2\x2\x2\xE40\xE41\x3\x2\x2\x2\xE41\x135\x3\x2\x2"+
		"\x2\xE42\xE43\a\x5\x2\x2\xE43\xE44\a\x43\x2\x2\xE44\xE45\a\x208\x2\x2"+
		"\xE45\xE48\a\x1DA\x2\x2\xE46\xE49\x5\x428\x215\x2\xE47\xE49\a\x11E\x2"+
		"\x2\xE48\xE46\x3\x2\x2\x2\xE48\xE47\x3\x2\x2\x2\xE49\xE4A\x3\x2\x2\x2"+
		"\xE4A\xE4B\a\xBD\x2\x2\xE4B\xE4C\a\x36D\x2\x2\xE4C\xE4D\a\x191\x2\x2\xE4D"+
		"\xE4E\a\x35B\x2\x2\xE4E\xE74\a\x355\x2\x2\xE4F\xE51\a\x36F\x2\x2\xE50"+
		"\xE4F\x3\x2\x2\x2\xE50\xE51\x3\x2\x2\x2\xE51\xE52\x3\x2\x2\x2\xE52\xE53"+
		"\a\xCC\x2\x2\xE53\xE54\a\x10C\x2\x2\xE54\xE62\a\x35B\x2\x2\xE55\xE63\a"+
		"\xDD\x2\x2\xE56\xE58\a\x36F\x2\x2\xE57\xE56\x3\x2\x2\x2\xE57\xE58\x3\x2"+
		"\x2\x2\xE58\xE59\x3\x2\x2\x2\xE59\xE5A\a\x355\x2\x2\xE5A\xE5B\a\xA8\x2"+
		"\x2\xE5B\xE5F\a\x355\x2\x2\xE5C\xE5D\a\x36F\x2\x2\xE5D\xE5F\a\x355\x2"+
		"\x2\xE5E\xE57\x3\x2\x2\x2\xE5E\xE5C\x3\x2\x2\x2\xE5F\xE60\x3\x2\x2\x2"+
		"\xE60\xE5E\x3\x2\x2\x2\xE60\xE61\x3\x2\x2\x2\xE61\xE63\x3\x2\x2\x2\xE62"+
		"\xE55\x3\x2\x2\x2\xE62\xE5E\x3\x2\x2\x2\xE63\xE75\x3\x2\x2\x2\xE64\xE65"+
		"\a\x1BF\x2\x2\xE65\xE70\a\x35B\x2\x2\xE66\xE68\a\x36F\x2\x2\xE67\xE66"+
		"\x3\x2\x2\x2\xE67\xE68\x3\x2\x2\x2\xE68\xE69\x3\x2\x2\x2\xE69\xE6A\a\x355"+
		"\x2\x2\xE6A\xE6B\a\xA8\x2\x2\xE6B\xE71\a\x355\x2\x2\xE6C\xE6E\a\x36F\x2"+
		"\x2\xE6D\xE6C\x3\x2\x2\x2\xE6D\xE6E\x3\x2\x2\x2\xE6E\xE6F\x3\x2\x2\x2"+
		"\xE6F\xE71\a\x355\x2\x2\xE70\xE67\x3\x2\x2\x2\xE70\xE6D\x3\x2\x2\x2\xE71"+
		"\xE72\x3\x2\x2\x2\xE72\xE70\x3\x2\x2\x2\xE72\xE73\x3\x2\x2\x2\xE73\xE75"+
		"\x3\x2\x2\x2\xE74\xE50\x3\x2\x2\x2\xE74\xE64\x3\x2\x2\x2\xE75\xE7C\x3"+
		"\x2\x2\x2\xE76\xE78\a\x36F\x2\x2\xE77\xE76\x3\x2\x2\x2\xE77\xE78\x3\x2"+
		"\x2\x2\xE78\xE79\x3\x2\x2\x2\xE79\xE7A\a\x195\x2\x2\xE7A\xE7B\a\x35B\x2"+
		"\x2\xE7B\xE7D\a\x355\x2\x2\xE7C\xE77\x3\x2\x2\x2\xE7C\xE7D\x3\x2\x2\x2"+
		"\xE7D\xE84\x3\x2\x2\x2\xE7E\xE80\a\x36F\x2\x2\xE7F\xE7E\x3\x2\x2\x2\xE7F"+
		"\xE80\x3\x2\x2\x2\xE80\xE81\x3\x2\x2\x2\xE81\xE82\a\x196\x2\x2\xE82\xE83"+
		"\a\x35B\x2\x2\xE83\xE85\a\x355\x2\x2\xE84\xE7F\x3\x2\x2\x2\xE84\xE85\x3"+
		"\x2\x2\x2\xE85\xE86\x3\x2\x2\x2\xE86\xE87\a\x36E\x2\x2\xE87\x137\x3\x2"+
		"\x2\x2\xE88\xE89\a#\x2\x2\xE89\xE8A\a\x43\x2\x2\xE8A\xE8B\a\x208\x2\x2"+
		"\xE8B\xE8C\a\x1DA\x2\x2\xE8C\xE8D\x5\x428\x215\x2\xE8D\xE8E\a\xBD\x2\x2"+
		"\xE8E\xE8F\a\x36D\x2\x2\xE8F\xE90\a\x191\x2\x2\xE90\xE91\a\x35B\x2\x2"+
		"\xE91\xEB7\a\x355\x2\x2\xE92\xE94\a\x36F\x2\x2\xE93\xE92\x3\x2\x2\x2\xE93"+
		"\xE94\x3\x2\x2\x2\xE94\xE95\x3\x2\x2\x2\xE95\xE96\a\xCC\x2\x2\xE96\xE97"+
		"\a\x10C\x2\x2\xE97\xEA5\a\x35B\x2\x2\xE98\xEA6\a\xDD\x2\x2\xE99\xE9B\a"+
		"\x36F\x2\x2\xE9A\xE99\x3\x2\x2\x2\xE9A\xE9B\x3\x2\x2\x2\xE9B\xE9C\x3\x2"+
		"\x2\x2\xE9C\xE9D\a\x355\x2\x2\xE9D\xE9E\a\xA8\x2\x2\xE9E\xEA2\a\x355\x2"+
		"\x2\xE9F\xEA0\a\x36F\x2\x2\xEA0\xEA2\a\x355\x2\x2\xEA1\xE9A\x3\x2\x2\x2"+
		"\xEA1\xE9F\x3\x2\x2\x2\xEA2\xEA3\x3\x2\x2\x2\xEA3\xEA1\x3\x2\x2\x2\xEA3"+
		"\xEA4\x3\x2\x2\x2\xEA4\xEA6\x3\x2\x2\x2\xEA5\xE98\x3\x2\x2\x2\xEA5\xEA1"+
		"\x3\x2\x2\x2\xEA6\xEB8\x3\x2\x2\x2\xEA7\xEA8\a\x1BF\x2\x2\xEA8\xEB3\a"+
		"\x35B\x2\x2\xEA9\xEAB\a\x36F\x2\x2\xEAA\xEA9\x3\x2\x2\x2\xEAA\xEAB\x3"+
		"\x2\x2\x2\xEAB\xEAC\x3\x2\x2\x2\xEAC\xEAD\a\x355\x2\x2\xEAD\xEAE\a\xA8"+
		"\x2\x2\xEAE\xEB4\a\x355\x2\x2\xEAF\xEB1\a\x36F\x2\x2\xEB0\xEAF\x3\x2\x2"+
		"\x2\xEB0\xEB1\x3\x2\x2\x2\xEB1\xEB2\x3\x2\x2\x2\xEB2\xEB4\a\x355\x2\x2"+
		"\xEB3\xEAA\x3\x2\x2\x2\xEB3\xEB0\x3\x2\x2\x2\xEB4\xEB5\x3\x2\x2\x2\xEB5"+
		"\xEB3\x3\x2\x2\x2\xEB5\xEB6\x3\x2\x2\x2\xEB6\xEB8\x3\x2\x2\x2\xEB7\xE93"+
		"\x3\x2\x2\x2\xEB7\xEA7\x3\x2\x2\x2\xEB8\xEBF\x3\x2\x2\x2\xEB9\xEBB\a\x36F"+
		"\x2\x2\xEBA\xEB9\x3\x2\x2\x2\xEBA\xEBB\x3\x2\x2\x2\xEBB\xEBC\x3\x2\x2"+
		"\x2\xEBC\xEBD\a\x195\x2\x2\xEBD\xEBE\a\x35B\x2\x2\xEBE\xEC0\a\x355\x2"+
		"\x2\xEBF\xEBA\x3\x2\x2\x2\xEBF\xEC0\x3\x2\x2\x2\xEC0\xEC7\x3\x2\x2\x2"+
		"\xEC1\xEC3\a\x36F\x2\x2\xEC2\xEC1\x3\x2\x2\x2\xEC2\xEC3\x3\x2\x2\x2\xEC3"+
		"\xEC4\x3\x2\x2\x2\xEC4\xEC5\a\x196\x2\x2\xEC5\xEC6\a\x35B\x2\x2\xEC6\xEC8"+
		"\a\x355\x2\x2\xEC7\xEC2\x3\x2\x2\x2\xEC7\xEC8\x3\x2\x2\x2\xEC8\xEC9\x3"+
		"\x2\x2\x2\xEC9\xECA\a\x36E\x2\x2\xECA\x139\x3\x2\x2\x2\xECB\xECC\a\x5"+
		"\x2\x2\xECC\xECD\a\x157\x2\x2\xECD\xECE\a\xF7\x2\x2\xECE\xED9\x5\x428"+
		"\x215\x2\xECF\xED4\a\x1F7\x2\x2\xED0\xED1\a\xBD\x2\x2\xED1\xED2\a\xC3"+
		"\x2\x2\xED2\xED3\a\x35B\x2\x2\xED3\xED5\t\t\x2\x2\xED4\xED0\x3\x2\x2\x2"+
		"\xED4\xED5\x3\x2\x2\x2\xED5\xEDA\x3\x2\x2\x2\xED6\xEDA\a\x200\x2\x2\xED7"+
		"\xED8\a\b\x2\x2\xED8\xEDA\a/\x2\x2\xED9\xECF\x3\x2\x2\x2\xED9\xED6\x3"+
		"\x2\x2\x2\xED9\xED7\x3\x2\x2\x2\xEDA\x13B\x3\x2\x2\x2\xEDB\xEDC\a#\x2"+
		"\x2\xEDC\xEDD\a\x157\x2\x2\xEDD\xEDE\a\xF7\x2\x2\xEDE\xEE2\x5\x428\x215"+
		"\x2\xEDF\xEE0\ap\x2\x2\xEE0\xEE1\a\x148\x2\x2\xEE1\xEE3\x5\x428\x215\x2"+
		"\xEE2\xEDF\x3\x2\x2\x2\xEE2\xEE3\x3\x2\x2\x2\xEE3\xEE7\x3\x2\x2\x2\xEE4"+
		"\xEE5\aW\x2\x2\xEE5\xEE6\a\x1D5\x2\x2\xEE6\xEE8\a\x357\x2\x2\xEE7\xEE4"+
		"\x3\x2\x2\x2\xEE7\xEE8\x3\x2\x2\x2\xEE8\xEED\x3\x2\x2\x2\xEE9\xEEA\a\xBD"+
		"\x2\x2\xEEA\xEEB\a\xC3\x2\x2\xEEB\xEEC\a\x35B\x2\x2\xEEC\xEEE\t\t\x2\x2"+
		"\xEED\xEE9\x3\x2\x2\x2\xEED\xEEE\x3\x2\x2\x2\xEEE\xEF1\x3\x2\x2\x2\xEEF"+
		"\xEF0\a\b\x2\x2\xEF0\xEF2\a/\x2\x2\xEF1\xEEF\x3\x2\x2\x2\xEF1\xEF2\x3"+
		"\x2\x2\x2\xEF2\xEF5\x3\x2\x2\x2\xEF3\xEF4\a\n\x2\x2\xEF4\xEF6\x5\x428"+
		"\x215\x2\xEF5\xEF3\x3\x2\x2\x2\xEF5\xEF6\x3\x2\x2\x2\xEF6\x13D\x3\x2\x2"+
		"\x2\xEF7\xEF8\a\x5\x2\x2\xEF8\xEF9\a\x157\x2\x2\xEF9\xEFA\a\x23B\x2\x2"+
		"\xEFA\xF08\x5\x428\x215\x2\xEFB\xEFC\a\x3\x2\x2\xEFC\xEFD\a\x357\x2\x2"+
		"\xEFD\xEFE\a\x2CD\x2\x2\xEFE\xF09\t%\x2\x2\xEFF\xF06\a\x39\x2\x2\xF00"+
		"\xF01\a\x357\x2\x2\xF01\xF02\a\x2CD\x2\x2\xF02\xF07\t%\x2\x2\xF03\xF04"+
		"\a\x4\x2\x2\xF04\xF07\t%\x2\x2\xF05\xF07\a\x4\x2\x2\xF06\xF00\x3\x2\x2"+
		"\x2\xF06\xF03\x3\x2\x2\x2\xF06\xF05\x3\x2\x2\x2\xF07\xF09\x3\x2\x2\x2"+
		"\xF08\xEFB\x3\x2\x2\x2\xF08\xEFF\x3\x2\x2\x2\xF09\x13F\x3\x2\x2\x2\xF0A"+
		"\xF0B\a#\x2\x2\xF0B\xF0C\a\x157\x2\x2\xF0C\xF0D\a\x23B\x2\x2\xF0D\xF19"+
		"\x5\x428\x215\x2\xF0E\xF17\aK\x2\x2\xF0F\xF10\x5\x428\x215\x2\xF10\xF11"+
		"\a\x368\x2\x2\xF11\xF13\x3\x2\x2\x2\xF12\xF0F\x3\x2\x2\x2\xF12\xF13\x3"+
		"\x2\x2\x2\xF13\xF14\x3\x2\x2\x2\xF14\xF18\x5\x428\x215\x2\xF15\xF16\a"+
		"\x246\x2\x2\xF16\xF18\a\x23B\x2\x2\xF17\xF12\x3\x2\x2\x2\xF17\xF15\x3"+
		"\x2\x2\x2\xF18\xF1A\x3\x2\x2\x2\xF19\xF0E\x3\x2\x2\x2\xF19\xF1A\x3\x2"+
		"\x2\x2\xF1A\xF1D\x3\x2\x2\x2\xF1B\xF1C\a\n\x2\x2\xF1C\xF1E\x5\x428\x215"+
		"\x2\xF1D\xF1B\x3\x2\x2\x2\xF1D\xF1E\x3\x2\x2\x2\xF1E\x141\x3\x2\x2\x2"+
		"\xF1F\xF20\a\x5\x2\x2\xF20\xF21\a\x18A\x2\x2\xF21\xF65\x5\x428\x215\x2"+
		"\xF22\xF24\t\x1B\x2\x2\xF23\xF22\x3\x2\x2\x2\xF23\xF24\x3\x2\x2\x2\xF24"+
		"\xF66\x3\x2\x2\x2\xF25\xF33\a\xBD\x2\x2\xF26\xF27\a\x2FB\x2\x2\xF27\xF2B"+
		"\a\x35B\x2\x2\xF28\xF2C\a\x357\x2\x2\xF29\xF2A\a\x358\x2\x2\xF2A\xF2C"+
		"\a\x2C0\x2\x2\xF2B\xF28\x3\x2\x2\x2\xF2B\xF29\x3\x2\x2\x2\xF2C\xF30\x3"+
		"\x2\x2\x2\xF2D\xF2F\t&\x2\x2\xF2E\xF2D\x3\x2\x2\x2\xF2F\xF32\x3\x2\x2"+
		"\x2\xF30\xF2E\x3\x2\x2\x2\xF30\xF31\x3\x2\x2\x2\xF31\xF34\x3\x2\x2\x2"+
		"\xF32\xF30\x3\x2\x2\x2\xF33\xF26\x3\x2\x2\x2\xF33\xF34\x3\x2\x2\x2\xF34"+
		"\xF3E\x3\x2\x2\x2\xF35\xF36\a\x2F5\x2\x2\xF36\xF37\a\x35B\x2\x2\xF37\xF3B"+
		"\a\x357\x2\x2\xF38\xF3A\t&\x2\x2\xF39\xF38\x3\x2\x2\x2\xF3A\xF3D\x3\x2"+
		"\x2\x2\xF3B\xF39\x3\x2\x2\x2\xF3B\xF3C\x3\x2\x2\x2\xF3C\xF3F\x3\x2\x2"+
		"\x2\xF3D\xF3B\x3\x2\x2\x2\xF3E\xF35\x3\x2\x2\x2\xF3E\xF3F\x3\x2\x2\x2"+
		"\xF3F\xF43\x3\x2\x2\x2\xF40\xF41\a\x2A9\x2\x2\xF41\xF42\a\x35B\x2\x2\xF42"+
		"\xF44\x5\x428\x215\x2\xF43\xF40\x3\x2\x2\x2\xF43\xF44\x3\x2\x2\x2\xF44"+
		"\xF48\x3\x2\x2\x2\xF45\xF46\a\x120\x2\x2\xF46\xF47\a\x35B\x2\x2\xF47\xF49"+
		"\x5\x428\x215\x2\xF48\xF45\x3\x2\x2\x2\xF48\xF49\x3\x2\x2\x2\xF49\xF4D"+
		"\x3\x2\x2\x2\xF4A\xF4B\a\x1AC\x2\x2\xF4B\xF4C\a\x35B\x2\x2\xF4C\xF4E\x5"+
		"\x428\x215\x2\xF4D\xF4A\x3\x2\x2\x2\xF4D\xF4E\x3\x2\x2\x2\xF4E\xF52\x3"+
		"\x2\x2\x2\xF4F\xF50\a\x294\x2\x2\xF50\xF51\a\x35B\x2\x2\xF51\xF53\t\t"+
		"\x2\x2\xF52\xF4F\x3\x2\x2\x2\xF52\xF53\x3\x2\x2\x2\xF53\xF57\x3\x2\x2"+
		"\x2\xF54\xF55\a\x295\x2\x2\xF55\xF56\a\x35B\x2\x2\xF56\xF58\t\t\x2\x2"+
		"\xF57\xF54\x3\x2\x2\x2\xF57\xF58\x3\x2\x2\x2\xF58\xF5C\x3\x2\x2\x2\xF59"+
		"\xF5A\a\x10F\x2\x2\xF5A\xF5B\a\x35B\x2\x2\xF5B\xF5D\x5\x428\x215\x2\xF5C"+
		"\xF59\x3\x2\x2\x2\xF5C\xF5D\x3\x2\x2\x2\xF5D\xF60\x3\x2\x2\x2\xF5E\xF5F"+
		"\a\x1B3\x2\x2\xF5F\xF61\a\x10F\x2\x2\xF60\xF5E\x3\x2\x2\x2\xF60\xF61\x3"+
		"\x2\x2\x2\xF61\xF66\x3\x2\x2\x2\xF62\xF63\t\x19\x2\x2\xF63\xF64\a\x10F"+
		"\x2\x2\xF64\xF66\x5\x428\x215\x2\xF65\xF23\x3\x2\x2\x2\xF65\xF25\x3\x2"+
		"\x2\x2\xF65\xF62\x3\x2\x2\x2\xF66\x143\x3\x2\x2\x2\xF67\xF68\a#\x2\x2"+
		"\xF68\xF69\a\x18A\x2\x2\xF69\xFC4\x5\x428\x215\x2\xF6A\xF78\a\xBD\x2\x2"+
		"\xF6B\xF6C\a\x2FB\x2\x2\xF6C\xF70\a\x35B\x2\x2\xF6D\xF71\a\x357\x2\x2"+
		"\xF6E\xF6F\a\x358\x2\x2\xF6F\xF71\a\x2C0\x2\x2\xF70\xF6D\x3\x2\x2\x2\xF70"+
		"\xF6E\x3\x2\x2\x2\xF71\xF75\x3\x2\x2\x2\xF72\xF74\t&\x2\x2\xF73\xF72\x3"+
		"\x2\x2\x2\xF74\xF77\x3\x2\x2\x2\xF75\xF73\x3\x2\x2\x2\xF75\xF76\x3\x2"+
		"\x2\x2\xF76\xF79\x3\x2\x2\x2\xF77\xF75\x3\x2\x2\x2\xF78\xF6B\x3\x2\x2"+
		"\x2\xF78\xF79\x3\x2\x2\x2\xF79\xF80\x3\x2\x2\x2\xF7A\xF7C\a\x36F\x2\x2"+
		"\xF7B\xF7A\x3\x2\x2\x2\xF7B\xF7C\x3\x2\x2\x2\xF7C\xF7D\x3\x2\x2\x2\xF7D"+
		"\xF7E\a\x326\x2\x2\xF7E\xF7F\a\x35B\x2\x2\xF7F\xF81\a\x358\x2\x2\xF80"+
		"\xF7B\x3\x2\x2\x2\xF80\xF81\x3\x2\x2\x2\xF81\xF88\x3\x2\x2\x2\xF82\xF84"+
		"\a\x36F\x2\x2\xF83\xF82\x3\x2\x2\x2\xF83\xF84\x3\x2\x2\x2\xF84\xF85\x3"+
		"\x2\x2\x2\xF85\xF86\a\x2A9\x2\x2\xF86\xF87\a\x35B\x2\x2\xF87\xF89\x5\x428"+
		"\x215\x2\xF88\xF83\x3\x2\x2\x2\xF88\xF89\x3\x2\x2\x2\xF89\xF90\x3\x2\x2"+
		"\x2\xF8A\xF8C\a\x36F\x2\x2\xF8B\xF8A\x3\x2\x2\x2\xF8B\xF8C\x3\x2\x2\x2"+
		"\xF8C\xF8D\x3\x2\x2\x2\xF8D\xF8E\a\x120\x2\x2\xF8E\xF8F\a\x35B\x2\x2\xF8F"+
		"\xF91\x5\x428\x215\x2\xF90\xF8B\x3\x2\x2\x2\xF90\xF91\x3\x2\x2\x2\xF91"+
		"\xF98\x3\x2\x2\x2\xF92\xF94\a\x36F\x2\x2\xF93\xF92\x3\x2\x2\x2\xF93\xF94"+
		"\x3\x2\x2\x2\xF94\xF95\x3\x2\x2\x2\xF95\xF96\a\x295\x2\x2\xF96\xF97\a"+
		"\x35B\x2\x2\xF97\xF99\t\t\x2\x2\xF98\xF93\x3\x2\x2\x2\xF98\xF99\x3\x2"+
		"\x2\x2\xF99\xFA0\x3\x2\x2\x2\xF9A\xF9C\a\x36F\x2\x2\xF9B\xF9A\x3\x2\x2"+
		"\x2\xF9B\xF9C\x3\x2\x2\x2\xF9C\xF9D\x3\x2\x2\x2\xF9D\xF9E\a\x294\x2\x2"+
		"\xF9E\xF9F\a\x35B\x2\x2\xF9F\xFA1\t\t\x2\x2\xFA0\xF9B\x3\x2\x2\x2\xFA0"+
		"\xFA1\x3\x2\x2\x2\xFA1\xFA8\x3\x2\x2\x2\xFA2\xFA4\a\x36F\x2\x2\xFA3\xFA2"+
		"\x3\x2\x2\x2\xFA3\xFA4\x3\x2\x2\x2\xFA4\xFA5\x3\x2\x2\x2\xFA5\xFA6\a\x10F"+
		"\x2\x2\xFA6\xFA7\a\x35B\x2\x2\xFA7\xFA9\x5\x428\x215\x2\xFA8\xFA3\x3\x2"+
		"\x2\x2\xFA8\xFA9\x3\x2\x2\x2\xFA9\xFC5\x3\x2\x2\x2\xFAA\xFC2\aK\x2\x2"+
		"\xFAB\xFAC\a\x348\x2\x2\xFAC\xFB3\a\xBD\x2\x2\xFAD\xFAF\a\x36F\x2\x2\xFAE"+
		"\xFAD\x3\x2\x2\x2\xFAE\xFAF\x3\x2\x2\x2\xFAF\xFB0\x3\x2\x2\x2\xFB0\xFB1"+
		"\a\x2A9\x2\x2\xFB1\xFB2\a\x35B\x2\x2\xFB2\xFB4\x5\x428\x215\x2\xFB3\xFAE"+
		"\x3\x2\x2\x2\xFB3\xFB4\x3\x2\x2\x2\xFB4\xFBB\x3\x2\x2\x2\xFB5\xFB7\a\x36F"+
		"\x2\x2\xFB6\xFB5\x3\x2\x2\x2\xFB6\xFB7\x3\x2\x2\x2\xFB7\xFB8\x3\x2\x2"+
		"\x2\xFB8\xFB9\a\x120\x2\x2\xFB9\xFBA\a\x35B\x2\x2\xFBA\xFBC\a\x357\x2"+
		"\x2\xFBB\xFB6\x3\x2\x2\x2\xFBB\xFBC\x3\x2\x2\x2\xFBC\xFC3\x3\x2\x2\x2"+
		"\xFBD\xFBE\a\x291\x2\x2\xFBE\xFC3\x5\x428\x215\x2\xFBF\xFC0\a\x281\x2"+
		"\x2\xFC0\xFC1\a_\x2\x2\xFC1\xFC3\x5\x428\x215\x2\xFC2\xFAB\x3\x2\x2\x2"+
		"\xFC2\xFBD\x3\x2\x2\x2\xFC2\xFBF\x3\x2\x2\x2\xFC3\xFC5\x3\x2\x2\x2\xFC4"+
		"\xF6A\x3\x2\x2\x2\xFC4\xFAA\x3\x2\x2\x2\xFC5\x145\x3\x2\x2\x2\xFC6\xFC7"+
		"\a\x5\x2\x2\xFC7\xFC8\a\x18A\x2\x2\xFC8\xFDA\x5\x428\x215\x2\xFC9\xFCB"+
		"\t\x1B\x2\x2\xFCA\xFC9\x3\x2\x2\x2\xFCA\xFCB\x3\x2\x2\x2\xFCB\xFDB\x3"+
		"\x2\x2\x2\xFCC\xFD8\a\xBD\x2\x2\xFCD\xFCE\a\x2FB\x2\x2\xFCE\xFCF\a\x35B"+
		"\x2\x2\xFCF\xFD3\a\x357\x2\x2\xFD0\xFD1\a\x2F5\x2\x2\xFD1\xFD2\a\x35B"+
		"\x2\x2\xFD2\xFD4\a\x357\x2\x2\xFD3\xFD0\x3\x2\x2\x2\xFD3\xFD4\x3\x2\x2"+
		"\x2\xFD4\xFD9\x3\x2\x2\x2\xFD5\xFD6\a\x1AC\x2\x2\xFD6\xFD7\a\x35B\x2\x2"+
		"\xFD7\xFD9\x5\x428\x215\x2\xFD8\xFCD\x3\x2\x2\x2\xFD8\xFD5\x3\x2\x2\x2"+
		"\xFD9\xFDB\x3\x2\x2\x2\xFDA\xFCA\x3\x2\x2\x2\xFDA\xFCC\x3\x2\x2\x2\xFDB"+
		"\x147\x3\x2\x2\x2\xFDC\xFDD\a#\x2\x2\xFDD\xFDE\a\x18A\x2\x2\xFDE\xFDF"+
		"\x5\x428\x215\x2\xFDF\xFE0\a\xBD\x2\x2\xFE0\xFE1\a\x2FB\x2\x2\xFE1\xFE2"+
		"\a\x35B\x2\x2\xFE2\xFE6\a\x357\x2\x2\xFE3\xFE4\a\x326\x2\x2\xFE4\xFE5"+
		"\a\x35B\x2\x2\xFE5\xFE7\a\x358\x2\x2\xFE6\xFE3\x3\x2\x2\x2\xFE6\xFE7\x3"+
		"\x2\x2\x2\xFE7\x149\x3\x2\x2\x2\xFE8\xFE9\a\x5\x2\x2\xFE9\xFEA\a\x18A"+
		"\x2\x2\xFEA\x1002\x5\x428\x215\x2\xFEB\xFED\t\x1B\x2\x2\xFEC\xFEB\x3\x2"+
		"\x2\x2\xFEC\xFED\x3\x2\x2\x2\xFED\x1003\x3\x2\x2\x2\xFEE\x1000\a\xBD\x2"+
		"\x2\xFEF\xFF0\a\x2FB\x2\x2\xFF0\xFF1\a\x35B\x2\x2\xFF1\xFFB\a\x357\x2"+
		"\x2\xFF2\xFF3\a\x2F5\x2\x2\xFF3\xFF4\a\x35B\x2\x2\xFF4\xFF8\a\x357\x2"+
		"\x2\xFF5\xFF7\t&\x2\x2\xFF6\xFF5\x3\x2\x2\x2\xFF7\xFFA\x3\x2\x2\x2\xFF8"+
		"\xFF6\x3\x2\x2\x2\xFF8\xFF9\x3\x2\x2\x2\xFF9\xFFC\x3\x2\x2\x2\xFFA\xFF8"+
		"\x3\x2\x2\x2\xFFB\xFF2\x3\x2\x2\x2\xFFB\xFFC\x3\x2\x2\x2\xFFC\x1001\x3"+
		"\x2\x2\x2\xFFD\xFFE\a\x1AC\x2\x2\xFFE\xFFF\a\x35B\x2\x2\xFFF\x1001\x5"+
		"\x428\x215\x2\x1000\xFEF\x3\x2\x2\x2\x1000\xFFD\x3\x2\x2\x2\x1001\x1003"+
		"\x3\x2\x2\x2\x1002\xFEC\x3\x2\x2\x2\x1002\xFEE\x3\x2\x2\x2\x1003\x14B"+
		"\x3\x2\x2\x2\x1004\x1005\a#\x2\x2\x1005\x1006\a\x18A\x2\x2\x1006\x1017"+
		"\x5\x428\x215\x2\x1007\x1008\a\xBD\x2\x2\x1008\x1009\a\x2FB\x2\x2\x1009"+
		"\x100A\a\x35B\x2\x2\x100A\x100C\a\x357\x2\x2\x100B\x100D\a\x2E9\x2\x2"+
		"\x100C\x100B\x3\x2\x2\x2\x100C\x100D\x3\x2\x2\x2\x100D\x1013\x3\x2\x2"+
		"\x2\x100E\x100F\a\x294\x2\x2\x100F\x1011\a\x35B\x2\x2\x1010\x1012\t\t"+
		"\x2\x2\x1011\x1010\x3\x2\x2\x2\x1011\x1012\x3\x2\x2\x2\x1012\x1014\x3"+
		"\x2\x2\x2\x1013\x100E\x3\x2\x2\x2\x1013\x1014\x3\x2\x2\x2\x1014\x1018"+
		"\x3\x2\x2\x2\x1015\x1016\aK\x2\x2\x1016\x1018\a\x348\x2\x2\x1017\x1007"+
		"\x3\x2\x2\x2\x1017\x1015\x3\x2\x2\x2\x1018\x14D\x3\x2\x2\x2\x1019\x101A"+
		"\a\x5\x2\x2\x101A\x101B\a\x2D8\x2\x2\x101B\x1031\a_\x2\x2\x101C\x101E"+
		"\a\x151\x2\x2\x101D\x101C\x3\x2\x2\x2\x101D\x101E\x3\x2\x2\x2\x101E\x101F"+
		"\x3\x2\x2\x2\x101F\x1020\a\x309\x2\x2\x1020\x1021\a\xBD\x2\x2\x1021\x1022"+
		"\a\x139\x2\x2\x1022\x1023\a\x12\x2\x2\x1023\x1024\a\x2FB\x2\x2\x1024\x1025"+
		"\a\x35B\x2\x2\x1025\x1032\a\x357\x2\x2\x1026\x1027\t\x19\x2\x2\x1027\x1028"+
		"\a\x139\x2\x2\x1028\x102F\a\x12\x2\x2\x1029\x102A\a\x320\x2\x2\x102A\x102B"+
		"\a\x2D8\x2\x2\x102B\x1030\a_\x2\x2\x102C\x102D\a\x2FB\x2\x2\x102D\x102E"+
		"\a\x35B\x2\x2\x102E\x1030\a\x357\x2\x2\x102F\x1029\x3\x2\x2\x2\x102F\x102C"+
		"\x3\x2\x2\x2\x1030\x1032\x3\x2\x2\x2\x1031\x101D\x3\x2\x2\x2\x1031\x1026"+
		"\x3\x2\x2\x2\x1032\x14F\x3\x2\x2\x2\x1033\x1034\a#\x2\x2\x1034\x1035\a"+
		"\x2D8\x2\x2\x1035\x1036\a_\x2\x2\x1036\x1037\a\x139\x2\x2\x1037\x1038"+
		"\a\x12\x2\x2\x1038\x1039\a\x2FB\x2\x2\x1039\x103A\a\x35B\x2\x2\x103A\x103B"+
		"\a\x357\x2\x2\x103B\x151\x3\x2\x2\x2\x103C\x103D\a\x5\x2\x2\x103D\x103E"+
		"\a\x2D8\x2\x2\x103E\x105A\a_\x2\x2\x103F\x1041\a\x151\x2\x2\x1040\x103F"+
		"\x3\x2\x2\x2\x1040\x1041\x3\x2\x2\x2\x1041\x1042\x3\x2\x2\x2\x1042\x1043"+
		"\a\x309\x2\x2\x1043\x1044\a\xBD\x2\x2\x1044\x1045\a\x139\x2\x2\x1045\x1046"+
		"\a\x12\x2\x2\x1046\x1047\a\x2FB\x2\x2\x1047\x1048\a\x35B\x2\x2\x1048\x105B"+
		"\a\x357\x2\x2\x1049\x104A\a\x3\x2\x2\x104A\x104B\a\x139\x2\x2\x104B\x1052"+
		"\a\x12\x2\x2\x104C\x104D\a\x320\x2\x2\x104D\x104E\a\x2D8\x2\x2\x104E\x1053"+
		"\a_\x2\x2\x104F\x1050\a\x2FB\x2\x2\x1050\x1051\a\x35B\x2\x2\x1051\x1053"+
		"\a\x357\x2\x2\x1052\x104C\x3\x2\x2\x2\x1052\x104F\x3\x2\x2\x2\x1053\x105B"+
		"\x3\x2\x2\x2\x1054\x1055\a\x39\x2\x2\x1055\x1056\a\x139\x2\x2\x1056\x1057"+
		"\a\x12\x2\x2\x1057\x1058\a\x2FB\x2\x2\x1058\x1059\a\x35B\x2\x2\x1059\x105B"+
		"\a\x357\x2\x2\x105A\x1040\x3\x2\x2\x2\x105A\x1049\x3\x2\x2\x2\x105A\x1054"+
		"\x3\x2\x2\x2\x105B\x153\x3\x2\x2\x2\x105C\x105D\a#\x2\x2\x105D\x105E\a"+
		"\x2D8\x2\x2\x105E\x1064\a_\x2\x2\x105F\x1060\a\x139\x2\x2\x1060\x1061"+
		"\a\x12\x2\x2\x1061\x1062\a\x2FB\x2\x2\x1062\x1063\a\x35B\x2\x2\x1063\x1065"+
		"\a\x357\x2\x2\x1064\x105F\x3\x2\x2\x2\x1064\x1065\x3\x2\x2\x2\x1065\x155"+
		"\x3\x2\x2\x2\x1066\x1067\a\x5\x2\x2\x1067\x1068\a\x19F\x2\x2\x1068\x1069"+
		"\a\x25A\x2\x2\x1069\x106A\x5\x428\x215\x2\x106A\x106B\a\x264\x2\x2\x106B"+
		"\x1074\a\x35B\x2\x2\x106C\x1075\a\x2EC\x2\x2\x106D\x1075\a\x135\x2\x2"+
		"\x106E\x1075\a\x26C\x2\x2\x106F\x1070\a\x263\x2\x2\x1070\x1071\a\xBD\x2"+
		"\x2\x1071\x1072\a\x97\x2\x2\x1072\x1073\a\xFF\x2\x2\x1073\x1075\x5\x428"+
		"\x215\x2\x1074\x106C\x3\x2\x2\x2\x1074\x106D\x3\x2\x2\x2\x1074\x106E\x3"+
		"\x2\x2\x2\x1074\x106F\x3\x2\x2\x2\x1075\x157\x3\x2\x2\x2\x1076\x1077\a"+
		"\x5\x2\x2\x1077\x1078\a\x1D2\x2\x2\x1078\x1079\aM\x2\x2\x1079\x107A\x5"+
		"\x428\x215\x2\x107A\x107B\a\x36D\x2\x2\x107B\x107C\a\x36E\x2\x2\x107C"+
		"\x107D\t\'\x2\x2\x107D\x107E\a\x1EC\x2\x2\x107E\x107F\a\x36D\x2\x2\x107F"+
		"\x1080\a\x355\x2\x2\x1080\x1081\a\x36E\x2\x2\x1081\x159\x3\x2\x2\x2\x1082"+
		"\x1083\a\x5\x2\x2\x1083\x1084\a\x1D2\x2\x2\x1084\x1085\a\x31D\x2\x2\x1085"+
		"\x1086\x5\x428\x215\x2\x1086\x1087\a\x1B2\x2\x2\x1087\x1089\a\x344\x2"+
		"\x2\x1088\x108A\x5\x428\x215\x2\x1089\x1088\x3\x2\x2\x2\x1089\x108A\x3"+
		"\x2\x2\x2\x108A\x15B\x3\x2\x2\x2\x108B\x108C\a\x5\x2\x2\x108C\x108D\a"+
		"\x1FD\x2\x2\x108D\x108E\a\x320\x2\x2\x108E\x108F\a\xEE\x2\x2\x108F\x1090"+
		"\x5\x428\x215\x2\x1090\x1094\a\xBD\x2\x2\x1091\x1092\a\xB5\x2\x2\x1092"+
		"\x1093\a\x35B\x2\x2\x1093\x1095\x5\x428\x215\x2\x1094\x1091\x3\x2\x2\x2"+
		"\x1094\x1095\x3\x2\x2\x2\x1095\x109A\x3\x2\x2\x2\x1096\x1097\a\x36F\x2"+
		"\x2\x1097\x1098\a\x27E\x2\x2\x1098\x1099\a\x35B\x2\x2\x1099\x109B\t\t"+
		"\x2\x2\x109A\x1096\x3\x2\x2\x2\x109A\x109B\x3\x2\x2\x2\x109B\x15D\x3\x2"+
		"\x2\x2\x109C\x109D\a#\x2\x2\x109D\x109E\a\x1FD\x2\x2\x109E\x109F\a\x320"+
		"\x2\x2\x109F\x10A0\a\xEE\x2\x2\x10A0\x10A3\x5\x428\x215\x2\x10A1\x10A2"+
		"\a\n\x2\x2\x10A2\x10A4\x5\x428\x215\x2\x10A3\x10A1\x3\x2\x2\x2\x10A3\x10A4"+
		"\x3\x2\x2\x2\x10A4\x10A5\x3\x2\x2\x2\x10A5\x10A6\a\xA8\x2\x2\x10A6\x10A7"+
		"\a\x320\x2\x2\x10A7\x10A8\a\x357\x2\x2\x10A8\x10AC\a\xBD\x2\x2\x10A9\x10AA"+
		"\a\xB5\x2\x2\x10AA\x10AB\a\x35B\x2\x2\x10AB\x10AD\x5\x428\x215\x2\x10AC"+
		"\x10A9\x3\x2\x2\x2\x10AC\x10AD\x3\x2\x2\x2\x10AD\x10B2\x3\x2\x2\x2\x10AE"+
		"\x10AF\a\x36F\x2\x2\x10AF\x10B0\a\x27E\x2\x2\x10B0\x10B1\a\x35B\x2\x2"+
		"\x10B1\x10B3\t\t\x2\x2\x10B2\x10AE\x3\x2\x2\x2\x10B2\x10B3\x3\x2\x2\x2"+
		"\x10B3\x15F\x3\x2\x2\x2\x10B4\x10B5\a#\x2\x2\x10B5\x10B6\a\x208\x2\x2"+
		"\x10B6\x10B7\a\x1DA\x2\x2\x10B7\x111E\x5\x428\x215\x2\x10B8\x10B9\a\xBD"+
		"\x2\x2\x10B9\x10C0\a\x36D\x2\x2\x10BA\x10BC\a\x36F\x2\x2\x10BB\x10BA\x3"+
		"\x2\x2\x2\x10BB\x10BC\x3\x2\x2\x2\x10BC\x10BD\x3\x2\x2\x2\x10BD\x10BE"+
		"\a\x1A2\x2\x2\x10BE\x10BF\a\x35B\x2\x2\x10BF\x10C1\a\x355\x2\x2\x10C0"+
		"\x10BB\x3\x2\x2\x2\x10C0\x10C1\x3\x2\x2\x2\x10C1\x10C8\x3\x2\x2\x2\x10C2"+
		"\x10C4\a\x36F\x2\x2\x10C3\x10C2\x3\x2\x2\x2\x10C3\x10C4\x3\x2\x2\x2\x10C4"+
		"\x10C5\x3\x2\x2\x2\x10C5\x10C6\a\x191\x2\x2\x10C6\x10C7\a\x35B\x2\x2\x10C7"+
		"\x10C9\a\x355\x2\x2\x10C8\x10C3\x3\x2\x2\x2\x10C8\x10C9\x3\x2\x2\x2\x10C9"+
		"\x10D0\x3\x2\x2\x2\x10CA\x10CC\a\x36F\x2\x2\x10CB\x10CA\x3\x2\x2\x2\x10CB"+
		"\x10CC\x3\x2\x2\x2\x10CC\x10CD\x3\x2\x2\x2\x10CD\x10CE\a\xF4\x2\x2\x10CE"+
		"\x10CF\a\x35B\x2\x2\x10CF\x10D1\a\x355\x2\x2\x10D0\x10CB\x3\x2\x2\x2\x10D0"+
		"\x10D1\x3\x2\x2\x2\x10D1\x10FB\x3\x2\x2\x2\x10D2\x10D4\a\x36F\x2\x2\x10D3"+
		"\x10D2\x3\x2\x2\x2\x10D3\x10D4\x3\x2\x2\x2\x10D4\x10D5\x3\x2\x2\x2\x10D5"+
		"\x10D6\a\xCC\x2\x2\x10D6\x10D7\a\x31C\x2\x2\x10D7\x10F9\a\x35B\x2\x2\x10D8"+
		"\x10FA\a\xDD\x2\x2\x10D9\x10E3\a\x36D\x2\x2\x10DA\x10DC\a\x36F\x2\x2\x10DB"+
		"\x10DA\x3\x2\x2\x2\x10DB\x10DC\x3\x2\x2\x2\x10DC\x10E1\x3\x2\x2\x2\x10DD"+
		"\x10E2\a\x355\x2\x2\x10DE\x10DF\a\x355\x2\x2\x10DF\x10E0\a\xA8\x2\x2\x10E0"+
		"\x10E2\a\x355\x2\x2\x10E1\x10DD\x3\x2\x2\x2\x10E1\x10DE\x3\x2\x2\x2\x10E2"+
		"\x10E4\x3\x2\x2\x2\x10E3\x10DB\x3\x2\x2\x2\x10E4\x10E5\x3\x2\x2\x2\x10E5"+
		"\x10E3\x3\x2\x2\x2\x10E5\x10E6\x3\x2\x2\x2\x10E6\x10E7\x3\x2\x2\x2\x10E7"+
		"\x10FA\a\x36E\x2\x2\x10E8\x10E9\a\x1BF\x2\x2\x10E9\x10EA\a\x35B\x2\x2"+
		"\x10EA\x10F4\a\x36D\x2\x2\x10EB\x10ED\a\x36F\x2\x2\x10EC\x10EB\x3\x2\x2"+
		"\x2\x10EC\x10ED\x3\x2\x2\x2\x10ED\x10F2\x3\x2\x2\x2\x10EE\x10F3\a\x355"+
		"\x2\x2\x10EF\x10F0\a\x355\x2\x2\x10F0\x10F1\a\xA8\x2\x2\x10F1\x10F3\a"+
		"\x355\x2\x2\x10F2\x10EE\x3\x2\x2\x2\x10F2\x10EF\x3\x2\x2\x2\x10F3\x10F5"+
		"\x3\x2\x2\x2\x10F4\x10EC\x3\x2\x2\x2\x10F5\x10F6\x3\x2\x2\x2\x10F6\x10F4"+
		"\x3\x2\x2\x2\x10F6\x10F7\x3\x2\x2\x2\x10F7\x10F8\x3\x2\x2\x2\x10F8\x10FA"+
		"\a\x36E\x2\x2\x10F9\x10D8\x3\x2\x2\x2\x10F9\x10D9\x3\x2\x2\x2\x10F9\x10E8"+
		"\x3\x2\x2\x2\x10FA\x10FC\x3\x2\x2\x2\x10FB\x10D3\x3\x2\x2\x2\x10FB\x10FC"+
		"\x3\x2\x2\x2\x10FC\x1103\x3\x2\x2\x2\x10FD\x10FF\a\x36F\x2\x2\x10FE\x10FD"+
		"\x3\x2\x2\x2\x10FE\x10FF\x3\x2\x2\x2\x10FF\x1100\x3\x2\x2\x2\x1100\x1101"+
		"\a\x1A4\x2\x2\x1101\x1102\a\x35B\x2\x2\x1102\x1104\a\x355\x2\x2\x1103"+
		"\x10FE\x3\x2\x2\x2\x1103\x1104\x3\x2\x2\x2\x1104\x110B\x3\x2\x2\x2\x1105"+
		"\x1107\a\x36F\x2\x2\x1106\x1105\x3\x2\x2\x2\x1106\x1107\x3\x2\x2\x2\x1107"+
		"\x1108\x3\x2\x2\x2\x1108\x1109\a\x195\x2\x2\x1109\x110A\a\x35B\x2\x2\x110A"+
		"\x110C\a\x355\x2\x2\x110B\x1106\x3\x2\x2\x2\x110B\x110C\x3\x2\x2\x2\x110C"+
		"\x1113\x3\x2\x2\x2\x110D\x110F\a\x36F\x2\x2\x110E\x110D\x3\x2\x2\x2\x110E"+
		"\x110F\x3\x2\x2\x2\x110F\x1110\x3\x2\x2\x2\x1110\x1111\a\x1A3\x2\x2\x1111"+
		"\x1112\a\x35B\x2\x2\x1112\x1114\a\x355\x2\x2\x1113\x110E\x3\x2\x2\x2\x1113"+
		"\x1114\x3\x2\x2\x2\x1114\x111B\x3\x2\x2\x2\x1115\x1117\a\x36F\x2\x2\x1116"+
		"\x1115\x3\x2\x2\x2\x1116\x1117\x3\x2\x2\x2\x1117\x1118\x3\x2\x2\x2\x1118"+
		"\x1119\a\x194\x2\x2\x1119\x111A\a\x35B\x2\x2\x111A\x111C\a\x355\x2\x2"+
		"\x111B\x1116\x3\x2\x2\x2\x111B\x111C\x3\x2\x2\x2\x111C\x111D\x3\x2\x2"+
		"\x2\x111D\x111F\a\x36E\x2\x2\x111E\x10B8\x3\x2\x2\x2\x111E\x111F\x3\x2"+
		"\x2\x2\x111F\x161\x3\x2\x2\x2\x1120\x1121\a\x5\x2\x2\x1121\x1122\a\x208"+
		"\x2\x2\x1122\x1138\a\x2BF\x2\x2\x1123\x1139\t(\x2\x2\x1124\x1125\a\xBD"+
		"\x2\x2\x1125\x1126\a\x36D\x2\x2\x1126\x1127\a\x296\x2\x2\x1127\x112D\a"+
		"\x35B\x2\x2\x1128\x1129\x5\x428\x215\x2\x1129\x112A\a\x368\x2\x2\x112A"+
		"\x112B\x5\x428\x215\x2\x112B\x112E\x3\x2\x2\x2\x112C\x112E\ak\x2\x2\x112D"+
		"\x1128\x3\x2\x2\x2\x112D\x112C\x3\x2\x2\x2\x112E\x112F\x3\x2\x2\x2\x112F"+
		"\x1139\a\x36E\x2\x2\x1130\x1131\a\x30D\x2\x2\x1131\x1139\a\xA2\x2\x2\x1132"+
		"\x1133\a\xBD\x2\x2\x1133\x1134\a\x36D\x2\x2\x1134\x1135\a\x2E0\x2\x2\x1135"+
		"\x1136\a\x35B\x2\x2\x1136\x1137\a\x355\x2\x2\x1137\x1139\a\x36E\x2\x2"+
		"\x1138\x1123\x3\x2\x2\x2\x1138\x1124\x3\x2\x2\x2\x1138\x1130\x3\x2\x2"+
		"\x2\x1138\x1132\x3\x2\x2\x2\x1139\x163\x3\x2\x2\x2\x113A\x113B\a\x5\x2"+
		"\x2\x113B\x113C\a\x314\x2\x2\x113C\x1144\x5\x428\x215\x2\x113D\x113E\t"+
		"\x19\x2\x2\x113E\x113F\a\x2E3\x2\x2\x113F\x1145\x5\x428\x215\x2\x1140"+
		"\x1141\a\xBD\x2\x2\x1141\x1142\a\x1AC\x2\x2\x1142\x1143\a\x35B\x2\x2\x1143"+
		"\x1145\x5\x428\x215\x2\x1144\x113D\x3\x2\x2\x2\x1144\x1140\x3\x2\x2\x2"+
		"\x1145\x165\x3\x2\x2\x2\x1146\x1147\a#\x2\x2\x1147\x1148\a\x314\x2\x2"+
		"\x1148\x114B\x5\x428\x215\x2\x1149\x114A\a\n\x2\x2\x114A\x114C\x5\x428"+
		"\x215\x2\x114B\x1149\x3\x2\x2\x2\x114B\x114C\x3\x2\x2\x2\x114C\x167\x3"+
		"\x2\x2\x2\x114D\x114E\a#\x2\x2\x114E\x114F\a\x20E\x2\x2\x114F\x1152\x5"+
		"\x428\x215\x2\x1150\x1151\a\n\x2\x2\x1151\x1153\x5\x428\x215\x2\x1152"+
		"\x1150\x3\x2\x2\x2\x1152\x1153\x3\x2\x2\x2\x1153\x1154\x3\x2\x2\x2\x1154"+
		"\x115B\a\xBD\x2\x2\x1155\x1157\a\x36F\x2\x2\x1156\x1155\x3\x2\x2\x2\x1156"+
		"\x1157\x3\x2\x2\x2\x1157\x1158\x3\x2\x2\x2\x1158\x1159\a\x322\x2\x2\x1159"+
		"\x115A\a\x35B\x2\x2\x115A\x115C\a\x357\x2\x2\x115B\x1156\x3\x2\x2\x2\x115B"+
		"\x115C\x3\x2\x2\x2\x115C\x1163\x3\x2\x2\x2\x115D\x115F\a\x36F\x2\x2\x115E"+
		"\x115D\x3\x2\x2\x2\x115E\x115F\x3\x2\x2\x2\x115F\x1160\x3\x2\x2\x2\x1160"+
		"\x1161\a\xF1\x2\x2\x1161\x1162\a\x35B\x2\x2\x1162\x1164\a\x357\x2\x2\x1163"+
		"\x115E\x3\x2\x2\x2\x1163\x1164\x3\x2\x2\x2\x1164\x116B\x3\x2\x2\x2\x1165"+
		"\x1167\a\x36F\x2\x2\x1166\x1165\x3\x2\x2\x2\x1166\x1167\x3\x2\x2\x2\x1167"+
		"\x1168\x3\x2\x2\x2\x1168\x1169\a\x2CF\x2\x2\x1169\x116A\a\x35B\x2\x2\x116A"+
		"\x116C\a\x355\x2\x2\x116B\x1166\x3\x2\x2\x2\x116B\x116C\x3\x2\x2\x2\x116C"+
		"\x116E\x3\x2\x2\x2\x116D\x116F\a\x36F\x2\x2\x116E\x116D\x3\x2\x2\x2\x116E"+
		"\x116F\x3\x2\x2\x2\x116F\x1170\x3\x2\x2\x2\x1170\x1171\a\xC8\x2\x2\x1171"+
		"\x1172\a\x35B\x2\x2\x1172\x1177\a\x357\x2\x2\x1173\x1174\a\x36F\x2\x2"+
		"\x1174\x1175\a\x1A6\x2\x2\x1175\x1176\a\x35B\x2\x2\x1176\x1178\a\x357"+
		"\x2\x2\x1177\x1173\x3\x2\x2\x2\x1177\x1178\x3\x2\x2\x2\x1178\x169\x3\x2"+
		"\x2\x2\x1179\x117A\a#\x2\x2\x117A\x117E\a\x95\x2\x2\x117B\x117C\x5\x428"+
		"\x215\x2\x117C\x117D\a\x368\x2\x2\x117D\x117F\x3\x2\x2\x2\x117E\x117B"+
		"\x3\x2\x2\x2\x117E\x117F\x3\x2\x2\x2\x117F\x1180\x3\x2\x2\x2\x1180\x1181"+
		"\x5\x428\x215\x2\x1181\x1182\a\b\x2\x2\x1182\x1183\x5\x32A\x196\x2\x1183"+
		"\x16B\x3\x2\x2\x2\x1184\x1185\a\x5\x2\x2\x1185\x1186\a\x97\x2\x2\x1186"+
		"\x1187\x5\x428\x215\x2\x1187\x1190\a\x33F\x2\x2\x1188\x118E\a\x1C2\x2"+
		"\x2\x1189\x118E\a\x25A\x2\x2\x118A\x118B\a\x270\x2\x2\x118B\x118C\a\x97"+
		"\x2\x2\x118C\x118E\a\xFF\x2\x2\x118D\x1188\x3\x2\x2\x2\x118D\x1189\x3"+
		"\x2\x2\x2\x118D\x118A\x3\x2\x2\x2\x118E\x118F\x3\x2\x2\x2\x118F\x1191"+
		"\a\x372\x2\x2\x1190\x118D\x3\x2\x2\x2\x1190\x1191\x3\x2\x2\x2\x1191\x1192"+
		"\x3\x2\x2\x2\x1192\x1195\x5\x428\x215\x2\x1193\x1194\a\x368\x2\x2\x1194"+
		"\x1196\x5\x428\x215\x2\x1195\x1193\x3\x2\x2\x2\x1195\x1196\x3\x2\x2\x2"+
		"\x1196\x16D\x3\x2\x2\x2\x1197\x1198\a#\x2\x2\x1198\x11A0\a\x97\x2\x2\x1199"+
		"\x11A1\x5\x428\x215\x2\x119A\x119B\a\n\x2\x2\x119B\x11A1\x5\x428\x215"+
		"\x2\x119C\x119D\x5\x428\x215\x2\x119D\x119E\a\n\x2\x2\x119E\x119F\x5\x428"+
		"\x215\x2\x119F\x11A1\x3\x2\x2\x2\x11A0\x1199\x3\x2\x2\x2\x11A0\x119A\x3"+
		"\x2\x2\x2\x11A0\x119C\x3\x2\x2\x2\x11A1\x11BC\x3\x2\x2\x2\x11A2\x11BB"+
		"\x5\x202\x102\x2\x11A3\x11BB\x5\x208\x105\x2\x11A4\x11A5\t)\x2\x2\x11A5"+
		"\x11A6\t*\x2\x2\x11A6\x11A9\ap\x2\x2\x11A7\x11A8\a\x97\x2\x2\x11A8\x11AA"+
		"\a\x372\x2\x2\x11A9\x11A7\x3\x2\x2\x2\x11A9\x11AA\x3\x2\x2\x2\x11AA\x11AB"+
		"\x3\x2\x2\x2\x11AB\x11AC\x5\x428\x215\x2\x11AC\x11AD\a\xA8\x2\x2\x11AD"+
		"\x11AE\x5\x428\x215\x2\x11AE\x11BB\x3\x2\x2\x2\x11AF\x11B0\a\x90\x2\x2"+
		"\x11B0\x11B1\t*\x2\x2\x11B1\x11B4\ap\x2\x2\x11B2\x11B3\a\x97\x2\x2\x11B3"+
		"\x11B5\a\x372\x2\x2\x11B4\x11B2\x3\x2\x2\x2\x11B4\x11B5\x3\x2\x2\x2\x11B5"+
		"\x11B6\x3\x2\x2\x2\x11B6\x11B7\x5\x428\x215\x2\x11B7\x11B8\aK\x2\x2\x11B8"+
		"\x11B9\x5\x428\x215\x2\x11B9\x11BB\x3\x2\x2\x2\x11BA\x11A2\x3\x2\x2\x2"+
		"\x11BA\x11A3\x3\x2\x2\x2\x11BA\x11A4\x3\x2\x2\x2\x11BA\x11AF\x3\x2\x2"+
		"\x2\x11BB\x11BE\x3\x2\x2\x2\x11BC\x11BA\x3\x2\x2\x2\x11BC\x11BD\x3\x2"+
		"\x2\x2\x11BD\x16F\x3\x2\x2\x2\x11BE\x11BC\x3\x2\x2\x2\x11BF\x11C0\a#\x2"+
		"\x2\x11C0\x11C1\a\x97\x2\x2\x11C1\x11C4\x5\x428\x215\x2\x11C2\x11C3\a"+
		"\n\x2\x2\x11C3\x11C5\x5\x428\x215\x2\x11C4\x11C2\x3\x2\x2\x2\x11C4\x11C5"+
		"\x3\x2\x2\x2\x11C5\x171\x3\x2\x2\x2\x11C6\x11C7\a\x5\x2\x2\x11C7\x11C8"+
		"\a\x97\x2\x2\x11C8\x11C9\x5\x428\x215\x2\x11C9\x11CC\a\x33F\x2\x2\x11CA"+
		"\x11CB\a\x1C2\x2\x2\x11CB\x11CD\a\x372\x2\x2\x11CC\x11CA\x3\x2\x2\x2\x11CC"+
		"\x11CD\x3\x2\x2\x2\x11CD\x11CE\x3\x2\x2\x2\x11CE\x11D1\x5\x428\x215\x2"+
		"\x11CF\x11D0\a\x368\x2\x2\x11D0\x11D2\a\x356\x2\x2\x11D1\x11CF\x3\x2\x2"+
		"\x2\x11D1\x11D2\x3\x2\x2\x2\x11D2\x173\x3\x2\x2\x2\x11D3\x11D4\a#\x2\x2"+
		"\x11D4\x11D5\a\x218\x2\x2\x11D5\x11D6\a\x1E5\x2\x2\x11D6\x11D7\a\x182"+
		"\x2\x2\x11D7\x11DF\x5\x428\x215\x2\x11D8\x11DC\aK\x2\x2\x11D9\x11DA\x5"+
		"\x428\x215\x2\x11DA\x11DB\a\x368\x2\x2\x11DB\x11DD\x3\x2\x2\x2\x11DC\x11D9"+
		"\x3\x2\x2\x2\x11DC\x11DD\x3\x2\x2\x2\x11DD\x11DE\x3\x2\x2\x2\x11DE\x11E0"+
		"\x5\x428\x215\x2\x11DF\x11D8\x3\x2\x2\x2\x11DF\x11E0\x3\x2\x2\x2\x11E0"+
		"\x11E3\x3\x2\x2\x2\x11E1\x11E2\a\n\x2\x2\x11E2\x11E4\x5\x428\x215\x2\x11E3"+
		"\x11E1\x3\x2\x2\x2\x11E3\x11E4\x3\x2\x2\x2\x11E4\x175\x3\x2\x2\x2\x11E5"+
		"\x11E6\a#\x2\x2\x11E6\x11E7\a\x21F\x2\x2\x11E7\x11EB\a\x302\x2\x2\x11E8"+
		"\x11E9\x5\x428\x215\x2\x11E9\x11EA\a\x368\x2\x2\x11EA\x11EC\x3\x2\x2\x2"+
		"\x11EB\x11E8\x3\x2\x2\x2\x11EB\x11EC\x3\x2\x2\x2\x11EC\x11ED\x3\x2\x2"+
		"\x2\x11ED\x1216\x5\x428\x215\x2\x11EE\x11F0\a\x36F\x2\x2\x11EF\x11EE\x3"+
		"\x2\x2\x2\x11EF\x11F0\x3\x2\x2\x2\x11F0\x11F1\x3\x2\x2\x2\x11F1\x11F3"+
		"\a\x3\x2\x2\x11F2\x11F4\t+\x2\x2\x11F3\x11F2\x3\x2\x2\x2\x11F3\x11F4\x3"+
		"\x2\x2\x2\x11F4\x11F5\x3\x2\x2\x2\x11F5\x11F6\a\x303\x2\x2\x11F6\x11F7"+
		"\x5\x428\x215\x2\x11F7\x11F8\a\x368\x2\x2\x11F8\x11F9\x5\x428\x215\x2"+
		"\x11F9\x11FE\a\x36D\x2\x2\x11FA\x11FC\a\x36F\x2\x2\x11FB\x11FA\x3\x2\x2"+
		"\x2\x11FB\x11FC\x3\x2\x2\x2\x11FC\x11FD\x3\x2\x2\x2\x11FD\x11FF\x5\x428"+
		"\x215\x2\x11FE\x11FB\x3\x2\x2\x2\x11FF\x1200\x3\x2\x2\x2\x1200\x11FE\x3"+
		"\x2\x2\x2\x1200\x1201\x3\x2\x2\x2\x1201\x1202\x3\x2\x2\x2\x1202\x1203"+
		"\a\x36E\x2\x2\x1203\x1204\ap\x2\x2\x1204\x1205\x5\x428\x215\x2\x1205\x1206"+
		"\a\x368\x2\x2\x1206\x1213\x5\x428\x215\x2\x1207\x1209\a\x36F\x2\x2\x1208"+
		"\x1207\x3\x2\x2\x2\x1208\x1209\x3\x2\x2\x2\x1209\x120A\x3\x2\x2\x2\x120A"+
		"\x120B\a\xCD\x2\x2\x120B\x1212\t,\x2\x2\x120C\x120E\a\x36F\x2\x2\x120D"+
		"\x120C\x3\x2\x2\x2\x120D\x120E\x3\x2\x2\x2\x120E\x120F\x3\x2\x2\x2\x120F"+
		"\x1210\a\x288\x2\x2\x1210\x1212\t-\x2\x2\x1211\x1208\x3\x2\x2\x2\x1211"+
		"\x120D\x3\x2\x2\x2\x1212\x1215\x3\x2\x2\x2\x1213\x1211\x3\x2\x2\x2\x1213"+
		"\x1214\x3\x2\x2\x2\x1214\x1217\x3\x2\x2\x2\x1215\x1213\x3\x2\x2\x2\x1216"+
		"\x11EF\x3\x2\x2\x2\x1217\x1218\x3\x2\x2\x2\x1218\x1216\x3\x2\x2\x2\x1218"+
		"\x1219\x3\x2\x2\x2\x1219\x1224\x3\x2\x2\x2\x121A\x121B\a\xBD\x2\x2\x121B"+
		"\x121C\a\x36D\x2\x2\x121C\x121D\a\x330\x2\x2\x121D\x121E\a\x35B\x2\x2"+
		"\x121E\x1221\t\t\x2\x2\x121F\x1220\a\x214\x2\x2\x1220\x1222\t\t\x2\x2"+
		"\x1221\x121F\x3\x2\x2\x2\x1221\x1222\x3\x2\x2\x2\x1222\x1223\x3\x2\x2"+
		"\x2\x1223\x1225\a\x36E\x2\x2\x1224\x121A\x3\x2\x2\x2\x1224\x1225\x3\x2"+
		"\x2\x2\x1225\x1229\x3\x2\x2\x2\x1226\x1227\aj\x2\x2\x1227\x1228\aG\x2"+
		"\x2\x1228\x122A\a\x8B\x2\x2\x1229\x1226\x3\x2\x2\x2\x1229\x122A\x3\x2"+
		"\x2\x2\x122A\x177\x3\x2\x2\x2\x122B\x122C\a\x5\x2\x2\x122C\x1230\a\x226"+
		"\x2\x2\x122D\x122E\x5\x428\x215\x2\x122E\x122F\a\x368\x2\x2\x122F\x1231"+
		"\x3\x2\x2\x2\x1230\x122D\x3\x2\x2\x2\x1230\x1231\x3\x2\x2\x2\x1231\x1232"+
		"\x3\x2\x2\x2\x1232\x1238\x5\x428\x215\x2\x1233\x1236\a\x30F\x2\x2\x1234"+
		"\x1235\a\xBD\x2\x2\x1235\x1237\a\x355\x2\x2\x1236\x1234\x3\x2\x2\x2\x1236"+
		"\x1237\x3\x2\x2\x2\x1237\x1239\x3\x2\x2\x2\x1238\x1233\x3\x2\x2\x2\x1238"+
		"\x1239\x3\x2\x2\x2\x1239\x123D\x3\x2\x2\x2\x123A\x123B\a\x2C5\x2\x2\x123B"+
		"\x123C\a\x12\x2\x2\x123C\x123E\a\x355\x2\x2\x123D\x123A\x3\x2\x2\x2\x123D"+
		"\x123E\x3\x2\x2\x2\x123E\x1243\x3\x2\x2\x2\x123F\x1240\a\x2E7\x2\x2\x1240"+
		"\x1244\a\x355\x2\x2\x1241\x1242\a\x1B3\x2\x2\x1242\x1244\a\x2E7\x2\x2"+
		"\x1243\x123F\x3\x2\x2\x2\x1243\x1241\x3\x2\x2\x2\x1243\x1244\x3\x2\x2"+
		"\x2\x1244\x1249\x3\x2\x2\x2\x1245\x1246\a\x2DB\x2\x2\x1246\x124A\a\x355"+
		"\x2\x2\x1247\x1248\a\x1B3\x2\x2\x1248\x124A\a\x2DB\x2\x2\x1249\x1245\x3"+
		"\x2\x2\x2\x1249\x1247\x3\x2\x2\x2\x1249\x124A\x3\x2\x2\x2\x124A\x124E"+
		"\x3\x2\x2\x2\x124B\x124F\a\x2A3\x2\x2\x124C\x124D\a\x1B3\x2\x2\x124D\x124F"+
		"\a\x2A3\x2\x2\x124E\x124B\x3\x2\x2\x2\x124E\x124C\x3\x2\x2\x2\x124E\x124F"+
		"\x3\x2\x2\x2\x124F\x1254\x3\x2\x2\x2\x1250\x1251\a\x28F\x2\x2\x1251\x1255"+
		"\a\x355\x2\x2\x1252\x1253\a\x1B3\x2\x2\x1253\x1255\a\x28F\x2\x2\x1254"+
		"\x1250\x3\x2\x2\x2\x1254\x1252\x3\x2\x2\x2\x1254\x1255\x3\x2\x2\x2\x1255"+
		"\x179\x3\x2\x2\x2\x1256\x1257\a#\x2\x2\x1257\x125B\a\x226\x2\x2\x1258"+
		"\x1259\x5\x428\x215\x2\x1259\x125A\a\x368\x2\x2\x125A\x125C\x3\x2\x2\x2"+
		"\x125B\x1258\x3\x2\x2\x2\x125B\x125C\x3\x2\x2\x2\x125C\x125D\x3\x2\x2"+
		"\x2\x125D\x1260\x5\x428\x215\x2\x125E\x125F\a\b\x2\x2\x125F\x1261\x5\x41E"+
		"\x210\x2\x1260\x125E\x3\x2\x2\x2\x1260\x1261\x3\x2\x2\x2\x1261\x1265\x3"+
		"\x2\x2\x2\x1262\x1263\a\x332\x2\x2\x1263\x1264\a\xBD\x2\x2\x1264\x1266"+
		"\a\x355\x2\x2\x1265\x1262\x3\x2\x2\x2\x1265\x1266\x3\x2\x2\x2\x1266\x126D"+
		"\x3\x2\x2\x2\x1267\x1268\a\x2C5\x2\x2\x1268\x126A\a\x12\x2\x2\x1269\x126B"+
		"\a\x377\x2\x2\x126A\x1269\x3\x2\x2\x2\x126A\x126B\x3\x2\x2\x2\x126B\x126C"+
		"\x3\x2\x2\x2\x126C\x126E\a\x355\x2\x2\x126D\x1267\x3\x2\x2\x2\x126D\x126E"+
		"\x3\x2\x2\x2\x126E\x1278\x3\x2\x2\x2\x126F\x1274\a\x2E7\x2\x2\x1270\x1272"+
		"\a\x377\x2\x2\x1271\x1270\x3\x2\x2\x2\x1271\x1272\x3\x2\x2\x2\x1272\x1273"+
		"\x3\x2\x2\x2\x1273\x1275\a\x355\x2\x2\x1274\x1271\x3\x2\x2\x2\x1274\x1275"+
		"\x3\x2\x2\x2\x1275\x1279\x3\x2\x2\x2\x1276\x1277\a\x1B3\x2\x2\x1277\x1279"+
		"\a\x2E7\x2\x2\x1278\x126F\x3\x2\x2\x2\x1278\x1276\x3\x2\x2\x2\x1278\x1279"+
		"\x3\x2\x2\x2\x1279\x1283\x3\x2\x2\x2\x127A\x127F\a\x2DB\x2\x2\x127B\x127D"+
		"\a\x377\x2\x2\x127C\x127B\x3\x2\x2\x2\x127C\x127D\x3\x2\x2\x2\x127D\x127E"+
		"\x3\x2\x2\x2\x127E\x1280\a\x355\x2\x2\x127F\x127C\x3\x2\x2\x2\x127F\x1280"+
		"\x3\x2\x2\x2\x1280\x1284\x3\x2\x2\x2\x1281\x1282\a\x1B3\x2\x2\x1282\x1284"+
		"\a\x2DB\x2\x2\x1283\x127A\x3\x2\x2\x2\x1283\x1281\x3\x2\x2\x2\x1283\x1284"+
		"\x3\x2\x2\x2\x1284\x1288\x3\x2\x2\x2\x1285\x1289\a\x2A3\x2\x2\x1286\x1287"+
		"\a\x1B3\x2\x2\x1287\x1289\a\x2A3\x2\x2\x1288\x1285\x3\x2\x2\x2\x1288\x1286"+
		"\x3\x2\x2\x2\x1288\x1289\x3\x2\x2\x2\x1289\x1290\x3\x2\x2\x2\x128A\x128C"+
		"\a\x28F\x2\x2\x128B\x128D\a\x355\x2\x2\x128C\x128B\x3\x2\x2\x2\x128C\x128D"+
		"\x3\x2\x2\x2\x128D\x1291\x3\x2\x2\x2\x128E\x128F\a\x1B3\x2\x2\x128F\x1291"+
		"\a\x28F\x2\x2\x1290\x128A\x3\x2\x2\x2\x1290\x128E\x3\x2\x2\x2\x1290\x1291"+
		"\x3\x2\x2\x2\x1291\x17B\x3\x2\x2\x2\x1292\x1293\a\x5\x2\x2\x1293\x1294"+
		"\a\x31F\x2\x2\x1294\x1295\a\xDB\x2\x2\x1295\x1319\x5\x428\x215\x2\x1296"+
		"\x12C3\a\xA8\x2\x2\x1297\x1298\a\x45\x2\x2\x1298\x12BD\a\x36D\x2\x2\x1299"+
		"\x129B\a\x36F\x2\x2\x129A\x1299\x3\x2\x2\x2\x129A\x129B\x3\x2\x2\x2\x129B"+
		"\x129C\x3\x2\x2\x2\x129C\x129D\a\x14B\x2\x2\x129D\x129E\a\x35B\x2\x2\x129E"+
		"\x12BC\a\x357\x2\x2\x129F\x12A1\a\x36F\x2\x2\x12A0\x129F\x3\x2\x2\x2\x12A0"+
		"\x12A1\x3\x2\x2\x2\x12A1\x12A2\x3\x2\x2\x2\x12A2\x12A3\a\x19B\x2\x2\x12A3"+
		"\x12A7\a\x35B\x2\x2\x12A4\x12A5\a\x355\x2\x2\x12A5\x12A8\t.\x2\x2\x12A6"+
		"\x12A8\a\x25F\x2\x2\x12A7\x12A4\x3\x2\x2\x2\x12A7\x12A6\x3\x2\x2\x2\x12A8"+
		"\x12BC\x3\x2\x2\x2\x12A9\x12AB\a\x36F\x2\x2\x12AA\x12A9\x3\x2\x2\x2\x12AA"+
		"\x12AB\x3\x2\x2\x2\x12AB\x12AC\x3\x2\x2\x2\x12AC\x12AD\a\x198\x2\x2\x12AD"+
		"\x12AE\a\x35B\x2\x2\x12AE\x12BC\t/\x2\x2\x12AF\x12B1\a\x36F\x2\x2\x12B0"+
		"\x12AF\x3\x2\x2\x2\x12B0\x12B1\x3\x2\x2\x2\x12B1\x12B2\x3\x2\x2\x2\x12B2"+
		"\x12B3\a\x193\x2\x2\x12B3\x12B4\a\x35B\x2\x2\x12B4\x12BC\a\x355\x2\x2"+
		"\x12B5\x12B7\a\x36F\x2\x2\x12B6\x12B5\x3\x2\x2\x2\x12B6\x12B7\x3\x2\x2"+
		"\x2\x12B7\x12B8\x3\x2\x2\x2\x12B8\x12B9\a\x207\x2\x2\x12B9\x12BA\a\x35B"+
		"\x2\x2\x12BA\x12BC\t\t\x2\x2\x12BB\x129A\x3\x2\x2\x2\x12BB\x12A0\x3\x2"+
		"\x2\x2\x12BB\x12AA\x3\x2\x2\x2\x12BB\x12B0\x3\x2\x2\x2\x12BB\x12B6\x3"+
		"\x2\x2\x2\x12BC\x12BF\x3\x2\x2\x2\x12BD\x12BB\x3\x2\x2\x2\x12BD\x12BE"+
		"\x3\x2\x2\x2\x12BE\x12C0\x3\x2\x2\x2\x12BF\x12BD\x3\x2\x2\x2\x12C0\x12C4"+
		"\a\x36E\x2\x2\x12C1\x12C4\a\xD7\x2\x2\x12C2\x12C4\a\x220\x2\x2\x12C3\x1297"+
		"\x3\x2\x2\x2\x12C3\x12C1\x3\x2\x2\x2\x12C3\x12C2\x3\x2\x2\x2\x12C4\x12C6"+
		"\x3\x2\x2\x2\x12C5\x1296\x3\x2\x2\x2\x12C5\x12C6\x3\x2\x2\x2\x12C6\x12E1"+
		"\x3\x2\x2\x2\x12C7\x12C8\a\xBD\x2\x2\x12C8\x12DD\a\x36D\x2\x2\x12C9\x12CB"+
		"\a\x36F\x2\x2\x12CA\x12C9\x3\x2\x2\x2\x12CA\x12CB\x3\x2\x2\x2\x12CB\x12CC"+
		"\x3\x2\x2\x2\x12CC\x12CD\a\x1EA\x2\x2\x12CD\x12CE\a\x35B\x2\x2\x12CE\x12DC"+
		"\a\x355\x2\x2\x12CF\x12D1\a\x36F\x2\x2\x12D0\x12CF\x3\x2\x2\x2\x12D0\x12D1"+
		"\x3\x2\x2\x2\x12D1\x12D2\x3\x2\x2\x2\x12D2\x12D3\a\x2F6\x2\x2\x12D3\x12D4"+
		"\a\x35B\x2\x2\x12D4\x12DC\t\x30\x2\x2\x12D5\x12D7\a\x36F\x2\x2\x12D6\x12D5"+
		"\x3\x2\x2\x2\x12D6\x12D7\x3\x2\x2\x2\x12D7\x12D8\x3\x2\x2\x2\x12D8\x12D9"+
		"\a\x330\x2\x2\x12D9\x12DA\a\x35B\x2\x2\x12DA\x12DC\t\t\x2\x2\x12DB\x12CA"+
		"\x3\x2\x2\x2\x12DB\x12D0\x3\x2\x2\x2\x12DB\x12D6\x3\x2\x2\x2\x12DC\x12DF"+
		"\x3\x2\x2\x2\x12DD\x12DB\x3\x2\x2\x2\x12DD\x12DE\x3\x2\x2\x2\x12DE\x12E0"+
		"\x3\x2\x2\x2\x12DF\x12DD\x3\x2\x2\x2\x12E0\x12E2\a\x36E\x2\x2\x12E1\x12C7"+
		"\x3\x2\x2\x2\x12E1\x12E2\x3\x2\x2\x2\x12E2\x1311\x3\x2\x2\x2\x12E3\x130F"+
		"\a\xBB\x2\x2\x12E4\x12E6\a\x36F\x2\x2\x12E5\x12E4\x3\x2\x2\x2\x12E5\x12E6"+
		"\x3\x2\x2\x2\x12E6\x12E8\x3\x2\x2\x2\x12E7\x12E9\aj\x2\x2\x12E8\x12E7"+
		"\x3\x2\x2\x2\x12E8\x12E9\x3\x2\x2\x2\x12E9\x12EA\x3\x2\x2\x2\x12EA\x12F6"+
		"\x5\x428\x215\x2\x12EB\x12F7\a\x35B\x2\x2\x12EC\x12ED\a\x35D\x2\x2\x12ED"+
		"\x12F7\a\x35C\x2\x2\x12EE\x12EF\a\x35E\x2\x2\x12EF\x12F7\a\x35B\x2\x2"+
		"\x12F0\x12F7\a\x35C\x2\x2\x12F1\x12F2\a\x35C\x2\x2\x12F2\x12F7\a\x35B"+
		"\x2\x2\x12F3\x12F7\a\x35D\x2\x2\x12F4\x12F5\a\x35D\x2\x2\x12F5\x12F7\a"+
		"\x35B\x2\x2\x12F6\x12EB\x3\x2\x2\x2\x12F6\x12EC\x3\x2\x2\x2\x12F6\x12EE"+
		"\x3\x2\x2\x2\x12F6\x12F0\x3\x2\x2\x2\x12F6\x12F1\x3\x2\x2\x2\x12F6\x12F3"+
		"\x3\x2\x2\x2\x12F6\x12F4\x3\x2\x2\x2\x12F7\x12F8\x3\x2\x2\x2\x12F8\x12F9"+
		"\t\x1C\x2\x2\x12F9\x1310\x3\x2\x2\x2\x12FA\x12FC\a\x36F\x2\x2\x12FB\x12FA"+
		"\x3\x2\x2\x2\x12FB\x12FC\x3\x2\x2\x2\x12FC\x12FD\x3\x2\x2\x2\x12FD\x12FF"+
		"\t!\x2\x2\x12FE\x1300\aj\x2\x2\x12FF\x12FE\x3\x2\x2\x2\x12FF\x1300\x3"+
		"\x2\x2\x2\x1300\x130C\x3\x2\x2\x2\x1301\x130D\a\x35B\x2\x2\x1302\x1303"+
		"\a\x35D\x2\x2\x1303\x130D\a\x35C\x2\x2\x1304\x1305\a\x35E\x2\x2\x1305"+
		"\x130D\a\x35B\x2\x2\x1306\x130D\a\x35C\x2\x2\x1307\x1308\a\x35C\x2\x2"+
		"\x1308\x130D\a\x35B\x2\x2\x1309\x130D\a\x35D\x2\x2\x130A\x130B\a\x35D"+
		"\x2\x2\x130B\x130D\a\x35B\x2\x2\x130C\x1301\x3\x2\x2\x2\x130C\x1302\x3"+
		"\x2\x2\x2\x130C\x1304\x3\x2\x2\x2\x130C\x1306\x3\x2\x2\x2\x130C\x1307"+
		"\x3\x2\x2\x2\x130C\x1309\x3\x2\x2\x2\x130C\x130A\x3\x2\x2\x2\x130D\x130E"+
		"\x3\x2\x2\x2\x130E\x1310\t\x1C\x2\x2\x130F\x12E5\x3\x2\x2\x2\x130F\x12FB"+
		"\x3\x2\x2\x2\x1310\x1312\x3\x2\x2\x2\x1311\x12E3\x3\x2\x2\x2\x1311\x1312"+
		"\x3\x2\x2\x2\x1312\x131A\x3\x2\x2\x2\x1313\x1314\a\x1FF\x2\x2\x1314\x131A"+
		"\a\xBB\x2\x2\x1315\x1316\a\x1A9\x2\x2\x1316\x1317\a\x1AC\x2\x2\x1317\x1318"+
		"\a\x35B\x2\x2\x1318\x131A\x5\x428\x215\x2\x1319\x12C5\x3\x2\x2\x2\x1319"+
		"\x1313\x3\x2\x2\x2\x1319\x1315\x3\x2\x2\x2\x131A\x17D\x3\x2\x2\x2\x131B"+
		"\x131C\a#\x2\x2\x131C\x131D\a\x31F\x2\x2\x131D\x131E\a\xDB\x2\x2\x131E"+
		"\x13A8\x5\x428\x215\x2\x131F\x134C\a\xA8\x2\x2\x1320\x1321\a\x45\x2\x2"+
		"\x1321\x1346\a\x36D\x2\x2\x1322\x1324\a\x36F\x2\x2\x1323\x1322\x3\x2\x2"+
		"\x2\x1323\x1324\x3\x2\x2\x2\x1324\x1325\x3\x2\x2\x2\x1325\x1326\a\x14B"+
		"\x2\x2\x1326\x1327\a\x35B\x2\x2\x1327\x1345\a\x357\x2\x2\x1328\x132A\a"+
		"\x36F\x2\x2\x1329\x1328\x3\x2\x2\x2\x1329\x132A\x3\x2\x2\x2\x132A\x132B"+
		"\x3\x2\x2\x2\x132B\x132C\a\x19B\x2\x2\x132C\x1330\a\x35B\x2\x2\x132D\x132E"+
		"\a\x355\x2\x2\x132E\x1331\t.\x2\x2\x132F\x1331\a\x25F\x2\x2\x1330\x132D"+
		"\x3\x2\x2\x2\x1330\x132F\x3\x2\x2\x2\x1331\x1345\x3\x2\x2\x2\x1332\x1334"+
		"\a\x36F\x2\x2\x1333\x1332\x3\x2\x2\x2\x1333\x1334\x3\x2\x2\x2\x1334\x1335"+
		"\x3\x2\x2\x2\x1335\x1336\a\x198\x2\x2\x1336\x1337\a\x35B\x2\x2\x1337\x1345"+
		"\t/\x2\x2\x1338\x133A\a\x36F\x2\x2\x1339\x1338\x3\x2\x2\x2\x1339\x133A"+
		"\x3\x2\x2\x2\x133A\x133B\x3\x2\x2\x2\x133B\x133C\a\x193\x2\x2\x133C\x133D"+
		"\a\x35B\x2\x2\x133D\x1345\a\x355\x2\x2\x133E\x1340\a\x36F\x2\x2\x133F"+
		"\x133E\x3\x2\x2\x2\x133F\x1340\x3\x2\x2\x2\x1340\x1341\x3\x2\x2\x2\x1341"+
		"\x1342\a\x207\x2\x2\x1342\x1343\a\x35B\x2\x2\x1343\x1345\t\t\x2\x2\x1344"+
		"\x1323\x3\x2\x2\x2\x1344\x1329\x3\x2\x2\x2\x1344\x1333\x3\x2\x2\x2\x1344"+
		"\x1339\x3\x2\x2\x2\x1344\x133F\x3\x2\x2\x2\x1345\x1348\x3\x2\x2\x2\x1346"+
		"\x1344\x3\x2\x2\x2\x1346\x1347\x3\x2\x2\x2\x1347\x1349\x3\x2\x2\x2\x1348"+
		"\x1346\x3\x2\x2\x2\x1349\x134D\a\x36E\x2\x2\x134A\x134D\a\xD7\x2\x2\x134B"+
		"\x134D\a\x220\x2\x2\x134C\x1320\x3\x2\x2\x2\x134C\x134A\x3\x2\x2\x2\x134C"+
		"\x134B\x3\x2\x2\x2\x134D\x134F\x3\x2\x2\x2\x134E\x131F\x3\x2\x2\x2\x134E"+
		"\x134F\x3\x2\x2\x2\x134F\x1370\x3\x2\x2\x2\x1350\x1351\a\xBD\x2\x2\x1351"+
		"\x136C\a\x36D\x2\x2\x1352\x1354\a\x36F\x2\x2\x1353\x1352\x3\x2\x2\x2\x1353"+
		"\x1354\x3\x2\x2\x2\x1354\x1355\x3\x2\x2\x2\x1355\x1356\a\x1EA\x2\x2\x1356"+
		"\x1357\a\x35B\x2\x2\x1357\x136B\a\x355\x2\x2\x1358\x135A\a\x36F\x2\x2"+
		"\x1359\x1358\x3\x2\x2\x2\x1359\x135A\x3\x2\x2\x2\x135A\x135B\x3\x2\x2"+
		"\x2\x135B\x135C\a\x2F6\x2\x2\x135C\x135D\a\x35B\x2\x2\x135D\x136B\t\x30"+
		"\x2\x2\x135E\x1360\a\x36F\x2\x2\x135F\x135E\x3\x2\x2\x2\x135F\x1360\x3"+
		"\x2\x2\x2\x1360\x1361\x3\x2\x2\x2\x1361\x1362\a\x330\x2\x2\x1362\x1363"+
		"\a\x35B\x2\x2\x1363\x136B\t\t\x2\x2\x1364\x1366\a\x36F\x2\x2\x1365\x1364"+
		"\x3\x2\x2\x2\x1365\x1366\x3\x2\x2\x2\x1366\x1367\x3\x2\x2\x2\x1367\x1368"+
		"\a\xDC\x2\x2\x1368\x1369\a\x35B\x2\x2\x1369\x136B\x5\x428\x215\x2\x136A"+
		"\x1353\x3\x2\x2\x2\x136A\x1359\x3\x2\x2\x2\x136A\x135F\x3\x2\x2\x2\x136A"+
		"\x1365\x3\x2\x2\x2\x136B\x136E\x3\x2\x2\x2\x136C\x136A\x3\x2\x2\x2\x136C"+
		"\x136D\x3\x2\x2\x2\x136D\x136F\x3\x2\x2\x2\x136E\x136C\x3\x2\x2\x2\x136F"+
		"\x1371\a\x36E\x2\x2\x1370\x1350\x3\x2\x2\x2\x1370\x1371\x3\x2\x2\x2\x1371"+
		"\x13A0\x3\x2\x2\x2\x1372\x139E\a\xBB\x2\x2\x1373\x1375\a\x36F\x2\x2\x1374"+
		"\x1373\x3\x2\x2\x2\x1374\x1375\x3\x2\x2\x2\x1375\x1377\x3\x2\x2\x2\x1376"+
		"\x1378\aj\x2\x2\x1377\x1376\x3\x2\x2\x2\x1377\x1378\x3\x2\x2\x2\x1378"+
		"\x1379\x3\x2\x2\x2\x1379\x1385\x5\x428\x215\x2\x137A\x1386\a\x35B\x2\x2"+
		"\x137B\x137C\a\x35D\x2\x2\x137C\x1386\a\x35C\x2\x2\x137D\x137E\a\x35E"+
		"\x2\x2\x137E\x1386\a\x35B\x2\x2\x137F\x1386\a\x35C\x2\x2\x1380\x1381\a"+
		"\x35C\x2\x2\x1381\x1386\a\x35B\x2\x2\x1382\x1386\a\x35D\x2\x2\x1383\x1384"+
		"\a\x35D\x2\x2\x1384\x1386\a\x35B\x2\x2\x1385\x137A\x3\x2\x2\x2\x1385\x137B"+
		"\x3\x2\x2\x2\x1385\x137D\x3\x2\x2\x2\x1385\x137F\x3\x2\x2\x2\x1385\x1380"+
		"\x3\x2\x2\x2\x1385\x1382\x3\x2\x2\x2\x1385\x1383\x3\x2\x2\x2\x1386\x1387"+
		"\x3\x2\x2\x2\x1387\x1388\t\x1C\x2\x2\x1388\x139F\x3\x2\x2\x2\x1389\x138B"+
		"\a\x36F\x2\x2\x138A\x1389\x3\x2\x2\x2\x138A\x138B\x3\x2\x2\x2\x138B\x138C"+
		"\x3\x2\x2\x2\x138C\x138E\t!\x2\x2\x138D\x138F\aj\x2\x2\x138E\x138D\x3"+
		"\x2\x2\x2\x138E\x138F\x3\x2\x2\x2\x138F\x139B\x3\x2\x2\x2\x1390\x139C"+
		"\a\x35B\x2\x2\x1391\x1392\a\x35D\x2\x2\x1392\x139C\a\x35C\x2\x2\x1393"+
		"\x1394\a\x35E\x2\x2\x1394\x139C\a\x35B\x2\x2\x1395\x139C\a\x35C\x2\x2"+
		"\x1396\x1397\a\x35C\x2\x2\x1397\x139C\a\x35B\x2\x2\x1398\x139C\a\x35D"+
		"\x2\x2\x1399\x139A\a\x35D\x2\x2\x139A\x139C\a\x35B\x2\x2\x139B\x1390\x3"+
		"\x2\x2\x2\x139B\x1391\x3\x2\x2\x2\x139B\x1393\x3\x2\x2\x2\x139B\x1395"+
		"\x3\x2\x2\x2\x139B\x1396\x3\x2\x2\x2\x139B\x1398\x3\x2\x2\x2\x139B\x1399"+
		"\x3\x2\x2\x2\x139C\x139D\x3\x2\x2\x2\x139D\x139F\t\x1C\x2\x2\x139E\x1374"+
		"\x3\x2\x2\x2\x139E\x138A\x3\x2\x2\x2\x139F\x13A1\x3\x2\x2\x2\x13A0\x1372"+
		"\x3\x2\x2\x2\x13A0\x13A1\x3\x2\x2\x2\x13A1\x13A9\x3\x2\x2\x2\x13A2\x13A3"+
		"\a\x1FF\x2\x2\x13A3\x13A9\a\xBB\x2\x2\x13A4\x13A5\a\x1A9\x2\x2\x13A5\x13A6"+
		"\a\x1AC\x2\x2\x13A6\x13A7\a\x35B\x2\x2\x13A7\x13A9\x5\x428\x215\x2\x13A8"+
		"\x134E\x3\x2\x2\x2\x13A8\x13A2\x3\x2\x2\x2\x13A8\x13A4\x3\x2\x2\x2\x13A9"+
		"\x17F\x3\x2\x2\x2\x13AA\x13AB\a\x5\x2\x2\x13AB\x13AC\a\x31F\x2\x2\x13AC"+
		"\x13AD\a\xDB\x2\x2\x13AD\x13AE\a\x32A\x2\x2\x13AE\x13B3\x5\x428\x215\x2"+
		"\x13AF\x13B0\aG\x2\x2\x13B0\x13B1\a\x31F\x2\x2\x13B1\x13B2\a\xDB\x2\x2"+
		"\x13B2\x13B4\x5\x428\x215\x2\x13B3\x13AF\x3\x2\x2\x2\x13B3\x13B4\x3\x2"+
		"\x2\x2\x13B4\x13BC\x3\x2\x2\x2\x13B5\x13B6\t\x19\x2\x2\x13B6\x13B7\a\x36D"+
		"\x2\x2\x13B7\x13B8\x5\x428\x215\x2\x13B8\x13B9\a\x36E\x2\x2\x13B9\x13BB"+
		"\x3\x2\x2\x2\x13BA\x13B5\x3\x2\x2\x2\x13BB\x13BE\x3\x2\x2\x2\x13BC\x13BA"+
		"\x3\x2\x2\x2\x13BC\x13BD\x3\x2\x2\x2\x13BD\x13C5\x3\x2\x2\x2\x13BE\x13BC"+
		"\x3\x2\x2\x2\x13BF\x13C0\a\xBD\x2\x2\x13C0\x13C1\a\x36D\x2\x2\x13C1\x13C2"+
		"\a\x330\x2\x2\x13C2\x13C3\a\x35B\x2\x2\x13C3\x13C4\t\t\x2\x2\x13C4\x13C6"+
		"\a\x36E\x2\x2\x13C5\x13BF\x3\x2\x2\x2\x13C5\x13C6\x3\x2\x2\x2\x13C6\x181"+
		"\x3\x2\x2\x2\x13C7\x13C8\a#\x2\x2\x13C8\x13C9\a\x31F\x2\x2\x13C9\x13CA"+
		"\a\xDB\x2\x2\x13CA\x13CB\a\x32A\x2\x2\x13CB\x13D0\x5\x428\x215\x2\x13CC"+
		"\x13CD\aG\x2\x2\x13CD\x13CE\a\x31F\x2\x2\x13CE\x13CF\a\xDB\x2\x2\x13CF"+
		"\x13D1\x5\x428\x215\x2\x13D0\x13CC\x3\x2\x2\x2\x13D0\x13D1\x3\x2\x2\x2"+
		"\x13D1\x13D9\x3\x2\x2\x2\x13D2\x13D3\a\x3\x2\x2\x13D3\x13D4\a\x36D\x2"+
		"\x2\x13D4\x13D5\x5\x428\x215\x2\x13D5\x13D6\a\x36E\x2\x2\x13D6\x13D8\x3"+
		"\x2\x2\x2\x13D7\x13D2\x3\x2\x2\x2\x13D8\x13DB\x3\x2\x2\x2\x13D9\x13D7"+
		"\x3\x2\x2\x2\x13D9\x13DA\x3\x2\x2\x2\x13DA\x13E2\x3\x2\x2\x2\x13DB\x13D9"+
		"\x3\x2\x2\x2\x13DC\x13DD\a\xBD\x2\x2\x13DD\x13DE\a\x36D\x2\x2\x13DE\x13DF"+
		"\a\x330\x2\x2\x13DF\x13E0\a\x35B\x2\x2\x13E0\x13E1\t\t\x2\x2\x13E1\x13E3"+
		"\a\x36E\x2\x2\x13E2\x13DC\x3\x2\x2\x2\x13E2\x13E3\x3\x2\x2\x2\x13E3\x183"+
		"\x3\x2\x2\x2\x13E4\x13E5\a\x5\x2\x2\x13E5\x13E6\a\x31F\x2\x2\x13E6\x13E7"+
		"\a\x29B\x2\x2\x13E7\x1451\a\x9E\x2\x2\x13E8\x13E9\a\x304\x2\x2\x13E9\x140D"+
		"\a\xCC\x2\x2\x13EA\x13EB\a\x10C\x2\x2\x13EB\x13FB\a\x35B\x2\x2\x13EC\x13FC"+
		"\a\xDD\x2\x2\x13ED\x13EF\a\x36F\x2\x2\x13EE\x13ED\x3\x2\x2\x2\x13EE\x13EF"+
		"\x3\x2\x2\x2\x13EF\x13F0\x3\x2\x2\x2\x13F0\x13F8\a\x355\x2\x2\x13F1\x13F3"+
		"\a\x36F\x2\x2\x13F2\x13F1\x3\x2\x2\x2\x13F2\x13F3\x3\x2\x2\x2\x13F3\x13F4"+
		"\x3\x2\x2\x2\x13F4\x13F5\a\x355\x2\x2\x13F5\x13F6\a\xA8\x2\x2\x13F6\x13F8"+
		"\a\x355\x2\x2\x13F7\x13EE\x3\x2\x2\x2\x13F7\x13F2\x3\x2\x2\x2\x13F8\x13F9"+
		"\x3\x2\x2\x2\x13F9\x13F7\x3\x2\x2\x2\x13F9\x13FA\x3\x2\x2\x2\x13FA\x13FC"+
		"\x3\x2\x2\x2\x13FB\x13EC\x3\x2\x2\x2\x13FB\x13F7\x3\x2\x2\x2\x13FC\x140E"+
		"\x3\x2\x2\x2\x13FD\x13FE\a\x1BF\x2\x2\x13FE\x1409\a\x35B\x2\x2\x13FF\x1401"+
		"\a\x36F\x2\x2\x1400\x13FF\x3\x2\x2\x2\x1400\x1401\x3\x2\x2\x2\x1401\x1402"+
		"\x3\x2\x2\x2\x1402\x140A\a\x355\x2\x2\x1403\x1405\a\x36F\x2\x2\x1404\x1403"+
		"\x3\x2\x2\x2\x1404\x1405\x3\x2\x2\x2\x1405\x1406\x3\x2\x2\x2\x1406\x1407"+
		"\a\x355\x2\x2\x1407\x1408\a\xA8\x2\x2\x1408\x140A\a\x355\x2\x2\x1409\x1400"+
		"\x3\x2\x2\x2\x1409\x1404\x3\x2\x2\x2\x140A\x140B\x3\x2\x2\x2\x140B\x1409"+
		"\x3\x2\x2\x2\x140B\x140C\x3\x2\x2\x2\x140C\x140E\x3\x2\x2\x2\x140D\x13EA"+
		"\x3\x2\x2\x2\x140D\x13FD\x3\x2\x2\x2\x140E\x1452\x3\x2\x2\x2\x140F\x1410"+
		"\a\x2AB\x2\x2\x1410\x1420\a\x2D5\x2\x2\x1411\x1421\ap\x2\x2\x1412\x1421"+
		"\an\x2\x2\x1413\x1414\a\x1D5\x2\x2\x1414\x1415\a\x35B\x2\x2\x1415\x1421"+
		"\t\x31\x2\x2\x1416\x1417\a\x2DF\x2\x2\x1417\x141B\a\x35B\x2\x2\x1418\x1419"+
		"\a\x355\x2\x2\x1419\x141C\a\x19C\x2\x2\x141A\x141C\a/\x2\x2\x141B\x1418"+
		"\x3\x2\x2\x2\x141B\x141A\x3\x2\x2\x2\x141C\x1421\x3\x2\x2\x2\x141D\x141E"+
		"\a\x193\x2\x2\x141E\x141F\a\x35B\x2\x2\x141F\x1421\t\x32\x2\x2\x1420\x1411"+
		"\x3\x2\x2\x2\x1420\x1412\x3\x2\x2\x2\x1420\x1413\x3\x2\x2\x2\x1420\x1416"+
		"\x3\x2\x2\x2\x1420\x141D\x3\x2\x2\x2\x1421\x1452\x3\x2\x2\x2\x1422\x1423"+
		"\a\x2B8\x2\x2\x1423\x1424\a\x297\x2\x2\x1424\x1436\a\x1E5\x2\x2\x1425"+
		"\x1426\a\x345\x2\x2\x1426\x1427\a\x35B\x2\x2\x1427\x1437\t\x31\x2\x2\x1428"+
		"\x1429\a\x32D\x2\x2\x1429\x142A\a\x35B\x2\x2\x142A\x1437\t\x31\x2\x2\x142B"+
		"\x142C\a\x32E\x2\x2\x142C\x142D\a\x35B\x2\x2\x142D\x1437\t\x31\x2\x2\x142E"+
		"\x142F\a\x32F\x2\x2\x142F\x1437\t\x31\x2\x2\x1430\x1431\a\x2B9\x2\x2\x1431"+
		"\x1432\a\x35B\x2\x2\x1432\x1437\t\x31\x2\x2\x1433\x1434\a\x2C1\x2\x2\x1434"+
		"\x1435\a\x35B\x2\x2\x1435\x1437\t\x32\x2\x2\x1436\x1425\x3\x2\x2\x2\x1436"+
		"\x1428\x3\x2\x2\x2\x1436\x142B\x3\x2\x2\x2\x1436\x142E\x3\x2\x2\x2\x1436"+
		"\x1430\x3\x2\x2\x2\x1436\x1433\x3\x2\x2\x2\x1437\x1452\x3\x2\x2\x2\x1438"+
		"\x1439\a\x161\x2\x2\x1439\x143A\a\x297\x2\x2\x143A\x143B\a\x29D\x2\x2"+
		"\x143B\x143C\a\x35B\x2\x2\x143C\x1452\t\x33\x2\x2\x143D\x143E\a\x28D\x2"+
		"\x2\x143E\x143F\a\x1DA\x2\x2\x143F\x144C\a\x2B6\x2\x2\x1440\x1441\ap\x2"+
		"\x2\x1441\x1442\a\x36D\x2\x2\x1442\x1443\a\x14A\x2\x2\x1443\x1444\a\x35B"+
		"\x2\x2\x1444\x1445\a\x357\x2\x2\x1445\x1446\a\x36F\x2\x2\x1446\x1447\a"+
		"\x22F\x2\x2\x1447\x1448\a\x35B\x2\x2\x1448\x1449\a\x355\x2\x2\x1449\x144A"+
		"\t\x34\x2\x2\x144A\x144D\a\x36E\x2\x2\x144B\x144D\an\x2\x2\x144C\x1440"+
		"\x3\x2\x2\x2\x144C\x144B\x3\x2\x2\x2\x144D\x1452\x3\x2\x2\x2\x144E\x144F"+
		"\a\x9E\x2\x2\x144F\x1450\a\x328\x2\x2\x1450\x1452\t\t\x2\x2\x1451\x13E8"+
		"\x3\x2\x2\x2\x1451\x140F\x3\x2\x2\x2\x1451\x1422\x3\x2\x2\x2\x1451\x1438"+
		"\x3\x2\x2\x2\x1451\x143D\x3\x2\x2\x2\x1451\x144E\x3\x2\x2\x2\x1452\x185"+
		"\x3\x2\x2\x2\x1453\x1454\a\x5\x2\x2\x1454\x1455\a\x31F\x2\x2\x1455\x1456"+
		"\a\x314\x2\x2\x1456\x145E\x5\x428\x215\x2\x1457\x1458\t\x19\x2\x2\x1458"+
		"\x1459\a\x2E3\x2\x2\x1459\x145F\x5\x428\x215\x2\x145A\x145B\a\xBD\x2\x2"+
		"\x145B\x145C\a\x1AC\x2\x2\x145C\x145D\a\x35B\x2\x2\x145D\x145F\x5\x428"+
		"\x215\x2\x145E\x1457\x3\x2\x2\x2\x145E\x145A\x3\x2\x2\x2\x145F\x187\x3"+
		"\x2\x2\x2\x1460\x1461\a#\x2\x2\x1461\x1462\a\x31F\x2\x2\x1462\x1463\a"+
		"\x314\x2\x2\x1463\x1466\x5\x428\x215\x2\x1464\x1465\a\n\x2\x2\x1465\x1467"+
		"\x5\x428\x215\x2\x1466\x1464\x3\x2\x2\x2\x1466\x1467\x3\x2\x2\x2\x1467"+
		"\x189\x3\x2\x2\x2\x1468\x1469\a\x5\x2\x2\x1469\x146A\a\x31F\x2\x2\x146A"+
		"\x146B\a\x314\x2\x2\x146B\x146C\x5\x428\x215\x2\x146C\x146D\t\x19\x2\x2"+
		"\x146D\x146E\a\x2E3\x2\x2\x146E\x146F\x5\x428\x215\x2\x146F\x18B\x3\x2"+
		"\x2\x2\x1470\x1471\a\x5\x2\x2\x1471\x1472\a\x320\x2\x2\x1472\x147A\x5"+
		"\x428\x215\x2\x1473\x1474\ap\x2\x2\x1474\x1475\a\x1E9\x2\x2\x1475\x1476"+
		"\x5\x428\x215\x2\x1476\x1477\a\x368\x2\x2\x1477\x1478\x3\x2\x2\x2\x1478"+
		"\x1479\x5\x428\x215\x2\x1479\x147B\x3\x2\x2\x2\x147A\x1473\x3\x2\x2\x2"+
		"\x147A\x147B\x3\x2\x2\x2\x147B\x1483\x3\x2\x2\x2\x147C\x147E\a\x36F\x2"+
		"\x2\x147D\x147C\x3\x2\x2\x2\x147D\x147E\x3\x2\x2\x2\x147E\x147F\x3\x2"+
		"\x2\x2\x147F\x1480\t\x19\x2\x2\x1480\x1482\x5\x428\x215\x2\x1481\x147D"+
		"\x3\x2\x2\x2\x1482\x1485\x3\x2\x2\x2\x1483\x1481\x3\x2\x2\x2\x1483\x1484"+
		"\x3\x2\x2\x2\x1484\x18D\x3\x2\x2\x2\x1485\x1483\x3\x2\x2\x2\x1486\x1487"+
		"\a#\x2\x2\x1487\x1488\a\x320\x2\x2\x1488\x148B\x5\x428\x215\x2\x1489\x148A"+
		"\a\n\x2\x2\x148A\x148C\x5\x428\x215\x2\x148B\x1489\x3\x2\x2\x2\x148B\x148C"+
		"\x3\x2\x2\x2\x148C\x148D\x3\x2\x2\x2\x148D\x148E\ap\x2\x2\x148E\x1492"+
		"\a\x1E9\x2\x2\x148F\x1490\x5\x428\x215\x2\x1490\x1491\a\x368\x2\x2\x1491"+
		"\x1493\x3\x2\x2\x2\x1492\x148F\x3\x2\x2\x2\x1492\x1493\x3\x2\x2\x2\x1493"+
		"\x1494\x3\x2\x2\x2\x1494\x14A2\x5\x428\x215\x2\x1495\x149D\a\x36D\x2\x2"+
		"\x1496\x1498\a\x36F\x2\x2\x1497\x1496\x3\x2\x2\x2\x1497\x1498\x3\x2\x2"+
		"\x2\x1498\x149B\x3\x2\x2\x2\x1499\x149C\x5\x428\x215\x2\x149A\x149C\a"+
		"/\x2\x2\x149B\x1499\x3\x2\x2\x2\x149B\x149A\x3\x2\x2\x2\x149C\x149E\x3"+
		"\x2\x2\x2\x149D\x1497\x3\x2\x2\x2\x149E\x149F\x3\x2\x2\x2\x149F\x149D"+
		"\x3\x2\x2\x2\x149F\x14A0\x3\x2\x2\x2\x14A0\x14A1\x3\x2\x2\x2\x14A1\x14A3"+
		"\a\x36E\x2\x2\x14A2\x1495\x3\x2\x2\x2\x14A2\x14A3\x3\x2\x2\x2\x14A3\x18F"+
		"\x3\x2\x2\x2\x14A4\x14A5\a\x5\x2\x2\x14A5\x14A6\a\x320\x2\x2\x14A6\x14A7"+
		"\a\x2D8\x2\x2\x14A7\x14BD\a_\x2\x2\x14A8\x14AA\a\x151\x2\x2\x14A9\x14A8"+
		"\x3\x2\x2\x2\x14A9\x14AA\x3\x2\x2\x2\x14AA\x14AB\x3\x2\x2\x2\x14AB\x14BE"+
		"\a\x309\x2\x2\x14AC\x14BB\a\xBD\x2\x2\x14AD\x14AE\a\x1C5\x2\x2\x14AE\x14AF"+
		"\a\x35B\x2\x2\x14AF\x14B0\a\x357\x2\x2\x14B0\x14B1\a\x36F\x2\x2\x14B1"+
		"\x14B2\a\x2F5\x2\x2\x14B2\x14B3\a\x35B\x2\x2\x14B3\x14BC\a\x357\x2\x2"+
		"\x14B4\x14B5\a\x1AE\x2\x2\x14B5\x14B6\a\x35B\x2\x2\x14B6\x14B7\a\x357"+
		"\x2\x2\x14B7\x14B8\a\x36F\x2\x2\x14B8\x14B9\a\x1B0\x2\x2\x14B9\x14BA\a"+
		"\x35B\x2\x2\x14BA\x14BC\a\x357\x2\x2\x14BB\x14AD\x3\x2\x2\x2\x14BB\x14B4"+
		"\x3\x2\x2\x2\x14BB\x14BC\x3\x2\x2\x2\x14BC\x14BE\x3\x2\x2\x2\x14BD\x14A9"+
		"\x3\x2\x2\x2\x14BD\x14AC\x3\x2\x2\x2\x14BE\x191\x3\x2\x2\x2\x14BF\x14C0"+
		"\a\x5\x2\x2\x14C0\x14C1\a\x243\x2\x2\x14C1\x14C2\a_\x2\x2\x14C2\x14C3"+
		"\x5\x428\x215\x2\x14C3\x14C4\t\x19\x2\x2\x14C4\x14C5\a\x139\x2\x2\x14C5"+
		"\x14D1\a\x12\x2\x2\x14C6\x14C7\a\x291\x2\x2\x14C7\x14D2\x5\x428\x215\x2"+
		"\x14C8\x14C9\a\x2FB\x2\x2\x14C9\x14CA\a\x35B\x2\x2\x14CA\x14D2\a\x357"+
		"\x2\x2\x14CB\x14CC\a\x243\x2\x2\x14CC\x14CD\a_\x2\x2\x14CD\x14D2\x5\x428"+
		"\x215\x2\x14CE\x14CF\a\x281\x2\x2\x14CF\x14D0\a_\x2\x2\x14D0\x14D2\x5"+
		"\x428\x215\x2\x14D1\x14C6\x3\x2\x2\x2\x14D1\x14C8\x3\x2\x2\x2\x14D1\x14CB"+
		"\x3\x2\x2\x2\x14D1\x14CE\x3\x2\x2\x2\x14D2\x193\x3\x2\x2\x2\x14D3\x14D4"+
		"\a#\x2\x2\x14D4\x14D8\a\x245\x2\x2\x14D5\x14D6\x5\x428\x215\x2\x14D6\x14D7"+
		"\a\x368\x2\x2\x14D7\x14D9\x3\x2\x2\x2\x14D8\x14D5\x3\x2\x2\x2\x14D8\x14D9"+
		"\x3\x2\x2\x2\x14D9\x14DA\x3\x2\x2\x2\x14DA\x14DB\x5\x428\x215\x2\x14DB"+
		"\x14F6\aG\x2\x2\x14DC\x14DD\x5\x428\x215\x2\x14DD\x14DE\a\x368\x2\x2\x14DE"+
		"\x14E0\x3\x2\x2\x2\x14DF\x14DC\x3\x2\x2\x2\x14DF\x14E0\x3\x2\x2\x2\x14E0"+
		"\x14E4\x3\x2\x2\x2\x14E1\x14E2\x5\x428\x215\x2\x14E2\x14E3\a\x368\x2\x2"+
		"\x14E3\x14E5\x3\x2\x2\x2\x14E4\x14E1\x3\x2\x2\x2\x14E4\x14E5\x3\x2\x2"+
		"\x2\x14E5\x14E9\x3\x2\x2\x2\x14E6\x14E7\x5\x428\x215\x2\x14E7\x14E8\a"+
		"\x368\x2\x2\x14E8\x14EA\x3\x2\x2\x2\x14E9\x14E6\x3\x2\x2\x2\x14E9\x14EA"+
		"\x3\x2\x2\x2\x14EA\x14EB\x3\x2\x2\x2\x14EB\x14F7\x5\x428\x215\x2\x14EC"+
		"\x14ED\x5\x428\x215\x2\x14ED\x14EE\a\x368\x2\x2\x14EE\x14F0\x3\x2\x2\x2"+
		"\x14EF\x14EC\x3\x2\x2\x2\x14EF\x14F0\x3\x2\x2\x2\x14F0\x14F4\x3\x2\x2"+
		"\x2\x14F1\x14F2\x5\x428\x215\x2\x14F2\x14F3\a\x368\x2\x2\x14F3\x14F5\x3"+
		"\x2\x2\x2\x14F4\x14F1\x3\x2\x2\x2\x14F4\x14F5\x3\x2\x2\x2\x14F5\x14F7"+
		"\x3\x2\x2\x2\x14F6\x14DF\x3\x2\x2\x2\x14F6\x14EF\x3\x2\x2\x2\x14F7\x195"+
		"\x3\x2\x2\x2\x14F8\x14F9\a\x5\x2\x2\x14F9\x14FA\a\xB5\x2\x2\x14FA\x14FB"+
		"\x5\x428\x215\x2\x14FB\x152E\a\xBD\x2\x2\x14FC\x14FE\a\x36F\x2\x2\x14FD"+
		"\x14FC\x3\x2\x2\x2\x14FD\x14FE\x3\x2\x2\x2\x14FE\x14FF\x3\x2\x2\x2\x14FF"+
		"\x1500\a\x1AC\x2\x2\x1500\x1501\a\x35B\x2\x2\x1501\x152F\x5\x428\x215"+
		"\x2\x1502\x1504\a\x36F\x2\x2\x1503\x1502\x3\x2\x2\x2\x1503\x1504\x3\x2"+
		"\x2\x2\x1504\x1505\x3\x2\x2\x2\x1505\x1506\a\x2AA\x2\x2\x1506\x1509\a"+
		"\x35B\x2\x2\x1507\x150A\x5\x428\x215\x2\x1508\x150A\ak\x2\x2\x1509\x1507"+
		"\x3\x2\x2\x2\x1509\x1508\x3\x2\x2\x2\x150A\x152F\x3\x2\x2\x2\x150B\x150D"+
		"\a\x36F\x2\x2\x150C\x150B\x3\x2\x2\x2\x150C\x150D\x3\x2\x2\x2\x150D\x150E"+
		"\x3\x2\x2\x2\x150E\x150F\a\x18A\x2\x2\x150F\x1510\a\x35B\x2\x2\x1510\x152F"+
		"\x5\x428\x215\x2\x1511\x1513\a\x36F\x2\x2\x1512\x1511\x3\x2\x2\x2\x1512"+
		"\x1513\x3\x2\x2\x2\x1513\x1514\x3\x2\x2\x2\x1514\x1515\a\x2FB\x2\x2\x1515"+
		"\x1516\a\x35B\x2\x2\x1516\x151A\a\x357\x2\x2\x1517\x1518\a\x2F5\x2\x2"+
		"\x1518\x1519\a\x35B\x2\x2\x1519\x151B\a\x357\x2\x2\x151A\x1517\x3\x2\x2"+
		"\x2\x151B\x151C\x3\x2\x2\x2\x151C\x151A\x3\x2\x2\x2\x151C\x151D\x3\x2"+
		"\x2\x2\x151D\x152F\x3\x2\x2\x2\x151E\x1520\a\x36F\x2\x2\x151F\x151E\x3"+
		"\x2\x2\x2\x151F\x1520\x3\x2\x2\x2\x1520\x1521\x3\x2\x2\x2\x1521\x1522"+
		"\a\x120\x2\x2\x1522\x1526\a\x35B\x2\x2\x1523\x1527\a\x2EC\x2\x2\x1524"+
		"\x1527\a\x355\x2\x2\x1525\x1527\x5\x428\x215\x2\x1526\x1523\x3\x2\x2\x2"+
		"\x1526\x1524\x3\x2\x2\x2\x1526\x1525\x3\x2\x2\x2\x1527\x152F\x3\x2\x2"+
		"\x2\x1528\x152A\a\x36F\x2\x2\x1529\x1528\x3\x2\x2\x2\x1529\x152A\x3\x2"+
		"\x2\x2\x152A\x152B\x3\x2\x2\x2\x152B\x152C\a\xD0\x2\x2\x152C\x152D\a\x35B"+
		"\x2\x2\x152D\x152F\t\t\x2\x2\x152E\x14FD\x3\x2\x2\x2\x152E\x1503\x3\x2"+
		"\x2\x2\x152E\x150C\x3\x2\x2\x2\x152E\x1512\x3\x2\x2\x2\x152E\x151F\x3"+
		"\x2\x2\x2\x152E\x1529\x3\x2\x2\x2\x152F\x1530\x3\x2\x2\x2\x1530\x152E"+
		"\x3\x2\x2\x2\x1530\x1531\x3\x2\x2\x2\x1531\x197\x3\x2\x2\x2\x1532\x1533"+
		"\a#\x2\x2\x1533\x1534\a\xB5\x2\x2\x1534\x1538\x5\x428\x215\x2\x1535\x1536"+
		"\t\x35\x2\x2\x1536\x1537\a\x18A\x2\x2\x1537\x1539\x5\x428\x215\x2\x1538"+
		"\x1535\x3\x2\x2\x2\x1538\x1539\x3\x2\x2\x2\x1539\x154C\x3\x2\x2\x2\x153A"+
		"\x1549\a\xBD\x2\x2\x153B\x153D\a\x36F\x2\x2\x153C\x153B\x3\x2\x2\x2\x153C"+
		"\x153D\x3\x2\x2\x2\x153D\x153E\x3\x2\x2\x2\x153E\x153F\a\x2AA\x2\x2\x153F"+
		"\x1540\a\x35B\x2\x2\x1540\x1548\x5\x428\x215\x2\x1541\x1543\a\x36F\x2"+
		"\x2\x1542\x1541\x3\x2\x2\x2\x1542\x1543\x3\x2\x2\x2\x1543\x1544\x3\x2"+
		"\x2\x2\x1544\x1545\a\xD0\x2\x2\x1545\x1546\a\x35B\x2\x2\x1546\x1548\t"+
		"\t\x2\x2\x1547\x153C\x3\x2\x2\x2\x1547\x1542\x3\x2\x2\x2\x1548\x154B\x3"+
		"\x2\x2\x2\x1549\x1547\x3\x2\x2\x2\x1549\x154A\x3\x2\x2\x2\x154A\x154D"+
		"\x3\x2\x2\x2\x154B\x1549\x3\x2\x2\x2\x154C\x153A\x3\x2\x2\x2\x154C\x154D"+
		"\x3\x2\x2\x2\x154D\x15C5\x3\x2\x2\x2\x154E\x154F\a#\x2\x2\x154F\x15A0"+
		"\a\xB5\x2\x2\x1550\x1573\x5\x428\x215\x2\x1551\x1570\a\xBD\x2\x2\x1552"+
		"\x1554\a\x36F\x2\x2\x1553\x1552\x3\x2\x2\x2\x1553\x1554\x3\x2\x2\x2\x1554"+
		"\x1555\x3\x2\x2\x2\x1555\x1556\a\x2AA\x2\x2\x1556\x1557\a\x35B\x2\x2\x1557"+
		"\x156F\x5\x428\x215\x2\x1558\x155A\a\x36F\x2\x2\x1559\x1558\x3\x2\x2\x2"+
		"\x1559\x155A\x3\x2\x2\x2\x155A\x155B\x3\x2\x2\x2\x155B\x155C\a\x120\x2"+
		"\x2\x155C\x1560\a\x35B\x2\x2\x155D\x1561\a\x2EC\x2\x2\x155E\x1561\a\x355"+
		"\x2\x2\x155F\x1561\x5\x428\x215\x2\x1560\x155D\x3\x2\x2\x2\x1560\x155E"+
		"\x3\x2\x2\x2\x1560\x155F\x3\x2\x2\x2\x1561\x156F\x3\x2\x2\x2\x1562\x1564"+
		"\a\x36F\x2\x2\x1563\x1562\x3\x2\x2\x2\x1563\x1564\x3\x2\x2\x2\x1564\x1565"+
		"\x3\x2\x2\x2\x1565\x1566\a\x326\x2\x2\x1566\x1567\a\x35B\x2\x2\x1567\x156F"+
		"\a\x358\x2\x2\x1568\x156A\a\x36F\x2\x2\x1569\x1568\x3\x2\x2\x2\x1569\x156A"+
		"\x3\x2\x2\x2\x156A\x156B\x3\x2\x2\x2\x156B\x156C\a\xD0\x2\x2\x156C\x156D"+
		"\a\x35B\x2\x2\x156D\x156F\t\t\x2\x2\x156E\x1553\x3\x2\x2\x2\x156E\x1559"+
		"\x3\x2\x2\x2\x156E\x1563\x3\x2\x2\x2\x156E\x1569\x3\x2\x2\x2\x156F\x1572"+
		"\x3\x2\x2\x2\x1570\x156E\x3\x2\x2\x2\x1570\x1571\x3\x2\x2\x2\x1571\x1574"+
		"\x3\x2\x2\x2\x1572\x1570\x3\x2\x2\x2\x1573\x1551\x3\x2\x2\x2\x1573\x1574"+
		"\x3\x2\x2\x2\x1574\x15A1\x3\x2\x2\x2\x1575\x1576\x5\x428\x215\x2\x1576"+
		"\x1577\a\xBD\x2\x2\x1577\x1578\a\x2FB\x2\x2\x1578\x1579\a\x35B\x2\x2\x1579"+
		"\x1598\a\x357\x2\x2\x157A\x157C\a\x36F\x2\x2\x157B\x157A\x3\x2\x2\x2\x157B"+
		"\x157C\x3\x2\x2\x2\x157C\x157D\x3\x2\x2\x2\x157D\x157E\a\x2AA\x2\x2\x157E"+
		"\x157F\a\x35B\x2\x2\x157F\x1597\x5\x428\x215\x2\x1580\x1582\a\x36F\x2"+
		"\x2\x1581\x1580\x3\x2\x2\x2\x1581\x1582\x3\x2\x2\x2\x1582\x1583\x3\x2"+
		"\x2\x2\x1583\x1584\a\x120\x2\x2\x1584\x1588\a\x35B\x2\x2\x1585\x1589\a"+
		"\x2EC\x2\x2\x1586\x1589\a\x355\x2\x2\x1587\x1589\x5\x428\x215\x2\x1588"+
		"\x1585\x3\x2\x2\x2\x1588\x1586\x3\x2\x2\x2\x1588\x1587\x3\x2\x2\x2\x1589"+
		"\x1597\x3\x2\x2\x2\x158A\x158C\a\x36F\x2\x2\x158B\x158A\x3\x2\x2\x2\x158B"+
		"\x158C\x3\x2\x2\x2\x158C\x158D\x3\x2\x2\x2\x158D\x158E\a\x326\x2\x2\x158E"+
		"\x158F\a\x35B\x2\x2\x158F\x1597\a\x358\x2\x2\x1590\x1592\a\x36F\x2\x2"+
		"\x1591\x1590\x3\x2\x2\x2\x1591\x1592\x3\x2\x2\x2\x1592\x1593\x3\x2\x2"+
		"\x2\x1593\x1594\a\xD0\x2\x2\x1594\x1595\a\x35B\x2\x2\x1595\x1597\t\t\x2"+
		"\x2\x1596\x157B\x3\x2\x2\x2\x1596\x1581\x3\x2\x2\x2\x1596\x158B\x3\x2"+
		"\x2\x2\x1596\x1591\x3\x2\x2\x2\x1597\x159A\x3\x2\x2\x2\x1598\x1596\x3"+
		"\x2\x2\x2\x1598\x1599\x3\x2\x2\x2\x1599\x15A1\x3\x2\x2\x2\x159A\x1598"+
		"\x3\x2\x2\x2\x159B\x159C\x5\x428\x215\x2\x159C\x159D\aK\x2\x2\x159D\x159E"+
		"\a\x43\x2\x2\x159E\x159F\a\x1E6\x2\x2\x159F\x15A1\x3\x2\x2\x2\x15A0\x1550"+
		"\x3\x2\x2\x2\x15A0\x1575\x3\x2\x2\x2\x15A0\x159B\x3\x2\x2\x2\x15A1\x15C5"+
		"\x3\x2\x2\x2\x15A2\x15A3\a#\x2\x2\x15A3\x15A4\a\xB5\x2\x2\x15A4\x15BF"+
		"\x5\x428\x215\x2\x15A5\x15A6\a\x349\x2\x2\x15A6\x15B5\a\x18A\x2\x2\x15A7"+
		"\x15A9\a\x36F\x2\x2\x15A8\x15A7\x3\x2\x2\x2\x15A8\x15A9\x3\x2\x2\x2\x15A9"+
		"\x15AA\x3\x2\x2\x2\x15AA\x15AB\a\x2AA\x2\x2\x15AB\x15AC\a\x35B\x2\x2\x15AC"+
		"\x15B4\x5\x428\x215\x2\x15AD\x15AF\a\x36F\x2\x2\x15AE\x15AD\x3\x2\x2\x2"+
		"\x15AE\x15AF\x3\x2\x2\x2\x15AF\x15B0\x3\x2\x2\x2\x15B0\x15B1\a\xD0\x2"+
		"\x2\x15B1\x15B2\a\x35B\x2\x2\x15B2\x15B4\t\t\x2\x2\x15B3\x15A8\x3\x2\x2"+
		"\x2\x15B3\x15AE\x3\x2\x2\x2\x15B4\x15B7\x3\x2\x2\x2\x15B5\x15B3\x3\x2"+
		"\x2\x2\x15B5\x15B6\x3\x2\x2\x2\x15B6\x15C0\x3\x2\x2\x2\x15B7\x15B5\x3"+
		"\x2\x2\x2\x15B8\x15B9\t\x35\x2\x2\x15B9\x15BA\a\x291\x2\x2\x15BA\x15C0"+
		"\x5\x428\x215\x2\x15BB\x15BC\t\x35\x2\x2\x15BC\x15BD\a\x281\x2\x2\x15BD"+
		"\x15BE\a_\x2\x2\x15BE\x15C0\x5\x428\x215\x2\x15BF\x15A5\x3\x2\x2\x2\x15BF"+
		"\x15B8\x3\x2\x2\x2\x15BF\x15BB\x3\x2\x2\x2\x15C0\x15C5\x3\x2\x2\x2\x15C1"+
		"\x15C2\a#\x2\x2\x15C2\x15C3\a\xB5\x2\x2\x15C3\x15C5\x5\x428\x215\x2\x15C4"+
		"\x1532\x3\x2\x2\x2\x15C4\x154E\x3\x2\x2\x2\x15C4\x15A2\x3\x2\x2\x2\x15C4"+
		"\x15C1\x3\x2\x2\x2\x15C5\x199\x3\x2\x2\x2\x15C6\x15C7\a#\x2\x2\x15C7\x15C8"+
		"\a\xB5\x2\x2\x15C8\x15CE\x5\x428\x215\x2\x15C9\x15CA\t\x35\x2\x2\x15CA"+
		"\x15CB\a\x18A\x2\x2\x15CB\x15CF\x5\x428\x215\x2\x15CC\x15CD\a\x349\x2"+
		"\x2\x15CD\x15CF\a\x18A\x2\x2\x15CE\x15C9\x3\x2\x2\x2\x15CE\x15CC\x3\x2"+
		"\x2\x2\x15CE\x15CF\x3\x2\x2\x2\x15CF\x15D4\x3\x2\x2\x2\x15D0\x15D1\a\xBD"+
		"\x2\x2\x15D1\x15D2\a\x2AA\x2\x2\x15D2\x15D3\a\x35B\x2\x2\x15D3\x15D5\x5"+
		"\x428\x215\x2\x15D4\x15D0\x3\x2\x2\x2\x15D4\x15D5\x3\x2\x2\x2\x15D5\x15E3"+
		"\x3\x2\x2\x2\x15D6\x15D7\a#\x2\x2\x15D7\x15D8\a\xB5\x2\x2\x15D8\x15D9"+
		"\x5\x428\x215\x2\x15D9\x15DA\aK\x2\x2\x15DA\x15DB\a\x43\x2\x2\x15DB\x15E0"+
		"\a\x1E6\x2\x2\x15DC\x15DD\a\xBD\x2\x2\x15DD\x15DE\a\x2AA\x2\x2\x15DE\x15DF"+
		"\a\x35B\x2\x2\x15DF\x15E1\x5\x428\x215\x2\x15E0\x15DC\x3\x2\x2\x2\x15E0"+
		"\x15E1\x3\x2\x2\x2\x15E1\x15E3\x3\x2\x2\x2\x15E2\x15C6\x3\x2\x2\x2\x15E2"+
		"\x15D6\x3\x2\x2\x2\x15E3\x19B\x3\x2\x2\x2\x15E4\x15E5\a\x5\x2\x2\x15E5"+
		"\x15E6\a\xB5\x2\x2\x15E6\x15E7\x5\x428\x215\x2\x15E7\x1600\a\xBD\x2\x2"+
		"\x15E8\x15EA\a\x36F\x2\x2\x15E9\x15E8\x3\x2\x2\x2\x15E9\x15EA\x3\x2\x2"+
		"\x2\x15EA\x15EB\x3\x2\x2\x2\x15EB\x15EC\a\x1AC\x2\x2\x15EC\x15ED\a\x35B"+
		"\x2\x2\x15ED\x1601\x5\x428\x215\x2\x15EE\x15F0\a\x36F\x2\x2\x15EF\x15EE"+
		"\x3\x2\x2\x2\x15EF\x15F0\x3\x2\x2\x2\x15F0\x15F1\x3\x2\x2\x2\x15F1\x15F2"+
		"\a\x2AA\x2\x2\x15F2\x15F3\a\x35B\x2\x2\x15F3\x1601\x5\x428\x215\x2\x15F4"+
		"\x15F6\a\x36F\x2\x2\x15F5\x15F4\x3\x2\x2\x2\x15F5\x15F6\x3\x2\x2\x2\x15F6"+
		"\x15F7\x3\x2\x2\x2\x15F7\x15F8\a\x18A\x2\x2\x15F8\x15F9\a\x35B\x2\x2\x15F9"+
		"\x1601\x5\x428\x215\x2\x15FA\x15FC\a\x36F\x2\x2\x15FB\x15FA\x3\x2\x2\x2"+
		"\x15FB\x15FC\x3\x2\x2\x2\x15FC\x15FD\x3\x2\x2\x2\x15FD\x15FE\a\xD0\x2"+
		"\x2\x15FE\x15FF\a\x35B\x2\x2\x15FF\x1601\t\t\x2\x2\x1600\x15E9\x3\x2\x2"+
		"\x2\x1600\x15EF\x3\x2\x2\x2\x1600\x15F5\x3\x2\x2\x2\x1600\x15FB\x3\x2"+
		"\x2\x2\x1601\x1602\x3\x2\x2\x2\x1602\x1600\x3\x2\x2\x2\x1602\x1603\x3"+
		"\x2\x2\x2\x1603\x19D\x3\x2\x2\x2\x1604\x1605\a\x5\x2\x2\x1605\x1606\a"+
		"\x26F\x2\x2\x1606\x1609\aP\x2\x2\x1607\x160A\x5\x428\x215\x2\x1608\x160A"+
		"\a\x11E\x2\x2\x1609\x1607\x3\x2\x2\x2\x1609\x1608\x3\x2\x2\x2\x160A\x162A"+
		"\x3\x2\x2\x2\x160B\x160C\a\xBD\x2\x2\x160C\x1625\a\x36D\x2\x2\x160D\x160E"+
		"\a\x16B\x2\x2\x160E\x160F\a\x35B\x2\x2\x160F\x1626\t\x36\x2\x2\x1610\x1612"+
		"\a\x36F\x2\x2\x1611\x1610\x3\x2\x2\x2\x1611\x1612\x3\x2\x2\x2\x1612\x1613"+
		"\x3\x2\x2\x2\x1613\x1614\a\x204\x2\x2\x1614\x1615\a\x35B\x2\x2\x1615\x1626"+
		"\a\x355\x2\x2\x1616\x1618\a\x36F\x2\x2\x1617\x1616\x3\x2\x2\x2\x1617\x1618"+
		"\x3\x2\x2\x2\x1618\x1619\x3\x2\x2\x2\x1619\x161A\a\x203\x2\x2\x161A\x161B"+
		"\a\x35B\x2\x2\x161B\x1626\a\x355\x2\x2\x161C\x161D\a\x205\x2\x2\x161D"+
		"\x161E\a\x35B\x2\x2\x161E\x1626\a\x355\x2\x2\x161F\x1620\a\x192\x2\x2"+
		"\x1620\x1621\a\x35B\x2\x2\x1621\x1626\a\x355\x2\x2\x1622\x1623\a\x15E"+
		"\x2\x2\x1623\x1624\a\x35B\x2\x2\x1624\x1626\a\x355\x2\x2\x1625\x160D\x3"+
		"\x2\x2\x2\x1625\x1611\x3\x2\x2\x2\x1625\x1617\x3\x2\x2\x2\x1625\x161C"+
		"\x3\x2\x2\x2\x1625\x161F\x3\x2\x2\x2\x1625\x1622\x3\x2\x2\x2\x1626\x1627"+
		"\x3\x2\x2\x2\x1627\x1625\x3\x2\x2\x2\x1627\x1628\x3\x2\x2\x2\x1628\x1629"+
		"\x3\x2\x2\x2\x1629\x162B\a\x36E\x2\x2\x162A\x160B\x3\x2\x2\x2\x162A\x162B"+
		"\x3\x2\x2\x2\x162B\x1631\x3\x2\x2\x2\x162C\x162F\a\x262\x2\x2\x162D\x1630"+
		"\x5\x428\x215\x2\x162E\x1630\a\x11E\x2\x2\x162F\x162D\x3\x2\x2\x2\x162F"+
		"\x162E\x3\x2\x2\x2\x1630\x1632\x3\x2\x2\x2\x1631\x162C\x3\x2\x2\x2\x1631"+
		"\x1632\x3\x2\x2\x2\x1632\x19F\x3\x2\x2\x2\x1633\x1634\a#\x2\x2\x1634\x1635"+
		"\a\x26F\x2\x2\x1635\x1636\aP\x2\x2\x1636\x1656\x5\x428\x215\x2\x1637\x1638"+
		"\a\xBD\x2\x2\x1638\x1651\a\x36D\x2\x2\x1639\x163A\a\x16B\x2\x2\x163A\x163B"+
		"\a\x35B\x2\x2\x163B\x1652\t\x36\x2\x2\x163C\x163E\a\x36F\x2\x2\x163D\x163C"+
		"\x3\x2\x2\x2\x163D\x163E\x3\x2\x2\x2\x163E\x163F\x3\x2\x2\x2\x163F\x1640"+
		"\a\x204\x2\x2\x1640\x1641\a\x35B\x2\x2\x1641\x1652\a\x355\x2\x2\x1642"+
		"\x1644\a\x36F\x2\x2\x1643\x1642\x3\x2\x2\x2\x1643\x1644\x3\x2\x2\x2\x1644"+
		"\x1645\x3\x2\x2\x2\x1645\x1646\a\x203\x2\x2\x1646\x1647\a\x35B\x2\x2\x1647"+
		"\x1652\a\x355\x2\x2\x1648\x1649\a\x205\x2\x2\x1649\x164A\a\x35B\x2\x2"+
		"\x164A\x1652\a\x355\x2\x2\x164B\x164C\a\x192\x2\x2\x164C\x164D\a\x35B"+
		"\x2\x2\x164D\x1652\a\x355\x2\x2\x164E\x164F\a\x15E\x2\x2\x164F\x1650\a"+
		"\x35B\x2\x2\x1650\x1652\a\x355\x2\x2\x1651\x1639\x3\x2\x2\x2\x1651\x163D"+
		"\x3\x2\x2\x2\x1651\x1643\x3\x2\x2\x2\x1651\x1648\x3\x2\x2\x2\x1651\x164B"+
		"\x3\x2\x2\x2\x1651\x164E\x3\x2\x2\x2\x1652\x1653\x3\x2\x2\x2\x1653\x1651"+
		"\x3\x2\x2\x2\x1653\x1654\x3\x2\x2\x2\x1654\x1655\x3\x2\x2\x2\x1655\x1657"+
		"\a\x36E\x2\x2\x1656\x1637\x3\x2\x2\x2\x1656\x1657\x3\x2\x2\x2\x1657\x1665"+
		"\x3\x2\x2\x2\x1658\x165B\a\x262\x2\x2\x1659\x165C\x5\x428\x215\x2\x165A"+
		"\x165C\a\x11E\x2\x2\x165B\x1659\x3\x2\x2\x2\x165B\x165A\x3\x2\x2\x2\x165B"+
		"\x165C\x3\x2\x2\x2\x165C\x1663\x3\x2\x2\x2\x165D\x165F\a\x36F\x2\x2\x165E"+
		"\x165D\x3\x2\x2\x2\x165E\x165F\x3\x2\x2\x2\x165F\x1660\x3\x2\x2\x2\x1660"+
		"\x1661\a\x43\x2\x2\x1661\x1664\x5\x428\x215\x2\x1662\x1664\a\x11E\x2\x2"+
		"\x1663\x165E\x3\x2\x2\x2\x1663\x1662\x3\x2\x2\x2\x1663\x1664\x3\x2\x2"+
		"\x2\x1664\x1666\x3\x2\x2\x2\x1665\x1658\x3\x2\x2\x2\x1665\x1666\x3\x2"+
		"\x2\x2\x1666\x1A1\x3\x2\x2\x2\x1667\x1668\a#\x2\x2\x1668\x1669\a\x270"+
		"\x2\x2\x1669\x166A\a\x97\x2\x2\x166A\x166E\a\xFF\x2\x2\x166B\x166C\x5"+
		"\x428\x215\x2\x166C\x166D\a\x368\x2\x2\x166D\x166F\x3\x2\x2\x2\x166E\x166B"+
		"\x3\x2\x2\x2\x166E\x166F\x3\x2\x2\x2\x166F\x1670\x3\x2\x2\x2\x1670\x1671"+
		"\x5\x428\x215\x2\x1671\x1675\a\b\x2\x2\x1672\x1676\a\x357\x2\x2\x1673"+
		"\x1676\x5\x428\x215\x2\x1674\x1676\a\x354\x2\x2\x1675\x1672\x3\x2\x2\x2"+
		"\x1675\x1673\x3\x2\x2\x2\x1675\x1674\x3\x2\x2\x2\x1676\x1A3\x3\x2\x2\x2"+
		"\x1677\x1678\a#\x2\x2\x1678\x1679\a\x1D2\x2\x2\x1679\x167A\aM\x2\x2\x167A"+
		"\x167B\x5\x428\x215\x2\x167B\x167C\a\x36D\x2\x2\x167C\x167D\x5\x41E\x210"+
		"\x2\x167D\x167E\a\x36E\x2\x2\x167E\x167F\a\b\x2\x2\x167F\x1681\a\x1EC"+
		"\x2\x2\x1680\x1682\t\x37\x2\x2\x1681\x1680\x3\x2\x2\x2\x1681\x1682\x3"+
		"\x2\x2\x2\x1682\x1683\x3\x2\x2\x2\x1683\x1684\aG\x2\x2\x1684\x1685\a\xB6"+
		"\x2\x2\x1685\x1686\a\x36D\x2\x2\x1686\x1687\x5\x3C2\x1E2\x2\x1687\x1688"+
		"\a\x36E\x2\x2\x1688\x1A5\x3\x2\x2\x2\x1689\x168A\a#\x2\x2\x168A\x168B"+
		"\a\x1D2\x2\x2\x168B\x168C\a\x31D\x2\x2\x168C\x168D\x5\x428\x215\x2\x168D"+
		"\x168E\a\b\x2\x2\x168E\x168F\a\x1D2\x2\x2\x168F\x1691\x5\x428\x215\x2"+
		"\x1690\x1692\a\x4\x2\x2\x1691\x1690\x3\x2\x2\x2\x1691\x1692\x3\x2\x2\x2"+
		"\x1692\x1693\x3\x2\x2\x2\x1693\x1694\a\xA8\x2\x2\x1694\x1695\a\x36D\x2"+
		"\x2\x1695\x169A\x5\x428\x215\x2\x1696\x1697\a\x36F\x2\x2\x1697\x1699\x5"+
		"\x428\x215\x2\x1698\x1696\x3\x2\x2\x2\x1699\x169C\x3\x2\x2\x2\x169A\x1698"+
		"\x3\x2\x2\x2\x169A\x169B\x3\x2\x2\x2\x169B\x169D\x3\x2\x2\x2\x169C\x169A"+
		"\x3\x2\x2\x2\x169D\x169E\a\x36E\x2\x2\x169E\x1A7\x3\x2\x2\x2\x169F\x16A0"+
		"\a#\x2\x2\x16A0\x16A3\a\x1E9\x2\x2\x16A1\x16A4\x5\x3E8\x1F5\x2\x16A2\x16A4"+
		"\x5\x428\x215\x2\x16A3\x16A1\x3\x2\x2\x2\x16A3\x16A2\x3\x2\x2\x2\x16A4"+
		"\x16A6\x3\x2\x2\x2\x16A5\x16A7\x5\x1AA\xD6\x2\x16A6\x16A5\x3\x2\x2\x2"+
		"\x16A6\x16A7\x3\x2\x2\x2\x16A7\x16AB\x3\x2\x2\x2\x16A8\x16A9\ap\x2\x2"+
		"\x16A9\x16AC\x5\x428\x215\x2\x16AA\x16AC\a/\x2\x2\x16AB\x16A8\x3\x2\x2"+
		"\x2\x16AB\x16AA\x3\x2\x2\x2\x16AB\x16AC\x3\x2\x2\x2\x16AC\x1A9\x3\x2\x2"+
		"\x2\x16AD\x16B4\a\xBD\x2\x2\x16AE\x16AF\a\x237\x2\x2\x16AF\x16B0\a\x35B"+
		"\x2\x2\x16B0\x16B2\t\t\x2\x2\x16B1\x16B3\a\x36F\x2\x2\x16B2\x16B1\x3\x2"+
		"\x2\x2\x16B2\x16B3\x3\x2\x2\x2\x16B3\x16B5\x3\x2\x2\x2\x16B4\x16AE\x3"+
		"\x2\x2\x2\x16B4\x16B5\x3\x2\x2\x2\x16B5\x16BC\x3\x2\x2\x2\x16B6\x16B7"+
		"\a\x20B\x2\x2\x16B7\x16B8\a\x35B\x2\x2\x16B8\x16BA\t\t\x2\x2\x16B9\x16BB"+
		"\a\x36F\x2\x2\x16BA\x16B9\x3\x2\x2\x2\x16BA\x16BB\x3\x2\x2\x2\x16BB\x16BD"+
		"\x3\x2\x2\x2\x16BC\x16B6\x3\x2\x2\x2\x16BC\x16BD\x3\x2\x2\x2\x16BD\x16EB"+
		"\x3\x2\x2\x2\x16BE\x16BF\a\xC6\x2\x2\x16BF\x16E5\a\x36D\x2\x2\x16C0\x16C1"+
		"\a\x237\x2\x2\x16C1\x16C2\a\x35B\x2\x2\x16C2\x16C4\t\t\x2\x2\x16C3\x16C5"+
		"\a\x36F\x2\x2\x16C4\x16C3\x3\x2\x2\x2\x16C4\x16C5\x3\x2\x2\x2\x16C5\x16C7"+
		"\x3\x2\x2\x2\x16C6\x16C0\x3\x2\x2\x2\x16C6\x16C7\x3\x2\x2\x2\x16C7\x16CE"+
		"\x3\x2\x2\x2\x16C8\x16C9\a\x1E4\x2\x2\x16C9\x16CA\a\x35B\x2\x2\x16CA\x16CC"+
		"\x5\x3F0\x1F9\x2\x16CB\x16CD\a\x36F\x2\x2\x16CC\x16CB\x3\x2\x2\x2\x16CC"+
		"\x16CD\x3\x2\x2\x2\x16CD\x16CF\x3\x2\x2\x2\x16CE\x16C8\x3\x2\x2\x2\x16CE"+
		"\x16CF\x3\x2\x2\x2\x16CF\x16D6\x3\x2\x2\x2\x16D0\x16D1\a\x197\x2\x2\x16D1"+
		"\x16D2\a\x35B\x2\x2\x16D2\x16D4\a\x355\x2\x2\x16D3\x16D5\a\x36F\x2\x2"+
		"\x16D4\x16D3\x3\x2\x2\x2\x16D4\x16D5\x3\x2\x2\x2\x16D5\x16D7\x3\x2\x2"+
		"\x2\x16D6\x16D0\x3\x2\x2\x2\x16D6\x16D7\x3\x2\x2\x2\x16D7\x16E2\x3\x2"+
		"\x2\x2\x16D8\x16D9\a@\x2\x2\x16D9\x16DD\a\b\x2\x2\x16DA\x16DE\a\x222\x2"+
		"\x2\x16DB\x16DE\a\x357\x2\x2\x16DC\x16DE\a\x1CE\x2\x2\x16DD\x16DA\x3\x2"+
		"\x2\x2\x16DD\x16DB\x3\x2\x2\x2\x16DD\x16DC\x3\x2\x2\x2\x16DE\x16E0\x3"+
		"\x2\x2\x2\x16DF\x16E1\a\x36F\x2\x2\x16E0\x16DF\x3\x2\x2\x2\x16E0\x16E1"+
		"\x3\x2\x2\x2\x16E1\x16E3\x3\x2\x2\x2\x16E2\x16D8\x3\x2\x2\x2\x16E2\x16E3"+
		"\x3\x2\x2\x2\x16E3\x16E6\x3\x2\x2\x2\x16E4\x16E6\a\x39\x2\x2\x16E5\x16C6"+
		"\x3\x2\x2\x2\x16E5\x16E4\x3\x2\x2\x2\x16E6\x16E7\x3\x2\x2\x2\x16E7\x16E9"+
		"\a\x36E\x2\x2\x16E8\x16EA\a\x36F\x2\x2\x16E9\x16E8\x3\x2\x2\x2\x16E9\x16EA"+
		"\x3\x2\x2\x2\x16EA\x16EC\x3\x2\x2\x2\x16EB\x16BE\x3\x2\x2\x2\x16EB\x16EC"+
		"\x3\x2\x2\x2\x16EC\x16F4\x3\x2\x2\x2\x16ED\x16EE\a\x1D9\x2\x2\x16EE\x16EF"+
		"\a\x36D\x2\x2\x16EF\x16F0\a\x237\x2\x2\x16F0\x16F1\a\x35B\x2\x2\x16F1"+
		"\x16F2\t\t\x2\x2\x16F2\x16F3\x3\x2\x2\x2\x16F3\x16F5\a\x36E\x2\x2\x16F4"+
		"\x16ED\x3\x2\x2\x2\x16F4\x16F5\x3\x2\x2\x2\x16F5\x1AB\x3\x2\x2\x2\x16F6"+
		"\x16F7\a\x5\x2\x2\x16F7\x16FA\a\x1E9\x2\x2\x16F8\x16FB\x5\x3E8\x1F5\x2"+
		"\x16F9\x16FB\x5\x428\x215\x2\x16FA\x16F8\x3\x2\x2\x2\x16FA\x16F9\x3\x2"+
		"\x2\x2\x16FB\x16FE\x3\x2\x2\x2\x16FC\x16FF\x5\x1AA\xD6\x2\x16FD\x16FF"+
		"\x5\x1AE\xD8\x2\x16FE\x16FC\x3\x2\x2\x2\x16FE\x16FD\x3\x2\x2\x2\x16FF"+
		"\x1AD\x3\x2\x2\x2\x1700\x1706\a\x1F7\x2\x2\x1701\x1702\a\xBD\x2\x2\x1702"+
		"\x1703\a\x36D\x2\x2\x1703\x1704\x5\x1B0\xD9\x2\x1704\x1705\a\x36E\x2\x2"+
		"\x1705\x1707\x3\x2\x2\x2\x1706\x1701\x3\x2\x2\x2\x1706\x1707\x3\x2\x2"+
		"\x2\x1707\x1716\x3\x2\x2\x2\x1708\x170D\a\x200\x2\x2\x1709\x170A\a\xBD"+
		"\x2\x2\x170A\x170B\a\x185\x2\x2\x170B\x170C\a\x35B\x2\x2\x170C\x170E\t"+
		"\t\x2\x2\x170D\x1709\x3\x2\x2\x2\x170D\x170E\x3\x2\x2\x2\x170E\x1716\x3"+
		"\x2\x2\x2\x170F\x1710\a\x1AA\x2\x2\x1710\x1713\a\xA8\x2\x2\x1711\x1714"+
		"\x5\x428\x215\x2\x1712\x1714\a/\x2\x2\x1713\x1711\x3\x2\x2\x2\x1713\x1712"+
		"\x3\x2\x2\x2\x1714\x1716\x3\x2\x2\x2\x1715\x1700\x3\x2\x2\x2\x1715\x1708"+
		"\x3\x2\x2\x2\x1715\x170F\x3\x2\x2\x2\x1716\x1AF\x3\x2\x2\x2\x1717\x1718"+
		"\a\x199\x2\x2\x1718\x1719\a\x35B\x2\x2\x1719\x171A\a\x355\x2\x2\x171A"+
		"\x1B1\x3\x2\x2\x2\x171B\x171C\a#\x2\x2\x171C\x171D\a\x29F\x2\x2\x171D"+
		"\x1720\x5\x410\x209\x2\x171E\x171F\a\n\x2\x2\x171F\x1721\x5\x428\x215"+
		"\x2\x1720\x171E\x3\x2\x2\x2\x1720\x1721\x3\x2\x2\x2\x1721\x1722\x3\x2"+
		"\x2\x2\x1722\x172D\a\x36D\x2\x2\x1723\x1726\x5\x428\x215\x2\x1724\x1726"+
		"\a/\x2\x2\x1725\x1723\x3\x2\x2\x2\x1725\x1724\x3\x2\x2\x2\x1726\x1727"+
		"\x3\x2\x2\x2\x1727\x1728\a\x225\x2\x2\x1728\x1729\a\x12\x2\x2\x1729\x172B"+
		"\t\x38\x2\x2\x172A\x172C\a\x36F\x2\x2\x172B\x172A\x3\x2\x2\x2\x172B\x172C"+
		"\x3\x2\x2\x2\x172C\x172E\x3\x2\x2\x2\x172D\x1725\x3\x2\x2\x2\x172E\x172F"+
		"\x3\x2\x2\x2\x172F\x172D\x3\x2\x2\x2\x172F\x1730\x3\x2\x2\x2\x1730\x1731"+
		"\x3\x2\x2\x2\x1731\x1732\a\x36E\x2\x2\x1732\x1B3\x3\x2\x2\x2\x1733\x173A"+
		"\x5\x40C\x207\x2\x1734\x173A\x5\x40E\x208\x2\x1735\x173A\x5\x414\x20B"+
		"\x2\x1736\x173A\x5\x418\x20D\x2\x1737\x173A\x5\x41C\x20F\x2\x1738\x173A"+
		"\x5\x416\x20C\x2\x1739\x1733\x3\x2\x2\x2\x1739\x1734\x3\x2\x2\x2\x1739"+
		"\x1735\x3\x2\x2\x2\x1739\x1736\x3\x2\x2\x2\x1739\x1737\x3\x2\x2\x2\x1739"+
		"\x1738\x3\x2\x2\x2\x173A\x1B5\x3\x2\x2\x2\x173B\x173C\a#\x2\x2\x173C\x173D"+
		"\a\x19F\x2\x2\x173D\x173E\a\x25A\x2\x2\x173E\x1741\x5\x428\x215\x2\x173F"+
		"\x1740\a\n\x2\x2\x1740\x1742\x5\x428\x215\x2\x1741\x173F\x3\x2\x2\x2\x1741"+
		"\x1742\x3\x2\x2\x2\x1742\x1743\x3\x2\x2\x2\x1743\x1744\a\x264\x2\x2\x1744"+
		"\x174D\a\x35B\x2\x2\x1745\x174E\a\x2EC\x2\x2\x1746\x174E\a\x135\x2\x2"+
		"\x1747\x174E\a\x26C\x2\x2\x1748\x1749\a\x263\x2\x2\x1749\x174A\a\xBD\x2"+
		"\x2\x174A\x174B\a\x97\x2\x2\x174B\x174C\a\xFF\x2\x2\x174C\x174E\x5\x428"+
		"\x215\x2\x174D\x1745\x3\x2\x2\x2\x174D\x1746\x3\x2\x2\x2\x174D\x1747\x3"+
		"\x2\x2\x2\x174D\x1748\x3\x2\x2\x2\x174E\x1B7\x3\x2\x2\x2\x174F\x1751\x5"+
		"\x322\x192\x2\x1750\x174F\x3\x2\x2\x2\x1750\x1751\x3\x2\x2\x2\x1751\x1752"+
		"\x3\x2\x2\x2\x1752\x175A\a\x65\x2\x2\x1753\x1754\a\xA9\x2\x2\x1754\x1755"+
		"\a\x36D\x2\x2\x1755\x1756\x5\x312\x18A\x2\x1756\x1758\a\x36E\x2\x2\x1757"+
		"\x1759\a|\x2\x2\x1758\x1757\x3\x2\x2\x2\x1758\x1759\x3\x2\x2\x2\x1759"+
		"\x175B\x3\x2\x2\x2\x175A\x1753\x3\x2\x2\x2\x175A\x175B\x3\x2\x2\x2\x175B"+
		"\x175D\x3\x2\x2\x2\x175C\x175E\a\\\x2\x2\x175D\x175C\x3\x2\x2\x2\x175D"+
		"\x175E\x3\x2\x2\x2\x175E\x175F\x3\x2\x2\x2\x175F\x1761\x5\x3F4\x1FB\x2"+
		"\x1760\x1762\x5\x3B6\x1DC\x2\x1761\x1760\x3\x2\x2\x2\x1761\x1762\x3\x2"+
		"\x2\x2\x1762\x1764\x3\x2\x2\x2\x1763\x1765\x5\x3B0\x1D9\x2\x1764\x1763"+
		"\x3\x2\x2\x2\x1764\x1765\x3\x2\x2\x2\x1765\x1766\x3\x2\x2\x2\x1766\x1767"+
		"\a\x262\x2\x2\x1767\x1768\x5\x358\x1AD\x2\x1768\x1769\ap\x2\x2\x1769\x176B"+
		"\x5\x32A\x196\x2\x176A\x176C\x5\x1BA\xDE\x2\x176B\x176A\x3\x2\x2\x2\x176C"+
		"\x176D\x3\x2\x2\x2\x176D\x176B\x3\x2\x2\x2\x176D\x176E\x3\x2\x2\x2\x176E"+
		"\x1770\x3\x2\x2\x2\x176F\x1771\x5\x1D2\xEA\x2\x1770\x176F\x3\x2\x2\x2"+
		"\x1770\x1771\x3\x2\x2\x2\x1771\x1773\x3\x2\x2\x2\x1772\x1774\x5\x344\x1A3"+
		"\x2\x1773\x1772\x3\x2\x2\x2\x1773\x1774\x3\x2\x2\x2\x1774\x1775\x3\x2"+
		"\x2\x2\x1775\x1776\a\x370\x2\x2\x1776\x1B9\x3\x2\x2\x2\x1777\x1778\a\xBA"+
		"\x2\x2\x1778\x177B\a\x2D7\x2\x2\x1779\x177A\a\x6\x2\x2\x177A\x177C\x5"+
		"\x32A\x196\x2\x177B\x1779\x3\x2\x2\x2\x177B\x177C\x3\x2\x2\x2\x177C\x177D"+
		"\x3\x2\x2\x2\x177D\x177E\a\xA7\x2\x2\x177E\x1780\x5\x1BC\xDF\x2\x177F"+
		"\x1777\x3\x2\x2\x2\x1780\x1781\x3\x2\x2\x2\x1781\x177F\x3\x2\x2\x2\x1781"+
		"\x1782\x3\x2\x2\x2\x1782\x17A0\x3\x2\x2\x2\x1783\x1784\a\xBA\x2\x2\x1784"+
		"\x1785\aj\x2\x2\x1785\x1788\a\x2D7\x2\x2\x1786\x1787\a\x12\x2\x2\x1787"+
		"\x1789\a\x33B\x2\x2\x1788\x1786\x3\x2\x2\x2\x1788\x1789\x3\x2\x2\x2\x1789"+
		"\x178C\x3\x2\x2\x2\x178A\x178B\a\x6\x2\x2\x178B\x178D\x5\x32A\x196\x2"+
		"\x178C\x178A\x3\x2\x2\x2\x178C\x178D\x3\x2\x2\x2\x178D\x178E\x3\x2\x2"+
		"\x2\x178E\x178F\a\xA7\x2\x2\x178F\x17A0\x5\x1BE\xE0\x2\x1790\x1791\a\xBA"+
		"\x2\x2\x1791\x1792\aj\x2\x2\x1792\x1793\a\x2D7\x2\x2\x1793\x1794\a\x12"+
		"\x2\x2\x1794\x1797\a\x329\x2\x2\x1795\x1796\a\x6\x2\x2\x1796\x1798\x5"+
		"\x32A\x196\x2\x1797\x1795\x3\x2\x2\x2\x1797\x1798\x3\x2\x2\x2\x1798\x1799"+
		"\x3\x2\x2\x2\x1799\x179A\a\xA7\x2\x2\x179A\x179C\x5\x1BC\xDF\x2\x179B"+
		"\x1790\x3\x2\x2\x2\x179C\x179D\x3\x2\x2\x2\x179D\x179B\x3\x2\x2\x2\x179D"+
		"\x179E\x3\x2\x2\x2\x179E\x17A0\x3\x2\x2\x2\x179F\x177F\x3\x2\x2\x2\x179F"+
		"\x1783\x3\x2\x2\x2\x179F\x179B\x3\x2\x2\x2\x17A0\x1BB\x3\x2\x2\x2\x17A1"+
		"\x17A2\a\xB2\x2\x2\x17A2\x17A3\a\x9E\x2\x2\x17A3\x17A8\x5\x328\x195\x2"+
		"\x17A4\x17A5\a\x36F\x2\x2\x17A5\x17A7\x5\x328\x195\x2\x17A6\x17A4\x3\x2"+
		"\x2\x2\x17A7\x17AA\x3\x2\x2\x2\x17A8\x17A6\x3\x2\x2\x2\x17A8\x17A9\x3"+
		"\x2\x2\x2\x17A9\x17AD\x3\x2\x2\x2\x17AA\x17A8\x3\x2\x2\x2\x17AB\x17AD"+
		"\a\x30\x2\x2\x17AC\x17A1\x3\x2\x2\x2\x17AC\x17AB\x3\x2\x2\x2\x17AD\x1BD"+
		"\x3\x2\x2\x2\x17AE\x17B3\aZ\x2\x2\x17AF\x17B0\a\x36D\x2\x2\x17B0\x17B1"+
		"\x5\x3FE\x200\x2\x17B1\x17B2\a\x36E\x2\x2\x17B2\x17B4\x3\x2\x2\x2\x17B3"+
		"\x17AF\x3\x2\x2\x2\x17B3\x17B4\x3\x2\x2\x2\x17B4\x17B8\x3\x2\x2\x2\x17B5"+
		"\x17B9\x5\x3C0\x1E1\x2\x17B6\x17B7\a/\x2\x2\x17B7\x17B9\a\xB6\x2\x2\x17B8"+
		"\x17B5\x3\x2\x2\x2\x17B8\x17B6\x3\x2\x2\x2\x17B9\x1BF\x3\x2\x2\x2\x17BA"+
		"\x17BC\x5\x322\x192\x2\x17BB\x17BA\x3\x2\x2\x2\x17BB\x17BC\x3\x2\x2\x2"+
		"\x17BC\x17BD\x3\x2\x2\x2\x17BD\x17C7\a\x30\x2\x2\x17BE\x17BF\a\xA9\x2"+
		"\x2\x17BF\x17C0\a\x36D\x2\x2\x17C0\x17C1\x5\x312\x18A\x2\x17C1\x17C3\a"+
		"\x36E\x2\x2\x17C2\x17C4\a|\x2\x2\x17C3\x17C2\x3\x2\x2\x2\x17C3\x17C4\x3"+
		"\x2\x2\x2\x17C4\x17C8\x3\x2\x2\x2\x17C5\x17C6\a\xA9\x2\x2\x17C6\x17C8"+
		"\a\x355\x2\x2\x17C7\x17BE\x3\x2\x2\x2\x17C7\x17C5\x3\x2\x2\x2\x17C7\x17C8"+
		"\x3\x2\x2\x2\x17C8\x17CA\x3\x2\x2\x2\x17C9\x17CB\aK\x2\x2\x17CA\x17C9"+
		"\x3\x2\x2\x2\x17CA\x17CB\x3\x2\x2\x2\x17CB\x17CC\x3\x2\x2\x2\x17CC\x17CE"+
		"\x5\x1C2\xE2\x2\x17CD\x17CF\x5\x3B6\x1DC\x2\x17CE\x17CD\x3\x2\x2\x2\x17CE"+
		"\x17CF\x3\x2\x2\x2\x17CF\x17D1\x3\x2\x2\x2\x17D0\x17D2\x5\x1D2\xEA\x2"+
		"\x17D1\x17D0\x3\x2\x2\x2\x17D1\x17D2\x3\x2\x2\x2\x17D2\x17D5\x3\x2\x2"+
		"\x2\x17D3\x17D4\aK\x2\x2\x17D4\x17D6\x5\x358\x1AD\x2\x17D5\x17D3\x3\x2"+
		"\x2\x2\x17D5\x17D6\x3\x2\x2\x2\x17D6\x17E4\x3\x2\x2\x2\x17D7\x17E2\a\xBB"+
		"\x2\x2\x17D8\x17E3\x5\x32A\x196\x2\x17D9\x17DA\a%\x2\x2\x17DA\x17E0\a"+
		"m\x2\x2\x17DB\x17DD\a\x15B\x2\x2\x17DC\x17DB\x3\x2\x2\x2\x17DC\x17DD\x3"+
		"\x2\x2\x2\x17DD\x17DE\x3\x2\x2\x2\x17DE\x17E1\x5\x400\x201\x2\x17DF\x17E1"+
		"\a\x354\x2\x2\x17E0\x17DC\x3\x2\x2\x2\x17E0\x17DF\x3\x2\x2\x2\x17E1\x17E3"+
		"\x3\x2\x2\x2\x17E2\x17D8\x3\x2\x2\x2\x17E2\x17D9\x3\x2\x2\x2\x17E3\x17E5"+
		"\x3\x2\x2\x2\x17E4\x17D7\x3\x2\x2\x2\x17E4\x17E5\x3\x2\x2\x2\x17E5\x17E7"+
		"\x3\x2\x2\x2\x17E6\x17E8\x5\x33C\x19F\x2\x17E7\x17E6\x3\x2\x2\x2\x17E7"+
		"\x17E8\x3\x2\x2\x2\x17E8\x17EA\x3\x2\x2\x2\x17E9\x17EB\x5\x344\x1A3\x2"+
		"\x17EA\x17E9\x3\x2\x2\x2\x17EA\x17EB\x3\x2\x2\x2\x17EB\x17ED\x3\x2\x2"+
		"\x2\x17EC\x17EE\a\x370\x2\x2\x17ED\x17EC\x3\x2\x2\x2\x17ED\x17EE\x3\x2"+
		"\x2\x2\x17EE\x1C1\x3\x2\x2\x2\x17EF\x17F4\x5\x3F4\x1FB\x2\x17F0\x17F4"+
		"\x5\x3B2\x1DA\x2\x17F1\x17F4\x5\x27E\x140\x2\x17F2\x17F4\a\x354\x2\x2"+
		"\x17F3\x17EF\x3\x2\x2\x2\x17F3\x17F0\x3\x2\x2\x2\x17F3\x17F1\x3\x2\x2"+
		"\x2\x17F3\x17F2\x3\x2\x2\x2\x17F4\x1C3\x3\x2\x2\x2\x17F5\x17F7\x5\x322"+
		"\x192\x2\x17F6\x17F5\x3\x2\x2\x2\x17F6\x17F7\x3\x2\x2\x2\x17F7\x17F8\x3"+
		"\x2\x2\x2\x17F8\x1800\aZ\x2\x2\x17F9\x17FA\a\xA9\x2\x2\x17FA\x17FB\a\x36D"+
		"\x2\x2\x17FB\x17FC\x5\x312\x18A\x2\x17FC\x17FE\a\x36E\x2\x2\x17FD\x17FF"+
		"\a|\x2\x2\x17FE\x17FD\x3\x2\x2\x2\x17FE\x17FF\x3\x2\x2\x2\x17FF\x1801"+
		"\x3\x2\x2\x2\x1800\x17F9\x3\x2\x2\x2\x1800\x1801\x3\x2\x2\x2\x1801\x1803"+
		"\x3\x2\x2\x2\x1802\x1804\a\\\x2\x2\x1803\x1802\x3\x2\x2\x2\x1803\x1804"+
		"\x3\x2\x2\x2\x1804\x1807\x3\x2\x2\x2\x1805\x1808\x5\x3F4\x1FB\x2\x1806"+
		"\x1808\x5\x27E\x140\x2\x1807\x1805\x3\x2\x2\x2\x1807\x1806\x3\x2\x2\x2"+
		"\x1808\x180A\x3\x2\x2\x2\x1809\x180B\x5\x3B6\x1DC\x2\x180A\x1809\x3\x2"+
		"\x2\x2\x180A\x180B\x3\x2\x2\x2\x180B\x1810\x3\x2\x2\x2\x180C\x180D\a\x36D"+
		"\x2\x2\x180D\x180E\x5\x3FA\x1FE\x2\x180E\x180F\a\x36E\x2\x2\x180F\x1811"+
		"\x3\x2\x2\x2\x1810\x180C\x3\x2\x2\x2\x1810\x1811\x3\x2\x2\x2\x1811\x1813"+
		"\x3\x2\x2\x2\x1812\x1814\x5\x1D2\xEA\x2\x1813\x1812\x3\x2\x2\x2\x1813"+
		"\x1814\x3\x2\x2\x2\x1814\x1815\x3\x2\x2\x2\x1815\x1817\x5\x1C6\xE4\x2"+
		"\x1816\x1818\x5\x33C\x19F\x2\x1817\x1816\x3\x2\x2\x2\x1817\x1818\x3\x2"+
		"\x2\x2\x1818\x181A\x3\x2\x2\x2\x1819\x181B\x5\x344\x1A3\x2\x181A\x1819"+
		"\x3\x2\x2\x2\x181A\x181B\x3\x2\x2\x2\x181B\x181D\x3\x2\x2\x2\x181C\x181E"+
		"\a\x370\x2\x2\x181D\x181C\x3\x2\x2\x2\x181D\x181E\x3\x2\x2\x2\x181E\x1C5"+
		"\x3\x2\x2\x2\x181F\x1825\x5\x3C0\x1E1\x2\x1820\x1825\x5\x38A\x1C6\x2\x1821"+
		"\x1825\x5\x29C\x14F\x2\x1822\x1823\a/\x2\x2\x1823\x1825\a\xB6\x2\x2\x1824"+
		"\x181F\x3\x2\x2\x2\x1824\x1820\x3\x2\x2\x2\x1824\x1821\x3\x2\x2\x2\x1824"+
		"\x1822\x3\x2\x2\x2\x1825\x1C7\x3\x2\x2\x2\x1826\x1828\a\x36D\x2\x2\x1827"+
		"\x1826\x3\x2\x2\x2\x1827\x1828\x3\x2\x2\x2\x1828\x1829\x3\x2\x2\x2\x1829"+
		"\x182E\a\x1F8\x2\x2\x182A\x182F\a\x4\x2\x2\x182B\x182F\a\x34\x2\x2\x182C"+
		"\x182F\x5\x334\x19B\x2\x182D\x182F\a\x373\x2\x2\x182E\x182A\x3\x2\x2\x2"+
		"\x182E\x182B\x3\x2\x2\x2\x182E\x182C\x3\x2\x2\x2\x182E\x182D\x3\x2\x2"+
		"\x2\x182F\x1838\x3\x2\x2\x2\x1830\x1831\a\x354\x2\x2\x1831\x1832\a\x35B"+
		"\x2\x2\x1832\x1834\x5\x312\x18A\x2\x1833\x1835\a\x36F\x2\x2\x1834\x1833"+
		"\x3\x2\x2\x2\x1834\x1835\x3\x2\x2\x2\x1835\x1837\x3\x2\x2\x2\x1836\x1830"+
		"\x3\x2\x2\x2\x1837\x183A\x3\x2\x2\x2\x1838\x1836\x3\x2\x2\x2\x1838\x1839"+
		"\x3\x2\x2\x2\x1839\x183B\x3\x2\x2\x2\x183A\x1838\x3\x2\x2\x2\x183B\x183C"+
		"\aK\x2\x2\x183C\x1842\x5\x3E8\x1F5\x2\x183D\x183E\a\\\x2\x2\x183E\x183F"+
		"\x5\x428\x215\x2\x183F\x1840\a\xBB\x2\x2\x1840\x1841\x5\x32A\x196\x2\x1841"+
		"\x1843\x3\x2\x2\x2\x1842\x183D\x3\x2\x2\x2\x1842\x1843\x3\x2\x2\x2\x1843"+
		"\x1845\x3\x2\x2\x2\x1844\x1846\a\x36E\x2\x2\x1845\x1844\x3\x2\x2\x2\x1845"+
		"\x1846\x3\x2\x2\x2\x1846\x1C9\x3\x2\x2\x2\x1847\x1849\x5\x322\x192\x2"+
		"\x1848\x1847\x3\x2\x2\x2\x1848\x1849\x3\x2\x2\x2\x1849\x184A\x3\x2\x2"+
		"\x2\x184A\x184B\x5\x1CC\xE7\x2\x184B\x1CB\x3\x2\x2\x2\x184C\x184E\x5\x32E"+
		"\x198\x2\x184D\x184F\x5\x33A\x19E\x2\x184E\x184D\x3\x2\x2\x2\x184E\x184F"+
		"\x3\x2\x2\x2\x184F\x1851\x3\x2\x2\x2\x1850\x1852\x5\x33C\x19F\x2\x1851"+
		"\x1850\x3\x2\x2\x2\x1851\x1852\x3\x2\x2\x2\x1852\x1854\x3\x2\x2\x2\x1853"+
		"\x1855\x5\x344\x1A3\x2\x1854\x1853\x3\x2\x2\x2\x1854\x1855\x3\x2\x2\x2"+
		"\x1855\x1857\x3\x2\x2\x2\x1856\x1858\a\x370\x2\x2\x1857\x1856\x3\x2\x2"+
		"\x2\x1857\x1858\x3\x2\x2\x2\x1858\x1CD\x3\x2\x2\x2\x1859\x185C\a\x354"+
		"\x2\x2\x185A\x185C\x5\x422\x212\x2\x185B\x1859\x3\x2\x2\x2\x185B\x185A"+
		"\x3\x2\x2\x2\x185C\x1CF\x3\x2\x2\x2\x185D\x185F\x5\x322\x192\x2\x185E"+
		"\x185D\x3\x2\x2\x2\x185E\x185F\x3\x2\x2\x2\x185F\x1860\x3\x2\x2\x2\x1860"+
		"\x1868\a\xB2\x2\x2\x1861\x1862\a\xA9\x2\x2\x1862\x1863\a\x36D\x2\x2\x1863"+
		"\x1864\x5\x312\x18A\x2\x1864\x1866\a\x36E\x2\x2\x1865\x1867\a|\x2\x2\x1866"+
		"\x1865\x3\x2\x2\x2\x1866\x1867\x3\x2\x2\x2\x1867\x1869\x3\x2\x2\x2\x1868"+
		"\x1861\x3\x2\x2\x2\x1868\x1869\x3\x2\x2\x2\x1869\x186C\x3\x2\x2\x2\x186A"+
		"\x186D\x5\x3F4\x1FB\x2\x186B\x186D\x5\x27E\x140\x2\x186C\x186A\x3\x2\x2"+
		"\x2\x186C\x186B\x3\x2\x2\x2\x186D\x186F\x3\x2\x2\x2\x186E\x1870\x5\x3B4"+
		"\x1DB\x2\x186F\x186E\x3\x2\x2\x2\x186F\x1870\x3\x2\x2\x2\x1870\x1871\x3"+
		"\x2\x2\x2\x1871\x1872\a\x9E\x2\x2\x1872\x1877\x5\x326\x194\x2\x1873\x1874"+
		"\a\x36F\x2\x2\x1874\x1876\x5\x326\x194\x2\x1875\x1873\x3\x2\x2\x2\x1876"+
		"\x1879\x3\x2\x2\x2\x1877\x1875\x3\x2\x2\x2\x1877\x1878\x3\x2\x2\x2\x1878"+
		"\x187B\x3\x2\x2\x2\x1879\x1877\x3\x2\x2\x2\x187A\x187C\x5\x1D2\xEA\x2"+
		"\x187B\x187A\x3\x2\x2\x2\x187B\x187C\x3\x2\x2\x2\x187C\x187F\x3\x2\x2"+
		"\x2\x187D\x187E\aK\x2\x2\x187E\x1880\x5\x358\x1AD\x2\x187F\x187D\x3\x2"+
		"\x2\x2\x187F\x1880\x3\x2\x2\x2\x1880\x188E\x3\x2\x2\x2\x1881\x188C\a\xBB"+
		"\x2\x2\x1882\x188D\x5\x32A\x196\x2\x1883\x1884\a%\x2\x2\x1884\x188A\a"+
		"m\x2\x2\x1885\x1887\a\x15B\x2\x2\x1886\x1885\x3\x2\x2\x2\x1886\x1887\x3"+
		"\x2\x2\x2\x1887\x1888\x3\x2\x2\x2\x1888\x188B\x5\x400\x201\x2\x1889\x188B"+
		"\a\x354\x2\x2\x188A\x1886\x3\x2\x2\x2\x188A\x1889\x3\x2\x2\x2\x188B\x188D"+
		"\x3\x2\x2\x2\x188C\x1882\x3\x2\x2\x2\x188C\x1883\x3\x2\x2\x2\x188D\x188F"+
		"\x3\x2\x2\x2\x188E\x1881\x3\x2\x2\x2\x188E\x188F\x3\x2\x2\x2\x188F\x1891"+
		"\x3\x2\x2\x2\x1890\x1892\x5\x33C\x19F\x2\x1891\x1890\x3\x2\x2\x2\x1891"+
		"\x1892\x3\x2\x2\x2\x1892\x1894\x3\x2\x2\x2\x1893\x1895\x5\x344\x1A3\x2"+
		"\x1894\x1893\x3\x2\x2\x2\x1894\x1895\x3\x2\x2\x2\x1895\x1897\x3\x2\x2"+
		"\x2\x1896\x1898\a\x370\x2\x2\x1897\x1896\x3\x2\x2\x2\x1897\x1898\x3\x2"+
		"\x2\x2\x1898\x1D1\x3\x2\x2\x2\x1899\x189A\a\x1CC\x2\x2\x189A\x189F\x5"+
		"\x1D4\xEB\x2\x189B\x189C\a\x36F\x2\x2\x189C\x189E\x5\x1D4\xEB\x2\x189D"+
		"\x189B\x3\x2\x2\x2\x189E\x18A1\x3\x2\x2\x2\x189F\x189D\x3\x2\x2\x2\x189F"+
		"\x18A0\x3\x2\x2\x2\x18A0\x18AD\x3\x2\x2\x2\x18A1\x189F\x3\x2\x2\x2\x18A2"+
		"\x18A5\a\\\x2\x2\x18A3\x18A6\a\x354\x2\x2\x18A4\x18A6\x5\x3EA\x1F6\x2"+
		"\x18A5\x18A3\x3\x2\x2\x2\x18A5\x18A4\x3\x2\x2\x2\x18A6\x18AB\x3\x2\x2"+
		"\x2\x18A7\x18A8\a\x36D\x2\x2\x18A8\x18A9\x5\x3FE\x200\x2\x18A9\x18AA\a"+
		"\x36E\x2\x2\x18AA\x18AC\x3\x2\x2\x2\x18AB\x18A7\x3\x2\x2\x2\x18AB\x18AC"+
		"\x3\x2\x2\x2\x18AC\x18AE\x3\x2\x2\x2\x18AD\x18A2\x3\x2\x2\x2\x18AD\x18AE"+
		"\x3\x2\x2\x2\x18AE\x1D3\x3\x2\x2\x2\x18AF\x18B2\x5\x312\x18A\x2\x18B0"+
		"\x18B2\x5\x34E\x1A8\x2\x18B1\x18AF\x3\x2\x2\x2\x18B1\x18B0\x3\x2\x2\x2"+
		"\x18B2\x18B4\x3\x2\x2\x2\x18B3\x18B5\x5\x3AE\x1D8\x2\x18B4\x18B3\x3\x2"+
		"\x2\x2\x18B4\x18B5\x3\x2\x2\x2\x18B5\x1D5\x3\x2\x2\x2\x18B6\x18B7\a#\x2"+
		"\x2\x18B7\x18B8\a+\x2\x2\x18B8\x18BC\x5\x428\x215\x2\x18B9\x18BA\a\x29C"+
		"\x2\x2\x18BA\x18BB\a\x35B\x2\x2\x18BB\x18BD\t\x39\x2\x2\x18BC\x18B9\x3"+
		"\x2\x2\x2\x18BC\x18BD\x3\x2\x2\x2\x18BD\x18CA\x3\x2\x2\x2\x18BE\x18C0"+
		"\ap\x2\x2\x18BF\x18C1\a\x80\x2\x2\x18C0\x18BF\x3\x2\x2\x2\x18C0\x18C1"+
		"\x3\x2\x2\x2\x18C1\x18C2\x3\x2\x2\x2\x18C2\x18C7\x5\x3DC\x1EF\x2\x18C3"+
		"\x18C4\a\x36F\x2\x2\x18C4\x18C6\x5\x3DC\x1EF\x2\x18C5\x18C3\x3\x2\x2\x2"+
		"\x18C6\x18C9\x3\x2\x2\x2\x18C7\x18C5\x3\x2\x2\x2\x18C7\x18C8\x3\x2\x2"+
		"\x2\x18C8\x18CB\x3\x2\x2\x2\x18C9\x18C7\x3\x2\x2\x2\x18CA\x18BE\x3\x2"+
		"\x2\x2\x18CA\x18CB\x3\x2\x2\x2\x18CB\x18D6\x3\x2\x2\x2\x18CC\x18CD\a\x2D5"+
		"\x2\x2\x18CD\x18CE\ap\x2\x2\x18CE\x18D3\x5\x3DC\x1EF\x2\x18CF\x18D0\a"+
		"\x36F\x2\x2\x18D0\x18D2\x5\x3DC\x1EF\x2\x18D1\x18CF\x3\x2\x2\x2\x18D2"+
		"\x18D5\x3\x2\x2\x2\x18D3\x18D1\x3\x2\x2\x2\x18D3\x18D4\x3\x2\x2\x2\x18D4"+
		"\x18D7\x3\x2\x2\x2\x18D5\x18D3\x3\x2\x2\x2\x18D6\x18CC\x3\x2\x2\x2\x18D6"+
		"\x18D7\x3\x2\x2\x2\x18D7\x18DA\x3\x2\x2\x2\x18D8\x18D9\a\x1A\x2\x2\x18D9"+
		"\x18DB\x5\x428\x215\x2\x18DA\x18D8\x3\x2\x2\x2\x18DA\x18DB\x3\x2\x2\x2"+
		"\x18DB\x18E5\x3\x2\x2\x2\x18DC\x18DD\a\xBD\x2\x2\x18DD\x18E2\x5\x3D8\x1ED"+
		"\x2\x18DE\x18DF\a\x36F\x2\x2\x18DF\x18E1\x5\x3D8\x1ED\x2\x18E0\x18DE\x3"+
		"\x2\x2\x2\x18E1\x18E4\x3\x2\x2\x2\x18E2\x18E0\x3\x2\x2\x2\x18E2\x18E3"+
		"\x3\x2\x2\x2\x18E3\x18E6\x3\x2\x2\x2\x18E4\x18E2\x3\x2\x2\x2\x18E5\x18DC"+
		"\x3\x2\x2\x2\x18E5\x18E6\x3\x2\x2\x2\x18E6\x1D7\x3\x2\x2\x2\x18E7\x18E9"+
		"\a#\x2\x2\x18E8\x18EA\a\xB0\x2\x2\x18E9\x18E8\x3\x2\x2\x2\x18E9\x18EA"+
		"\x3\x2\x2\x2\x18EA\x18EC\x3\x2\x2\x2\x18EB\x18ED\x5\x404\x203\x2\x18EC"+
		"\x18EB\x3\x2\x2\x2\x18EC\x18ED\x3\x2\x2\x2\x18ED\x18EE\x3\x2\x2\x2\x18EE"+
		"\x18EF\aX\x2\x2\x18EF\x18F0\x5\x428\x215\x2\x18F0\x18F1\ap\x2\x2\x18F1"+
		"\x18F2\x5\x3EA\x1F6\x2\x18F2\x18F3\a\x36D\x2\x2\x18F3\x18F4\x5\x3F8\x1FD"+
		"\x2\x18F4\x18FA\a\x36E\x2\x2\x18F5\x18F6\a\x2C4\x2\x2\x18F6\x18F7\a\x36D"+
		"\x2\x2\x18F7\x18F8\x5\x3FE\x200\x2\x18F8\x18F9\a\x36E\x2\x2\x18F9\x18FB"+
		"\x3\x2\x2\x2\x18FA\x18F5\x3\x2\x2\x2\x18FA\x18FB\x3\x2\x2\x2\x18FB\x18FE"+
		"\x3\x2\x2\x2\x18FC\x18FD\a\xBB\x2\x2\x18FD\x18FF\x5\x32A\x196\x2\x18FE"+
		"\x18FC\x3\x2\x2\x2\x18FE\x18FF\x3\x2\x2\x2\x18FF\x1901\x3\x2\x2\x2\x1900"+
		"\x1902\x5\x300\x181\x2\x1901\x1900\x3\x2\x2\x2\x1901\x1902\x3\x2\x2\x2"+
		"\x1902\x1905\x3\x2\x2\x2\x1903\x1904\ap\x2\x2\x1904\x1906\x5\x428\x215"+
		"\x2\x1905\x1903\x3\x2\x2\x2\x1905\x1906\x3\x2\x2\x2\x1906\x1908\x3\x2"+
		"\x2\x2\x1907\x1909\a\x370\x2\x2\x1908\x1907\x3\x2\x2\x2\x1908\x1909\x3"+
		"\x2\x2\x2\x1909\x1D9\x3\x2\x2\x2\x190A\x190F\a#\x2\x2\x190B\x1910\a\x18"+
		"\x2\x2\x190C\x190E\ai\x2\x2\x190D\x190C\x3\x2\x2\x2\x190D\x190E\x3\x2"+
		"\x2\x2\x190E\x1910\x3\x2\x2\x2\x190F\x190B\x3\x2\x2\x2\x190F\x190D\x3"+
		"\x2\x2\x2\x1910\x1911\x3\x2\x2\x2\x1911\x1912\a\x101\x2\x2\x1912\x1913"+
		"\aX\x2\x2\x1913\x1914\x5\x428\x215\x2\x1914\x1915\ap\x2\x2\x1915\x1917"+
		"\x5\x3EA\x1F6\x2\x1916\x1918\x5\x300\x181\x2\x1917\x1916\x3\x2\x2\x2\x1917"+
		"\x1918\x3\x2\x2\x2\x1918\x191B\x3\x2\x2\x2\x1919\x191A\ap\x2\x2\x191A"+
		"\x191C\x5\x428\x215\x2\x191B\x1919\x3\x2\x2\x2\x191B\x191C\x3\x2\x2\x2"+
		"\x191C\x191E\x3\x2\x2\x2\x191D\x191F\a\x370\x2\x2\x191E\x191D\x3\x2\x2"+
		"\x2\x191E\x191F\x3\x2\x2\x2\x191F\x1DB\x3\x2\x2\x2\x1920\x1922\a#\x2\x2"+
		"\x1921\x1923\ai\x2\x2\x1922\x1921\x3\x2\x2\x2\x1922\x1923\x3\x2\x2\x2"+
		"\x1923\x1924\x3\x2\x2\x2\x1924\x1925\a\x101\x2\x2\x1925\x1926\aX\x2\x2"+
		"\x1926\x1927\x5\x428\x215\x2\x1927\x1928\ap\x2\x2\x1928\x1929\x5\x3EA"+
		"\x1F6\x2\x1929\x192A\a\x36D\x2\x2\x192A\x192B\x5\x3F8\x1FD\x2\x192B\x192E"+
		"\a\x36E\x2\x2\x192C\x192D\a\xBB\x2\x2\x192D\x192F\x5\x32A\x196\x2\x192E"+
		"\x192C\x3\x2\x2\x2\x192E\x192F\x3\x2\x2\x2\x192F\x1931\x3\x2\x2\x2\x1930"+
		"\x1932\x5\x300\x181\x2\x1931\x1930\x3\x2\x2\x2\x1931\x1932\x3\x2\x2\x2"+
		"\x1932\x1935\x3\x2\x2\x2\x1933\x1934\ap\x2\x2\x1934\x1936\x5\x428\x215"+
		"\x2\x1935\x1933\x3\x2\x2\x2\x1935\x1936\x3\x2\x2\x2\x1936\x1938\x3\x2"+
		"\x2\x2\x1937\x1939\a\x370\x2\x2\x1938\x1937\x3\x2\x2\x2\x1938\x1939\x3"+
		"\x2\x2\x2\x1939\x1DD\x3\x2\x2\x2\x193A\x193C\a#\x2\x2\x193B\x193D\a\x80"+
		"\x2\x2\x193C\x193B\x3\x2\x2\x2\x193C\x193D\x3\x2\x2\x2\x193D\x193E\x3"+
		"\x2\x2\x2\x193E\x193F\a\x270\x2\x2\x193F\x1940\aX\x2\x2\x1940\x1941\x5"+
		"\x428\x215\x2\x1941\x1942\ap\x2\x2\x1942\x1943\x5\x3EA\x1F6\x2\x1943\x1944"+
		"\a\x36D\x2\x2\x1944\x1945\x5\x428\x215\x2\x1945\x1950\a\x36E\x2\x2\x1946"+
		"\x1947\a\x262\x2\x2\x1947\x1948\a\x270\x2\x2\x1948\x1949\aX\x2\x2\x1949"+
		"\x194E\x5\x428\x215\x2\x194A\x194C\aG\x2\x2\x194B\x194D\t:\x2\x2\x194C"+
		"\x194B\x3\x2\x2\x2\x194C\x194D\x3\x2\x2\x2\x194D\x194F\x3\x2\x2\x2\x194E"+
		"\x194A\x3\x2\x2\x2\x194E\x194F\x3\x2\x2\x2\x194F\x1951\x3\x2\x2\x2\x1950"+
		"\x1946\x3\x2\x2\x2\x1950\x1951\x3\x2\x2\x2\x1951\x1953\x3\x2\x2\x2\x1952"+
		"\x1954\x5\x300\x181\x2\x1953\x1952\x3\x2\x2\x2\x1953\x1954\x3\x2\x2\x2"+
		"\x1954\x1956\x3\x2\x2\x2\x1955\x1957\a\x370\x2\x2\x1956\x1955\x3\x2\x2"+
		"\x2\x1956\x1957\x3\x2\x2\x2\x1957\x1DF\x3\x2\x2\x2\x1958\x195B\a#\x2\x2"+
		"\x1959\x195A\ax\x2\x2\x195A\x195C\a\x5\x2\x2\x195B\x1959\x3\x2\x2\x2\x195B"+
		"\x195C\x3\x2\x2\x2\x195C\x195F\x3\x2\x2\x2\x195D\x195F\a\x5\x2\x2\x195E"+
		"\x1958\x3\x2\x2\x2\x195E\x195D\x3\x2\x2\x2\x195F\x1960\x3\x2\x2\x2\x1960"+
		"\x1961\t;\x2\x2\x1961\x1964\x5\x3EE\x1F8\x2\x1962\x1963\a\x370\x2\x2\x1963"+
		"\x1965\a\x355\x2\x2\x1964\x1962\x3\x2\x2\x2\x1964\x1965\x3\x2\x2\x2\x1965"+
		"\x1974\x3\x2\x2\x2\x1966\x1968\a\x36D\x2\x2\x1967\x1966\x3\x2\x2\x2\x1967"+
		"\x1968\x3\x2\x2\x2\x1968\x1969\x3\x2\x2\x2\x1969\x196E\x5\x1F8\xFD\x2"+
		"\x196A\x196B\a\x36F\x2\x2\x196B\x196D\x5\x1F8\xFD\x2\x196C\x196A\x3\x2"+
		"\x2\x2\x196D\x1970\x3\x2\x2\x2\x196E\x196C\x3\x2\x2\x2\x196E\x196F\x3"+
		"\x2\x2\x2\x196F\x1972\x3\x2\x2\x2\x1970\x196E\x3\x2\x2\x2\x1971\x1973"+
		"\a\x36E\x2\x2\x1972\x1971\x3\x2\x2\x2\x1972\x1973\x3\x2\x2\x2\x1973\x1975"+
		"\x3\x2\x2\x2\x1974\x1967\x3\x2\x2\x2\x1974\x1975\x3\x2\x2\x2\x1975\x197F"+
		"\x3\x2\x2\x2\x1976\x1977\a\xBD\x2\x2\x1977\x197C\x5\x1FA\xFE\x2\x1978"+
		"\x1979\a\x36F\x2\x2\x1979\x197B\x5\x1FA\xFE\x2\x197A\x1978\x3\x2\x2\x2"+
		"\x197B\x197E\x3\x2\x2\x2\x197C\x197A\x3\x2\x2\x2\x197C\x197D\x3\x2\x2"+
		"\x2\x197D\x1980\x3\x2\x2\x2\x197E\x197C\x3\x2\x2\x2\x197F\x1976\x3\x2"+
		"\x2\x2\x197F\x1980\x3\x2\x2\x2\x1980\x1983\x3\x2\x2\x2\x1981\x1982\aG"+
		"\x2\x2\x1982\x1984\a\x8B\x2\x2\x1983\x1981\x3\x2\x2\x2\x1983\x1984\x3"+
		"\x2\x2\x2\x1984\x1985\x3\x2\x2\x2\x1985\x198D\a\b\x2\x2\x1986\x198E\x5"+
		"\x1E2\xF2\x2\x1987\x1989\x5\b\x5\x2\x1988\x1987\x3\x2\x2\x2\x1989\x198C"+
		"\x3\x2\x2\x2\x198A\x1988\x3\x2\x2\x2\x198A\x198B\x3\x2\x2\x2\x198B\x198E"+
		"\x3\x2\x2\x2\x198C\x198A\x3\x2\x2\x2\x198D\x1986\x3\x2\x2\x2\x198D\x198A"+
		"\x3\x2\x2\x2\x198E\x1E1\x3\x2\x2\x2\x198F\x1990\a\x43\x2\x2\x1990\x1991"+
		"\a\x1AC\x2\x2\x1991\x1992\x5\x428\x215\x2\x1992\x1993\a\x368\x2\x2\x1993"+
		"\x1994\x5\x428\x215\x2\x1994\x1995\a\x368\x2\x2\x1995\x1996\x5\x428\x215"+
		"\x2\x1996\x1E3\x3\x2\x2\x2\x1997\x199A\x5\x1E6\xF4\x2\x1998\x199A\x5\x1EC"+
		"\xF7\x2\x1999\x1997\x3\x2\x2\x2\x1999\x1998\x3\x2\x2\x2\x199A\x1E5\x3"+
		"\x2\x2\x2\x199B\x199E\a#\x2\x2\x199C\x199D\ax\x2\x2\x199D\x199F\a\x5\x2"+
		"\x2\x199E\x199C\x3\x2\x2\x2\x199E\x199F\x3\x2\x2\x2\x199F\x19A2\x3\x2"+
		"\x2\x2\x19A0\x19A2\a\x5\x2\x2\x19A1\x199B\x3\x2\x2\x2\x19A1\x19A0\x3\x2"+
		"\x2\x2\x19A2\x19A3\x3\x2\x2\x2\x19A3\x19A4\a\xAC\x2\x2\x19A4\x19A5\x5"+
		"\x3EC\x1F7\x2\x19A5\x19A6\ap\x2\x2\x19A6\x19B0\x5\x3EA\x1F6\x2\x19A7\x19A8"+
		"\a\xBD\x2\x2\x19A8\x19AD\x5\x1E8\xF5\x2\x19A9\x19AA\a\x36F\x2\x2\x19AA"+
		"\x19AC\x5\x1E8\xF5\x2\x19AB\x19A9\x3\x2\x2\x2\x19AC\x19AF\x3\x2\x2\x2"+
		"\x19AD\x19AB\x3\x2\x2\x2\x19AD\x19AE\x3\x2\x2\x2\x19AE\x19B1\x3\x2\x2"+
		"\x2\x19AF\x19AD\x3\x2\x2\x2\x19B0\x19A7\x3\x2\x2\x2\x19B0\x19B1\x3\x2"+
		"\x2\x2\x19B1\x19B6\x3\x2\x2\x2\x19B2\x19B7\aG\x2\x2\x19B3\x19B7\a\xCD"+
		"\x2\x2\x19B4\x19B5\a\x2C8\x2\x2\x19B5\x19B7\am\x2\x2\x19B6\x19B2\x3\x2"+
		"\x2\x2\x19B6\x19B3\x3\x2\x2\x2\x19B6\x19B4\x3\x2\x2\x2\x19B7\x19B8\x3"+
		"\x2\x2\x2\x19B8\x19BD\x5\x1EA\xF6\x2\x19B9\x19BA\a\x36F\x2\x2\x19BA\x19BC"+
		"\x5\x1EA\xF6\x2\x19BB\x19B9\x3\x2\x2\x2\x19BC\x19BF\x3\x2\x2\x2\x19BD"+
		"\x19BB\x3\x2\x2\x2\x19BD\x19BE\x3\x2\x2\x2\x19BE\x19C2\x3\x2\x2\x2\x19BF"+
		"\x19BD\x3\x2\x2\x2\x19C0\x19C1\a\xBD\x2\x2\x19C1\x19C3\a\x27F\x2\x2\x19C2"+
		"\x19C0\x3\x2\x2\x2\x19C2\x19C3\x3\x2\x2\x2\x19C3\x19C7\x3\x2\x2\x2\x19C4"+
		"\x19C5\aj\x2\x2\x19C5\x19C6\aG\x2\x2\x19C6\x19C8\a\x8B\x2\x2\x19C7\x19C4"+
		"\x3\x2\x2\x2\x19C7\x19C8\x3\x2\x2\x2\x19C8\x19C9\x3\x2\x2\x2\x19C9\x19CB"+
		"\a\b\x2\x2\x19CA\x19CC\x5\b\x5\x2\x19CB\x19CA\x3\x2\x2\x2\x19CC\x19CD"+
		"\x3\x2\x2\x2\x19CD\x19CB\x3\x2\x2\x2\x19CD\x19CE\x3\x2\x2\x2\x19CE\x1E7"+
		"\x3\x2\x2\x2\x19CF\x19D2\a\x139\x2\x2\x19D0\x19D2\x5\x2E4\x173\x2\x19D1"+
		"\x19CF\x3\x2\x2\x2\x19D1\x19D0\x3\x2\x2\x2\x19D2\x1E9\x3\x2\x2\x2\x19D3"+
		"\x19D4\t<\x2\x2\x19D4\x1EB\x3\x2\x2\x2\x19D5\x19D8\a#\x2\x2\x19D6\x19D7"+
		"\ax\x2\x2\x19D7\x19D9\a\x5\x2\x2\x19D8\x19D6\x3\x2\x2\x2\x19D8\x19D9\x3"+
		"\x2\x2\x2\x19D9\x19DC\x3\x2\x2\x2\x19DA\x19DC\a\x5\x2\x2\x19DB\x19D5\x3"+
		"\x2\x2\x2\x19DB\x19DA\x3\x2\x2\x2\x19DC\x19DD\x3\x2\x2\x2\x19DD\x19DE"+
		"\a\xAC\x2\x2\x19DE\x19DF\x5\x3EC\x1F7\x2\x19DF\x19E3\ap\x2\x2\x19E0\x19E1"+
		"\a\x4\x2\x2\x19E1\x19E4\a\x31F\x2\x2\x19E2\x19E4\a+\x2\x2\x19E3\x19E0"+
		"\x3\x2\x2\x2\x19E3\x19E2\x3\x2\x2\x2\x19E4\x19EE\x3\x2\x2\x2\x19E5\x19E6"+
		"\a\xBD\x2\x2\x19E6\x19EB\x5\x1E8\xF5\x2\x19E7\x19E8\a\x36F\x2\x2\x19E8"+
		"\x19EA\x5\x1E8\xF5\x2\x19E9\x19E7\x3\x2\x2\x2\x19EA\x19ED\x3\x2\x2\x2"+
		"\x19EB\x19E9\x3\x2\x2\x2\x19EB\x19EC\x3\x2\x2\x2\x19EC\x19EF\x3\x2\x2"+
		"\x2\x19ED\x19EB\x3\x2\x2\x2\x19EE\x19E5\x3\x2\x2\x2\x19EE\x19EF\x3\x2"+
		"\x2\x2\x19EF\x19F0\x3\x2\x2\x2\x19F0\x19F1\t=\x2\x2\x19F1\x19F6\x5\x1EE"+
		"\xF8\x2\x19F2\x19F3\a\x36F\x2\x2\x19F3\x19F5\x5\x1EE\xF8\x2\x19F4\x19F2"+
		"\x3\x2\x2\x2\x19F5\x19F8\x3\x2\x2\x2\x19F6\x19F4\x3\x2\x2\x2\x19F6\x19F7"+
		"\x3\x2\x2\x2\x19F7\x19F9\x3\x2\x2\x2\x19F8\x19F6\x3\x2\x2\x2\x19F9\x19FB"+
		"\a\b\x2\x2\x19FA\x19FC\x5\b\x5\x2\x19FB\x19FA\x3\x2\x2\x2\x19FC\x19FD"+
		"\x3\x2\x2\x2\x19FD\x19FB\x3\x2\x2\x2\x19FD\x19FE\x3\x2\x2\x2\x19FE\x1ED"+
		"\x3\x2\x2\x2\x19FF\x1A00\x5\x42A\x216\x2\x1A00\x1EF\x3\x2\x2\x2\x1A01"+
		"\x1A04\a#\x2\x2\x1A02\x1A03\ax\x2\x2\x1A03\x1A05\a\x5\x2\x2\x1A04\x1A02"+
		"\x3\x2\x2\x2\x1A04\x1A05\x3\x2\x2\x2\x1A05\x1A08\x3\x2\x2\x2\x1A06\x1A08"+
		"\a\x5\x2\x2\x1A07\x1A01\x3\x2\x2\x2\x1A07\x1A06\x3\x2\x2\x2\x1A08\x1A09"+
		"\x3\x2\x2\x2\x1A09\x1A0A\aM\x2\x2\x1A0A\x1A18\x5\x3EE\x1F8\x2\x1A0B\x1A0C"+
		"\a\x36D\x2\x2\x1A0C\x1A11\x5\x1F8\xFD\x2\x1A0D\x1A0E\a\x36F\x2\x2\x1A0E"+
		"\x1A10\x5\x1F8\xFD\x2\x1A0F\x1A0D\x3\x2\x2\x2\x1A10\x1A13\x3\x2\x2\x2"+
		"\x1A11\x1A0F\x3\x2\x2\x2\x1A11\x1A12\x3\x2\x2\x2\x1A12\x1A14\x3\x2\x2"+
		"\x2\x1A13\x1A11\x3\x2\x2\x2\x1A14\x1A15\a\x36E\x2\x2\x1A15\x1A19\x3\x2"+
		"\x2\x2\x1A16\x1A17\a\x36D\x2\x2\x1A17\x1A19\a\x36E\x2\x2\x1A18\x1A0B\x3"+
		"\x2\x2\x2\x1A18\x1A16\x3\x2\x2\x2\x1A19\x1A1D\x3\x2\x2\x2\x1A1A\x1A1E"+
		"\x5\x1F2\xFA\x2\x1A1B\x1A1E\x5\x1F4\xFB\x2\x1A1C\x1A1E\x5\x1F6\xFC\x2"+
		"\x1A1D\x1A1A\x3\x2\x2\x2\x1A1D\x1A1B\x3\x2\x2\x2\x1A1D\x1A1C\x3\x2\x2"+
		"\x2\x1A1E\x1A20\x3\x2\x2\x2\x1A1F\x1A21\a\x370\x2\x2\x1A20\x1A1F\x3\x2"+
		"\x2\x2\x1A20\x1A21\x3\x2\x2\x2\x1A21\x1F1\x3\x2\x2\x2\x1A22\x1A23\a\x312"+
		"\x2\x2\x1A23\x1A2D\a\xA4\x2\x2\x1A24\x1A25\a\xBD\x2\x2\x1A25\x1A2A\x5"+
		"\x1FC\xFF\x2\x1A26\x1A27\a\x36F\x2\x2\x1A27\x1A29\x5\x1FC\xFF\x2\x1A28"+
		"\x1A26\x3\x2\x2\x2\x1A29\x1A2C\x3\x2\x2\x2\x1A2A\x1A28\x3\x2\x2\x2\x1A2A"+
		"\x1A2B\x3\x2\x2\x2\x1A2B\x1A2E\x3\x2\x2\x2\x1A2C\x1A2A\x3\x2\x2\x2\x1A2D"+
		"\x1A24\x3\x2\x2\x2\x1A2D\x1A2E\x3\x2\x2\x2\x1A2E\x1A30\x3\x2\x2\x2\x1A2F"+
		"\x1A31\a\b\x2\x2\x1A30\x1A2F\x3\x2\x2\x2\x1A30\x1A31\x3\x2\x2\x2\x1A31"+
		"\x1A32\x3\x2\x2\x2\x1A32\x1A38\a\x8E\x2\x2\x1A33\x1A34\a\x36D\x2\x2\x1A34"+
		"\x1A35\x5\x1CA\xE6\x2\x1A35\x1A36\a\x36E\x2\x2\x1A36\x1A39\x3\x2\x2\x2"+
		"\x1A37\x1A39\x5\x1CA\xE6\x2\x1A38\x1A33\x3\x2\x2\x2\x1A38\x1A37\x3\x2"+
		"\x2\x2\x1A39\x1F3\x3\x2\x2\x2\x1A3A\x1A3B\a\x312\x2\x2\x1A3B\x1A3C\a\x354"+
		"\x2\x2\x1A3C\x1A46\x5\x2E8\x175\x2\x1A3D\x1A3E\a\xBD\x2\x2\x1A3E\x1A43"+
		"\x5\x1FC\xFF\x2\x1A3F\x1A40\a\x36F\x2\x2\x1A40\x1A42\x5\x1FC\xFF\x2\x1A41"+
		"\x1A3F\x3\x2\x2\x2\x1A42\x1A45\x3\x2\x2\x2\x1A43\x1A41\x3\x2\x2\x2\x1A43"+
		"\x1A44\x3\x2\x2\x2\x1A44\x1A47\x3\x2\x2\x2\x1A45\x1A43\x3\x2\x2\x2\x1A46"+
		"\x1A3D\x3\x2\x2\x2\x1A46\x1A47\x3\x2\x2\x2\x1A47\x1A49\x3\x2\x2\x2\x1A48"+
		"\x1A4A\a\b\x2\x2\x1A49\x1A48\x3\x2\x2\x2\x1A49\x1A4A\x3\x2\x2\x2\x1A4A"+
		"\x1A4B\x3\x2\x2\x2\x1A4B\x1A4F\a\r\x2\x2\x1A4C\x1A4E\x5\b\x5\x2\x1A4D"+
		"\x1A4C\x3\x2\x2\x2\x1A4E\x1A51\x3\x2\x2\x2\x1A4F\x1A4D\x3\x2\x2\x2\x1A4F"+
		"\x1A50\x3\x2\x2\x2\x1A50\x1A52\x3\x2\x2\x2\x1A51\x1A4F\x3\x2\x2\x2\x1A52"+
		"\x1A54\a\x8E\x2\x2\x1A53\x1A55\a\x370\x2\x2\x1A54\x1A53\x3\x2\x2\x2\x1A54"+
		"\x1A55\x3\x2\x2\x2\x1A55\x1A56\x3\x2\x2\x2\x1A56\x1A58\a<\x2\x2\x1A57"+
		"\x1A59\a\x370\x2\x2\x1A58\x1A57\x3\x2\x2\x2\x1A58\x1A59\x3\x2\x2\x2\x1A59"+
		"\x1F5\x3\x2\x2\x2\x1A5A\x1A5B\a\x312\x2\x2\x1A5B\x1A65\x5\x41E\x210\x2"+
		"\x1A5C\x1A5D\a\xBD\x2\x2\x1A5D\x1A62\x5\x1FC\xFF\x2\x1A5E\x1A5F\a\x36F"+
		"\x2\x2\x1A5F\x1A61\x5\x1FC\xFF\x2\x1A60\x1A5E\x3\x2\x2\x2\x1A61\x1A64"+
		"\x3\x2\x2\x2\x1A62\x1A60\x3\x2\x2\x2\x1A62\x1A63\x3\x2\x2\x2\x1A63\x1A66"+
		"\x3\x2\x2\x2\x1A64\x1A62\x3\x2\x2\x2\x1A65\x1A5C\x3\x2\x2\x2\x1A65\x1A66"+
		"\x3\x2\x2\x2\x1A66\x1A68\x3\x2\x2\x2\x1A67\x1A69\a\b\x2\x2\x1A68\x1A67"+
		"\x3\x2\x2\x2\x1A68\x1A69\x3\x2\x2\x2\x1A69\x1A6A\x3\x2\x2\x2\x1A6A\x1A6E"+
		"\a\r\x2\x2\x1A6B\x1A6D\x5\b\x5\x2\x1A6C\x1A6B\x3\x2\x2\x2\x1A6D\x1A70"+
		"\x3\x2\x2\x2\x1A6E\x1A6C\x3\x2\x2\x2\x1A6E\x1A6F\x3\x2\x2\x2\x1A6F\x1A71"+
		"\x3\x2\x2\x2\x1A70\x1A6E\x3\x2\x2\x2\x1A71\x1A72\a\x8E\x2\x2\x1A72\x1A74"+
		"\x5\x312\x18A\x2\x1A73\x1A75\a\x370\x2\x2\x1A74\x1A73\x3\x2\x2\x2\x1A74"+
		"\x1A75\x3\x2\x2\x2\x1A75\x1A76\x3\x2\x2\x2\x1A76\x1A77\a<\x2\x2\x1A77"+
		"\x1F7\x3\x2\x2\x2\x1A78\x1A7A\a\x354\x2\x2\x1A79\x1A7B\a\b\x2\x2\x1A7A"+
		"\x1A79\x3\x2\x2\x2\x1A7A\x1A7B\x3\x2\x2\x2\x1A7B\x1A7F\x3\x2\x2\x2\x1A7C"+
		"\x1A7D\x5\x428\x215\x2\x1A7D\x1A7E\a\x368\x2\x2\x1A7E\x1A80\x3\x2\x2\x2"+
		"\x1A7F\x1A7C\x3\x2\x2\x2\x1A7F\x1A80\x3\x2\x2\x2\x1A80\x1A81\x3\x2\x2"+
		"\x2\x1A81\x1A83\x5\x41E\x210\x2\x1A82\x1A84\a\xB7\x2\x2\x1A83\x1A82\x3"+
		"\x2\x2\x2\x1A83\x1A84\x3\x2\x2\x2\x1A84\x1A87\x3\x2\x2\x2\x1A85\x1A86"+
		"\a\x35B\x2\x2\x1A86\x1A88\x5\x420\x211\x2\x1A87\x1A85\x3\x2\x2\x2\x1A87"+
		"\x1A88\x3\x2\x2\x2\x1A88\x1A8A\x3\x2\x2\x2\x1A89\x1A8B\t>\x2\x2\x1A8A"+
		"\x1A89\x3\x2\x2\x2\x1A8A\x1A8B\x3\x2\x2\x2\x1A8B\x1F9\x3\x2\x2\x2\x1A8C"+
		"\x1A90\a\x139\x2\x2\x1A8D\x1A90\a\x1F9\x2\x2\x1A8E\x1A90\x5\x2E4\x173"+
		"\x2\x1A8F\x1A8C\x3\x2\x2\x2\x1A8F\x1A8D\x3\x2\x2\x2\x1A8F\x1A8E\x3\x2"+
		"\x2\x2\x1A90\x1FB\x3\x2\x2\x2\x1A91\x1A9E\a\x139\x2\x2\x1A92\x1A9E\a\x214"+
		"\x2\x2\x1A93\x1A94\a\x312\x2\x2\x1A94\x1A95\ak\x2\x2\x1A95\x1A96\ap\x2"+
		"\x2\x1A96\x1A97\ak\x2\x2\x1A97\x1A9E\a\x16F\x2\x2\x1A98\x1A99\a\x290\x2"+
		"\x2\x1A99\x1A9A\ap\x2\x2\x1A9A\x1A9B\ak\x2\x2\x1A9B\x1A9E\a\x16F\x2\x2"+
		"\x1A9C\x1A9E\x5\x2E4\x173\x2\x1A9D\x1A91\x3\x2\x2\x2\x1A9D\x1A92\x3\x2"+
		"\x2\x2\x1A9D\x1A93\x3\x2\x2\x2\x1A9D\x1A98\x3\x2\x2\x2\x1A9D\x1A9C\x3"+
		"\x2\x2\x2\x1A9E\x1FD\x3\x2\x2\x2\x1A9F\x1AA0\a#\x2\x2\x1AA0\x1AA1\a\xA2"+
		"\x2\x2\x1AA1\x1AA2\x5\x428\x215\x2\x1AA2\x1AA3\ap\x2\x2\x1AA3\x1AA4\x5"+
		"\x3EA\x1F6\x2\x1AA4\x1AA5\a\x36D\x2\x2\x1AA5\x1AA6\x5\x3FE\x200\x2\x1AA6"+
		"\x1AB9\a\x36E\x2\x2\x1AA7\x1AAD\a\xBD\x2\x2\x1AA8\x1AAE\a\x156\x2\x2\x1AA9"+
		"\x1AAA\a\x213\x2\x2\x1AAA\x1AAB\a\x355\x2\x2\x1AAB\x1AAE\t?\x2\x2\x1AAC"+
		"\x1AAE\a\x236\x2\x2\x1AAD\x1AA8\x3\x2\x2\x2\x1AAD\x1AA9\x3\x2\x2\x2\x1AAD"+
		"\x1AAC\x3\x2\x2\x2\x1AAE\x1AB1\x3\x2\x2\x2\x1AAF\x1AB0\a\x36F\x2\x2\x1AB0"+
		"\x1AB2\a\x1BA\x2\x2\x1AB1\x1AAF\x3\x2\x2\x2\x1AB1\x1AB2\x3\x2\x2\x2\x1AB2"+
		"\x1AB7\x3\x2\x2\x2\x1AB3\x1AB4\a\x36F\x2\x2\x1AB4\x1AB5\a\x16D\x2\x2\x1AB5"+
		"\x1AB6\a\x35B\x2\x2\x1AB6\x1AB8\x5\x402\x202\x2\x1AB7\x1AB3\x3\x2\x2\x2"+
		"\x1AB7\x1AB8\x3\x2\x2\x2\x1AB8\x1ABA\x3\x2\x2\x2\x1AB9\x1AA7\x3\x2\x2"+
		"\x2\x1AB9\x1ABA\x3\x2\x2\x2\x1ABA\x1ABC\x3\x2\x2\x2\x1ABB\x1ABD\a\x370"+
		"\x2\x2\x1ABC\x1ABB\x3\x2\x2\x2\x1ABC\x1ABD\x3\x2\x2\x2\x1ABD\x1FF\x3\x2"+
		"\x2\x2\x1ABE\x1AC0\a\xB2\x2\x2\x1ABF\x1AC1\t@\x2\x2\x1AC0\x1ABF\x3\x2"+
		"\x2\x2\x1AC0\x1AC1\x3\x2\x2\x2\x1AC1\x1AC2\x3\x2\x2\x2\x1AC2\x1AC3\a\xA2"+
		"\x2\x2\x1AC3\x1AC5\x5\x3E8\x1F5\x2\x1AC4\x1AC6\x5\x428\x215\x2\x1AC5\x1AC4"+
		"\x3\x2\x2\x2\x1AC5\x1AC6\x3\x2\x2\x2\x1AC6\x1ACA\x3\x2\x2\x2\x1AC7\x1AC8"+
		"\a\x262\x2\x2\x1AC8\x1AC9\a\x355\x2\x2\x1AC9\x1ACB\a\xB6\x2\x2\x1ACA\x1AC7"+
		"\x3\x2\x2\x2\x1ACA\x1ACB\x3\x2\x2\x2\x1ACB\x201\x3\x2\x2\x2\x1ACC\x1ACD"+
		"\a#\x2\x2\x1ACD\x1ACE\a\xA4\x2\x2\x1ACE\x1ACF\x5\x3EA\x1F6\x2\x1ACF\x1AD0"+
		"\a\x36D\x2\x2\x1AD0\x1AD7\x5\x2F0\x179\x2\x1AD1\x1AD3\a\x36F\x2\x2\x1AD2"+
		"\x1AD1\x3\x2\x2\x2\x1AD2\x1AD3\x3\x2\x2\x2\x1AD3\x1AD4\x3\x2\x2\x2\x1AD4"+
		"\x1AD6\x5\x204\x103\x2\x1AD5\x1AD2\x3\x2\x2\x2\x1AD6\x1AD9\x3\x2\x2\x2"+
		"\x1AD7\x1AD5\x3\x2\x2\x2\x1AD7\x1AD8\x3\x2\x2\x2\x1AD8\x1ADB\x3\x2\x2"+
		"\x2\x1AD9\x1AD7\x3\x2\x2\x2\x1ADA\x1ADC\a\x36F\x2\x2\x1ADB\x1ADA\x3\x2"+
		"\x2\x2\x1ADB\x1ADC\x3\x2\x2\x2\x1ADC\x1ADD\x3\x2\x2\x2\x1ADD\x1AE0\a\x36E"+
		"\x2\x2\x1ADE\x1ADF\a\x188\x2\x2\x1ADF\x1AE1\x5\x42A\x216\x2\x1AE0\x1ADE"+
		"\x3\x2\x2\x2\x1AE0\x1AE1\x3\x2\x2\x2\x1AE1\x1AE5\x3\x2\x2\x2\x1AE2\x1AE4"+
		"\x5\x206\x104\x2\x1AE3\x1AE2\x3\x2\x2\x2\x1AE4\x1AE7\x3\x2\x2\x2\x1AE5"+
		"\x1AE3\x3\x2\x2\x2\x1AE5\x1AE6\x3\x2\x2\x2\x1AE6\x1AEB\x3\x2\x2\x2\x1AE7"+
		"\x1AE5\x3\x2\x2\x2\x1AE8\x1AE9\ap\x2\x2\x1AE9\x1AEC\x5\x428\x215\x2\x1AEA"+
		"\x1AEC\a/\x2\x2\x1AEB\x1AE8\x3\x2\x2\x2\x1AEB\x1AEA\x3\x2\x2\x2\x1AEB"+
		"\x1AEC\x3\x2\x2\x2\x1AEC\x1AF0\x3\x2\x2\x2\x1AED\x1AEE\a\x24A\x2\x2\x1AEE"+
		"\x1AF1\x5\x428\x215\x2\x1AEF\x1AF1\a/\x2\x2\x1AF0\x1AED\x3\x2\x2\x2\x1AF0"+
		"\x1AEF\x3\x2\x2\x2\x1AF0\x1AF1\x3\x2\x2\x2\x1AF1\x1AF3\x3\x2\x2\x2\x1AF2"+
		"\x1AF4\a\x370\x2\x2\x1AF3\x1AF2\x3\x2\x2\x2\x1AF3\x1AF4\x3\x2\x2\x2\x1AF4"+
		"\x203\x3\x2\x2\x2\x1AF5\x1AF6\aX\x2\x2\x1AF6\x1AF8\x5\x428\x215\x2\x1AF7"+
		"\x1AF9\t\x41\x2\x2\x1AF8\x1AF7\x3\x2\x2\x2\x1AF8\x1AF9\x3\x2\x2\x2\x1AF9"+
		"\x1AFA\x3\x2\x2\x2\x1AFA\x1AFB\a\x36D\x2\x2\x1AFB\x1AFC\x5\x3F8\x1FD\x2"+
		"\x1AFC\x1AFE\a\x36E\x2\x2\x1AFD\x1AFF\x5\x300\x181\x2\x1AFE\x1AFD\x3\x2"+
		"\x2\x2\x1AFE\x1AFF\x3\x2\x2\x2\x1AFF\x1B02\x3\x2\x2\x2\x1B00\x1B01\ap"+
		"\x2\x2\x1B01\x1B03\x5\x428\x215\x2\x1B02\x1B00\x3\x2\x2\x2\x1B02\x1B03"+
		"\x3\x2\x2\x2\x1B03\x205\x3\x2\x2\x2\x1B04\x1B18\a\xBD\x2\x2\x1B05\x1B06"+
		"\a\x36D\x2\x2\x1B06\x1B0B\x5\x302\x182\x2\x1B07\x1B08\a\x36F\x2\x2\x1B08"+
		"\x1B0A\x5\x302\x182\x2\x1B09\x1B07\x3\x2\x2\x2\x1B0A\x1B0D\x3\x2\x2\x2"+
		"\x1B0B\x1B09\x3\x2\x2\x2\x1B0B\x1B0C\x3\x2\x2\x2\x1B0C\x1B0E\x3\x2\x2"+
		"\x2\x1B0D\x1B0B\x3\x2\x2\x2\x1B0E\x1B0F\a\x36E\x2\x2\x1B0F\x1B19\x3\x2"+
		"\x2\x2\x1B10\x1B15\x5\x302\x182\x2\x1B11\x1B12\a\x36F\x2\x2\x1B12\x1B14"+
		"\x5\x302\x182\x2\x1B13\x1B11\x3\x2\x2\x2\x1B14\x1B17\x3\x2\x2\x2\x1B15"+
		"\x1B13\x3\x2\x2\x2\x1B15\x1B16\x3\x2\x2\x2\x1B16\x1B19\x3\x2\x2\x2\x1B17"+
		"\x1B15\x3\x2\x2\x2\x1B18\x1B05\x3\x2\x2\x2\x1B18\x1B10\x3\x2\x2\x2\x1B19"+
		"\x207\x3\x2\x2\x2\x1B1A\x1B1B\a#\x2\x2\x1B1B\x1B1C\a\xB8\x2\x2\x1B1C\x1B21"+
		"\x5\x3EC\x1F7\x2\x1B1D\x1B1E\a\x36D\x2\x2\x1B1E\x1B1F\x5\x3FE\x200\x2"+
		"\x1B1F\x1B20\a\x36E\x2\x2\x1B20\x1B22\x3\x2\x2\x2\x1B21\x1B1D\x3\x2\x2"+
		"\x2\x1B21\x1B22\x3\x2\x2\x2\x1B22\x1B2C\x3\x2\x2\x2\x1B23\x1B24\a\xBD"+
		"\x2\x2\x1B24\x1B29\x5\x20A\x106\x2\x1B25\x1B26\a\x36F\x2\x2\x1B26\x1B28"+
		"\x5\x20A\x106\x2\x1B27\x1B25\x3\x2\x2\x2\x1B28\x1B2B\x3\x2\x2\x2\x1B29"+
		"\x1B27\x3\x2\x2\x2\x1B29\x1B2A\x3\x2\x2\x2\x1B2A\x1B2D\x3\x2\x2\x2\x1B2B"+
		"\x1B29\x3\x2\x2\x2\x1B2C\x1B23\x3\x2\x2\x2\x1B2C\x1B2D\x3\x2\x2\x2\x1B2D"+
		"\x1B2E\x3\x2\x2\x2\x1B2E\x1B2F\a\b\x2\x2\x1B2F\x1B33\x5\x1CA\xE6\x2\x1B30"+
		"\x1B31\a\xBD\x2\x2\x1B31\x1B32\a\x15\x2\x2\x1B32\x1B34\aw\x2\x2\x1B33"+
		"\x1B30\x3\x2\x2\x2\x1B33\x1B34\x3\x2\x2\x2\x1B34\x1B36\x3\x2\x2\x2\x1B35"+
		"\x1B37\a\x370\x2\x2\x1B36\x1B35\x3\x2\x2\x2\x1B36\x1B37\x3\x2\x2\x2\x1B37"+
		"\x209\x3\x2\x2\x2\x1B38\x1B39\t\x42\x2\x2\x1B39\x20B\x3\x2\x2\x2\x1B3A"+
		"\x1B3B\a\x5\x2\x2\x1B3B\x1B3C\a\xA4\x2\x2\x1B3C\x1B7D\x5\x3EA\x1F6\x2"+
		"\x1B3D\x1B3E\a\x9E\x2\x2\x1B3E\x1B3F\a\x36D\x2\x2\x1B3F\x1B40\a\x189\x2"+
		"\x2\x1B40\x1B41\a\x35B\x2\x2\x1B41\x1B42\t\x43\x2\x2\x1B42\x1B7E\a\x36E"+
		"\x2\x2\x1B43\x1B44\a\x3\x2\x2\x1B44\x1B7E\x5\x2F0\x179\x2\x1B45\x1B46"+
		"\a\x5\x2\x2\x1B46\x1B47\a\x1B\x2\x2\x1B47\x1B7E\x5\x2F4\x17B\x2\x1B48"+
		"\x1B49\a\x39\x2\x2\x1B49\x1B4A\a\x1B\x2\x2\x1B4A\x1B4F\x5\x428\x215\x2"+
		"\x1B4B\x1B4C\a\x36F\x2\x2\x1B4C\x1B4E\x5\x428\x215\x2\x1B4D\x1B4B\x3\x2"+
		"\x2\x2\x1B4E\x1B51\x3\x2\x2\x2\x1B4F\x1B4D\x3\x2\x2\x2\x1B4F\x1B50\x3"+
		"\x2\x2\x2\x1B50\x1B7E\x3\x2\x2\x2\x1B51\x1B4F\x3\x2\x2\x2\x1B52\x1B53"+
		"\a\x39\x2\x2\x1B53\x1B54\a\x1E\x2\x2\x1B54\x1B7E\x5\x428\x215\x2\x1B55"+
		"\x1B56\a\xBD\x2\x2\x1B56\x1B57\t\x44\x2\x2\x1B57\x1B58\a\x3\x2\x2\x1B58"+
		"\x1B59\a\x1E\x2\x2\x1B59\x1B6F\x5\x428\x215\x2\x1B5A\x1B5B\aH\x2\x2\x1B5B"+
		"\x1B5C\a_\x2\x2\x1B5C\x1B5D\a\x36D\x2\x2\x1B5D\x1B5E\x5\x3FE\x200\x2\x1B5E"+
		"\x1B5F\a\x36E\x2\x2\x1B5F\x1B60\a\x8A\x2\x2\x1B60\x1B61\x5\x3EA\x1F6\x2"+
		"\x1B61\x1B62\a\x36D\x2\x2\x1B62\x1B63\x5\x3FE\x200\x2\x1B63\x1B65\a\x36E"+
		"\x2\x2\x1B64\x1B66\x5\x2FC\x17F\x2\x1B65\x1B64\x3\x2\x2\x2\x1B65\x1B66"+
		"\x3\x2\x2\x2\x1B66\x1B68\x3\x2\x2\x2\x1B67\x1B69\x5\x2FE\x180\x2\x1B68"+
		"\x1B67\x3\x2\x2\x2\x1B68\x1B69\x3\x2\x2\x2\x1B69\x1B70\x3\x2\x2\x2\x1B6A"+
		"\x1B6B\a\x15\x2\x2\x1B6B\x1B6C\a\x36D\x2\x2\x1B6C\x1B6D\x5\x32A\x196\x2"+
		"\x1B6D\x1B6E\a\x36E\x2\x2\x1B6E\x1B70\x3\x2\x2\x2\x1B6F\x1B5A\x3\x2\x2"+
		"\x2\x1B6F\x1B6A\x3\x2\x2\x2\x1B70\x1B7E\x3\x2\x2\x2\x1B71\x1B72\a\x15"+
		"\x2\x2\x1B72\x1B73\a\x1E\x2\x2\x1B73\x1B7E\x5\x428\x215\x2\x1B74\x1B75"+
		"\t\x1B\x2\x2\x1B75\x1B77\a\xAC\x2\x2\x1B76\x1B78\x5\x428\x215\x2\x1B77"+
		"\x1B76\x3\x2\x2\x2\x1B77\x1B78\x3\x2\x2\x2\x1B78\x1B7E\x3\x2\x2\x2\x1B79"+
		"\x1B7A\a\x1F7\x2\x2\x1B7A\x1B7E\x5\x206\x104\x2\x1B7B\x1B7C\a\x339\x2"+
		"\x2\x1B7C\x1B7E\x5\x20E\x108\x2\x1B7D\x1B3D\x3\x2\x2\x2\x1B7D\x1B43\x3"+
		"\x2\x2\x2\x1B7D\x1B45\x3\x2\x2\x2\x1B7D\x1B48\x3\x2\x2\x2\x1B7D\x1B52"+
		"\x3\x2\x2\x2\x1B7D\x1B55\x3\x2\x2\x2\x1B7D\x1B71\x3\x2\x2\x2\x1B7D\x1B74"+
		"\x3\x2\x2\x2\x1B7D\x1B79\x3\x2\x2\x2\x1B7D\x1B7B\x3\x2\x2\x2\x1B7E\x1B80"+
		"\x3\x2\x2\x2\x1B7F\x1B81\a\x370\x2\x2\x1B80\x1B7F\x3\x2\x2\x2\x1B80\x1B81"+
		"\x3\x2\x2\x2\x1B81\x20D\x3\x2\x2\x2\x1B82\x1B84\a\x1D2\x2\x2\x1B83\x1B82"+
		"\x3\x2\x2\x2\x1B83\x1B84\x3\x2\x2\x2\x1B84\x1B85\x3\x2\x2\x2\x1B85\x1B87"+
		"\x5\x312\x18A\x2\x1B86\x1B83\x3\x2\x2\x2\x1B86\x1B87\x3\x2\x2\x2\x1B87"+
		"\x1B88\x3\x2\x2\x2\x1B88\x1B89\a\xA8\x2\x2\x1B89\x1B8C\x5\x3EA\x1F6\x2"+
		"\x1B8A\x1B8B\a\x1D2\x2\x2\x1B8B\x1B8D\x5\x312\x18A\x2\x1B8C\x1B8A\x3\x2"+
		"\x2\x2\x1B8C\x1B8D\x3\x2\x2\x2\x1B8D\x1B90\x3\x2\x2\x2\x1B8E\x1B8F\a\xBD"+
		"\x2\x2\x1B8F\x1B91\x5\x210\x109\x2\x1B90\x1B8E\x3\x2\x2\x2\x1B90\x1B91"+
		"\x3\x2\x2\x2\x1B91\x20F\x3\x2\x2\x2\x1B92\x1B93\a\x347\x2\x2\x1B93\x1B94"+
		"\a\x36D\x2\x2\x1B94\x1B95\a\x2DD\x2\x2\x1B95\x1B96\a\x35B\x2\x2\x1B96"+
		"\x1B98\x5\x1CE\xE8\x2\x1B97\x1B99\a\x1A5\x2\x2\x1B98\x1B97\x3\x2\x2\x2"+
		"\x1B98\x1B99\x3\x2\x2\x2\x1B99\x1B9A\x3\x2\x2\x2\x1B9A\x1B9B\a\x36F\x2"+
		"\x2\x1B9B\x1B9C\a\x277\x2\x2\x1B9C\x1B9D\a\x35B\x2\x2\x1B9D\x1B9E\t\x45"+
		"\x2\x2\x1B9E\x1B9F\a\x36E\x2\x2\x1B9F\x211\x3\x2\x2\x2\x1BA0\x1BA1\a\x5"+
		"\x2\x2\x1BA1\x1BA4\a+\x2\x2\x1BA2\x1BA5\x5\x428\x215\x2\x1BA3\x1BA5\a"+
		"%\x2\x2\x1BA4\x1BA2\x3\x2\x2\x2\x1BA4\x1BA3\x3\x2\x2\x2\x1BA5\x1BB4\x3"+
		"\x2\x2\x2\x1BA6\x1BA7\a\x1A9\x2\x2\x1BA7\x1BA8\a\x1AC\x2\x2\x1BA8\x1BA9"+
		"\a\x35B\x2\x2\x1BA9\x1BB5\x5\x428\x215\x2\x1BAA\x1BAB\a\x1A\x2\x2\x1BAB"+
		"\x1BB5\x5\x428\x215\x2\x1BAC\x1BAD\a\x9E\x2\x2\x1BAD\x1BB0\x5\x21C\x10F"+
		"\x2\x1BAE\x1BAF\a\xBD\x2\x2\x1BAF\x1BB1\x5\x262\x132\x2\x1BB0\x1BAE\x3"+
		"\x2\x2\x2\x1BB0\x1BB1\x3\x2\x2\x2\x1BB1\x1BB5\x3\x2\x2\x2\x1BB2\x1BB5"+
		"\x5\x214\x10B\x2\x1BB3\x1BB5\x5\x218\x10D\x2\x1BB4\x1BA6\x3\x2\x2\x2\x1BB4"+
		"\x1BAA\x3\x2\x2\x2\x1BB4\x1BAC\x3\x2\x2\x2\x1BB4\x1BB2\x3\x2\x2\x2\x1BB4"+
		"\x1BB3\x3\x2\x2\x2\x1BB5\x1BB7\x3\x2\x2\x2\x1BB6\x1BB8\a\x370\x2\x2\x1BB7"+
		"\x1BB6\x3\x2\x2\x2\x1BB7\x1BB8\x3\x2\x2\x2\x1BB8\x213\x3\x2\x2\x2\x1BB9"+
		"\x1BBA\a\x3\x2\x2\x1BBA\x1BBB\a\x45\x2\x2\x1BBB\x1BC0\x5\x216\x10C\x2"+
		"\x1BBC\x1BBD\a\x36F\x2\x2\x1BBD\x1BBF\x5\x216\x10C\x2\x1BBE\x1BBC\x3\x2"+
		"\x2\x2\x1BBF\x1BC2\x3\x2\x2\x2\x1BC0\x1BBE\x3\x2\x2\x2\x1BC0\x1BC1\x3"+
		"\x2\x2\x2\x1BC1\x1BC6\x3\x2\x2\x2\x1BC2\x1BC0\x3\x2\x2\x2\x1BC3\x1BC4"+
		"\a\xA8\x2\x2\x1BC4\x1BC5\a\x148\x2\x2\x1BC5\x1BC7\x5\x428\x215\x2\x1BC6"+
		"\x1BC3\x3\x2\x2\x2\x1BC6\x1BC7\x3\x2\x2\x2\x1BC7\x1BDA\x3\x2\x2\x2\x1BC8"+
		"\x1BC9\a\x3\x2\x2\x1BC9\x1BCA\a\x2D5\x2\x2\x1BCA\x1BCB\a\x45\x2\x2\x1BCB"+
		"\x1BD0\x5\x216\x10C\x2\x1BCC\x1BCD\a\x36F\x2\x2\x1BCD\x1BCF\x5\x216\x10C"+
		"\x2\x1BCE\x1BCC\x3\x2\x2\x2\x1BCF\x1BD2\x3\x2\x2\x2\x1BD0\x1BCE\x3\x2"+
		"\x2\x2\x1BD0\x1BD1\x3\x2\x2\x2\x1BD1\x1BDA\x3\x2\x2\x2\x1BD2\x1BD0\x3"+
		"\x2\x2\x2\x1BD3\x1BD4\a\x1FF\x2\x2\x1BD4\x1BD5\a\x45\x2\x2\x1BD5\x1BDA"+
		"\x5\x428\x215\x2\x1BD6\x1BD7\a\x1A9\x2\x2\x1BD7\x1BD8\a\x45\x2\x2\x1BD8"+
		"\x1BDA\x5\x216\x10C\x2\x1BD9\x1BB9\x3\x2\x2\x2\x1BD9\x1BC8\x3\x2\x2\x2"+
		"\x1BD9\x1BD3\x3\x2\x2\x2\x1BD9\x1BD6\x3\x2\x2\x2\x1BDA\x215\x3\x2\x2\x2"+
		"\x1BDB\x1BDC\a\x36D\x2\x2\x1BDC\x1BDD\a\x1AC\x2\x2\x1BDD\x1BDE\a\x35B"+
		"\x2\x2\x1BDE\x1BE3\x5\x42C\x217\x2\x1BDF\x1BE0\a\x36F\x2\x2\x1BE0\x1BE1"+
		"\a\x1B1\x2\x2\x1BE1\x1BE2\a\x35B\x2\x2\x1BE2\x1BE4\x5\x42C\x217\x2\x1BE3"+
		"\x1BDF\x3\x2\x2\x2\x1BE3\x1BE4\x3\x2\x2\x2\x1BE4\x1BE9\x3\x2\x2\x2\x1BE5"+
		"\x1BE6\a\x36F\x2\x2\x1BE6\x1BE7\a\x14A\x2\x2\x1BE7\x1BE8\a\x35B\x2\x2"+
		"\x1BE8\x1BEA\a\x357\x2\x2\x1BE9\x1BE5\x3\x2\x2\x2\x1BE9\x1BEA\x3\x2\x2"+
		"\x2\x1BEA\x1BEF\x3\x2\x2\x2\x1BEB\x1BEC\a\x36F\x2\x2\x1BEC\x1BED\a\x22F"+
		"\x2\x2\x1BED\x1BEE\a\x35B\x2\x2\x1BEE\x1BF0\x5\x432\x21A\x2\x1BEF\x1BEB"+
		"\x3\x2\x2\x2\x1BEF\x1BF0\x3\x2\x2\x2\x1BF0\x1BF6\x3\x2\x2\x2\x1BF1\x1BF2"+
		"\a\x36F\x2\x2\x1BF2\x1BF3\a\x19B\x2\x2\x1BF3\x1BF4\a\x35B\x2\x2\x1BF4"+
		"\x1BF7\x5\x432\x21A\x2\x1BF5\x1BF7\a\x25F\x2\x2\x1BF6\x1BF1\x3\x2\x2\x2"+
		"\x1BF6\x1BF5\x3\x2\x2\x2\x1BF6\x1BF7\x3\x2\x2\x2\x1BF7\x1BFC\x3\x2\x2"+
		"\x2\x1BF8\x1BF9\a\x36F\x2\x2\x1BF9\x1BFA\a\x149\x2\x2\x1BFA\x1BFB\a\x35B"+
		"\x2\x2\x1BFB\x1BFD\x5\x432\x21A\x2\x1BFC\x1BF8\x3\x2\x2\x2\x1BFC\x1BFD"+
		"\x3\x2\x2\x2\x1BFD\x1C00\x3\x2\x2\x2\x1BFE\x1BFF\a\x36F\x2\x2\x1BFF\x1C01"+
		"\a\x1C3\x2\x2\x1C00\x1BFE\x3\x2\x2\x2\x1C00\x1C01\x3\x2\x2\x2\x1C01\x1C02"+
		"\x3\x2\x2\x2\x1C02\x1C03\a\x36E\x2\x2\x1C03\x217\x3\x2\x2\x2\x1C04\x1C05"+
		"\a\x3\x2\x2\x1C05\x1C06\a\x148\x2\x2\x1C06\x1C0B\x5\x428\x215\x2\x1C07"+
		"\x1C08\a\x1F\x2\x2\x1C08\x1C0C\a\x14C\x2\x2\x1C09\x1C0A\a\x1F\x2\x2\x1C0A"+
		"\x1C0C\a\x19E\x2\x2\x1C0B\x1C07\x3\x2\x2\x2\x1C0B\x1C09\x3\x2\x2\x2\x1C0B"+
		"\x1C0C\x3\x2\x2\x2\x1C0C\x1C1D\x3\x2\x2\x2\x1C0D\x1C0E\a\x1FF\x2\x2\x1C0E"+
		"\x1C0F\a\x148\x2\x2\x1C0F\x1C1D\x5\x428\x215\x2\x1C10\x1C11\a\x1A9\x2"+
		"\x2\x1C11\x1C12\a\x148\x2\x2\x1C12\x1C1A\x5\x428\x215\x2\x1C13\x1C1B\x5"+
		"\x21A\x10E\x2\x1C14\x1C1B\a/\x2\x2\x1C15\x1C16\a\x1AC\x2\x2\x1C16\x1C17"+
		"\a\x35B\x2\x2\x1C17\x1C1B\x5\x428\x215\x2\x1C18\x1C1B\a\xE5\x2\x2\x1C19"+
		"\x1C1B\a\xE4\x2\x2\x1C1A\x1C13\x3\x2\x2\x2\x1C1A\x1C14\x3\x2\x2\x2\x1C1A"+
		"\x1C15\x3\x2\x2\x2\x1C1A\x1C18\x3\x2\x2\x2\x1C1A\x1C19\x3\x2\x2\x2\x1C1B"+
		"\x1C1D\x3\x2\x2\x2\x1C1C\x1C04\x3\x2\x2\x2\x1C1C\x1C0D\x3\x2\x2\x2\x1C1C"+
		"\x1C10\x3\x2\x2\x2\x1C1D\x219\x3\x2\x2\x2\x1C1E\x1C1F\t\x46\x2\x2\x1C1F"+
		"\x21B\x3\x2\x2\x2\x1C20\x1C38\x5\x21E\x110\x2\x1C21\x1C38\x5\x220\x111"+
		"\x2\x1C22\x1C38\x5\x224\x113\x2\x1C23\x1C38\x5\x226\x114\x2\x1C24\x1C38"+
		"\x5\x22A\x116\x2\x1C25\x1C38\x5\x244\x123\x2\x1C26\x1C38\x5\x246\x124"+
		"\x2\x1C27\x1C38\x5\x248\x125\x2\x1C28\x1C38\x5\x24A\x126\x2\x1C29\x1C38"+
		"\x5\x24C\x127\x2\x1C2A\x1C38\x5\x24E\x128\x2\x1C2B\x1C38\x5\x250\x129"+
		"\x2\x1C2C\x1C2D\a\x14C\x2\x2\x1C2D\x1C38\x5\x3DA\x1EE\x2\x1C2E\x1C38\x5"+
		"\x252\x12A\x2\x1C2F\x1C38\x5\x254\x12B\x2\x1C30\x1C38\x5\x256\x12C\x2"+
		"\x1C31\x1C38\x5\x258\x12D\x2\x1C32\x1C38\x5\x25A\x12E\x2\x1C33\x1C38\x5"+
		"\x25C\x12F\x2\x1C34\x1C38\x5\x25E\x130\x2\x1C35\x1C38\x5\x260\x131\x2"+
		"\x1C36\x1C38\x5\x262\x132\x2\x1C37\x1C20\x3\x2\x2\x2\x1C37\x1C21\x3\x2"+
		"\x2\x2\x1C37\x1C22\x3\x2\x2\x2\x1C37\x1C23\x3\x2\x2\x2\x1C37\x1C24\x3"+
		"\x2\x2\x2\x1C37\x1C25\x3\x2\x2\x2\x1C37\x1C26\x3\x2\x2\x2\x1C37\x1C27"+
		"\x3\x2\x2\x2\x1C37\x1C28\x3\x2\x2\x2\x1C37\x1C29\x3\x2\x2\x2\x1C37\x1C2A"+
		"\x3\x2\x2\x2\x1C37\x1C2B\x3\x2\x2\x2\x1C37\x1C2C\x3\x2\x2\x2\x1C37\x1C2E"+
		"\x3\x2\x2\x2\x1C37\x1C2F\x3\x2\x2\x2\x1C37\x1C30\x3\x2\x2\x2\x1C37\x1C31"+
		"\x3\x2\x2\x2\x1C37\x1C32\x3\x2\x2\x2\x1C37\x1C33\x3\x2\x2\x2\x1C37\x1C34"+
		"\x3\x2\x2\x2\x1C37\x1C35\x3\x2\x2\x2\x1C37\x1C36\x3\x2\x2\x2\x1C38\x21D"+
		"\x3\x2\x2\x2\x1C39\x1C3A\a\xDF\x2\x2\x1C3A\x1C4B\x5\x402\x202\x2\x1C3B"+
		"\x1C3C\a\xE0\x2\x2\x1C3C\x1C4B\an\x2\x2\x1C3D\x1C42\ap\x2\x2\x1C3E\x1C3F"+
		"\a\x16D\x2\x2\x1C3F\x1C40\a\x35B\x2\x2\x1C40\x1C43\ap\x2\x2\x1C41\x1C43"+
		"\an\x2\x2\x1C42\x1C3E\x3\x2\x2\x2\x1C42\x1C41\x3\x2\x2\x2\x1C43\x1C4B"+
		"\x3\x2\x2\x2\x1C44\x1C45\a\xE1\x2\x2\x1C45\x1C4B\x5\x402\x202\x2\x1C46"+
		"\x1C47\a\xE2\x2\x2\x1C47\x1C4B\x5\x402\x202\x2\x1C48\x1C49\a\xE3\x2\x2"+
		"\x1C49\x1C4B\t\t\x2\x2\x1C4A\x1C39\x3\x2\x2\x2\x1C4A\x1C3B\x3\x2\x2\x2"+
		"\x1C4A\x1C3D\x3\x2\x2\x2\x1C4A\x1C44\x3\x2\x2\x2\x1C4A\x1C46\x3\x2\x2"+
		"\x2\x1C4A\x1C48\x3\x2\x2\x2\x1C4B\x21F\x3\x2\x2\x2\x1C4C\x1C4D\a\xFB\x2"+
		"\x2\x1C4D\x1C5D\a\x35B\x2\x2\x1C4E\x1C5E\an\x2\x2\x1C4F\x1C5A\ap\x2\x2"+
		"\x1C50\x1C55\x5\x222\x112\x2\x1C51\x1C52\a\x36F\x2\x2\x1C52\x1C54\x5\x222"+
		"\x112\x2\x1C53\x1C51\x3\x2\x2\x2\x1C54\x1C57\x3\x2\x2\x2\x1C55\x1C53\x3"+
		"\x2\x2\x2\x1C55\x1C56\x3\x2\x2\x2\x1C56\x1C59\x3\x2\x2\x2\x1C57\x1C55"+
		"\x3\x2\x2\x2\x1C58\x1C50\x3\x2\x2\x2\x1C59\x1C5C\x3\x2\x2\x2\x1C5A\x1C58"+
		"\x3\x2\x2\x2\x1C5A\x1C5B\x3\x2\x2\x2\x1C5B\x1C5E\x3\x2\x2\x2\x1C5C\x1C5A"+
		"\x3\x2\x2\x2\x1C5D\x1C4E\x3\x2\x2\x2\x1C5D\x1C4F\x3\x2\x2\x2\x1C5E\x221"+
		"\x3\x2\x2\x2\x1C5F\x1C60\a\xDE\x2\x2\x1C60\x1C61\a\x35B\x2\x2\x1C61\x1C66"+
		"\x5\x402\x202\x2\x1C62\x1C63\a\xFA\x2\x2\x1C63\x1C64\a\x35B\x2\x2\x1C64"+
		"\x1C66\tG\x2\x2\x1C65\x1C5F\x3\x2\x2\x2\x1C65\x1C62\x3\x2\x2\x2\x1C66"+
		"\x223\x3\x2\x2\x2\x1C67\x1C68\a\x29C\x2\x2\x1C68\x1C69\a\x35B\x2\x2\x1C69"+
		"\x1C6A\t\x39\x2\x2\x1C6A\x225\x3\x2\x2\x2\x1C6B\x1C6C\a\x112\x2\x2\x1C6C"+
		"\x1C70\x5\x402\x202\x2\x1C6D\x1C6E\a\x113\x2\x2\x1C6E\x1C70\tH\x2\x2\x1C6F"+
		"\x1C6B\x3\x2\x2\x2\x1C6F\x1C6D\x3\x2\x2\x2\x1C70\x227\x3\x2\x2\x2\x1C71"+
		"\x1C72\a\x5\x2\x2\x1C72\x1C73\a\x2AF\x2\x2\x1C73\x1C76\x5\x428\x215\x2"+
		"\x1C74\x1C75\a\n\x2\x2\x1C75\x1C77\x5\x428\x215\x2\x1C76\x1C74\x3\x2\x2"+
		"\x2\x1C76\x1C77\x3\x2\x2\x2\x1C77\x1C7F\x3\x2\x2\x2\x1C78\x1C79\a\x330"+
		"\x2\x2\x1C79\x1C7D\a\x35B\x2\x2\x1C7A\x1C7E\a\x333\x2\x2\x1C7B\x1C7E\a"+
		"\x336\x2\x2\x1C7C\x1C7E\a\x12F\x2\x2\x1C7D\x1C7A\x3\x2\x2\x2\x1C7D\x1C7B"+
		"\x3\x2\x2\x2\x1C7D\x1C7C\x3\x2\x2\x2\x1C7E\x1C80\x3\x2\x2\x2\x1C7F\x1C78"+
		"\x3\x2\x2\x2\x1C7F\x1C80\x3\x2\x2\x2\x1C80\x1C81\x3\x2\x2\x2\x1C81\x1C82"+
		"\a\b\x2\x2\x1C82\x1C83\a\x33C\x2\x2\x1C83\x1C84\a\x36D\x2\x2\x1C84\x1C85"+
		"\a\x2D3\x2\x2\x1C85\x1C86\a\x35B\x2\x2\x1C86\x1C8B\a\x355\x2\x2\x1C87"+
		"\x1C88\a\x36F\x2\x2\x1C88\x1C89\a\x2D2\x2\x2\x1C89\x1C8A\a\x35B\x2\x2"+
		"\x1C8A\x1C8C\tI\x2\x2\x1C8B\x1C87\x3\x2\x2\x2\x1C8B\x1C8C\x3\x2\x2\x2"+
		"\x1C8C\x1C8D\x3\x2\x2\x2\x1C8D\x1CFB\a\x36E\x2\x2\x1C8E\x1CFC\a\x258\x2"+
		"\x2\x1C8F\x1C90\aG\x2\x2\x1C90\x1C91\a\x321\x2\x2\x1C91\x1C92\a\x36D\x2"+
		"\x2\x1C92\x1C93\a\x284\x2\x2\x1C93\x1CA4\a\x35B\x2\x2\x1C94\x1C96\a\x348"+
		"\x2\x2\x1C95\x1C97\tJ\x2\x2\x1C96\x1C95\x3\x2\x2\x2\x1C96\x1C97\x3\x2"+
		"\x2\x2\x1C97\x1C9A\x3\x2\x2\x2\x1C98\x1C99\a\x291\x2\x2\x1C99\x1C9B\x5"+
		"\x428\x215\x2\x1C9A\x1C98\x3\x2\x2\x2\x1C9A\x1C9B\x3\x2\x2\x2\x1C9B\x1CA5"+
		"\x3\x2\x2\x2\x1C9C\x1C9D\a\x291\x2\x2\x1C9D\x1C9F\x5\x428\x215\x2\x1C9E"+
		"\x1CA0\a\x348\x2\x2\x1C9F\x1C9E\x3\x2\x2\x2\x1C9F\x1CA0\x3\x2\x2\x2\x1CA0"+
		"\x1CA2\x3\x2\x2\x2\x1CA1\x1CA3\tJ\x2\x2\x1CA2\x1CA1\x3\x2\x2\x2\x1CA2"+
		"\x1CA3\x3\x2\x2\x2\x1CA3\x1CA5\x3\x2\x2\x2\x1CA4\x1C94\x3\x2\x2\x2\x1CA4"+
		"\x1C9C\x3\x2\x2\x2\x1CA5\x1CB7\x3\x2\x2\x2\x1CA6\x1CA8\a\x36F\x2\x2\x1CA7"+
		"\x1CA6\x3\x2\x2\x2\x1CA7\x1CA8\x3\x2\x2\x2\x1CA8\x1CA9\x3\x2\x2\x2\x1CA9"+
		"\x1CAA\a\x139\x2\x2\x1CAA\x1CAB\a\x35B\x2\x2\x1CAB\x1CB5\tK\x2\x2\x1CAC"+
		"\x1CB3\a\xCF\x2\x2\x1CAD\x1CB4\a\x27A\x2\x2\x1CAE\x1CB4\a\x1EF\x2\x2\x1CAF"+
		"\x1CB0\a\x27A\x2\x2\x1CB0\x1CB4\a\x1EF\x2\x2\x1CB1\x1CB2\a\x1EF\x2\x2"+
		"\x1CB2\x1CB4\a\x27A\x2\x2\x1CB3\x1CAD\x3\x2\x2\x2\x1CB3\x1CAE\x3\x2\x2"+
		"\x2\x1CB3\x1CAF\x3\x2\x2\x2\x1CB3\x1CB1\x3\x2\x2\x2\x1CB4\x1CB6\x3\x2"+
		"\x2\x2\x1CB5\x1CAC\x3\x2\x2\x2\x1CB5\x1CB6\x3\x2\x2\x2\x1CB6\x1CB8\x3"+
		"\x2\x2\x2\x1CB7\x1CA7\x3\x2\x2\x2\x1CB7\x1CB8\x3\x2\x2\x2\x1CB8\x1CBF"+
		"\x3\x2\x2\x2\x1CB9\x1CBB\a\x36F\x2\x2\x1CBA\x1CB9\x3\x2\x2\x2\x1CBA\x1CBB"+
		"\x3\x2\x2\x2\x1CBB\x1CBC\x3\x2\x2\x2\x1CBC\x1CBD\a\x2E5\x2\x2\x1CBD\x1CBE"+
		"\a\x35B\x2\x2\x1CBE\x1CC0\tL\x2\x2\x1CBF\x1CBA\x3\x2\x2\x2\x1CBF\x1CC0"+
		"\x3\x2\x2\x2\x1CC0\x1CC7\x3\x2\x2\x2\x1CC1\x1CC3\a\x36F\x2\x2\x1CC2\x1CC1"+
		"\x3\x2\x2\x2\x1CC2\x1CC3\x3\x2\x2\x2\x1CC3\x1CC4\x3\x2\x2\x2\x1CC4\x1CC5"+
		"\a\x2E6\x2\x2\x1CC5\x1CC6\a\x35B\x2\x2\x1CC6\x1CC8\a\x355\x2\x2\x1CC7"+
		"\x1CC2\x3\x2\x2\x2\x1CC7\x1CC8\x3\x2\x2\x2\x1CC8\x1CC9\x3\x2\x2\x2\x1CC9"+
		"\x1CFC\a\x36E\x2\x2\x1CCA\x1CCB\aG\x2\x2\x1CCB\x1CCC\a\x2A6\x2\x2\x1CCC"+
		"\x1CCD\a\x36D\x2\x2\x1CCD\x1CCE\a\x284\x2\x2\x1CCE\x1CDF\a\x35B\x2\x2"+
		"\x1CCF\x1CD1\a\x348\x2\x2\x1CD0\x1CD2\tJ\x2\x2\x1CD1\x1CD0\x3\x2\x2\x2"+
		"\x1CD1\x1CD2\x3\x2\x2\x2\x1CD2\x1CD5\x3\x2\x2\x2\x1CD3\x1CD4\a\x291\x2"+
		"\x2\x1CD4\x1CD6\x5\x428\x215\x2\x1CD5\x1CD3\x3\x2\x2\x2\x1CD5\x1CD6\x3"+
		"\x2\x2\x2\x1CD6\x1CE0\x3\x2\x2\x2\x1CD7\x1CD8\a\x291\x2\x2\x1CD8\x1CDA"+
		"\x5\x428\x215\x2\x1CD9\x1CDB\a\x348\x2\x2\x1CDA\x1CD9\x3\x2\x2\x2\x1CDA"+
		"\x1CDB\x3\x2\x2\x2\x1CDB\x1CDD\x3\x2\x2\x2\x1CDC\x1CDE\tJ\x2\x2\x1CDD"+
		"\x1CDC\x3\x2\x2\x2\x1CDD\x1CDE\x3\x2\x2\x2\x1CDE\x1CE0\x3\x2\x2\x2\x1CDF"+
		"\x1CCF\x3\x2\x2\x2\x1CDF\x1CD7\x3\x2\x2\x2\x1CE0\x1CF2\x3\x2\x2\x2\x1CE1"+
		"\x1CE3\a\x36F\x2\x2\x1CE2\x1CE1\x3\x2\x2\x2\x1CE2\x1CE3\x3\x2\x2\x2\x1CE3"+
		"\x1CE4\x3\x2\x2\x2\x1CE4\x1CE5\a\x139\x2\x2\x1CE5\x1CE6\a\x35B\x2\x2\x1CE6"+
		"\x1CF0\tK\x2\x2\x1CE7\x1CEE\a\xCF\x2\x2\x1CE8\x1CEF\a\x27A\x2\x2\x1CE9"+
		"\x1CEF\a\x1EF\x2\x2\x1CEA\x1CEB\a\x27A\x2\x2\x1CEB\x1CEF\a\x1EF\x2\x2"+
		"\x1CEC\x1CED\a\x1EF\x2\x2\x1CED\x1CEF\a\x27A\x2\x2\x1CEE\x1CE8\x3\x2\x2"+
		"\x2\x1CEE\x1CE9\x3\x2\x2\x2\x1CEE\x1CEA\x3\x2\x2\x2\x1CEE\x1CEC\x3\x2"+
		"\x2\x2\x1CEF\x1CF1\x3\x2\x2\x2\x1CF0\x1CE7\x3\x2\x2\x2\x1CF0\x1CF1\x3"+
		"\x2\x2\x2\x1CF1\x1CF3\x3\x2\x2\x2\x1CF2\x1CE2\x3\x2\x2\x2\x1CF2\x1CF3"+
		"\x3\x2\x2\x2\x1CF3\x1CF5\x3\x2\x2\x2\x1CF4\x1CF6\a\x36F\x2\x2\x1CF5\x1CF4"+
		"\x3\x2\x2\x2\x1CF5\x1CF6\x3\x2\x2\x2\x1CF6\x1CF7\x3\x2\x2\x2\x1CF7\x1CF8"+
		"\a\x314\x2\x2\x1CF8\x1CF9\a\x35B\x2\x2\x1CF9\x1CFA\tM\x2\x2\x1CFA\x1CFC"+
		"\a\x36E\x2\x2\x1CFB\x1C8E\x3\x2\x2\x2\x1CFB\x1C8F\x3\x2\x2\x2\x1CFB\x1CCA"+
		"\x3\x2\x2\x2\x1CFC\x229\x3\x2\x2\x2\x1CFD\x1CFE\x5\x22C\x117\x2\x1CFE"+
		"\x22B\x3\x2\x2\x2\x1CFF\x1D00\x5\x22E\x118\x2\x1D00\x1D01\x5\x234\x11B"+
		"\x2\x1D01\x1D06\x3\x2\x2\x2\x1D02\x1D03\x5\x230\x119\x2\x1D03\x1D04\x5"+
		"\x236\x11C\x2\x1D04\x1D06\x3\x2\x2\x2\x1D05\x1CFF\x3\x2\x2\x2\x1D05\x1D02"+
		"\x3\x2\x2\x2\x1D06\x22D\x3\x2\x2\x2\x1D07\x1D08\a\x1D4\x2\x2\x1D08\x22F"+
		"\x3\x2\x2\x2\x1D09\x1D0A\a\x34A\x2\x2\x1D0A\x231\x3\x2\x2\x2\x1D0B\x1D0C"+
		"\a\x35B\x2\x2\x1D0C\x233\x3\x2\x2\x2\x1D0D\x1D0E\x5\x232\x11A\x2\x1D0E"+
		"\x1D0F\x5\x23A\x11E\x2\x1D0F\x1D1A\x3\x2\x2\x2\x1D10\x1D1A\a\x2B8\x2\x2"+
		"\x1D11\x1D1A\a\x2BD\x2\x2\x1D12\x1D1A\an\x2\x2\x1D13\x1D1A\a\x310\x2\x2"+
		"\x1D14\x1D15\a\x31A\x2\x2\x1D15\x1D1A\tN\x2\x2\x1D16\x1D1A\a\x242\x2\x2"+
		"\x1D17\x1D18\a\x24E\x2\x2\x1D18\x1D1A\a\x355\x2\x2\x1D19\x1D0D\x3\x2\x2"+
		"\x2\x1D19\x1D10\x3\x2\x2\x2\x1D19\x1D11\x3\x2\x2\x2\x1D19\x1D12\x3\x2"+
		"\x2\x2\x1D19\x1D13\x3\x2\x2\x2\x1D19\x1D14\x3\x2\x2\x2\x1D19\x1D16\x3"+
		"\x2\x2\x2\x1D19\x1D17\x3\x2\x2\x2\x1D1A\x235\x3\x2\x2\x2\x1D1B\x1D1C\x5"+
		"\x232\x11A\x2\x1D1C\x1D1D\x5\x238\x11D\x2\x1D1D\x1D20\x3\x2\x2\x2\x1D1E"+
		"\x1D20\an\x2\x2\x1D1F\x1D1B\x3\x2\x2\x2\x1D1F\x1D1E\x3\x2\x2\x2\x1D20"+
		"\x237\x3\x2\x2\x2\x1D21\x1D22\x5\x23A\x11E\x2\x1D22\x239\x3\x2\x2\x2\x1D23"+
		"\x1D24\x5\x23E\x120\x2\x1D24\x1D25\x5\x242\x122\x2\x1D25\x1D26\x5\x23C"+
		"\x11F\x2\x1D26\x1D27\x5\x240\x121\x2\x1D27\x23B\x3\x2\x2\x2\x1D28\x1D29"+
		"\a\x371\x2\x2\x1D29\x23D\x3\x2\x2\x2\x1D2A\x1D2B\a\x33C\x2\x2\x1D2B\x1D2C"+
		"\a\x371\x2\x2\x1D2C\x1D2D\a\x38\x2\x2\x1D2D\x23F\x3\x2\x2\x2\x1D2E\x1D2F"+
		"\a\x355\x2\x2\x1D2F\x241\x3\x2\x2\x2\x1D30\x1D31\x5\x428\x215\x2\x1D31"+
		"\x1D32\a\x368\x2\x2\x1D32\x1D33\x5\x242\x122\x2\x1D33\x1D3B\x3\x2\x2\x2"+
		"\x1D34\x1D35\x5\x428\x215\x2\x1D35\x1D36\a\x368\x2\x2\x1D36\x1D39\x3\x2"+
		"\x2\x2\x1D37\x1D39\x5\x428\x215\x2\x1D38\x1D34\x3\x2\x2\x2\x1D38\x1D37"+
		"\x3\x2\x2\x2\x1D39\x1D3B\x3\x2\x2\x2\x1D3A\x1D30\x3\x2\x2\x2\x1D3A\x1D38"+
		"\x3\x2\x2\x2\x1D3B\x243\x3\x2\x2\x2\x1D3C\x1D3D\a\x115\x2\x2\x1D3D\x1D3E"+
		"\x5\x402\x202\x2\x1D3E\x245\x3\x2\x2\x2\x1D3F\x1D40\a\x139\x2\x2\x1D40"+
		"\x1D41\x5\x402\x202\x2\x1D41\x247\x3\x2\x2\x2\x1D42\x1D43\tO\x2\x2\x1D43"+
		"\x249\x3\x2\x2\x2\x1D44\x1D45\tP\x2\x2\x1D45\x24B\x3\x2\x2\x2\x1D46\x1D47"+
		"\tQ\x2\x2\x1D47\x24D\x3\x2\x2\x2\x1D48\x1D49\a\x123\x2\x2\x1D49\x1D4A"+
		"\a\x35B\x2\x2\x1D4A\x1D4B\tR\x2\x2\x1D4B\x24F\x3\x2\x2\x2\x1D4C\x1D4D"+
		"\a\x11B\x2\x2\x1D4D\x1D66\x5\x402\x202\x2\x1D4E\x1D4F\a\x256\x2\x2\x1D4F"+
		"\x1D66\x5\x402\x202\x2\x1D50\x1D51\a\x120\x2\x2\x1D51\x1D54\a\x35B\x2"+
		"\x2\x1D52\x1D55\x5\x428\x215\x2\x1D53\x1D55\a\x357\x2\x2\x1D54\x1D52\x3"+
		"\x2\x2\x2\x1D54\x1D53\x3\x2\x2\x2\x1D55\x1D66\x3\x2\x2\x2\x1D56\x1D57"+
		"\a\x11F\x2\x2\x1D57\x1D5A\a\x35B\x2\x2\x1D58\x1D5B\x5\x428\x215\x2\x1D59"+
		"\x1D5B\a\x357\x2\x2\x1D5A\x1D58\x3\x2\x2\x2\x1D5A\x1D59\x3\x2\x2\x2\x1D5B"+
		"\x1D66\x3\x2\x2\x2\x1D5C\x1D5D\a\x1AD\x2\x2\x1D5D\x1D5E\a\x35B\x2\x2\x1D5E"+
		"\x1D66\t\t\x2\x2\x1D5F\x1D60\a\x253\x2\x2\x1D60\x1D61\a\x35B\x2\x2\x1D61"+
		"\x1D66\t\t\x2\x2\x1D62\x1D63\a\x259\x2\x2\x1D63\x1D64\a\x35B\x2\x2\x1D64"+
		"\x1D66\a\x355\x2\x2\x1D65\x1D4C\x3\x2\x2\x2\x1D65\x1D4E\x3\x2\x2\x2\x1D65"+
		"\x1D50\x3\x2\x2\x2\x1D65\x1D56\x3\x2\x2\x2\x1D65\x1D5C\x3\x2\x2\x2\x1D65"+
		"\x1D5F\x3\x2\x2\x2\x1D65\x1D62\x3\x2\x2\x2\x1D66\x251\x3\x2\x2\x2\x1D67"+
		"\x1D70\a\x161\x2\x2\x1D68\x1D69\a\xE6\x2\x2\x1D69\x1D6A\aP\x2\x2\x1D6A"+
		"\x1D6B\a\x35B\x2\x2\x1D6B\x1D6E\x5\x428\x215\x2\x1D6C\x1D6E\an\x2\x2\x1D6D"+
		"\x1D68\x3\x2\x2\x2\x1D6D\x1D6C\x3\x2\x2\x2\x1D6E\x1D71\x3\x2\x2\x2\x1D6F"+
		"\x1D71\tS\x2\x2\x1D70\x1D6D\x3\x2\x2\x2\x1D70\x1D6F\x3\x2\x2\x2\x1D71"+
		"\x253\x3\x2\x2\x2\x1D72\x1D73\a\x1A7\x2\x2\x1D73\x1D74\t\t\x2\x2\x1D74"+
		"\x255\x3\x2\x2\x2\x1D75\x1D76\a\x1D1\x2\x2\x1D76\x1D77\tT\x2\x2\x1D77"+
		"\x257\x3\x2\x2\x2\x1D78\x1D79\a\x1FA\x2\x2\x1D79\x1D7F\tU\x2\x2\x1D7A"+
		"\x1D7B\a\x251\x2\x2\x1D7B\x1D7F\x5\x402\x202\x2\x1D7C\x1D7D\a\x1D0\x2"+
		"\x2\x1D7D\x1D7F\tV\x2\x2\x1D7E\x1D78\x3\x2\x2\x2\x1D7E\x1D7A\x3\x2\x2"+
		"\x2\x1D7E\x1D7C\x3\x2\x2\x2\x1D7F\x259\x3\x2\x2\x2\x1D80\x1D87\a\x137"+
		"\x2\x2\x1D81\x1D87\a\x12E\x2\x2\x1D82\x1D87\a\x1AF\x2\x2\x1D83\x1D87\a"+
		"\x13B\x2\x2\x1D84\x1D85\a\x165\x2\x2\x1D85\x1D87\x5\x402\x202\x2\x1D86"+
		"\x1D80\x3\x2\x2\x2\x1D86\x1D81\x3\x2\x2\x2\x1D86\x1D82\x3\x2\x2\x2\x1D86"+
		"\x1D83\x3\x2\x2\x2\x1D86\x1D84\x3\x2\x2\x2\x1D87\x25B\x3\x2\x2\x2\x1D88"+
		"\x1D89\a\xD1\x2\x2\x1D89\x1D8E\x5\x402\x202\x2\x1D8A\x1D8B\a\x1F1\x2\x2"+
		"\x1D8B\x1D8E\t\t\x2\x2\x1D8C\x1D8E\t\t\x2\x2\x1D8D\x1D88\x3\x2\x2\x2\x1D8D"+
		"\x1D8A\x3\x2\x2\x2\x1D8D\x1D8C\x3\x2\x2\x2\x1D8E\x25D\x3\x2\x2\x2\x1D8F"+
		"\x1D90\a\xD3\x2\x2\x1D90\x1DA5\x5\x402\x202\x2\x1D91\x1D92\a\xD4\x2\x2"+
		"\x1D92\x1DA5\x5\x402\x202\x2\x1D93\x1D94\a\xD5\x2\x2\x1D94\x1DA5\x5\x402"+
		"\x202\x2\x1D95\x1D96\a\xD6\x2\x2\x1D96\x1DA5\x5\x402\x202\x2\x1D97\x1D98"+
		"\a\xD9\x2\x2\x1D98\x1DA5\x5\x402\x202\x2\x1D99\x1D9A\a\x103\x2\x2\x1D9A"+
		"\x1D9B\a\x35B\x2\x2\x1D9B\x1DA5\a\x355\x2\x2\x1D9C\x1D9D\a\x105\x2\x2"+
		"\x1D9D\x1DA5\x5\x402\x202\x2\x1D9E\x1D9F\a\x1C1\x2\x2\x1D9F\x1DA5\x5\x402"+
		"\x202\x2\x1DA0\x1DA1\a\x1EB\x2\x2\x1DA1\x1DA5\x5\x402\x202\x2\x1DA2\x1DA3"+
		"\a\x1FB\x2\x2\x1DA3\x1DA5\x5\x402\x202\x2\x1DA4\x1D8F\x3\x2\x2\x2\x1DA4"+
		"\x1D91\x3\x2\x2\x2\x1DA4\x1D93\x3\x2\x2\x2\x1DA4\x1D95\x3\x2\x2\x2\x1DA4"+
		"\x1D97\x3\x2\x2\x2\x1DA4\x1D99\x3\x2\x2\x2\x1DA4\x1D9C\x3\x2\x2\x2\x1DA4"+
		"\x1D9E\x3\x2\x2\x2\x1DA4\x1DA0\x3\x2\x2\x2\x1DA4\x1DA2\x3\x2\x2\x2\x1DA5"+
		"\x25F\x3\x2\x2\x2\x1DA6\x1DA7\a\x248\x2\x2\x1DA7\x1DA8\a\x35B\x2\x2\x1DA8"+
		"\x1DA9\a\x355\x2\x2\x1DA9\x1DAA\tW\x2\x2\x1DAA\x261\x3\x2\x2\x2\x1DAB"+
		"\x1DAC\a\x92\x2\x2\x1DAC\x1DAD\a\xCD\x2\x2\x1DAD\x1DB2\a\x355\x2\x2\x1DAE"+
		"\x1DAF\a\x92\x2\x2\x1DAF\x1DB2\a\x169\x2\x2\x1DB0\x1DB2\a\x1B5\x2\x2\x1DB1"+
		"\x1DAB\x3\x2\x2\x2\x1DB1\x1DAE\x3\x2\x2\x2\x1DB1\x1DB0\x3\x2\x2\x2\x1DB2"+
		"\x263\x3\x2\x2\x2\x1DB3\x1DB4\a\x39\x2\x2\x1DB4\x1DB7\aX\x2\x2\x1DB5\x1DB6"+
		"\aV\x2\x2\x1DB6\x1DB8\a\x41\x2\x2\x1DB7\x1DB5\x3\x2\x2\x2\x1DB7\x1DB8"+
		"\x3\x2\x2\x2\x1DB8\x1DC9\x3\x2\x2\x2\x1DB9\x1DBE\x5\x266\x134\x2\x1DBA"+
		"\x1DBB\a\x36F\x2\x2\x1DBB\x1DBD\x5\x266\x134\x2\x1DBC\x1DBA\x3\x2\x2\x2"+
		"\x1DBD\x1DC0\x3\x2\x2\x2\x1DBE\x1DBC\x3\x2\x2\x2\x1DBE\x1DBF\x3\x2\x2"+
		"\x2\x1DBF\x1DCA\x3\x2\x2\x2\x1DC0\x1DBE\x3\x2\x2\x2\x1DC1\x1DC6\x5\x268"+
		"\x135\x2\x1DC2\x1DC3\a\x36F\x2\x2\x1DC3\x1DC5\x5\x268\x135\x2\x1DC4\x1DC2"+
		"\x3\x2\x2\x2\x1DC5\x1DC8\x3\x2\x2\x2\x1DC6\x1DC4\x3\x2\x2\x2\x1DC6\x1DC7"+
		"\x3\x2\x2\x2\x1DC7\x1DCA\x3\x2\x2\x2\x1DC8\x1DC6\x3\x2\x2\x2\x1DC9\x1DB9"+
		"\x3\x2\x2\x2\x1DC9\x1DC1\x3\x2\x2\x2\x1DCA\x1DCC\x3\x2\x2\x2\x1DCB\x1DCD"+
		"\a\x370\x2\x2\x1DCC\x1DCB\x3\x2\x2\x2\x1DCC\x1DCD\x3\x2\x2\x2\x1DCD\x265"+
		"\x3\x2\x2\x2\x1DCE\x1DCF\x5\x428\x215\x2\x1DCF\x1DD0\ap\x2\x2\x1DD0\x1DD1"+
		"\x5\x3E8\x1F5\x2\x1DD1\x267\x3\x2\x2\x2\x1DD2\x1DD3\x5\x428\x215\x2\x1DD3"+
		"\x1DD4\a\x368\x2\x2\x1DD4\x1DD6\x3\x2\x2\x2\x1DD5\x1DD2\x3\x2\x2\x2\x1DD5"+
		"\x1DD6\x3\x2\x2\x2\x1DD6\x1DD7\x3\x2\x2\x2\x1DD7\x1DD8\x5\x428\x215\x2"+
		"\x1DD8\x1DD9\a\x368\x2\x2\x1DD9\x1DDA\x5\x428\x215\x2\x1DDA\x269\x3\x2"+
		"\x2\x2\x1DDB\x1DDC\a\x39\x2\x2\x1DDC\x1DDF\t;\x2\x2\x1DDD\x1DDE\aV\x2"+
		"\x2\x1DDE\x1DE0\a\x41\x2\x2\x1DDF\x1DDD\x3\x2\x2\x2\x1DDF\x1DE0\x3\x2"+
		"\x2\x2\x1DE0\x1DE1\x3\x2\x2\x2\x1DE1\x1DE6\x5\x3EE\x1F8\x2\x1DE2\x1DE3"+
		"\a\x36F\x2\x2\x1DE3\x1DE5\x5\x3EE\x1F8\x2\x1DE4\x1DE2\x3\x2\x2\x2\x1DE5"+
		"\x1DE8\x3\x2\x2\x2\x1DE6\x1DE4\x3\x2\x2\x2\x1DE6\x1DE7\x3\x2\x2\x2\x1DE7"+
		"\x1DEA\x3\x2\x2\x2\x1DE8\x1DE6\x3\x2\x2\x2\x1DE9\x1DEB\a\x370\x2\x2\x1DEA"+
		"\x1DE9\x3\x2\x2\x2\x1DEA\x1DEB\x3\x2\x2\x2\x1DEB\x26B\x3\x2\x2\x2\x1DEC"+
		"\x1DEF\x5\x26E\x138\x2\x1DED\x1DEF\x5\x270\x139\x2\x1DEE\x1DEC\x3\x2\x2"+
		"\x2\x1DEE\x1DED\x3\x2\x2\x2\x1DEF\x26D\x3\x2\x2\x2\x1DF0\x1DF1\a\x39\x2"+
		"\x2\x1DF1\x1DF4\a\xAC\x2\x2\x1DF2\x1DF3\aV\x2\x2\x1DF3\x1DF5\a\x41\x2"+
		"\x2\x1DF4\x1DF2\x3\x2\x2\x2\x1DF4\x1DF5\x3\x2\x2\x2\x1DF5\x1DF6\x3\x2"+
		"\x2\x2\x1DF6\x1DFB\x5\x3EC\x1F7\x2\x1DF7\x1DF8\a\x36F\x2\x2\x1DF8\x1DFA"+
		"\x5\x3EC\x1F7\x2\x1DF9\x1DF7\x3\x2\x2\x2\x1DFA\x1DFD\x3\x2\x2\x2\x1DFB"+
		"\x1DF9\x3\x2\x2\x2\x1DFB\x1DFC\x3\x2\x2\x2\x1DFC\x1DFF\x3\x2\x2\x2\x1DFD"+
		"\x1DFB\x3\x2\x2\x2\x1DFE\x1E00\a\x370\x2\x2\x1DFF\x1DFE\x3\x2\x2\x2\x1DFF"+
		"\x1E00\x3\x2\x2\x2\x1E00\x26F\x3\x2\x2\x2\x1E01\x1E02\a\x39\x2\x2\x1E02"+
		"\x1E05\a\xAC\x2\x2\x1E03\x1E04\aV\x2\x2\x1E04\x1E06\a\x41\x2\x2\x1E05"+
		"\x1E03\x3\x2\x2\x2\x1E05\x1E06\x3\x2\x2\x2\x1E06\x1E07\x3\x2\x2\x2\x1E07"+
		"\x1E0C\x5\x3EC\x1F7\x2\x1E08\x1E09\a\x36F\x2\x2\x1E09\x1E0B\x5\x3EC\x1F7"+
		"\x2\x1E0A\x1E08\x3\x2\x2\x2\x1E0B\x1E0E\x3\x2\x2\x2\x1E0C\x1E0A\x3\x2"+
		"\x2\x2\x1E0C\x1E0D\x3\x2\x2\x2\x1E0D\x1E0F\x3\x2\x2\x2\x1E0E\x1E0C\x3"+
		"\x2\x2\x2\x1E0F\x1E13\ap\x2\x2\x1E10\x1E14\a+\x2\x2\x1E11\x1E12\a\x4\x2"+
		"\x2\x1E12\x1E14\a\x31F\x2\x2\x1E13\x1E10\x3\x2\x2\x2\x1E13\x1E11\x3\x2"+
		"\x2\x2\x1E14\x1E16\x3\x2\x2\x2\x1E15\x1E17\a\x370\x2\x2\x1E16\x1E15\x3"+
		"\x2\x2\x2\x1E16\x1E17\x3\x2\x2\x2\x1E17\x271\x3\x2\x2\x2\x1E18\x1E19\a"+
		"\x39\x2\x2\x1E19\x1E1C\aM\x2\x2\x1E1A\x1E1B\aV\x2\x2\x1E1B\x1E1D\a\x41"+
		"\x2\x2\x1E1C\x1E1A\x3\x2\x2\x2\x1E1C\x1E1D\x3\x2\x2\x2\x1E1D\x1E1E\x3"+
		"\x2\x2\x2\x1E1E\x1E23\x5\x3EE\x1F8\x2\x1E1F\x1E20\a\x36F\x2\x2\x1E20\x1E22"+
		"\x5\x3EE\x1F8\x2\x1E21\x1E1F\x3\x2\x2\x2\x1E22\x1E25\x3\x2\x2\x2\x1E23"+
		"\x1E21\x3\x2\x2\x2\x1E23\x1E24\x3\x2\x2\x2\x1E24\x1E27\x3\x2\x2\x2\x1E25"+
		"\x1E23\x3\x2\x2\x2\x1E26\x1E28\a\x370\x2\x2\x1E27\x1E26\x3\x2\x2\x2\x1E27"+
		"\x1E28\x3\x2\x2\x2\x1E28\x273\x3\x2\x2\x2\x1E29\x1E2A\a\x39\x2\x2\x1E2A"+
		"\x1E34\a\xA2\x2\x2\x1E2B\x1E2D\a\x36F\x2\x2\x1E2C\x1E2B\x3\x2\x2\x2\x1E2C"+
		"\x1E2D\x3\x2\x2\x2\x1E2D\x1E31\x3\x2\x2\x2\x1E2E\x1E2F\x5\x3EA\x1F6\x2"+
		"\x1E2F\x1E30\a\x368\x2\x2\x1E30\x1E32\x3\x2\x2\x2\x1E31\x1E2E\x3\x2\x2"+
		"\x2\x1E31\x1E32\x3\x2\x2\x2\x1E32\x1E33\x3\x2\x2\x2\x1E33\x1E35\x5\x428"+
		"\x215\x2\x1E34\x1E2C\x3\x2\x2\x2\x1E35\x1E36\x3\x2\x2\x2\x1E36\x1E34\x3"+
		"\x2\x2\x2\x1E36\x1E37\x3\x2\x2\x2\x1E37\x1E38\x3\x2\x2\x2\x1E38\x1E39"+
		"\a\x370\x2\x2\x1E39\x275\x3\x2\x2\x2\x1E3A\x1E3B\a\x39\x2\x2\x1E3B\x1E3E"+
		"\a\xA4\x2\x2\x1E3C\x1E3D\aV\x2\x2\x1E3D\x1E3F\a\x41\x2\x2\x1E3E\x1E3C"+
		"\x3\x2\x2\x2\x1E3E\x1E3F\x3\x2\x2\x2\x1E3F\x1E40\x3\x2\x2\x2\x1E40\x1E42"+
		"\x5\x3EA\x1F6\x2\x1E41\x1E43\a\x370\x2\x2\x1E42\x1E41\x3\x2\x2\x2\x1E42"+
		"\x1E43\x3\x2\x2\x2\x1E43\x277\x3\x2\x2\x2\x1E44\x1E45\a\x39\x2\x2\x1E45"+
		"\x1E48\a\xB8\x2\x2\x1E46\x1E47\aV\x2\x2\x1E47\x1E49\a\x41\x2\x2\x1E48"+
		"\x1E46\x3\x2\x2\x2\x1E48\x1E49\x3\x2\x2\x2\x1E49\x1E4A\x3\x2\x2\x2\x1E4A"+
		"\x1E4F\x5\x3EC\x1F7\x2\x1E4B\x1E4C\a\x36F\x2\x2\x1E4C\x1E4E\x5\x3EC\x1F7"+
		"\x2\x1E4D\x1E4B\x3\x2\x2\x2\x1E4E\x1E51\x3\x2\x2\x2\x1E4F\x1E4D\x3\x2"+
		"\x2\x2\x1E4F\x1E50\x3\x2\x2\x2\x1E50\x1E53\x3\x2\x2\x2\x1E51\x1E4F\x3"+
		"\x2\x2\x2\x1E52\x1E54\a\x370\x2\x2\x1E53\x1E52\x3\x2\x2\x2\x1E53\x1E54"+
		"\x3\x2\x2\x2\x1E54\x279\x3\x2\x2\x2\x1E55\x1E56\a#\x2\x2\x1E56\x1E57\a"+
		"\x25A\x2\x2\x1E57\x1E5C\x5\x3EC\x1F7\x2\x1E58\x1E59\aK\x2\x2\x1E59\x1E5A"+
		"\x5\x41E\x210\x2\x1E5A\x1E5B\x5\x420\x211\x2\x1E5B\x1E5D\x3\x2\x2\x2\x1E5C"+
		"\x1E58\x3\x2\x2\x2\x1E5C\x1E5D\x3\x2\x2\x2\x1E5D\x1E64\x3\x2\x2\x2\x1E5E"+
		"\x1E5F\a\b\x2\x2\x1E5F\x1E60\a\xA4\x2\x2\x1E60\x1E61\a\x36D\x2\x2\x1E61"+
		"\x1E62\x5\x2F0\x179\x2\x1E62\x1E63\a\x36E\x2\x2\x1E63\x1E65\x3\x2\x2\x2"+
		"\x1E64\x1E5E\x3\x2\x2\x2\x1E64\x1E65\x3\x2\x2\x2\x1E65\x27B\x3\x2\x2\x2"+
		"\x1E66\x1E67\a\x39\x2\x2\x1E67\x1E6A\a\x25A\x2\x2\x1E68\x1E69\aV\x2\x2"+
		"\x1E69\x1E6B\a\x41\x2\x2\x1E6A\x1E68\x3\x2\x2\x2\x1E6A\x1E6B\x3\x2\x2"+
		"\x2\x1E6B\x1E6C\x3\x2\x2\x2\x1E6C\x1E6D\x5\x3EC\x1F7\x2\x1E6D\x27D\x3"+
		"\x2\x2\x2\x1E6E\x1E71\x5\x280\x141\x2\x1E6F\x1E71\x5\x282\x142\x2\x1E70"+
		"\x1E6E\x3\x2\x2\x2\x1E70\x1E6F\x3\x2\x2\x2\x1E71\x27F\x3\x2\x2\x2\x1E72"+
		"\x1E73\as\x2\x2\x1E73\x1E74\a\x36D\x2\x2\x1E74\x1E75\x5\x428\x215\x2\x1E75"+
		"\x1E76\a\x36F\x2\x2\x1E76\x1E77\a\x357\x2\x2\x1E77\x1E78\a\x36E\x2\x2"+
		"\x1E78\x281\x3\x2\x2\x2\x1E79\x1E7A\ar\x2\x2\x1E7A\x1E7B\a\x36D\x2\x2"+
		"\x1E7B\x1E7C\a\x357\x2\x2\x1E7C\x1E7D\a\x36F\x2\x2\x1E7D\x1E7E\a\x357"+
		"\x2\x2\x1E7E\x1E7F\a\x36E\x2\x2\x1E7F\x1E81\a\x368\x2\x2\x1E80\x1E82\x5"+
		"\x428\x215\x2\x1E81\x1E80\x3\x2\x2\x2\x1E81\x1E82\x3\x2\x2\x2\x1E82\x1E83"+
		"\x3\x2\x2\x2\x1E83\x1E85\a\x368\x2\x2\x1E84\x1E86\x5\x428\x215\x2\x1E85"+
		"\x1E84\x3\x2\x2\x2\x1E85\x1E86\x3\x2\x2\x2\x1E86\x1E87\x3\x2\x2\x2\x1E87"+
		"\x1E88\a\x368\x2\x2\x1E88\x1E89\x5\x428\x215\x2\x1E89\x283\x3\x2\x2\x2"+
		"\x1E8A\x1E8B\a.\x2\x2\x1E8B\x1E8D\a\x354\x2\x2\x1E8C\x1E8E\a\b\x2\x2\x1E8D"+
		"\x1E8C\x3\x2\x2\x2\x1E8D\x1E8E\x3\x2\x2\x2\x1E8E\x1E91\x3\x2\x2\x2\x1E8F"+
		"\x1E92\x5\x2E8\x175\x2\x1E90\x1E92\x5\x3EA\x1F6\x2\x1E91\x1E8F\x3\x2\x2"+
		"\x2\x1E91\x1E90\x3\x2\x2\x2\x1E92\x1E94\x3\x2\x2\x2\x1E93\x1E95\a\x370"+
		"\x2\x2\x1E94\x1E93\x3\x2\x2\x2\x1E94\x1E95\x3\x2\x2\x2\x1E95\x1EBB\x3"+
		"\x2\x2\x2\x1E96\x1E97\a.\x2\x2\x1E97\x1E9C\x5\x2E6\x174\x2\x1E98\x1E99"+
		"\a\x36F\x2\x2\x1E99\x1E9B\x5\x2E6\x174\x2\x1E9A\x1E98\x3\x2\x2\x2\x1E9B"+
		"\x1E9E\x3\x2\x2\x2\x1E9C\x1E9A\x3\x2\x2\x2\x1E9C\x1E9D\x3\x2\x2\x2\x1E9D"+
		"\x1EA0\x3\x2\x2\x2\x1E9E\x1E9C\x3\x2\x2\x2\x1E9F\x1EA1\a\x370\x2\x2\x1EA0"+
		"\x1E9F\x3\x2\x2\x2\x1EA0\x1EA1\x3\x2\x2\x2\x1EA1\x1EBB\x3\x2\x2\x2\x1EA2"+
		"\x1EA3\a.\x2\x2\x1EA3\x1EA5\a\x354\x2\x2\x1EA4\x1EA6\a\b\x2\x2\x1EA5\x1EA4"+
		"\x3\x2\x2\x2\x1EA5\x1EA6\x3\x2\x2\x2\x1EA6\x1EA7\x3\x2\x2\x2\x1EA7\x1EA9"+
		"\x5\x2EC\x177\x2\x1EA8\x1EAA\a\x370\x2\x2\x1EA9\x1EA8\x3\x2\x2\x2\x1EA9"+
		"\x1EAA\x3\x2\x2\x2\x1EAA\x1EBB\x3\x2\x2\x2\x1EAB\x1EAC\a\xBD\x2\x2\x1EAC"+
		"\x1EAD\a\x272\x2\x2\x1EAD\x1EAE\a\x36D\x2\x2\x1EAE\x1EB3\x5\x286\x144"+
		"\x2\x1EAF\x1EB0\a\x36F\x2\x2\x1EB0\x1EB2\x5\x286\x144\x2\x1EB1\x1EAF\x3"+
		"\x2\x2\x2\x1EB2\x1EB5\x3\x2\x2\x2\x1EB3\x1EB1\x3\x2\x2\x2\x1EB3\x1EB4"+
		"\x3\x2\x2\x2\x1EB4\x1EB6\x3\x2\x2\x2\x1EB5\x1EB3\x3\x2\x2\x2\x1EB6\x1EB8"+
		"\a\x36E\x2\x2\x1EB7\x1EB9\a\x370\x2\x2\x1EB8\x1EB7\x3\x2\x2\x2\x1EB8\x1EB9"+
		"\x3\x2\x2\x2\x1EB9\x1EBB\x3\x2\x2\x2\x1EBA\x1E8A\x3\x2\x2\x2\x1EBA\x1E96"+
		"\x3\x2\x2\x2\x1EBA\x1EA2\x3\x2\x2\x2\x1EBA\x1EAB\x3\x2\x2\x2\x1EBB\x285"+
		"\x3\x2\x2\x2\x1EBC\x1EBD\a\x357\x2\x2\x1EBD\x1EBE\a\b\x2\x2\x1EBE\x1EC2"+
		"\x5\x428\x215\x2\x1EBF\x1EC0\a/\x2\x2\x1EC0\x1EC2\a\x357\x2\x2\x1EC1\x1EBC"+
		"\x3\x2\x2\x2\x1EC1\x1EBF\x3\x2\x2\x2\x1EC2\x287\x3\x2\x2\x2\x1EC3\x1EC5"+
		"\a\x17\x2\x2\x1EC4\x1EC6\a\x15B\x2\x2\x1EC5\x1EC4\x3\x2\x2\x2\x1EC5\x1EC6"+
		"\x3\x2\x2\x2\x1EC6\x1EC7\x3\x2\x2\x2\x1EC7\x1EC9\x5\x400\x201\x2\x1EC8"+
		"\x1ECA\a\x370\x2\x2\x1EC9\x1EC8\x3\x2\x2\x2\x1EC9\x1ECA\x3\x2\x2\x2\x1ECA"+
		"\x1EE1\x3\x2\x2\x2\x1ECB\x1ECD\a-\x2\x2\x1ECC\x1ECE\a\x15B\x2\x2\x1ECD"+
		"\x1ECC\x3\x2\x2\x2\x1ECD\x1ECE\x3\x2\x2\x2\x1ECE\x1ED0\x3\x2\x2\x2\x1ECF"+
		"\x1ED1\a*\x2\x2\x1ED0\x1ECF\x3\x2\x2\x2\x1ED0\x1ED1\x3\x2\x2\x2\x1ED1"+
		"\x1ED2\x3\x2\x2\x2\x1ED2\x1ED4\x5\x400\x201\x2\x1ED3\x1ED5\a\x370\x2\x2"+
		"\x1ED4\x1ED3\x3\x2\x2\x2\x1ED4\x1ED5\x3\x2\x2\x2\x1ED5\x1EE1\x3\x2\x2"+
		"\x2\x1ED6\x1EE1\x5\x304\x183\x2\x1ED7\x1EE1\x5\x30A\x186\x2\x1ED8\x1EDA"+
		"\aq\x2\x2\x1ED9\x1EDB\a\x15B\x2\x2\x1EDA\x1ED9\x3\x2\x2\x2\x1EDA\x1EDB"+
		"\x3\x2\x2\x2\x1EDB\x1EDC\x3\x2\x2\x2\x1EDC\x1EDE\x5\x400\x201\x2\x1EDD"+
		"\x1EDF\a\x370\x2\x2\x1EDE\x1EDD\x3\x2\x2\x2\x1EDE\x1EDF\x3\x2\x2\x2\x1EDF"+
		"\x1EE1\x3\x2\x2\x2\x1EE0\x1EC3\x3\x2\x2\x2\x1EE0\x1ECB\x3\x2\x2\x2\x1EE0"+
		"\x1ED6\x3\x2\x2\x2\x1EE0\x1ED7\x3\x2\x2\x2\x1EE0\x1ED8\x3\x2\x2\x2\x1EE1"+
		"\x289\x3\x2\x2\x2\x1EE2\x1EE3\a\f\x2\x2\x1EE3\x1EE4\a+\x2\x2\x1EE4\x1EF1"+
		"\x5\x428\x215\x2\x1EE5\x1EEE\a\x308\x2\x2\x1EE6\x1EE8\a\x36F\x2\x2\x1EE7"+
		"\x1EE6\x3\x2\x2\x2\x1EE7\x1EE8\x3\x2\x2\x2\x1EE8\x1EE9\x3\x2\x2\x2\x1EE9"+
		"\x1EEA\tX\x2\x2\x1EEA\x1EEB\a\x35B\x2\x2\x1EEB\x1EED\a\x357\x2\x2\x1EEC"+
		"\x1EE7\x3\x2\x2\x2\x1EED\x1EF0\x3\x2\x2\x2\x1EEE\x1EEC\x3\x2\x2\x2\x1EEE"+
		"\x1EEF\x3\x2\x2\x2\x1EEF\x1EF2\x3\x2\x2\x2\x1EF0\x1EEE\x3\x2\x2\x2\x1EF1"+
		"\x1EE5\x3\x2\x2\x2\x1EF1\x1EF2\x3\x2\x2\x2\x1EF2\x1EFB\x3\x2\x2\x2\x1EF3"+
		"\x1EF5\a\x36F\x2\x2\x1EF4\x1EF3\x3\x2\x2\x2\x1EF4\x1EF5\x3\x2\x2\x2\x1EF5"+
		"\x1EF6\x3\x2\x2\x2\x1EF6\x1EF7\tX\x2\x2\x1EF7\x1EF8\a\x35B\x2\x2\x1EF8"+
		"\x1EFA\a\x357\x2\x2\x1EF9\x1EF4\x3\x2\x2\x2\x1EFA\x1EFD\x3\x2\x2\x2\x1EFB"+
		"\x1EF9\x3\x2\x2\x2\x1EFB\x1EFC\x3\x2\x2\x2\x1EFC\x1F15\x3\x2\x2\x2\x1EFD"+
		"\x1EFB\x3\x2\x2\x2\x1EFE\x1F03\a\xA8\x2\x2\x1EFF\x1F01\a\x36F\x2\x2\x1F00"+
		"\x1EFF\x3\x2\x2\x2\x1F00\x1F01\x3\x2\x2\x2\x1F01\x1F02\x3\x2\x2\x2\x1F02"+
		"\x1F04\x5\x428\x215\x2\x1F03\x1F00\x3\x2\x2\x2\x1F04\x1F05\x3\x2\x2\x2"+
		"\x1F05\x1F03\x3\x2\x2\x2\x1F05\x1F06\x3\x2\x2\x2\x1F06\x1F16\x3\x2\x2"+
		"\x2\x1F07\x1F11\a\xA8\x2\x2\x1F08\x1F0A\a\x36F\x2\x2\x1F09\x1F08\x3\x2"+
		"\x2\x2\x1F09\x1F0A\x3\x2\x2\x2\x1F0A\x1F0B\x3\x2\x2\x2\x1F0B\x1F0C\tY"+
		"\x2\x2\x1F0C\x1F0F\a\x35B\x2\x2\x1F0D\x1F10\a\x357\x2\x2\x1F0E\x1F10\x5"+
		"\x428\x215\x2\x1F0F\x1F0D\x3\x2\x2\x2\x1F0F\x1F0E\x3\x2\x2\x2\x1F10\x1F12"+
		"\x3\x2\x2\x2\x1F11\x1F09\x3\x2\x2\x2\x1F12\x1F13\x3\x2\x2\x2\x1F13\x1F11"+
		"\x3\x2\x2\x2\x1F13\x1F14\x3\x2\x2\x2\x1F14\x1F16\x3\x2\x2\x2\x1F15\x1EFE"+
		"\x3\x2\x2\x2\x1F15\x1F07\x3\x2\x2\x2\x1F16\x1F38\x3\x2\x2\x2\x1F17\x1F18"+
		"\a\x2E8\x2\x2\x1F18\x1F1D\a\xA8\x2\x2\x1F19\x1F1B\a\x36F\x2\x2\x1F1A\x1F19"+
		"\x3\x2\x2\x2\x1F1A\x1F1B\x3\x2\x2\x2\x1F1B\x1F1C\x3\x2\x2\x2\x1F1C\x1F1E"+
		"\x5\x428\x215\x2\x1F1D\x1F1A\x3\x2\x2\x2\x1F1E\x1F1F\x3\x2\x2\x2\x1F1F"+
		"\x1F1D\x3\x2\x2\x2\x1F1F\x1F20\x3\x2\x2\x2\x1F20\x1F22\x3\x2\x2\x2\x1F21"+
		"\x1F17\x3\x2\x2\x2\x1F22\x1F23\x3\x2\x2\x2\x1F23\x1F21\x3\x2\x2\x2\x1F23"+
		"\x1F24\x3\x2\x2\x2\x1F24\x1F39\x3\x2\x2\x2\x1F25\x1F26\a\x2E8\x2\x2\x1F26"+
		"\x1F30\a\xA8\x2\x2\x1F27\x1F29\a\x36F\x2\x2\x1F28\x1F27\x3\x2\x2\x2\x1F28"+
		"\x1F29\x3\x2\x2\x2\x1F29\x1F2A\x3\x2\x2\x2\x1F2A\x1F2B\tY\x2\x2\x1F2B"+
		"\x1F2E\a\x35B\x2\x2\x1F2C\x1F2F\a\x357\x2\x2\x1F2D\x1F2F\x5\x428\x215"+
		"\x2\x1F2E\x1F2C\x3\x2\x2\x2\x1F2E\x1F2D\x3\x2\x2\x2\x1F2F\x1F31\x3\x2"+
		"\x2\x2\x1F30\x1F28\x3\x2\x2\x2\x1F31\x1F32\x3\x2\x2\x2\x1F32\x1F30\x3"+
		"\x2\x2\x2\x1F32\x1F33\x3\x2\x2\x2\x1F33\x1F35\x3\x2\x2\x2\x1F34\x1F25"+
		"\x3\x2\x2\x2\x1F35\x1F36\x3\x2\x2\x2\x1F36\x1F34\x3\x2\x2\x2\x1F36\x1F37"+
		"\x3\x2\x2\x2\x1F37\x1F39\x3\x2\x2\x2\x1F38\x1F21\x3\x2\x2\x2\x1F38\x1F34"+
		"\x3\x2\x2\x2\x1F38\x1F39\x3\x2\x2\x2\x1F39\x1FDA\x3\x2\x2\x2\x1F3A\x1FD7"+
		"\a\xBD\x2\x2\x1F3B\x1F3D\a\x36F\x2\x2\x1F3C\x1F3B\x3\x2\x2\x2\x1F3C\x1F3D"+
		"\x3\x2\x2\x2\x1F3D\x1F3E\x3\x2\x2\x2\x1F3E\x1FD6\a\x2AC\x2\x2\x1F3F\x1F41"+
		"\a\x36F\x2\x2\x1F40\x1F3F\x3\x2\x2\x2\x1F40\x1F41\x3\x2\x2\x2\x1F41\x1F42"+
		"\x3\x2\x2\x2\x1F42\x1FD6\a\x2A2\x2\x2\x1F43\x1F45\a\x36F\x2\x2\x1F44\x1F43"+
		"\x3\x2\x2\x2\x1F44\x1F45\x3\x2\x2\x2\x1F45\x1F46\x3\x2\x2\x2\x1F46\x1FD6"+
		"\tZ\x2\x2\x1F47\x1F49\a\x36F\x2\x2\x1F48\x1F47\x3\x2\x2\x2\x1F48\x1F49"+
		"\x3\x2\x2\x2\x1F49\x1F4A\x3\x2\x2\x2\x1F4A\x1F4B\a\x128\x2\x2\x1F4B\x1F4E"+
		"\a\x35B\x2\x2\x1F4C\x1F4F\a\x357\x2\x2\x1F4D\x1F4F\x5\x428\x215\x2\x1F4E"+
		"\x1F4C\x3\x2\x2\x2\x1F4E\x1F4D\x3\x2\x2\x2\x1F4F\x1FD6\x3\x2\x2\x2\x1F50"+
		"\x1F52\a\x36F\x2\x2\x1F51\x1F50\x3\x2\x2\x2\x1F51\x1F52\x3\x2\x2\x2\x1F52"+
		"\x1F53\x3\x2\x2\x2\x1F53\x1F54\a\x1AC\x2\x2\x1F54\x1F55\a\x35B\x2\x2\x1F55"+
		"\x1FD6\x5\x428\x215\x2\x1F56\x1F58\a\x36F\x2\x2\x1F57\x1F56\x3\x2\x2\x2"+
		"\x1F57\x1F58\x3\x2\x2\x2\x1F58\x1F59\x3\x2\x2\x2\x1F59\x1FD6\a\x10F\x2"+
		"\x2\x1F5A\x1F5C\a\x36F\x2\x2\x1F5B\x1F5A\x3\x2\x2\x2\x1F5B\x1F5C\x3\x2"+
		"\x2\x2\x1F5C\x1F5D\x3\x2\x2\x2\x1F5D\x1FD6\a\x2BB\x2\x2\x1F5E\x1F60\a"+
		"\x36F\x2\x2\x1F5F\x1F5E\x3\x2\x2\x2\x1F5F\x1F60\x3\x2\x2\x2\x1F60\x1F6D"+
		"\x3\x2\x2\x2\x1F61\x1F62\a\x2B5\x2\x2\x1F62\x1F65\a\x35B\x2\x2\x1F63\x1F66"+
		"\a\x357\x2\x2\x1F64\x1F66\x5\x428\x215\x2\x1F65\x1F63\x3\x2\x2\x2\x1F65"+
		"\x1F64\x3\x2\x2\x2\x1F66\x1F6E\x3\x2\x2\x2\x1F67\x1F68\a\x311\x2\x2\x1F68"+
		"\x1F6B\a\x35B\x2\x2\x1F69\x1F6C\a\x355\x2\x2\x1F6A\x1F6C\x5\x428\x215"+
		"\x2\x1F6B\x1F69\x3\x2\x2\x2\x1F6B\x1F6A\x3\x2\x2\x2\x1F6C\x1F6E\x3\x2"+
		"\x2\x2\x1F6D\x1F61\x3\x2\x2\x2\x1F6D\x1F67\x3\x2\x2\x2\x1F6E\x1FD6\x3"+
		"\x2\x2\x2\x1F6F\x1F71\a\x36F\x2\x2\x1F70\x1F6F\x3\x2\x2\x2\x1F70\x1F71"+
		"\x3\x2\x2\x2\x1F71\x1F72\x3\x2\x2\x2\x1F72\x1FD6\t[\x2\x2\x1F73\x1F75"+
		"\a\x36F\x2\x2\x1F74\x1F73\x3\x2\x2\x2\x1F74\x1F75\x3\x2\x2\x2\x1F75\x1F76"+
		"\x3\x2\x2\x2\x1F76\x1FD6\t\\\x2\x2\x1F77\x1F79\a\x36F\x2\x2\x1F78\x1F77"+
		"\x3\x2\x2\x2\x1F78\x1F79\x3\x2\x2\x2\x1F79\x1F7A\x3\x2\x2\x2\x1F7A\x1FD6"+
		"\t]\x2\x2\x1F7B\x1F7D\a\x36F\x2\x2\x1F7C\x1F7B\x3\x2\x2\x2\x1F7C\x1F7D"+
		"\x3\x2\x2\x2\x1F7D\x1F7E\x3\x2\x2\x2\x1F7E\x1F7F\a\x2E1\x2\x2\x1F7F\x1F82"+
		"\a\x35B\x2\x2\x1F80\x1F83\a\x357\x2\x2\x1F81\x1F83\x5\x428\x215\x2\x1F82"+
		"\x1F80\x3\x2\x2\x2\x1F82\x1F81\x3\x2\x2\x2\x1F83\x1FD6\x3\x2\x2\x2\x1F84"+
		"\x1F86\a\x36F\x2\x2\x1F85\x1F84\x3\x2\x2\x2\x1F85\x1F86\x3\x2\x2\x2\x1F86"+
		"\x1F87\x3\x2\x2\x2\x1F87\x1F88\a\x2E2\x2\x2\x1F88\x1F89\a\x35B\x2\x2\x1F89"+
		"\x1FD6\a\x357\x2\x2\x1F8A\x1F8C\a\x36F\x2\x2\x1F8B\x1F8A\x3\x2\x2\x2\x1F8B"+
		"\x1F8C\x3\x2\x2\x2\x1F8C\x1F8D\x3\x2\x2\x2\x1F8D\x1F8E\a\x28B\x2\x2\x1F8E"+
		"\x1F91\a\x35B\x2\x2\x1F8F\x1F92\a\x355\x2\x2\x1F90\x1F92\x5\x428\x215"+
		"\x2\x1F91\x1F8F\x3\x2\x2\x2\x1F91\x1F90\x3\x2\x2\x2\x1F92\x1FD6\x3\x2"+
		"\x2\x2\x1F93\x1F95\a\x36F\x2\x2\x1F94\x1F93\x3\x2\x2\x2\x1F94\x1F95\x3"+
		"\x2\x2\x2\x1F95\x1F96\x3\x2\x2\x2\x1F96\x1F97\a\x28E\x2\x2\x1F97\x1F9A"+
		"\a\x35B\x2\x2\x1F98\x1F9B\a\x355\x2\x2\x1F99\x1F9B\x5\x428\x215\x2\x1F9A"+
		"\x1F98\x3\x2\x2\x2\x1F9A\x1F99\x3\x2\x2\x2\x1F9B\x1FD6\x3\x2\x2\x2\x1F9C"+
		"\x1F9E\a\x36F\x2\x2\x1F9D\x1F9C\x3\x2\x2\x2\x1F9D\x1F9E\x3\x2\x2\x2\x1F9E"+
		"\x1F9F\x3\x2\x2\x2\x1F9F\x1FA0\a\x2DA\x2\x2\x1FA0\x1FA3\a\x35B\x2\x2\x1FA1"+
		"\x1FA4\a\x355\x2\x2\x1FA2\x1FA4\x5\x428\x215\x2\x1FA3\x1FA1\x3\x2\x2\x2"+
		"\x1FA3\x1FA2\x3\x2\x2\x2\x1FA4\x1FD6\x3\x2\x2\x2\x1FA5\x1FA7\a\x36F\x2"+
		"\x2\x1FA6\x1FA5\x3\x2\x2\x2\x1FA6\x1FA7\x3\x2\x2\x2\x1FA7\x1FA8\x3\x2"+
		"\x2\x2\x1FA8\x1FD6\t^\x2\x2\x1FA9\x1FAB\a\x36F\x2\x2\x1FAA\x1FA9\x3\x2"+
		"\x2\x2\x1FAA\x1FAB\x3\x2\x2\x2\x1FAB\x1FAC\x3\x2\x2\x2\x1FAC\x1FD6\t_"+
		"\x2\x2\x1FAD\x1FAF\a\x36F\x2\x2\x1FAE\x1FAD\x3\x2\x2\x2\x1FAE\x1FAF\x3"+
		"\x2\x2\x2\x1FAF\x1FB0\x3\x2\x2\x2\x1FB0\x1FD6\a\x30F\x2\x2\x1FB1\x1FB3"+
		"\a\x36F\x2\x2\x1FB2\x1FB1\x3\x2\x2\x2\x1FB2\x1FB3\x3\x2\x2\x2\x1FB3\x1FB4"+
		"\x3\x2\x2\x2\x1FB4\x1FB7\a\x331\x2\x2\x1FB5\x1FB6\a\x35B\x2\x2\x1FB6\x1FB8"+
		"\a\x355\x2\x2\x1FB7\x1FB5\x3\x2\x2\x2\x1FB7\x1FB8\x3\x2\x2\x2\x1FB8\x1FD6"+
		"\x3\x2\x2\x2\x1FB9\x1FBB\a\x36F\x2\x2\x1FBA\x1FB9\x3\x2\x2\x2\x1FBA\x1FBB"+
		"\x3\x2\x2\x2\x1FBB\x1FBC\x3\x2\x2\x2\x1FBC\x1FD6\t`\x2\x2\x1FBD\x1FBF"+
		"\a\x36F\x2\x2\x1FBE\x1FBD\x3\x2\x2\x2\x1FBE\x1FBF\x3\x2\x2\x2\x1FBF\x1FC0"+
		"\x3\x2\x2\x2\x1FC0\x1FD6\t\x61\x2\x2\x1FC1\x1FC3\a\x36F\x2\x2\x1FC2\x1FC1"+
		"\x3\x2\x2\x2\x1FC2\x1FC3\x3\x2\x2\x2\x1FC3\x1FC4\x3\x2\x2\x2\x1FC4\x1FC5"+
		"\a\x139\x2\x2\x1FC5\x1FC6\a\x36D\x2\x2\x1FC6\x1FC7\a\xCF\x2\x2\x1FC7\x1FC8"+
		"\a\x35B\x2\x2\x1FC8\x1FC9\t\x62\x2\x2\x1FC9\x1FCA\a\x36F\x2\x2\x1FCA\x1FCB"+
		"\a\x31F\x2\x2\x1FCB\x1FCC\a\x291\x2\x2\x1FCC\x1FD3\a\x35B\x2\x2\x1FCD"+
		"\x1FD4\x5\x428\x215\x2\x1FCE\x1FCF\a\x31F\x2\x2\x1FCF\x1FD0\a\x281\x2"+
		"\x2\x1FD0\x1FD1\a_\x2\x2\x1FD1\x1FD2\a\x35B\x2\x2\x1FD2\x1FD4\x5\x428"+
		"\x215\x2\x1FD3\x1FCD\x3\x2\x2\x2\x1FD3\x1FCE\x3\x2\x2\x2\x1FD4\x1FD6\x3"+
		"\x2\x2\x2\x1FD5\x1F3C\x3\x2\x2\x2\x1FD5\x1F40\x3\x2\x2\x2\x1FD5\x1F44"+
		"\x3\x2\x2\x2\x1FD5\x1F48\x3\x2\x2\x2\x1FD5\x1F51\x3\x2\x2\x2\x1FD5\x1F57"+
		"\x3\x2\x2\x2\x1FD5\x1F5B\x3\x2\x2\x2\x1FD5\x1F5F\x3\x2\x2\x2\x1FD5\x1F70"+
		"\x3\x2\x2\x2\x1FD5\x1F74\x3\x2\x2\x2\x1FD5\x1F78\x3\x2\x2\x2\x1FD5\x1F7C"+
		"\x3\x2\x2\x2\x1FD5\x1F85\x3\x2\x2\x2\x1FD5\x1F8B\x3\x2\x2\x2\x1FD5\x1F94"+
		"\x3\x2\x2\x2\x1FD5\x1F9D\x3\x2\x2\x2\x1FD5\x1FA6\x3\x2\x2\x2\x1FD5\x1FAA"+
		"\x3\x2\x2\x2\x1FD5\x1FAE\x3\x2\x2\x2\x1FD5\x1FB2\x3\x2\x2\x2\x1FD5\x1FBA"+
		"\x3\x2\x2\x2\x1FD5\x1FBE\x3\x2\x2\x2\x1FD5\x1FC2\x3\x2\x2\x2\x1FD6\x1FD9"+
		"\x3\x2\x2\x2\x1FD7\x1FD5\x3\x2\x2\x2\x1FD7\x1FD8\x3\x2\x2\x2\x1FD8\x1FDB"+
		"\x3\x2\x2\x2\x1FD9\x1FD7\x3\x2\x2\x2\x1FDA\x1F3A\x3\x2\x2\x2\x1FDA\x1FDB"+
		"\x3\x2\x2\x2\x1FDB\x28B\x3\x2\x2\x2\x1FDC\x1FDD\a\f\x2\x2\x1FDD\x1FDE"+
		"\a\x2D5\x2\x2\x1FDE\x1FF6\x5\x428\x215\x2\x1FDF\x1FE4\a\xA8\x2\x2\x1FE0"+
		"\x1FE2\a\x36F\x2\x2\x1FE1\x1FE0\x3\x2\x2\x2\x1FE1\x1FE2\x3\x2\x2\x2\x1FE2"+
		"\x1FE3\x3\x2\x2\x2\x1FE3\x1FE5\x5\x428\x215\x2\x1FE4\x1FE1\x3\x2\x2\x2"+
		"\x1FE5\x1FE6\x3\x2\x2\x2\x1FE6\x1FE4\x3\x2\x2\x2\x1FE6\x1FE7\x3\x2\x2"+
		"\x2\x1FE7\x1FF7\x3\x2\x2\x2\x1FE8\x1FF2\a\xA8\x2\x2\x1FE9\x1FEB\a\x36F"+
		"\x2\x2\x1FEA\x1FE9\x3\x2\x2\x2\x1FEA\x1FEB\x3\x2\x2\x2\x1FEB\x1FEC\x3"+
		"\x2\x2\x2\x1FEC\x1FED\tY\x2\x2\x1FED\x1FF0\a\x35B\x2\x2\x1FEE\x1FF1\a"+
		"\x357\x2\x2\x1FEF\x1FF1\x5\x428\x215\x2\x1FF0\x1FEE\x3\x2\x2\x2\x1FF0"+
		"\x1FEF\x3\x2\x2\x2\x1FF1\x1FF3\x3\x2\x2\x2\x1FF2\x1FEA\x3\x2\x2\x2\x1FF3"+
		"\x1FF4\x3\x2\x2\x2\x1FF4\x1FF2\x3\x2\x2\x2\x1FF4\x1FF5\x3\x2\x2\x2\x1FF5"+
		"\x1FF7\x3\x2\x2\x2\x1FF6\x1FDF\x3\x2\x2\x2\x1FF6\x1FE8\x3\x2\x2\x2\x1FF7"+
		"\x2019\x3\x2\x2\x2\x1FF8\x1FF9\a\x2E8\x2\x2\x1FF9\x1FFE\a\xA8\x2\x2\x1FFA"+
		"\x1FFC\a\x36F\x2\x2\x1FFB\x1FFA\x3\x2\x2\x2\x1FFB\x1FFC\x3\x2\x2\x2\x1FFC"+
		"\x1FFD\x3\x2\x2\x2\x1FFD\x1FFF\x5\x428\x215\x2\x1FFE\x1FFB\x3\x2\x2\x2"+
		"\x1FFF\x2000\x3\x2\x2\x2\x2000\x1FFE\x3\x2\x2\x2\x2000\x2001\x3\x2\x2"+
		"\x2\x2001\x2003\x3\x2\x2\x2\x2002\x1FF8\x3\x2\x2\x2\x2003\x2004\x3\x2"+
		"\x2\x2\x2004\x2002\x3\x2\x2\x2\x2004\x2005\x3\x2\x2\x2\x2005\x201A\x3"+
		"\x2\x2\x2\x2006\x2007\a\x2E8\x2\x2\x2007\x2011\a\xA8\x2\x2\x2008\x200A"+
		"\a\x36F\x2\x2\x2009\x2008\x3\x2\x2\x2\x2009\x200A\x3\x2\x2\x2\x200A\x200B"+
		"\x3\x2\x2\x2\x200B\x200C\tY\x2\x2\x200C\x200F\a\x35B\x2\x2\x200D\x2010"+
		"\a\x357\x2\x2\x200E\x2010\x5\x428\x215\x2\x200F\x200D\x3\x2\x2\x2\x200F"+
		"\x200E\x3\x2\x2\x2\x2010\x2012\x3\x2\x2\x2\x2011\x2009\x3\x2\x2\x2\x2012"+
		"\x2013\x3\x2\x2\x2\x2013\x2011\x3\x2\x2\x2\x2013\x2014\x3\x2\x2\x2\x2014"+
		"\x2016\x3\x2\x2\x2\x2015\x2006\x3\x2\x2\x2\x2016\x2017\x3\x2\x2\x2\x2017"+
		"\x2015\x3\x2\x2\x2\x2017\x2018\x3\x2\x2\x2\x2018\x201A\x3\x2\x2\x2\x2019"+
		"\x2002\x3\x2\x2\x2\x2019\x2015\x3\x2\x2\x2\x2019\x201A\x3\x2\x2\x2\x201A"+
		"\x20C8\x3\x2\x2\x2\x201B\x20C5\a\xBD\x2\x2\x201C\x201E\a\x36F\x2\x2\x201D"+
		"\x201C\x3\x2\x2\x2\x201D\x201E\x3\x2\x2\x2\x201E\x201F\x3\x2\x2\x2\x201F"+
		"\x20C4\a\x2AC\x2\x2\x2020\x2022\a\x36F\x2\x2\x2021\x2020\x3\x2\x2\x2\x2021"+
		"\x2022\x3\x2\x2\x2\x2022\x2023\x3\x2\x2\x2\x2023\x20C4\a\x2A2\x2\x2\x2024"+
		"\x2026\a\x36F\x2\x2\x2025\x2024\x3\x2\x2\x2\x2025\x2026\x3\x2\x2\x2\x2026"+
		"\x2027\x3\x2\x2\x2\x2027\x20C4\tZ\x2\x2\x2028\x202A\a\x36F\x2\x2\x2029"+
		"\x2028\x3\x2\x2\x2\x2029\x202A\x3\x2\x2\x2\x202A\x202B\x3\x2\x2\x2\x202B"+
		"\x202C\a\x128\x2\x2\x202C\x202F\a\x35B\x2\x2\x202D\x2030\a\x357\x2\x2"+
		"\x202E\x2030\x5\x428\x215\x2\x202F\x202D\x3\x2\x2\x2\x202F\x202E\x3\x2"+
		"\x2\x2\x2030\x20C4\x3\x2\x2\x2\x2031\x2033\a\x36F\x2\x2\x2032\x2031\x3"+
		"\x2\x2\x2\x2032\x2033\x3\x2\x2\x2\x2033\x2034\x3\x2\x2\x2\x2034\x2035"+
		"\a\x1AC\x2\x2\x2035\x2036\a\x35B\x2\x2\x2036\x20C4\x5\x428\x215\x2\x2037"+
		"\x2039\a\x36F\x2\x2\x2038\x2037\x3\x2\x2\x2\x2038\x2039\x3\x2\x2\x2\x2039"+
		"\x203A\x3\x2\x2\x2\x203A\x20C4\a\x10F\x2\x2\x203B\x203D\a\x36F\x2\x2\x203C"+
		"\x203B\x3\x2\x2\x2\x203C\x203D\x3\x2\x2\x2\x203D\x203E\x3\x2\x2\x2\x203E"+
		"\x20C4\a\x2BB\x2\x2\x203F\x2041\a\x36F\x2\x2\x2040\x203F\x3\x2\x2\x2\x2040"+
		"\x2041\x3\x2\x2\x2\x2041\x204E\x3\x2\x2\x2\x2042\x2043\a\x2B5\x2\x2\x2043"+
		"\x2046\a\x35B\x2\x2\x2044\x2047\a\x357\x2\x2\x2045\x2047\x5\x428\x215"+
		"\x2\x2046\x2044\x3\x2\x2\x2\x2046\x2045\x3\x2\x2\x2\x2047\x204F\x3\x2"+
		"\x2\x2\x2048\x2049\a\x311\x2\x2\x2049\x204C\a\x35B\x2\x2\x204A\x204D\a"+
		"\x355\x2\x2\x204B\x204D\x5\x428\x215\x2\x204C\x204A\x3\x2\x2\x2\x204C"+
		"\x204B\x3\x2\x2\x2\x204D\x204F\x3\x2\x2\x2\x204E\x2042\x3\x2\x2\x2\x204E"+
		"\x2048\x3\x2\x2\x2\x204F\x20C4\x3\x2\x2\x2\x2050\x2052\a\x36F\x2\x2\x2051"+
		"\x2050\x3\x2\x2\x2\x2051\x2052\x3\x2\x2\x2\x2052\x2053\x3\x2\x2\x2\x2053"+
		"\x20C4\t[\x2\x2\x2054\x2056\a\x36F\x2\x2\x2055\x2054\x3\x2\x2\x2\x2055"+
		"\x2056\x3\x2\x2\x2\x2056\x2057\x3\x2\x2\x2\x2057\x20C4\t\\\x2\x2\x2058"+
		"\x205A\a\x36F\x2\x2\x2059\x2058\x3\x2\x2\x2\x2059\x205A\x3\x2\x2\x2\x205A"+
		"\x205B\x3\x2\x2\x2\x205B\x20C4\t]\x2\x2\x205C\x205E\a\x36F\x2\x2\x205D"+
		"\x205C\x3\x2\x2\x2\x205D\x205E\x3\x2\x2\x2\x205E\x205F\x3\x2\x2\x2\x205F"+
		"\x2060\a\x2E1\x2\x2\x2060\x2063\a\x35B\x2\x2\x2061\x2064\a\x357\x2\x2"+
		"\x2062\x2064\x5\x428\x215\x2\x2063\x2061\x3\x2\x2\x2\x2063\x2062\x3\x2"+
		"\x2\x2\x2064\x20C4\x3\x2\x2\x2\x2065\x2067\a\x36F\x2\x2\x2066\x2065\x3"+
		"\x2\x2\x2\x2066\x2067\x3\x2\x2\x2\x2067\x2068\x3\x2\x2\x2\x2068\x2069"+
		"\a\x2E2\x2\x2\x2069\x206A\a\x35B\x2\x2\x206A\x20C4\a\x357\x2\x2\x206B"+
		"\x206D\a\x36F\x2\x2\x206C\x206B\x3\x2\x2\x2\x206C\x206D\x3\x2\x2\x2\x206D"+
		"\x206E\x3\x2\x2\x2\x206E\x206F\a\x28B\x2\x2\x206F\x2072\a\x35B\x2\x2\x2070"+
		"\x2073\a\x355\x2\x2\x2071\x2073\x5\x428\x215\x2\x2072\x2070\x3\x2\x2\x2"+
		"\x2072\x2071\x3\x2\x2\x2\x2073\x20C4\x3\x2\x2\x2\x2074\x2076\a\x36F\x2"+
		"\x2\x2075\x2074\x3\x2\x2\x2\x2075\x2076\x3\x2\x2\x2\x2076\x2077\x3\x2"+
		"\x2\x2\x2077\x2078\a\x28E\x2\x2\x2078\x207B\a\x35B\x2\x2\x2079\x207C\a"+
		"\x355\x2\x2\x207A\x207C\x5\x428\x215\x2\x207B\x2079\x3\x2\x2\x2\x207B"+
		"\x207A\x3\x2\x2\x2\x207C\x20C4\x3\x2\x2\x2\x207D\x207F\a\x36F\x2\x2\x207E"+
		"\x207D\x3\x2\x2\x2\x207E\x207F\x3\x2\x2\x2\x207F\x2080\x3\x2\x2\x2\x2080"+
		"\x2081\a\x2DA\x2\x2\x2081\x2084\a\x35B\x2\x2\x2082\x2085\a\x355\x2\x2"+
		"\x2083\x2085\x5\x428\x215\x2\x2084\x2082\x3\x2\x2\x2\x2084\x2083\x3\x2"+
		"\x2\x2\x2085\x20C4\x3\x2\x2\x2\x2086\x2088\a\x36F\x2\x2\x2087\x2086\x3"+
		"\x2\x2\x2\x2087\x2088\x3\x2\x2\x2\x2088\x2089\x3\x2\x2\x2\x2089\x20C4"+
		"\t^\x2\x2\x208A\x208C\a\x36F\x2\x2\x208B\x208A\x3\x2\x2\x2\x208B\x208C"+
		"\x3\x2\x2\x2\x208C\x208D\x3\x2\x2\x2\x208D\x20C4\t_\x2\x2\x208E\x2090"+
		"\a\x36F\x2\x2\x208F\x208E\x3\x2\x2\x2\x208F\x2090\x3\x2\x2\x2\x2090\x2091"+
		"\x3\x2\x2\x2\x2091\x20C4\a\x30F\x2\x2\x2092\x2094\a\x36F\x2\x2\x2093\x2092"+
		"\x3\x2\x2\x2\x2093\x2094\x3\x2\x2\x2\x2094\x2095\x3\x2\x2\x2\x2095\x2098"+
		"\a\x331\x2\x2\x2096\x2097\a\x35B\x2\x2\x2097\x2099\a\x355\x2\x2\x2098"+
		"\x2096\x3\x2\x2\x2\x2098\x2099\x3\x2\x2\x2\x2099\x20C4\x3\x2\x2\x2\x209A"+
		"\x209C\a\x36F\x2\x2\x209B\x209A\x3\x2\x2\x2\x209B\x209C\x3\x2\x2\x2\x209C"+
		"\x209D\x3\x2\x2\x2\x209D\x20C4\t`\x2\x2\x209E\x20A0\a\x36F\x2\x2\x209F"+
		"\x209E\x3\x2\x2\x2\x209F\x20A0\x3\x2\x2\x2\x20A0\x20A1\x3\x2\x2\x2\x20A1"+
		"\x20C4\t\x61\x2\x2\x20A2\x20A4\a\x36F\x2\x2\x20A3\x20A2\x3\x2\x2\x2\x20A3"+
		"\x20A4\x3\x2\x2\x2\x20A4\x20A9\x3\x2\x2\x2\x20A5\x20AA\a\x1BB\x2\x2\x20A6"+
		"\x20A7\a\x233\x2\x2\x20A7\x20A8\a\x35B\x2\x2\x20A8\x20AA\a\x357\x2\x2"+
		"\x20A9\x20A5\x3\x2\x2\x2\x20A9\x20A6\x3\x2\x2\x2\x20AA\x20C4\x3\x2\x2"+
		"\x2\x20AB\x20AD\a\x36F\x2\x2\x20AC\x20AB\x3\x2\x2\x2\x20AC\x20AD\x3\x2"+
		"\x2\x2\x20AD\x20AE\x3\x2\x2\x2\x20AE\x20C4\a\x1B4\x2\x2\x20AF\x20B1\a"+
		"\x36F\x2\x2\x20B0\x20AF\x3\x2\x2\x2\x20B0\x20B1\x3\x2\x2\x2\x20B1\x20B2"+
		"\x3\x2\x2\x2\x20B2\x20B3\a\x139\x2\x2\x20B3\x20B4\a\x36D\x2\x2\x20B4\x20B5"+
		"\a\xCF\x2\x2\x20B5\x20B6\a\x35B\x2\x2\x20B6\x20B7\t\x62\x2\x2\x20B7\x20B8"+
		"\a\x36F\x2\x2\x20B8\x20B9\a\x31F\x2\x2\x20B9\x20BA\a\x291\x2\x2\x20BA"+
		"\x20C1\a\x35B\x2\x2\x20BB\x20C2\x5\x428\x215\x2\x20BC\x20BD\a\x31F\x2"+
		"\x2\x20BD\x20BE\a\x281\x2\x2\x20BE\x20BF\a_\x2\x2\x20BF\x20C0\a\x35B\x2"+
		"\x2\x20C0\x20C2\x5\x428\x215\x2\x20C1\x20BB\x3\x2\x2\x2\x20C1\x20BC\x3"+
		"\x2\x2\x2\x20C2\x20C4\x3\x2\x2\x2\x20C3\x201D\x3\x2\x2\x2\x20C3\x2021"+
		"\x3\x2\x2\x2\x20C3\x2025\x3\x2\x2\x2\x20C3\x2029\x3\x2\x2\x2\x20C3\x2032"+
		"\x3\x2\x2\x2\x20C3\x2038\x3\x2\x2\x2\x20C3\x203C\x3\x2\x2\x2\x20C3\x2040"+
		"\x3\x2\x2\x2\x20C3\x2051\x3\x2\x2\x2\x20C3\x2055\x3\x2\x2\x2\x20C3\x2059"+
		"\x3\x2\x2\x2\x20C3\x205D\x3\x2\x2\x2\x20C3\x2066\x3\x2\x2\x2\x20C3\x206C"+
		"\x3\x2\x2\x2\x20C3\x2075\x3\x2\x2\x2\x20C3\x207E\x3\x2\x2\x2\x20C3\x2087"+
		"\x3\x2\x2\x2\x20C3\x208B\x3\x2\x2\x2\x20C3\x208F\x3\x2\x2\x2\x20C3\x2093"+
		"\x3\x2\x2\x2\x20C3\x209B\x3\x2\x2\x2\x20C3\x209F\x3\x2\x2\x2\x20C3\x20A3"+
		"\x3\x2\x2\x2\x20C3\x20AC\x3\x2\x2\x2\x20C3\x20B0\x3\x2\x2\x2\x20C4\x20C7"+
		"\x3\x2\x2\x2\x20C5\x20C3\x3\x2\x2\x2\x20C5\x20C6\x3\x2\x2\x2\x20C6\x20C9"+
		"\x3\x2\x2\x2\x20C7\x20C5\x3\x2\x2\x2\x20C8\x201B\x3\x2\x2\x2\x20C8\x20C9"+
		"\x3\x2\x2\x2\x20C9\x28D\x3\x2\x2\x2\x20CA\x20CB\a\f\x2\x2\x20CB\x20CC"+
		"\a\x291\x2\x2\x20CC\x20CD\x5\x428\x215\x2\x20CD\x20CE\a\xA8\x2\x2\x20CE"+
		"\x20CF\a\x45\x2\x2\x20CF\x20D0\a\x35B\x2\x2\x20D0\x20F0\a\x357\x2\x2\x20D1"+
		"\x20D2\a\xBD\x2\x2\x20D2\x20D3\a\x1E1\x2\x2\x20D3\x20D4\a_\x2\x2\x20D4"+
		"\x20EB\a\x36D\x2\x2\x20D5\x20D7\a\x36F\x2\x2\x20D6\x20D5\x3\x2\x2\x2\x20D6"+
		"\x20D7\x3\x2\x2\x2\x20D7\x20D8\x3\x2\x2\x2\x20D8\x20D9\a\x45\x2\x2\x20D9"+
		"\x20DA\a\x35B\x2\x2\x20DA\x20EC\a\x357\x2\x2\x20DB\x20DD\a\x36F\x2\x2"+
		"\x20DC\x20DB\x3\x2\x2\x2\x20DC\x20DD\x3\x2\x2\x2\x20DD\x20DE\x3\x2\x2"+
		"\x2\x20DE\x20DF\a\x139\x2\x2\x20DF\x20E0\a\x12\x2\x2\x20E0\x20E1\a\x2FB"+
		"\x2\x2\x20E1\x20E2\a\x35B\x2\x2\x20E2\x20EC\a\x357\x2\x2\x20E3\x20E5\a"+
		"\x36F\x2\x2\x20E4\x20E3\x3\x2\x2\x2\x20E4\x20E5\x3\x2\x2\x2\x20E5\x20E6"+
		"\x3\x2\x2\x2\x20E6\x20E7\a\x11D\x2\x2\x20E7\x20E8\a\x12\x2\x2\x20E8\x20E9"+
		"\a\x2FB\x2\x2\x20E9\x20EA\a\x35B\x2\x2\x20EA\x20EC\a\x357\x2\x2\x20EB"+
		"\x20D6\x3\x2\x2\x2\x20EB\x20DC\x3\x2\x2\x2\x20EB\x20E4\x3\x2\x2\x2\x20EC"+
		"\x20ED\x3\x2\x2\x2\x20ED\x20EB\x3\x2\x2\x2\x20ED\x20EE\x3\x2\x2\x2\x20EE"+
		"\x20EF\x3\x2\x2\x2\x20EF\x20F1\a\x36E\x2\x2\x20F0\x20D1\x3\x2\x2\x2\x20F0"+
		"\x20F1\x3\x2\x2\x2\x20F1\x28F\x3\x2\x2\x2\x20F2\x20F3\a\f\x2\x2\x20F3"+
		"\x20F4\a\x2D8\x2\x2\x20F4\x20F5\a_\x2\x2\x20F5\x20F6\a\xA8\x2\x2\x20F6"+
		"\x20F7\a\x45\x2\x2\x20F7\x20F8\a\x35B\x2\x2\x20F8\x20F9\a\x357\x2\x2\x20F9"+
		"\x20FA\a\x139\x2\x2\x20FA\x20FB\a\x12\x2\x2\x20FB\x20FC\a\x2FB\x2\x2\x20FC"+
		"\x20FD\a\x35B\x2\x2\x20FD\x20FE\a\x357\x2\x2\x20FE\x291\x3\x2\x2\x2\x20FF"+
		"\x2100\a\f\x2\x2\x2100\x2101\a\x320\x2\x2\x2101\x2102\a\x2D8\x2\x2\x2102"+
		"\x2103\a_\x2\x2\x2103\x2104\a\xA8\x2\x2\x2104\x2105\a\x45\x2\x2\x2105"+
		"\x2106\a\x35B\x2\x2\x2106\x2107\a\x357\x2\x2\x2107\x2108\a\x139\x2\x2"+
		"\x2108\x2109\a\x12\x2\x2\x2109\x210A\a\x2FB\x2\x2\x210A\x210B\a\x35B\x2"+
		"\x2\x210B\x210C\a\x357\x2\x2\x210C\x293\x3\x2\x2\x2\x210D\x2111\a`\x2"+
		"\x2\x210E\x2112\x5\x296\x14C\x2\x210F\x2112\x5\x298\x14D\x2\x2110\x2112"+
		"\x5\x29A\x14E\x2\x2111\x210E\x3\x2\x2\x2\x2111\x210F\x3\x2\x2\x2\x2111"+
		"\x2110\x3\x2\x2\x2\x2112\x295\x3\x2\x2\x2\x2113\x2116\t\x1C\x2\x2\x2114"+
		"\x2116\a\x261\x2\x2\x2115\x2113\x3\x2\x2\x2\x2115\x2114\x3\x2\x2\x2\x2116"+
		"\x2119\x3\x2\x2\x2\x2117\x2118\a\xBD\x2\x2\x2118\x211A\a\x238\x2\x2\x2119"+
		"\x2117\x3\x2\x2\x2\x2119\x211A\x3\x2\x2\x2\x211A\x297\x3\x2\x2\x2\x211B"+
		"\x211C\a\x1E8\x2\x2\x211C\x211D\a\x2F3\x2\x2\x211D\x2120\a\x240\x2\x2"+
		"\x211E\x2121\a\x4\x2\x2\x211F\x2121\a\x355\x2\x2\x2120\x211E\x3\x2\x2"+
		"\x2\x2120\x211F\x3\x2\x2\x2\x2121\x299\x3\x2\x2\x2\x2122\x2123\a\x331"+
		"\x2\x2\x2123\x2124\a\x175\x2\x2\x2124\x2125\a\x355\x2\x2\x2125\x29B\x3"+
		"\x2\x2\x2\x2126\x2127\a@\x2\x2\x2127\x2129\x5\x2A0\x151\x2\x2128\x212A"+
		"\a\x370\x2\x2\x2129\x2128\x3\x2\x2\x2\x2129\x212A\x3\x2\x2\x2\x212A\x29D"+
		"\x3\x2\x2\x2\x212B\x2134\x5\x3F2\x1FA\x2\x212C\x2131\x5\x2A2\x152\x2\x212D"+
		"\x212E\a\x36F\x2\x2\x212E\x2130\x5\x2A2\x152\x2\x212F\x212D\x3\x2\x2\x2"+
		"\x2130\x2133\x3\x2\x2\x2\x2131\x212F\x3\x2\x2\x2\x2131\x2132\x3\x2\x2"+
		"\x2\x2132\x2135\x3\x2\x2\x2\x2133\x2131\x3\x2\x2\x2\x2134\x212C\x3\x2"+
		"\x2\x2\x2134\x2135\x3\x2\x2\x2\x2135\x2137\x3\x2\x2\x2\x2136\x2138\a\x370"+
		"\x2\x2\x2137\x2136\x3\x2\x2\x2\x2137\x2138\x3\x2\x2\x2\x2138\x29F\x3\x2"+
		"\x2\x2\x2139\x213A\a\x354\x2\x2\x213A\x213C\a\x35B\x2\x2\x213B\x2139\x3"+
		"\x2\x2\x2\x213B\x213C\x3\x2\x2\x2\x213C\x213F\x3\x2\x2\x2\x213D\x2140"+
		"\x5\x3F2\x1FA\x2\x213E\x2140\x5\x2AA\x156\x2\x213F\x213D\x3\x2\x2\x2\x213F"+
		"\x213E\x3\x2\x2\x2\x2140\x2142\x3\x2\x2\x2\x2141\x2143\x5\x2A2\x152\x2"+
		"\x2142\x2141\x3\x2\x2\x2\x2142\x2143\x3\x2\x2\x2\x2143\x215B\x3\x2\x2"+
		"\x2\x2144\x2145\a\x36D\x2\x2\x2145\x214A\x5\x2AA\x156\x2\x2146\x2147\a"+
		"\x36F\x2\x2\x2147\x2149\x5\x2AA\x156\x2\x2148\x2146\x3\x2\x2\x2\x2149"+
		"\x214C\x3\x2\x2\x2\x214A\x2148\x3\x2\x2\x2\x214A\x214B\x3\x2\x2\x2\x214B"+
		"\x214D\x3\x2\x2\x2\x214C\x214A\x3\x2\x2\x2\x214D\x2154\a\x36E\x2\x2\x214E"+
		"\x2150\a\b\x2\x2\x214F\x214E\x3\x2\x2\x2\x214F\x2150\x3\x2\x2\x2\x2150"+
		"\x2151\x3\x2\x2\x2\x2151\x2152\t\x63\x2\x2\x2152\x2153\a\x35B\x2\x2\x2153"+
		"\x2155\a\x357\x2\x2\x2154\x214F\x3\x2\x2\x2\x2154\x2155\x3\x2\x2\x2\x2155"+
		"\x2158\x3\x2\x2\x2\x2156\x2157\a\xC2\x2\x2\x2157\x2159\x5\x428\x215\x2"+
		"\x2158\x2156\x3\x2\x2\x2\x2158\x2159\x3\x2\x2\x2\x2159\x215B\x3\x2\x2"+
		"\x2\x215A\x213B\x3\x2\x2\x2\x215A\x2144\x3\x2\x2\x2\x215B\x2A1\x3\x2\x2"+
		"\x2\x215C\x2161\x5\x2A6\x154\x2\x215D\x215E\a\x36F\x2\x2\x215E\x2160\x5"+
		"\x2A2\x152\x2\x215F\x215D\x3\x2\x2\x2\x2160\x2163\x3\x2\x2\x2\x2161\x215F"+
		"\x3\x2\x2\x2\x2161\x2162\x3\x2\x2\x2\x2162\x216D\x3\x2\x2\x2\x2163\x2161"+
		"\x3\x2\x2\x2\x2164\x2169\x5\x2A4\x153\x2\x2165\x2166\a\x36F\x2\x2\x2166"+
		"\x2168\x5\x2A4\x153\x2\x2167\x2165\x3\x2\x2\x2\x2168\x216B\x3\x2\x2\x2"+
		"\x2169\x2167\x3\x2\x2\x2\x2169\x216A\x3\x2\x2\x2\x216A\x216D\x3\x2\x2"+
		"\x2\x216B\x2169\x3\x2\x2\x2\x216C\x215C\x3\x2\x2\x2\x216C\x2164\x3\x2"+
		"\x2\x2\x216D\x2A3\x3\x2\x2\x2\x216E\x216F\a\x354\x2\x2\x216F\x2170\a\x35B"+
		"\x2\x2\x2170\x2171\x5\x2A8\x155\x2\x2171\x2A5\x3\x2\x2\x2\x2172\x2173"+
		"\x5\x2A8\x155\x2\x2173\x2A7\x3\x2\x2\x2\x2174\x217D\x5\x422\x212\x2\x2175"+
		"\x2177\a\x354\x2\x2\x2176\x2178\t\x64\x2\x2\x2177\x2176\x3\x2\x2\x2\x2177"+
		"\x2178\x3\x2\x2\x2\x2178\x217D\x3\x2\x2\x2\x2179\x217D\x5\x428\x215\x2"+
		"\x217A\x217D\a/\x2\x2\x217B\x217D\ak\x2\x2\x217C\x2174\x3\x2\x2\x2\x217C"+
		"\x2175\x3\x2\x2\x2\x217C\x2179\x3\x2\x2\x2\x217C\x217A\x3\x2\x2\x2\x217C"+
		"\x217B\x3\x2\x2\x2\x217D\x2A9\x3\x2\x2\x2\x217E\x2180\a\x354\x2\x2\x217F"+
		"\x2181\t\x64\x2\x2\x2180\x217F\x3\x2\x2\x2\x2180\x2181\x3\x2\x2\x2\x2181"+
		"\x2184\x3\x2\x2\x2\x2182\x2184\a\x357\x2\x2\x2183\x217E\x3\x2\x2\x2\x2183"+
		"\x2182\x3\x2\x2\x2\x2184\x2AB\x3\x2\x2\x2\x2185\x2187\x5\x2E4\x173\x2"+
		"\x2186\x2188\a\x370\x2\x2\x2187\x2186\x3\x2\x2\x2\x2187\x2188\x3\x2\x2"+
		"\x2\x2188\x21C6\x3\x2\x2\x2\x2189\x2195\aO\x2\x2\x218A\x218C\a\x4\x2\x2"+
		"\x218B\x218D\a\x1E3\x2\x2\x218C\x218B\x3\x2\x2\x2\x218C\x218D\x3\x2\x2"+
		"\x2\x218D\x2196\x3\x2\x2\x2\x218E\x2193\x5\x2C8\x165\x2\x218F\x2190\a"+
		"\x36D\x2\x2\x2190\x2191\x5\x3FE\x200\x2\x2191\x2192\a\x36E\x2\x2\x2192"+
		"\x2194\x3\x2\x2\x2\x2193\x218F\x3\x2\x2\x2\x2193\x2194\x3\x2\x2\x2\x2194"+
		"\x2196\x3\x2\x2\x2\x2195\x218A\x3\x2\x2\x2\x2195\x218E\x3\x2\x2\x2\x2196"+
		"\x219E\x3\x2\x2\x2\x2197\x219B\ap\x2\x2\x2198\x2199\x5\x9CO\x2\x2199\x219A"+
		"\a\x372\x2\x2\x219A\x219C\x3\x2\x2\x2\x219B\x2198\x3\x2\x2\x2\x219B\x219C"+
		"\x3\x2\x2\x2\x219C\x219D\x3\x2\x2\x2\x219D\x219F\x5\x3EA\x1F6\x2\x219E"+
		"\x2197\x3\x2\x2\x2\x219E\x219F\x3\x2\x2\x2\x219F\x21A0\x3\x2\x2\x2\x21A0"+
		"\x21A1\a\xA8\x2\x2\x21A1\x21A6\x5\x2AE\x158\x2\x21A2\x21A3\a\x36F\x2\x2"+
		"\x21A3\x21A5\x5\x2AE\x158\x2\x21A4\x21A2\x3\x2\x2\x2\x21A5\x21A8\x3\x2"+
		"\x2\x2\x21A6\x21A4\x3\x2\x2\x2\x21A6\x21A7\x3\x2\x2\x2\x21A7\x21AC\x3"+
		"\x2\x2\x2\x21A8\x21A6\x3\x2\x2\x2\x21A9\x21AA\a\xBD\x2\x2\x21AA\x21AB"+
		"\aO\x2\x2\x21AB\x21AD\aw\x2\x2\x21AC\x21A9\x3\x2\x2\x2\x21AC\x21AD\x3"+
		"\x2\x2\x2\x21AD\x21B0\x3\x2\x2\x2\x21AE\x21AF\a\b\x2\x2\x21AF\x21B1\x5"+
		"\x2AE\x158\x2\x21B0\x21AE\x3\x2\x2\x2\x21B0\x21B1\x3\x2\x2\x2\x21B1\x21B3"+
		"\x3\x2\x2\x2\x21B2\x21B4\a\x370\x2\x2\x21B3\x21B2\x3\x2\x2\x2\x21B3\x21B4"+
		"\x3\x2\x2\x2\x21B4\x21C6\x3\x2\x2\x2\x21B5\x21BC\a\x8F\x2\x2\x21B6\x21B7"+
		"\a\x36D\x2\x2\x21B7\x21B8\a\xBD\x2\x2\x21B8\x21B9\a\x108\x2\x2\x21B9\x21BA"+
		"\a\x35B\x2\x2\x21BA\x21BB\a\x354\x2\x2\x21BB\x21BD\a\x36E\x2\x2\x21BC"+
		"\x21B6\x3\x2\x2\x2\x21BC\x21BD\x3\x2\x2\x2\x21BD\x21BF\x3\x2\x2\x2\x21BE"+
		"\x21C0\a\x370\x2\x2\x21BF\x21BE\x3\x2\x2\x2\x21BF\x21C0\x3\x2\x2\x2\x21C0"+
		"\x21C6\x3\x2\x2\x2\x21C1\x21C6\x5\x2BA\x15E\x2\x21C2\x21C6\x5\x2BC\x15F"+
		"\x2\x21C3\x21C6\x5\x2BE\x160\x2\x21C4\x21C6\x5\x2B0\x159\x2\x21C5\x2185"+
		"\x3\x2\x2\x2\x21C5\x2189\x3\x2\x2\x2\x21C5\x21B5\x3\x2\x2\x2\x21C5\x21C1"+
		"\x3\x2\x2\x2\x21C5\x21C2\x3\x2\x2\x2\x21C5\x21C3\x3\x2\x2\x2\x21C5\x21C4"+
		"\x3\x2\x2\x2\x21C6\x2AD\x3\x2\x2\x2\x21C7\x21CB\x3\x2\x2\x2\x21C8\x21CB"+
		"\x5\x428\x215\x2\x21C9\x21CB\a\x84\x2\x2\x21CA\x21C7\x3\x2\x2\x2\x21CA"+
		"\x21C8\x3\x2\x2\x2\x21CA\x21C9\x3\x2\x2\x2\x21CB\x2AF\x3\x2\x2\x2\x21CC"+
		"\x21CD\a#\x2\x2\x21CD\x21CE\a\x291\x2\x2\x21CE\x21D1\x5\x428\x215\x2\x21CF"+
		"\x21D0\a\n\x2\x2\x21D0\x21D2\x5\x428\x215\x2\x21D1\x21CF\x3\x2\x2\x2\x21D1"+
		"\x21D2\x3\x2\x2\x2\x21D2\x21D6\x3\x2\x2\x2\x21D3\x21D4\aK\x2\x2\x21D4"+
		"\x21D7\x5\x2B2\x15A\x2\x21D5\x21D7\x5\x2B6\x15C\x2\x21D6\x21D3\x3\x2\x2"+
		"\x2\x21D6\x21D5\x3\x2\x2\x2\x21D7\x21DE\x3\x2\x2\x2\x21D8\x21D9\a\xC7"+
		"\x2\x2\x21D9\x21DA\aG\x2\x2\x21DA\x21DB\a\r\x2\x2\x21DB\x21DC\a\x12B\x2"+
		"\x2\x21DC\x21DD\a\x35B\x2\x2\x21DD\x21DF\t\t\x2\x2\x21DE\x21D8\x3\x2\x2"+
		"\x2\x21DE\x21DF\x3\x2\x2\x2\x21DF\x2B1\x3\x2\x2\x2\x21E0\x21E1\a\xDA\x2"+
		"\x2\x21E1\x21F2\x5\x428\x215\x2\x21E2\x21E4\a\x13D\x2\x2\x21E3\x21E2\x3"+
		"\x2\x2\x2\x21E3\x21E4\x3\x2\x2\x2\x21E4\x21E5\x3\x2\x2\x2\x21E5\x21E6"+
		"\a\x45\x2\x2\x21E6\x21E7\a\x35B\x2\x2\x21E7\x21EF\a\x357\x2\x2\x21E8\x21E9"+
		"\a\xBD\x2\x2\x21E9\x21EA\a\x1E1\x2\x2\x21EA\x21EB\a_\x2\x2\x21EB\x21EC"+
		"\a\x36D\x2\x2\x21EC\x21ED\x5\x2B4\x15B\x2\x21ED\x21EE\a\x36E\x2\x2\x21EE"+
		"\x21F0\x3\x2\x2\x2\x21EF\x21E8\x3\x2\x2\x2\x21EF\x21F0\x3\x2\x2\x2\x21F0"+
		"\x21F2\x3\x2\x2\x2\x21F1\x21E0\x3\x2\x2\x2\x21F1\x21E3\x3\x2\x2\x2\x21F2"+
		"\x2B3\x3\x2\x2\x2\x21F3\x21F4\t\x65\x2\x2\x21F4\x21F5\a\x35B\x2\x2\x21F5"+
		"\x21FC\a\x357\x2\x2\x21F6\x21F7\a\x36F\x2\x2\x21F7\x21F8\t\x66\x2\x2\x21F8"+
		"\x21F9\a\x12\x2\x2\x21F9\x21FA\a\x2FB\x2\x2\x21FA\x21FB\a\x35B\x2\x2\x21FB"+
		"\x21FD\a\x357\x2\x2\x21FC\x21F6\x3\x2\x2\x2\x21FC\x21FD\x3\x2\x2\x2\x21FD"+
		"\x2B5\x3\x2\x2\x2\x21FE\x21FF\a\x139\x2\x2\x21FF\x2200\a\x12\x2\x2\x2200"+
		"\x2201\a\x2FB\x2\x2\x2201\x2202\a\x35B\x2\x2\x2202\x2204\a\x357\x2\x2"+
		"\x2203\x21FE\x3\x2\x2\x2\x2203\x2204\x3\x2\x2\x2\x2204\x2205\x3\x2\x2"+
		"\x2\x2205\x2206\a\xBD\x2\x2\x2206\x2207\a\x23E\x2\x2\x2207\x2208\a\x35B"+
		"\x2\x2\x2208\x220D\a\x357\x2\x2\x2209\x220A\a\x36F\x2\x2\x220A\x220C\x5"+
		"\x2B8\x15D\x2\x220B\x2209\x3\x2\x2\x2\x220C\x220F\x3\x2\x2\x2\x220D\x220B"+
		"\x3\x2\x2\x2\x220D\x220E\x3\x2\x2\x2\x220E\x2B7\x3\x2\x2\x2\x220F\x220D"+
		"\x3\x2\x2\x2\x2210\x2211\tg\x2\x2\x2211\x2212\a\x35B\x2\x2\x2212\x2213"+
		"\a\x357\x2\x2\x2213\x2B9\x3\x2\x2\x2\x2214\x2215\aq\x2\x2\x2215\x2216"+
		"\a\x243\x2\x2\x2216\x2217\a_\x2\x2\x2217\x2218\x5\x428\x215\x2\x2218\x2219"+
		"\a\x11D\x2\x2\x2219\x221A\a\x12\x2\x2\x221A\x221B\x5\x2C6\x164\x2\x221B"+
		"\x2225\x3\x2\x2\x2\x221C\x221D\aq\x2\x2\x221D\x221E\a\x2D8\x2\x2\x221E"+
		"\x221F\a_\x2\x2\x221F\x2220\a\x11D\x2\x2\x2220\x2221\a\x12\x2\x2\x2221"+
		"\x2222\a\x2FB\x2\x2\x2222\x2223\a\x35B\x2\x2\x2223\x2225\a\x357\x2\x2"+
		"\x2224\x2214\x3\x2\x2\x2\x2224\x221C\x3\x2\x2\x2\x2225\x2BB\x3\x2\x2\x2"+
		"\x2226\x2227\a\x17\x2\x2\x2227\x2228\a\x243\x2\x2\x2228\x2229\a_\x2\x2"+
		"\x2229\x2232\x5\x428\x215\x2\x222A\x222B\a\x17\x2\x2\x222B\x222C\a\x4"+
		"\x2\x2\x222C\x222D\a\x243\x2\x2\x222D\x2232\a\x17B\x2\x2\x222E\x222F\a"+
		"\x17\x2\x2\x222F\x2230\a\x2D8\x2\x2\x2230\x2232\a_\x2\x2\x2231\x2226\x3"+
		"\x2\x2\x2\x2231\x222A\x3\x2\x2\x2\x2231\x222E\x3\x2\x2\x2\x2232\x2BD\x3"+
		"\x2\x2\x2\x2233\x2234\a#\x2\x2\x2234\x2235\a\x2D8\x2\x2\x2235\x2236\a"+
		"_\x2\x2\x2236\x2237\a\x139\x2\x2\x2237\x2238\a\x12\x2\x2\x2238\x2239\a"+
		"\x2FB\x2\x2\x2239\x223A\a\x35B\x2\x2\x223A\x2257\a\x357\x2\x2\x223B\x223C"+
		"\a#\x2\x2\x223C\x223D\a\x243\x2\x2\x223D\x223E\a_\x2\x2\x223E\x2241\x5"+
		"\x428\x215\x2\x223F\x2240\a\n\x2\x2\x2240\x2242\x5\x428\x215\x2\x2241"+
		"\x223F\x3\x2\x2\x2\x2241\x2242\x3\x2\x2\x2\x2242\x2246\x3\x2\x2\x2\x2243"+
		"\x2244\aK\x2\x2\x2244\x2245\a\x1E6\x2\x2\x2245\x2247\x5\x428\x215\x2\x2246"+
		"\x2243\x3\x2\x2\x2\x2246\x2247\x3\x2\x2\x2\x2247\x2248\x3\x2\x2\x2\x2248"+
		"\x2252\a\xBD\x2\x2\x2249\x224E\x5\x2C0\x161\x2\x224A\x224B\a\x139\x2\x2"+
		"\x224B\x224C\a\x12\x2\x2\x224C\x224E\x5\x2C4\x163\x2\x224D\x2249\x3\x2"+
		"\x2\x2\x224D\x224A\x3\x2\x2\x2\x224E\x2250\x3\x2\x2\x2\x224F\x2251\a\x36F"+
		"\x2\x2\x2250\x224F\x3\x2\x2\x2\x2250\x2251\x3\x2\x2\x2\x2251\x2253\x3"+
		"\x2\x2\x2\x2252\x224D\x3\x2\x2\x2\x2253\x2254\x3\x2\x2\x2\x2254\x2252"+
		"\x3\x2\x2\x2\x2254\x2255\x3\x2\x2\x2\x2255\x2257\x3\x2\x2\x2\x2256\x2233"+
		"\x3\x2\x2\x2\x2256\x223B\x3\x2\x2\x2\x2257\x2BF\x3\x2\x2\x2\x2258\x2259"+
		"\a\x17A\x2\x2\x2259\x225A\a\x35B\x2\x2\x225A\x2268\a\x357\x2\x2\x225B"+
		"\x225C\a\xCF\x2\x2\x225C\x225D\a\x35B\x2\x2\x225D\x2268\x5\x2C2\x162\x2"+
		"\x225E\x225F\a\x167\x2\x2\x225F\x2260\a\x35B\x2\x2\x2260\x2268\a\x357"+
		"\x2\x2\x2261\x2262\a\x1E7\x2\x2\x2262\x2263\a\x35B\x2\x2\x2263\x2268\a"+
		"\x357\x2\x2\x2264\x2265\a\x10E\x2\x2\x2265\x2266\a\x35B\x2\x2\x2266\x2268"+
		"\t\f\x2\x2\x2267\x2258\x3\x2\x2\x2\x2267\x225B\x3\x2\x2\x2\x2267\x225E"+
		"\x3\x2\x2\x2\x2267\x2261\x3\x2\x2\x2\x2267\x2264\x3\x2\x2\x2\x2268\x2C1"+
		"\x3\x2\x2\x2\x2269\x226A\th\x2\x2\x226A\x2C3\x3\x2\x2\x2\x226B\x226C\a"+
		"\x291\x2\x2\x226C\x2277\x5\x428\x215\x2\x226D\x226E\a\x281\x2\x2\x226E"+
		"\x226F\a_\x2\x2\x226F\x2277\x5\x428\x215\x2\x2270\x2271\a\x243\x2\x2\x2271"+
		"\x2272\a_\x2\x2\x2272\x2277\x5\x428\x215\x2\x2273\x2274\a\x2FB\x2\x2\x2274"+
		"\x2275\a\x35B\x2\x2\x2275\x2277\a\x357\x2\x2\x2276\x226B\x3\x2\x2\x2\x2276"+
		"\x226D\x3\x2\x2\x2\x2276\x2270\x3\x2\x2\x2\x2276\x2273\x3\x2\x2\x2\x2277"+
		"\x2C5\x3\x2\x2\x2\x2278\x2279\a\x291\x2\x2\x2279\x227E\x5\x428\x215\x2"+
		"\x227A\x227B\a\xBD\x2\x2\x227B\x227C\a\x2FB\x2\x2\x227C\x227D\a\x35B\x2"+
		"\x2\x227D\x227F\a\x357\x2\x2\x227E\x227A\x3\x2\x2\x2\x227E\x227F\x3\x2"+
		"\x2\x2\x227F\x2290\x3\x2\x2\x2\x2280\x2281\a\x281\x2\x2\x2281\x2282\a"+
		"_\x2\x2\x2282\x2287\x5\x428\x215\x2\x2283\x2284\a\xBD\x2\x2\x2284\x2285"+
		"\a\x2FB\x2\x2\x2285\x2286\a\x35B\x2\x2\x2286\x2288\a\x357\x2\x2\x2287"+
		"\x2283\x3\x2\x2\x2\x2287\x2288\x3\x2\x2\x2\x2288\x2290\x3\x2\x2\x2\x2289"+
		"\x228A\a\x243\x2\x2\x228A\x228B\a_\x2\x2\x228B\x2290\x5\x428\x215\x2\x228C"+
		"\x228D\a\x2FB\x2\x2\x228D\x228E\a\x35B\x2\x2\x228E\x2290\a\x357\x2\x2"+
		"\x228F\x2278\x3\x2\x2\x2\x228F\x2280\x3\x2\x2\x2\x228F\x2289\x3\x2\x2"+
		"\x2\x228F\x228C\x3\x2\x2\x2\x2290\x2C7\x3\x2\x2\x2\x2291\x2297\a\x279"+
		"\x2\x2\x2292\x2293\a\x11\x2\x2\x2293\x2298\a\x2F7\x2\x2\x2294\x2295\a"+
		"+\x2\x2\x2295\x2296\a\x11\x2\x2\x2296\x2298\a\x2F7\x2\x2\x2297\x2292\x3"+
		"\x2\x2\x2\x2297\x2294\x3\x2\x2\x2\x2298\x2367\x3\x2\x2\x2\x2299\x22E0"+
		"\a\x5\x2\x2\x229A\x22D9\a\a\x2\x2\x229B\x229C\a\x280\x2\x2\x229C\x22DA"+
		"\a\x314\x2\x2\x229D\x22DA\a\xDA\x2\x2\x229E\x229F\a\x281\x2\x2\x229F\x22DA"+
		"\a_\x2\x2\x22A0\x22A1\a\xE6\x2\x2\x22A1\x22DA\aP\x2\x2\x22A2\x22DA\a\x291"+
		"\x2\x2\x22A3\x22A8\a\x1B\x2\x2\x22A4\x22A5\a\x139\x2\x2\x22A5\x22A9\a"+
		"_\x2\x2\x22A6\x22A7\a\x2D8\x2\x2\x22A7\x22A9\a_\x2\x2\x22A8\x22A4\x3\x2"+
		"\x2\x2\x22A8\x22A6\x3\x2\x2\x2\x22A9\x22DA\x3\x2\x2\x2\x22AA\x22DA\a\x29A"+
		"\x2\x2\x22AB\x22DA\a\x29F\x2\x2\x22AC\x22DA\a\x10F\x2\x2\x22AD\x22B5\a"+
		"+\x2\x2\x22AE\x22B6\a\xDB\x2\x2\x22AF\x22B0\a\x2A8\x2\x2\x22B0\x22B6\a"+
		"\xAC\x2\x2\x22B1\x22B2\a\x2B1\x2\x2\x22B2\x22B6\ti\x2\x2\x22B3\x22B4\a"+
		"\x215\x2\x2\x22B4\x22B6\a\x29B\x2\x2\x22B5\x22AE\x3\x2\x2\x2\x22B5\x22AF"+
		"\x3\x2\x2\x2\x22B5\x22B1\x3\x2\x2\x2\x22B5\x22B3\x3\x2\x2\x2\x22B5\x22B6"+
		"\x3\x2\x2\x2\x22B6\x22DA\x3\x2\x2\x2\x22B7\x22DA\a\x2A7\x2\x2\x22B8\x22DA"+
		"\a\x2AF\x2\x2\x22B9\x22BA\a\x2B1\x2\x2\x22BA\x22DA\ti\x2\x2\x22BB\x22C1"+
		"\a\x43\x2\x2\x22BC\x22BD\a\x114\x2\x2\x22BD\x22C2\a\x329\x2\x2\x22BE\x22BF"+
		"\a\x45\x2\x2\x22BF\x22C2\a\x154\x2\x2\x22C0\x22C2\a\x2CE\x2\x2\x22C1\x22BC"+
		"\x3\x2\x2\x2\x22C1\x22BE\x3\x2\x2\x2\x22C1\x22C0\x3\x2\x2\x2\x22C2\x22DA"+
		"\x3\x2\x2\x2\x22C3\x22C4\a\x157\x2\x2\x22C4\x22DA\a\xF7\x2\x2\x22C5\x22C6"+
		"\a\x2D0\x2\x2\x22C6\x22DA\a\x31F\x2\x2\x22C7\x22DA\a\x18A\x2\x2\x22C8"+
		"\x22DA\a\x2D6\x2\x2\x22C9\x22CA\a\x19F\x2\x2\x22CA\x22DA\a\x25A\x2\x2"+
		"\x22CB\x22CC\a\x1FD\x2\x2\x22CC\x22CD\a\x320\x2\x2\x22CD\x22DA\a\xEE\x2"+
		"\x2\x22CE\x22DA\a\x314\x2\x2\x22CF\x22DA\a\x20E\x2\x2\x22D0\x22DA\a\x97"+
		"\x2\x2\x22D1\x22D2\a\x21F\x2\x2\x22D2\x22DA\a\x302\x2\x2\x22D3\x22D4\a"+
		"\x31F\x2\x2\x22D4\x22DA\tj\x2\x2\x22D5\x22DA\a\x320\x2\x2\x22D6\x22D7"+
		"\a\x243\x2\x2\x22D7\x22DA\a_\x2\x2\x22D8\x22DA\a\xB5\x2\x2\x22D9\x229B"+
		"\x3\x2\x2\x2\x22D9\x229D\x3\x2\x2\x2\x22D9\x229E\x3\x2\x2\x2\x22D9\x22A0"+
		"\x3\x2\x2\x2\x22D9\x22A2\x3\x2\x2\x2\x22D9\x22A3\x3\x2\x2\x2\x22D9\x22AA"+
		"\x3\x2\x2\x2\x22D9\x22AB\x3\x2\x2\x2\x22D9\x22AC\x3\x2\x2\x2\x22D9\x22AD"+
		"\x3\x2\x2\x2\x22D9\x22B7\x3\x2\x2\x2\x22D9\x22B8\x3\x2\x2\x2\x22D9\x22B9"+
		"\x3\x2\x2\x2\x22D9\x22BB\x3\x2\x2\x2\x22D9\x22C3\x3\x2\x2\x2\x22D9\x22C5"+
		"\x3\x2\x2\x2\x22D9\x22C7\x3\x2\x2\x2\x22D9\x22C8\x3\x2\x2\x2\x22D9\x22C9"+
		"\x3\x2\x2\x2\x22D9\x22CB\x3\x2\x2\x2\x22D9\x22CE\x3\x2\x2\x2\x22D9\x22CF"+
		"\x3\x2\x2\x2\x22D9\x22D0\x3\x2\x2\x2\x22D9\x22D1\x3\x2\x2\x2\x22D9\x22D3"+
		"\x3\x2\x2\x2\x22D9\x22D5\x3\x2\x2\x2\x22D9\x22D6\x3\x2\x2\x2\x22D9\x22D8"+
		"\x3\x2\x2\x2\x22DA\x22E1\x3\x2\x2\x2\x22DB\x22E1\a\x30E\x2\x2\x22DC\x22DD"+
		"\a\x31F\x2\x2\x22DD\x22E1\a\x330\x2\x2\x22DE\x22E1\a\x324\x2\x2\x22DF"+
		"\x22E1\a\x33D\x2\x2\x22E0\x229A\x3\x2\x2\x2\x22E0\x22DB\x3\x2\x2\x2\x22E0"+
		"\x22DC\x3\x2\x2\x2\x22E0\x22DE\x3\x2\x2\x2\x22E0\x22DF\x3\x2\x2\x2\x22E0"+
		"\x22E1\x3\x2\x2\x2\x22E1\x2367\x3\x2\x2\x2\x22E2\x22E4\a\x283\x2\x2\x22E3"+
		"\x22E5\a\x31F\x2\x2\x22E4\x22E3\x3\x2\x2\x2\x22E4\x22E5\x3\x2\x2\x2\x22E5"+
		"\x2367\x3\x2\x2\x2\x22E6\x22E7\a\f\x2\x2\x22E7\x2367\tk\x2\x2\x22E8\x2367"+
		"\a\x16\x2\x2\x22E9\x22EE\a\x299\x2\x2\x22EA\x22EB\a\a\x2\x2\x22EB\x22EF"+
		"\a+\x2\x2\x22EC\x22EF\a\x8B\x2\x2\x22ED\x22EF\a\x32C\x2\x2\x22EE\x22EA"+
		"\x3\x2\x2\x2\x22EE\x22EC\x3\x2\x2\x2\x22EE\x22ED\x3\x2\x2\x2\x22EE\x22EF"+
		"\x3\x2\x2\x2\x22EF\x2367\x3\x2\x2\x2\x22F0\x22F2\a\x107\x2\x2\x22F1\x22F3"+
		"\a\x31F\x2\x2\x22F2\x22F1\x3\x2\x2\x2\x22F2\x22F3\x3\x2\x2\x2\x22F3\x2367"+
		"\x3\x2\x2\x2\x22F4\x232A\a#\x2\x2\x22F5\x232B\a\xCE\x2\x2\x22F6\x22F7"+
		"\a\a\x2\x2\x22F7\x232B\a+\x2\x2\x22F8\x232B\a\xDA\x2\x2\x22F9\x22FA\a"+
		"\x281\x2\x2\x22FA\x232B\a_\x2\x2\x22FB\x22FC\a\xE6\x2\x2\x22FC\x232B\a"+
		"P\x2\x2\x22FD\x232B\a\x291\x2\x2\x22FE\x232B\a\x29F\x2\x2\x22FF\x2303"+
		"\a+\x2\x2\x2300\x2301\a\x2A8\x2\x2\x2301\x2302\a\x2B1\x2\x2\x2302\x2304"+
		"\a\x2F3\x2\x2\x2303\x2300\x3\x2\x2\x2\x2303\x2304\x3\x2\x2\x2\x2304\x232B"+
		"\x3\x2\x2\x2\x2305\x2306\a\x2A8\x2\x2\x2306\x2307\a\x2B1\x2\x2\x2307\x232B"+
		"\a\x2F3\x2\x2\x2308\x232B\a/\x2\x2\x2309\x232B\a\x2AF\x2\x2\x230A\x230B"+
		"\a\x43\x2\x2\x230B\x232B\a\x2CE\x2\x2\x230C\x230D\a\x157\x2\x2\x230D\x232B"+
		"\a\xF7\x2\x2\x230E\x232B\aM\x2\x2\x230F\x2310\a\x19F\x2\x2\x2310\x232B"+
		"\a\x25A\x2\x2\x2311\x232B\a\x83\x2\x2\x2312\x232B\a\x1E9\x2\x2\x2313\x2314"+
		"\a\x1FD\x2\x2\x2314\x2315\a\x320\x2\x2\x2315\x232B\a\xEE\x2\x2\x2316\x232B"+
		"\a\x314\x2\x2\x2317\x232B\a\x20E\x2\x2\x2318\x232B\a\x95\x2\x2\x2319\x232B"+
		"\a\x97\x2\x2\x231A\x232B\a\x226\x2\x2\x231B\x231C\a\x31F\x2\x2\x231C\x232B"+
		"\a\x314\x2\x2\x231D\x232B\a\x320\x2\x2\x231E\x231F\a\x243\x2\x2\x231F"+
		"\x232B\a_\x2\x2\x2320\x232B\a\x245\x2\x2\x2321\x232B\a\xA4\x2\x2\x2322"+
		"\x2323\a\x33D\x2\x2\x2323\x2324\a\x2B1\x2\x2\x2324\x232B\a\x2F3\x2\x2"+
		"\x2325\x232B\a\x25A\x2\x2\x2326\x232B\a\xB8\x2\x2\x2327\x2328\a\x270\x2"+
		"\x2\x2328\x2329\a\x97\x2\x2\x2329\x232B\a\xFF\x2\x2\x232A\x22F5\x3\x2"+
		"\x2\x2\x232A\x22F6\x3\x2\x2\x2\x232A\x22F8\x3\x2\x2\x2\x232A\x22F9\x3"+
		"\x2\x2\x2\x232A\x22FB\x3\x2\x2\x2\x232A\x22FD\x3\x2\x2\x2\x232A\x22FE"+
		"\x3\x2\x2\x2\x232A\x22FF\x3\x2\x2\x2\x232A\x2305\x3\x2\x2\x2\x232A\x2308"+
		"\x3\x2\x2\x2\x232A\x2309\x3\x2\x2\x2\x232A\x230A\x3\x2\x2\x2\x232A\x230C"+
		"\x3\x2\x2\x2\x232A\x230E\x3\x2\x2\x2\x232A\x230F\x3\x2\x2\x2\x232A\x2311"+
		"\x3\x2\x2\x2\x232A\x2312\x3\x2\x2\x2\x232A\x2313\x3\x2\x2\x2\x232A\x2316"+
		"\x3\x2\x2\x2\x232A\x2317\x3\x2\x2\x2\x232A\x2318\x3\x2\x2\x2\x232A\x2319"+
		"\x3\x2\x2\x2\x232A\x231A\x3\x2\x2\x2\x232A\x231B\x3\x2\x2\x2\x232A\x231D"+
		"\x3\x2\x2\x2\x232A\x231E\x3\x2\x2\x2\x232A\x2320\x3\x2\x2\x2\x232A\x2321"+
		"\x3\x2\x2\x2\x232A\x2322\x3\x2\x2\x2\x232A\x2325\x3\x2\x2\x2\x232A\x2326"+
		"\x3\x2\x2\x2\x232A\x2327\x3\x2\x2\x2\x232B\x2367\x3\x2\x2\x2\x232C\x2367"+
		"\a\x30\x2\x2\x232D\x2331\a@\x2\x2\x232E\x232F\a\a\x2\x2\x232F\x2330\a"+
		"\x43\x2\x2\x2330\x2332\a\x31E\x2\x2\x2331\x232E\x3\x2\x2\x2\x2331\x2332"+
		"\x3\x2\x2\x2\x2332\x2367\x3\x2\x2\x2\x2333\x2334\a\x43\x2\x2\x2334\x2335"+
		"\a\xC4\x2\x2\x2335\x2367\a\xDA\x2\x2\x2336\x2339\a\x16A\x2\x2\x2337\x2338"+
		"\a\a\x2\x2\x2338\x233A\a\x18A\x2\x2\x2339\x2337\x3\x2\x2\x2\x2339\x233A"+
		"\x3\x2\x2\x2\x233A\x2367\x3\x2\x2\x2\x233B\x2367\aZ\x2\x2\x233C\x233D"+
		"\a`\x2\x2\x233D\x233E\a+\x2\x2\x233E\x2367\a\x29A\x2\x2\x233F\x2367\a"+
		"\x1F8\x2\x2\x2340\x2367\a\x8A\x2\x2\x2341\x2345\a\x99\x2\x2\x2342\x2343"+
		"\a\x4\x2\x2\x2343\x2344\a\xB5\x2\x2\x2344\x2346\a\x21E\x2\x2\x2345\x2342"+
		"\x3\x2\x2\x2\x2345\x2346\x3\x2\x2\x2\x2346\x2367\x3\x2\x2\x2\x2347\x2367"+
		"\a\x224\x2\x2\x2348\x2367\a\x22B\x2\x2\x2349\x2367\a\xA0\x2\x2\x234A\x234B"+
		"\a\x23F\x2\x2\x234B\x234C\a\x1E8\x2\x2\x234C\x2367\a\x1BC\x2\x2\x234D"+
		"\x234E\a\x247\x2\x2\x234E\x2367\a\x1CF\x2\x2\x234F\x2367\a\x260\x2\x2"+
		"\x2350\x2351\a\x342\x2\x2\x2351\x2367\a\xDA\x2\x2\x2352\x2367\a\xB2\x2"+
		"\x2\x2353\x2364\a\xB8\x2\x2\x2354\x235B\a\a\x2\x2\x2355\x235C\a+\x2\x2"+
		"\x2356\x235C\a\x121\x2\x2\x2357\x2358\a\x1B\x2\x2\x2358\x2359\t\xF\x2"+
		"\x2\x2359\x235A\a_\x2\x2\x235A\x235C\a\x121\x2\x2\x235B\x2355\x3\x2\x2"+
		"\x2\x235B\x2356\x3\x2\x2\x2\x235B\x2357\x3\x2\x2\x2\x235C\x2365\x3\x2"+
		"\x2\x2\x235D\x235E\a\xF9\x2\x2\x235E\x2365\a\x252\x2\x2\x235F\x2360\a"+
		"+\x2\x2\x2360\x2365\a\x330\x2\x2\x2361\x2365\a\x121\x2\x2\x2362\x2363"+
		"\a\x31F\x2\x2\x2363\x2365\a\x330\x2\x2\x2364\x2354\x3\x2\x2\x2\x2364\x235D"+
		"\x3\x2\x2\x2\x2364\x235F\x3\x2\x2\x2\x2364\x2361\x3\x2\x2\x2\x2364\x2362"+
		"\x3\x2\x2\x2\x2365\x2367\x3\x2\x2\x2\x2366\x2291\x3\x2\x2\x2\x2366\x2299"+
		"\x3\x2\x2\x2\x2366\x22E2\x3\x2\x2\x2\x2366\x22E6\x3\x2\x2\x2\x2366\x22E8"+
		"\x3\x2\x2\x2\x2366\x22E9\x3\x2\x2\x2\x2366\x22F0\x3\x2\x2\x2\x2366\x22F4"+
		"\x3\x2\x2\x2\x2366\x232C\x3\x2\x2\x2\x2366\x232D\x3\x2\x2\x2\x2366\x2333"+
		"\x3\x2\x2\x2\x2366\x2336\x3\x2\x2\x2\x2366\x233B\x3\x2\x2\x2\x2366\x233C"+
		"\x3\x2\x2\x2\x2366\x233F\x3\x2\x2\x2\x2366\x2340\x3\x2\x2\x2\x2366\x2341"+
		"\x3\x2\x2\x2\x2366\x2347\x3\x2\x2\x2\x2366\x2348\x3\x2\x2\x2\x2366\x2349"+
		"\x3\x2\x2\x2\x2366\x234A\x3\x2\x2\x2\x2366\x234D\x3\x2\x2\x2\x2366\x234F"+
		"\x3\x2\x2\x2\x2366\x2350\x3\x2\x2\x2\x2366\x2352\x3\x2\x2\x2\x2366\x2353"+
		"\x3\x2\x2\x2\x2367\x2C9\x3\x2\x2\x2\x2368\x2369\a\x9E\x2\x2\x2369\x236C"+
		"\a\x354\x2\x2\x236A\x236B\a\x368\x2\x2\x236B\x236D\x5\x428\x215\x2\x236C"+
		"\x236A\x3\x2\x2\x2\x236C\x236D\x3\x2\x2\x2\x236D\x236E\x3\x2\x2\x2\x236E"+
		"\x236F\a\x35B\x2\x2\x236F\x2371\x5\x312\x18A\x2\x2370\x2372\a\x370\x2"+
		"\x2\x2371\x2370\x3\x2\x2\x2\x2371\x2372\x3\x2\x2\x2\x2372\x2390\x3\x2"+
		"\x2\x2\x2373\x2374\a\x9E\x2\x2\x2374\x2375\a\x354\x2\x2\x2375\x2376\x5"+
		"\x430\x219\x2\x2376\x2378\x5\x312\x18A\x2\x2377\x2379\a\x370\x2\x2\x2378"+
		"\x2377\x3\x2\x2\x2\x2378\x2379\x3\x2\x2\x2\x2379\x2390\x3\x2\x2\x2\x237A"+
		"\x237B\a\x9E\x2\x2\x237B\x237C\a\x354\x2\x2\x237C\x237D\a\x35B\x2\x2\x237D"+
		"\x237E\a*\x2\x2\x237E\x2389\x5\x306\x184\x2\x237F\x2387\aG\x2\x2\x2380"+
		"\x2381\a\x87\x2\x2\x2381\x2388\a\x1C7\x2\x2\x2382\x2385\a\xB2\x2\x2\x2383"+
		"\x2384\am\x2\x2\x2384\x2386\x5\x3FE\x200\x2\x2385\x2383\x3\x2\x2\x2\x2385"+
		"\x2386\x3\x2\x2\x2\x2386\x2388\x3\x2\x2\x2\x2387\x2380\x3\x2\x2\x2\x2387"+
		"\x2382\x3\x2\x2\x2\x2388\x238A\x3\x2\x2\x2\x2389\x237F\x3\x2\x2\x2\x2389"+
		"\x238A\x3\x2\x2\x2\x238A\x238C\x3\x2\x2\x2\x238B\x238D\a\x370\x2\x2\x238C"+
		"\x238B\x3\x2\x2\x2\x238C\x238D\x3\x2\x2\x2\x238D\x2390\x3\x2\x2\x2\x238E"+
		"\x2390\x5\x30C\x187\x2\x238F\x2368\x3\x2\x2\x2\x238F\x2373\x3\x2\x2\x2"+
		"\x238F\x237A\x3\x2\x2\x2\x238F\x238E\x3\x2\x2\x2\x2390\x2CB\x3\x2\x2\x2"+
		"\x2391\x2392\a\r\x2\x2\x2392\x2393\a\x35\x2\x2\x2393\x2396\tl\x2\x2\x2394"+
		"\x2397\x5\x428\x215\x2\x2395\x2397\a\x354\x2\x2\x2396\x2394\x3\x2\x2\x2"+
		"\x2396\x2395\x3\x2\x2\x2\x2396\x2397\x3\x2\x2\x2\x2397\x2399\x3\x2\x2"+
		"\x2\x2398\x239A\a\x370\x2\x2\x2399\x2398\x3\x2\x2\x2\x2399\x239A\x3\x2"+
		"\x2\x2\x239A\x23E3\x3\x2\x2\x2\x239B\x239C\a\r\x2\x2\x239C\x23A6\tl\x2"+
		"\x2\x239D\x23A0\x5\x428\x215\x2\x239E\x23A0\a\x354\x2\x2\x239F\x239D\x3"+
		"\x2\x2\x2\x239F\x239E\x3\x2\x2\x2\x23A0\x23A4\x3\x2\x2\x2\x23A1\x23A2"+
		"\a\xBD\x2\x2\x23A2\x23A3\a\x18E\x2\x2\x23A3\x23A5\a\x357\x2\x2\x23A4\x23A1"+
		"\x3\x2\x2\x2\x23A4\x23A5\x3\x2\x2\x2\x23A5\x23A7\x3\x2\x2\x2\x23A6\x239F"+
		"\x3\x2\x2\x2\x23A6\x23A7\x3\x2\x2\x2\x23A7\x23A9\x3\x2\x2\x2\x23A8\x23AA"+
		"\a\x370\x2\x2\x23A9\x23A8\x3\x2\x2\x2\x23A9\x23AA\x3\x2\x2\x2\x23AA\x23E3"+
		"\x3\x2\x2\x2\x23AB\x23AC\a\x1C\x2\x2\x23AC\x23B9\tl\x2\x2\x23AD\x23B0"+
		"\x5\x428\x215\x2\x23AE\x23B0\a\x354\x2\x2\x23AF\x23AD\x3\x2\x2\x2\x23AF"+
		"\x23AE\x3\x2\x2\x2\x23B0\x23B7\x3\x2\x2\x2\x23B1\x23B2\a\xBD\x2\x2\x23B2"+
		"\x23B3\a\x36D\x2\x2\x23B3\x23B4\a\x123\x2\x2\x23B4\x23B5\a\x35B\x2\x2"+
		"\x23B5\x23B6\t\t\x2\x2\x23B6\x23B8\a\x36E\x2\x2\x23B7\x23B1\x3\x2\x2\x2"+
		"\x23B7\x23B8\x3\x2\x2\x2\x23B8\x23BA\x3\x2\x2\x2\x23B9\x23AF\x3\x2\x2"+
		"\x2\x23B9\x23BA\x3\x2\x2\x2\x23BA\x23BC\x3\x2\x2\x2\x23BB\x23BD\a\x370"+
		"\x2\x2\x23BC\x23BB\x3\x2\x2\x2\x23BC\x23BD\x3\x2\x2\x2\x23BD\x23E3\x3"+
		"\x2\x2\x2\x23BE\x23C0\a\x1C\x2\x2\x23BF\x23C1\a\x26E\x2\x2\x23C0\x23BF"+
		"\x3\x2\x2\x2\x23C0\x23C1\x3\x2\x2\x2\x23C1\x23C3\x3\x2\x2\x2\x23C2\x23C4"+
		"\a\x370\x2\x2\x23C3\x23C2\x3\x2\x2\x2\x23C3\x23C4\x3\x2\x2\x2\x23C4\x23E3"+
		"\x3\x2\x2\x2\x23C5\x23C6\a\x1C\x2\x2\x23C6\x23E3\x5\x428\x215\x2\x23C7"+
		"\x23C8\a\x92\x2\x2\x23C8\x23E3\x5\x428\x215\x2\x23C9\x23CA\a\x92\x2\x2"+
		"\x23CA\x23CD\tl\x2\x2\x23CB\x23CE\x5\x428\x215\x2\x23CC\x23CE\a\x354\x2"+
		"\x2\x23CD\x23CB\x3\x2\x2\x2\x23CD\x23CC\x3\x2\x2\x2\x23CD\x23CE\x3\x2"+
		"\x2\x2\x23CE\x23D0\x3\x2\x2\x2\x23CF\x23D1\a\x370\x2\x2\x23D0\x23CF\x3"+
		"\x2\x2\x2\x23D0\x23D1\x3\x2\x2\x2\x23D1\x23E3\x3\x2\x2\x2\x23D2\x23D4"+
		"\a\x92\x2\x2\x23D3\x23D5\a\x26E\x2\x2\x23D4\x23D3\x3\x2\x2\x2\x23D4\x23D5"+
		"\x3\x2\x2\x2\x23D5\x23D7\x3\x2\x2\x2\x23D6\x23D8\a\x370\x2\x2\x23D7\x23D6"+
		"\x3\x2\x2\x2\x23D7\x23D8\x3\x2\x2\x2\x23D8\x23E3\x3\x2\x2\x2\x23D9\x23DA"+
		"\a\x96\x2\x2\x23DA\x23DD\tl\x2\x2\x23DB\x23DE\x5\x428\x215\x2\x23DC\x23DE"+
		"\a\x354\x2\x2\x23DD\x23DB\x3\x2\x2\x2\x23DD\x23DC\x3\x2\x2\x2\x23DD\x23DE"+
		"\x3\x2\x2\x2\x23DE\x23E0\x3\x2\x2\x2\x23DF\x23E1\a\x370\x2\x2\x23E0\x23DF"+
		"\x3\x2\x2\x2\x23E0\x23E1\x3\x2\x2\x2\x23E1\x23E3\x3\x2\x2\x2\x23E2\x2391"+
		"\x3\x2\x2\x2\x23E2\x239B\x3\x2\x2\x2\x23E2\x23AB\x3\x2\x2\x2\x23E2\x23BE"+
		"\x3\x2\x2\x2\x23E2\x23C5\x3\x2\x2\x2\x23E2\x23C7\x3\x2\x2\x2\x23E2\x23C9"+
		"\x3\x2\x2\x2\x23E2\x23D2\x3\x2\x2\x2\x23E2\x23D9\x3\x2\x2\x2\x23E3\x2CD"+
		"\x3\x2\x2\x2\x23E4\x23E6\a\x15C\x2\x2\x23E5\x23E7\a\x355\x2\x2\x23E6\x23E5"+
		"\x3\x2\x2\x2\x23E6\x23E7\x3\x2\x2\x2\x23E7\x2CF\x3\x2\x2\x2\x23E8\x23EA"+
		"\a\x15D\x2\x2\x23E9\x23EB\a\x355\x2\x2\x23EA\x23E9\x3\x2\x2\x2\x23EA\x23EB"+
		"\x3\x2\x2\x2\x23EB\x2D1\x3\x2\x2\x2\x23EC\x23ED\a\xB4\x2\x2\x23ED\x23EF"+
		"\x5\x428\x215\x2\x23EE\x23F0\a\x370\x2\x2\x23EF\x23EE\x3\x2\x2\x2\x23EF"+
		"\x23F0\x3\x2\x2\x2\x23F0\x2D3\x3\x2\x2\x2\x23F1\x23F3\a\x9F\x2\x2\x23F2"+
		"\x23F4\a\x357\x2\x2\x23F3\x23F2\x3\x2\x2\x2\x23F3\x23F4\x3\x2\x2\x2\x23F4"+
		"\x2D5\x3\x2\x2\x2\x23F5\x23F8\a\x89\x2\x2\x23F6\x23F7\a\xBD\x2\x2\x23F7"+
		"\x23F9\a\x1CD\x2\x2\x23F8\x23F6\x3\x2\x2\x2\x23F8\x23F9\x3\x2\x2\x2\x23F9"+
		"\x2D7\x3\x2\x2\x2\x23FA\x23FD\a\xA0\x2\x2\x23FB\x23FC\a\xBD\x2\x2\x23FC"+
		"\x23FE\a\x1BD\x2\x2\x23FD\x23FB\x3\x2\x2\x2\x23FD\x23FE\x3\x2\x2\x2\x23FE"+
		"\x2D9\x3\x2\x2\x2\x23FF\x2401\a\x16\x2\x2\x2400\x2402\a\x355\x2\x2\x2401"+
		"\x2400\x3\x2\x2\x2\x2401\x2402\x3\x2\x2\x2\x2402\x2DB\x3\x2\x2\x2\x2403"+
		"\x2404\a,\x2\x2\x2404\x240E\a\x325\x2\x2\x2405\x2406\a\x36D\x2\x2\x2406"+
		"\x2407\a\x22F\x2\x2\x2407\x240B\a\x35B\x2\x2\x2408\x240C\x5\x31E\x190"+
		"\x2\x2409\x240C\x5\x428\x215\x2\x240A\x240C\a/\x2\x2\x240B\x2408\x3\x2"+
		"\x2\x2\x240B\x2409\x3\x2\x2\x2\x240B\x240A\x3\x2\x2\x2\x240C\x240D\x3"+
		"\x2\x2\x2\x240D\x240F\a\x36E\x2\x2\x240E\x2405\x3\x2\x2\x2\x240E\x240F"+
		"\x3\x2\x2\x2\x240F\x2411\x3\x2\x2\x2\x2410\x2412\a\x370\x2\x2\x2411\x2410"+
		"\x3\x2\x2\x2\x2411\x2412\x3\x2\x2\x2\x2412\x2DD\x3\x2\x2\x2\x2413\x2414"+
		"\a,\x2\x2\x2414\x2419\x5\x2E0\x171\x2\x2415\x2416\a\x36D\x2\x2\x2416\x2417"+
		"\x5\x3C2\x1E2\x2\x2417\x2418\a\x36E\x2\x2\x2418\x241A\x3\x2\x2\x2\x2419"+
		"\x2415\x3\x2\x2\x2\x2419\x241A\x3\x2\x2\x2\x241A\x241D\x3\x2\x2\x2\x241B"+
		"\x241C\a\xBD\x2\x2\x241C\x241E\x5\x2E2\x172\x2\x241D\x241B\x3\x2\x2\x2"+
		"\x241D\x241E\x3\x2\x2\x2\x241E\x2420\x3\x2\x2\x2\x241F\x2421\a\x370\x2"+
		"\x2\x2420\x241F\x3\x2\x2\x2\x2420\x2421\x3\x2\x2\x2\x2421\x2DF\x3\x2\x2"+
		"\x2\x2422\x2425\x5\x42A\x216\x2\x2423\x2425\x5\x426\x214\x2\x2424\x2422"+
		"\x3\x2\x2\x2\x2424\x2423\x3\x2\x2\x2\x2425\x2E1\x3\x2\x2\x2\x2426\x2429"+
		"\x5\x42A\x216\x2\x2427\x2428\a\x36F\x2\x2\x2428\x242A\x5\x42A\x216\x2"+
		"\x2429\x2427\x3\x2\x2\x2\x2429\x242A\x3\x2\x2\x2\x242A\x2E3\x3\x2\x2\x2"+
		"\x242B\x242C\a@\x2\x2\x242C\x242D\a\b\x2\x2\x242D\x242E\tm\x2\x2\x242E"+
		"\x2E5\x3\x2\x2\x2\x242F\x2431\a\x354\x2\x2\x2430\x2432\a\b\x2\x2\x2431"+
		"\x2430\x3\x2\x2\x2\x2431\x2432\x3\x2\x2\x2\x2432\x2433\x3\x2\x2\x2\x2433"+
		"\x2436\x5\x41E\x210\x2\x2434\x2435\a\x35B\x2\x2\x2435\x2437\x5\x312\x18A"+
		"\x2\x2436\x2434\x3\x2\x2\x2\x2436\x2437\x3\x2\x2\x2\x2437\x2E7\x3\x2\x2"+
		"\x2\x2438\x2439\a\xA4\x2\x2\x2439\x243A\a\x36D\x2\x2\x243A\x2441\x5\x2F0"+
		"\x179\x2\x243B\x243D\a\x36F\x2\x2\x243C\x243B\x3\x2\x2\x2\x243C\x243D"+
		"\x3\x2\x2\x2\x243D\x243E\x3\x2\x2\x2\x243E\x2440\x5\x2EA\x176\x2\x243F"+
		"\x243C\x3\x2\x2\x2\x2440\x2443\x3\x2\x2\x2\x2441\x243F\x3\x2\x2\x2\x2441"+
		"\x2442\x3\x2\x2\x2\x2442\x2444\x3\x2\x2\x2\x2443\x2441\x3\x2\x2\x2\x2444"+
		"\x2445\a\x36E\x2\x2\x2445\x2E9\x3\x2\x2\x2\x2446\x2447\a\x80\x2\x2\x2447"+
		"\x244B\a_\x2\x2\x2448\x2449\aX\x2\x2\x2449\x244B\x5\x428\x215\x2\x244A"+
		"\x2446\x3\x2\x2\x2\x244A\x2448\x3\x2\x2\x2\x244B\x244D\x3\x2\x2\x2\x244C"+
		"\x244E\tn\x2\x2\x244D\x244C\x3\x2\x2\x2\x244D\x244E\x3\x2\x2\x2\x244E"+
		"\x2451\x3\x2\x2\x2\x244F\x2451\a\xB0\x2\x2\x2450\x244A\x3\x2\x2\x2\x2450"+
		"\x244F\x3\x2\x2\x2\x2451\x2452\x3\x2\x2\x2\x2452\x2453\a\x36D\x2\x2\x2453"+
		"\x2454\x5\x3F8\x1FD\x2\x2454\x2455\a\x36E\x2\x2\x2455\x245C\x3\x2\x2\x2"+
		"\x2456\x2457\a\x15\x2\x2\x2457\x2458\a\x36D\x2\x2\x2458\x2459\x5\x32A"+
		"\x196\x2\x2459\x245A\a\x36E\x2\x2\x245A\x245C\x3\x2\x2\x2\x245B\x2450"+
		"\x3\x2\x2\x2\x245B\x2456\x3\x2\x2\x2\x245C\x2EB\x3\x2\x2\x2\x245D\x245E"+
		"\a\x270\x2\x2\x245E\x2460\a\x36D\x2\x2\x245F\x2461\to\x2\x2\x2460\x245F"+
		"\x3\x2\x2\x2\x2460\x2461\x3\x2\x2\x2\x2461\x2462\x3\x2\x2\x2\x2462\x2463"+
		"\x5\x2EE\x178\x2\x2463\x2464\a\x36E\x2\x2\x2464\x2ED\x3\x2\x2\x2\x2465"+
		"\x2466\a\x356\x2\x2\x2466\x2467\a\x368\x2\x2\x2467\x2468\a\x356\x2\x2"+
		"\x2468\x2EF\x3\x2\x2\x2\x2469\x2470\x5\x2F2\x17A\x2\x246A\x246C\a\x36F"+
		"\x2\x2\x246B\x246A\x3\x2\x2\x2\x246B\x246C\x3\x2\x2\x2\x246C\x246D\x3"+
		"\x2\x2\x2\x246D\x246F\x5\x2F2\x17A\x2\x246E\x246B\x3\x2\x2\x2\x246F\x2472"+
		"\x3\x2\x2\x2\x2470\x246E\x3\x2\x2\x2\x2470\x2471\x3\x2\x2\x2\x2471\x2F1"+
		"\x3\x2\x2\x2\x2472\x2470\x3\x2\x2\x2\x2473\x2477\x5\x2F4\x17B\x2\x2474"+
		"\x2477\x5\x2F6\x17C\x2\x2475\x2477\x5\x2FA\x17E\x2\x2476\x2473\x3\x2\x2"+
		"\x2\x2476\x2474\x3\x2\x2\x2\x2476\x2475\x3\x2\x2\x2\x2477\x2F3\x3\x2\x2"+
		"\x2\x2478\x247F\x5\x428\x215\x2\x2479\x2480\x5\x41E\x210\x2\x247A\x247B"+
		"\a\b\x2\x2\x247B\x247D\x5\x312\x18A\x2\x247C\x247E\a\x300\x2\x2\x247D"+
		"\x247C\x3\x2\x2\x2\x247D\x247E\x3\x2\x2\x2\x247E\x2480\x3\x2\x2\x2\x247F"+
		"\x2479\x3\x2\x2\x2\x247F\x247A\x3\x2\x2\x2\x2480\x2483\x3\x2\x2\x2\x2481"+
		"\x2482\a\x1A\x2\x2\x2482\x2484\x5\x428\x215\x2\x2483\x2481\x3\x2\x2\x2"+
		"\x2483\x2484\x3\x2\x2\x2\x2484\x2486\x3\x2\x2\x2\x2485\x2487\x5\x406\x204"+
		"\x2\x2486\x2485\x3\x2\x2\x2\x2486\x2487\x3\x2\x2\x2\x2487\x249D\x3\x2"+
		"\x2\x2\x2488\x2489\a\x1E\x2\x2\x2489\x248B\x5\x428\x215\x2\x248A\x2488"+
		"\x3\x2\x2\x2\x248A\x248B\x3\x2\x2\x2\x248B\x248C\x3\x2\x2\x2\x248C\x248E"+
		"\x5\x408\x205\x2\x248D\x248F\x5\x408\x205\x2\x248E\x248D\x3\x2\x2\x2\x248E"+
		"\x248F\x3\x2\x2\x2\x248F\x249E\x3\x2\x2\x2\x2490\x2496\aS\x2\x2\x2491"+
		"\x2492\a\x36D\x2\x2\x2492\x2493\a\x355\x2\x2\x2493\x2494\a\x36F\x2\x2"+
		"\x2494\x2495\a\x355\x2\x2\x2495\x2497\a\x36E\x2\x2\x2496\x2491\x3\x2\x2"+
		"\x2\x2496\x2497\x3\x2\x2\x2\x2497\x249B\x3\x2\x2\x2\x2498\x2499\aj\x2"+
		"\x2\x2499\x249A\aG\x2\x2\x249A\x249C\a\x8B\x2\x2\x249B\x2498\x3\x2\x2"+
		"\x2\x249B\x249C\x3\x2\x2\x2\x249C\x249E\x3\x2\x2\x2\x249D\x248A\x3\x2"+
		"\x2\x2\x249D\x2490\x3\x2\x2\x2\x249D\x249E\x3\x2\x2\x2\x249E\x24A0\x3"+
		"\x2\x2\x2\x249F\x24A1\a\x94\x2\x2\x24A0\x249F\x3\x2\x2\x2\x24A0\x24A1"+
		"\x3\x2\x2\x2\x24A1\x24A5\x3\x2\x2\x2\x24A2\x24A4\x5\x2F8\x17D\x2\x24A3"+
		"\x24A2\x3\x2\x2\x2\x24A4\x24A7\x3\x2\x2\x2\x24A5\x24A3\x3\x2\x2\x2\x24A5"+
		"\x24A6\x3\x2\x2\x2\x24A6\x2F5\x3\x2\x2\x2\x24A7\x24A5\x3\x2\x2\x2\x24A8"+
		"\x24A9\x5\x428\x215\x2\x24A9\x24AA\tp\x2\x2\x24AA\x24AE\x5\x312\x18A\x2"+
		"\x24AB\x24AF\a\x18F\x2\x2\x24AC\x24AD\aj\x2\x2\x24AD\x24AF\a\x18F\x2\x2"+
		"\x24AE\x24AB\x3\x2\x2\x2\x24AE\x24AC\x3\x2\x2\x2\x24AE\x24AF\x3\x2\x2"+
		"\x2\x24AF\x2F7\x3\x2\x2\x2\x24B0\x24B1\a\x1E\x2\x2\x24B1\x24B3\x5\x428"+
		"\x215\x2\x24B2\x24B0\x3\x2\x2\x2\x24B2\x24B3\x3\x2\x2\x2\x24B3\x24D9\x3"+
		"\x2\x2\x2\x24B4\x24B5\a\x80\x2\x2\x24B5\x24B8\a_\x2\x2\x24B6\x24B8\a\xB0"+
		"\x2\x2\x24B7\x24B4\x3\x2\x2\x2\x24B7\x24B6\x3\x2\x2\x2\x24B8\x24BA\x3"+
		"\x2\x2\x2\x24B9\x24BB\x5\x404\x203\x2\x24BA\x24B9\x3\x2\x2\x2\x24BA\x24BB"+
		"\x3\x2\x2\x2\x24BB\x24BD\x3\x2\x2\x2\x24BC\x24BE\x5\x300\x181\x2\x24BD"+
		"\x24BC\x3\x2\x2\x2\x24BD\x24BE\x3\x2\x2\x2\x24BE\x24DA\x3\x2\x2\x2\x24BF"+
		"\x24C3\a\x15\x2\x2\x24C0\x24C1\aj\x2\x2\x24C1\x24C2\aG\x2\x2\x24C2\x24C4"+
		"\a\x8B\x2\x2\x24C3\x24C0\x3\x2\x2\x2\x24C3\x24C4\x3\x2\x2\x2\x24C4\x24C5"+
		"\x3\x2\x2\x2\x24C5\x24C6\a\x36D\x2\x2\x24C6\x24C7\x5\x32A\x196\x2\x24C7"+
		"\x24C8\a\x36E\x2\x2\x24C8\x24DA\x3\x2\x2\x2\x24C9\x24CA\aH\x2\x2\x24CA"+
		"\x24CC\a_\x2\x2\x24CB\x24C9\x3\x2\x2\x2\x24CB\x24CC\x3\x2\x2\x2\x24CC"+
		"\x24CD\x3\x2\x2\x2\x24CD\x24CE\a\x8A\x2\x2\x24CE\x24CF\x5\x3EA\x1F6\x2"+
		"\x24CF\x24D0\a\x36D\x2\x2\x24D0\x24D1\x5\x3FE\x200\x2\x24D1\x24D3\a\x36E"+
		"\x2\x2\x24D2\x24D4\x5\x2FC\x17F\x2\x24D3\x24D2\x3\x2\x2\x2\x24D3\x24D4"+
		"\x3\x2\x2\x2\x24D4\x24D6\x3\x2\x2\x2\x24D5\x24D7\x5\x2FE\x180\x2\x24D6"+
		"\x24D5\x3\x2\x2\x2\x24D6\x24D7\x3\x2\x2\x2\x24D7\x24DA\x3\x2\x2\x2\x24D8"+
		"\x24DA\x5\x406\x204\x2\x24D9\x24B7\x3\x2\x2\x2\x24D9\x24BF\x3\x2\x2\x2"+
		"\x24D9\x24CB\x3\x2\x2\x2\x24D9\x24D8\x3\x2\x2\x2\x24DA\x2F9\x3\x2\x2\x2"+
		"\x24DB\x24DC\a\x1E\x2\x2\x24DC\x24DE\x5\x428\x215\x2\x24DD\x24DB\x3\x2"+
		"\x2\x2\x24DD\x24DE\x3\x2\x2\x2\x24DE\x2525\x3\x2\x2\x2\x24DF\x24E0\a\x80"+
		"\x2\x2\x24E0\x24E3\a_\x2\x2\x24E1\x24E3\a\xB0\x2\x2\x24E2\x24DF\x3\x2"+
		"\x2\x2\x24E2\x24E1\x3\x2\x2\x2\x24E3\x24E5\x3\x2\x2\x2\x24E4\x24E6\x5"+
		"\x404\x203\x2\x24E5\x24E4\x3\x2\x2\x2\x24E5\x24E6\x3\x2\x2\x2\x24E6\x24E7"+
		"\x3\x2\x2\x2\x24E7\x24E8\a\x36D\x2\x2\x24E8\x24E9\x5\x3F8\x1FD\x2\x24E9"+
		"\x24EB\a\x36E\x2\x2\x24EA\x24EC\x5\x300\x181\x2\x24EB\x24EA\x3\x2\x2\x2"+
		"\x24EB\x24EC\x3\x2\x2\x2\x24EC\x24EF\x3\x2\x2\x2\x24ED\x24EE\ap\x2\x2"+
		"\x24EE\x24F0\x5\x428\x215\x2\x24EF\x24ED\x3\x2\x2\x2\x24EF\x24F0\x3\x2"+
		"\x2\x2\x24F0\x2526\x3\x2\x2\x2\x24F1\x24F5\a\x15\x2\x2\x24F2\x24F3\aj"+
		"\x2\x2\x24F3\x24F4\aG\x2\x2\x24F4\x24F6\a\x8B\x2\x2\x24F5\x24F2\x3\x2"+
		"\x2\x2\x24F5\x24F6\x3\x2\x2\x2\x24F6\x24F7\x3\x2\x2\x2\x24F7\x24F8\a\x36D"+
		"\x2\x2\x24F8\x24F9\x5\x32A\x196\x2\x24F9\x24FA\a\x36E\x2\x2\x24FA\x2526"+
		"\x3\x2\x2\x2\x24FB\x24FD\a/\x2\x2\x24FC\x24FE\a\x36D\x2\x2\x24FD\x24FC"+
		"\x3\x2\x2\x2\x24FD\x24FE\x3\x2\x2\x2\x24FE\x250B\x3\x2\x2\x2\x24FF\x2504"+
		"\a\x357\x2\x2\x2500\x2504\a\x376\x2\x2\x2501\x2504\x5\x38C\x1C7\x2\x2502"+
		"\x2504\a\x355\x2\x2\x2503\x24FF\x3\x2\x2\x2\x2503\x2500\x3\x2\x2\x2\x2503"+
		"\x2501\x3\x2\x2\x2\x2503\x2502\x3\x2\x2\x2\x2504\x2505\x3\x2\x2\x2\x2505"+
		"\x2503\x3\x2\x2\x2\x2505\x2506\x3\x2\x2\x2\x2506\x250C\x3\x2\x2\x2\x2507"+
		"\x2508\a\x1B2\x2\x2\x2508\x2509\a\x265\x2\x2\x2509\x250A\aG\x2\x2\x250A"+
		"\x250C\x5\x3EA\x1F6\x2\x250B\x2503\x3\x2\x2\x2\x250B\x2507\x3\x2\x2\x2"+
		"\x250C\x250E\x3\x2\x2\x2\x250D\x250F\a\x36E\x2\x2\x250E\x250D\x3\x2\x2"+
		"\x2\x250E\x250F\x3\x2\x2\x2\x250F\x2510\x3\x2\x2\x2\x2510\x2511\aG\x2"+
		"\x2\x2511\x2526\x5\x428\x215\x2\x2512\x2513\aH\x2\x2\x2513\x2514\a_\x2"+
		"\x2\x2514\x2515\a\x36D\x2\x2\x2515\x2516\x5\x3FE\x200\x2\x2516\x2517\a"+
		"\x36E\x2\x2\x2517\x2518\a\x8A\x2\x2\x2518\x251D\x5\x3EA\x1F6\x2\x2519"+
		"\x251A\a\x36D\x2\x2\x251A\x251B\x5\x3FE\x200\x2\x251B\x251C\a\x36E\x2"+
		"\x2\x251C\x251E\x3\x2\x2\x2\x251D\x2519\x3\x2\x2\x2\x251D\x251E\x3\x2"+
		"\x2\x2\x251E\x2520\x3\x2\x2\x2\x251F\x2521\x5\x2FC\x17F\x2\x2520\x251F"+
		"\x3\x2\x2\x2\x2520\x2521\x3\x2\x2\x2\x2521\x2523\x3\x2\x2\x2\x2522\x2524"+
		"\x5\x2FE\x180\x2\x2523\x2522\x3\x2\x2\x2\x2523\x2524\x3\x2\x2\x2\x2524"+
		"\x2526\x3\x2\x2\x2\x2525\x24E2\x3\x2\x2\x2\x2525\x24F1\x3\x2\x2\x2\x2525"+
		"\x24FB\x3\x2\x2\x2\x2525\x2512\x3\x2\x2\x2\x2526\x2FB\x3\x2\x2\x2\x2527"+
		"\x2528\ap\x2\x2\x2528\x2530\a\x30\x2\x2\x2529\x252A\a\x1B3\x2\x2\x252A"+
		"\x2531\a\xC5\x2\x2\x252B\x2531\a\x13\x2\x2\x252C\x252D\a\x9E\x2\x2\x252D"+
		"\x2531\ak\x2\x2\x252E\x252F\a\x9E\x2\x2\x252F\x2531\a/\x2\x2\x2530\x2529"+
		"\x3\x2\x2\x2\x2530\x252B\x3\x2\x2\x2\x2530\x252C\x3\x2\x2\x2\x2530\x252E"+
		"\x3\x2\x2\x2\x2531\x2FD\x3\x2\x2\x2\x2532\x2533\ap\x2\x2\x2533\x253B\a"+
		"\xB2\x2\x2\x2534\x2535\a\x1B3\x2\x2\x2535\x253C\a\xC5\x2\x2\x2536\x253C"+
		"\a\x13\x2\x2\x2537\x2538\a\x9E\x2\x2\x2538\x253C\ak\x2\x2\x2539\x253A"+
		"\a\x9E\x2\x2\x253A\x253C\a/\x2\x2\x253B\x2534\x3\x2\x2\x2\x253B\x2536"+
		"\x3\x2\x2\x2\x253B\x2537\x3\x2\x2\x2\x253B\x2539\x3\x2\x2\x2\x253C\x2FF"+
		"\x3\x2\x2\x2\x253D\x253E\a\xBD\x2\x2\x253E\x253F\a\x36D\x2\x2\x253F\x2544"+
		"\x5\x302\x182\x2\x2540\x2541\a\x36F\x2\x2\x2541\x2543\x5\x302\x182\x2"+
		"\x2542\x2540\x3\x2\x2\x2\x2543\x2546\x3\x2\x2\x2\x2544\x2542\x3\x2\x2"+
		"\x2\x2544\x2545\x3\x2\x2\x2\x2545\x2547\x3\x2\x2\x2\x2546\x2544\x3\x2"+
		"\x2\x2\x2547\x2548\a\x36E\x2\x2\x2548\x301\x3\x2\x2\x2\x2549\x254C\x5"+
		"\x42A\x216\x2\x254A\x254C\x5\x426\x214\x2\x254B\x2549\x3\x2\x2\x2\x254B"+
		"\x254A\x3\x2\x2\x2\x254C\x254D\x3\x2\x2\x2\x254D\x2552\a\x35B\x2\x2\x254E"+
		"\x2553\x5\x42A\x216\x2\x254F\x2553\x5\x426\x214\x2\x2550\x2553\x5\x402"+
		"\x202\x2\x2551\x2553\a\x355\x2\x2\x2552\x254E\x3\x2\x2\x2\x2552\x254F"+
		"\x3\x2\x2\x2\x2552\x2550\x3\x2\x2\x2\x2552\x2551\x3\x2\x2\x2\x2553\x303"+
		"\x3\x2\x2\x2\x2554\x2555\a.\x2\x2\x2555\x2575\x5\x400\x201\x2\x2556\x2560"+
		"\a*\x2\x2\x2557\x255E\x5\x306\x184\x2\x2558\x2559\aG\x2\x2\x2559\x255C"+
		"\a\xB2\x2\x2\x255A\x255B\am\x2\x2\x255B\x255D\x5\x3FE\x200\x2\x255C\x255A"+
		"\x3\x2\x2\x2\x255C\x255D\x3\x2\x2\x2\x255D\x255F\x3\x2\x2\x2\x255E\x2558"+
		"\x3\x2\x2\x2\x255E\x255F\x3\x2\x2\x2\x255F\x2561\x3\x2\x2\x2\x2560\x2557"+
		"\x3\x2\x2\x2\x2560\x2561\x3\x2\x2\x2\x2561\x2576\x3\x2\x2\x2\x2562\x2564"+
		"\tq\x2\x2\x2563\x2562\x3\x2\x2\x2\x2563\x2564\x3\x2\x2\x2\x2564\x2566"+
		"\x3\x2\x2\x2\x2565\x2567\a\x216\x2\x2\x2566\x2565\x3\x2\x2\x2\x2566\x2567"+
		"\x3\x2\x2\x2\x2567\x2568\x3\x2\x2\x2\x2568\x2569\a*\x2\x2\x2569\x256A"+
		"\aG\x2\x2\x256A\x2573\x5\x1CA\xE6\x2\x256B\x2571\aG\x2\x2\x256C\x256D"+
		"\a\x87\x2\x2\x256D\x2572\a\x1C7\x2\x2\x256E\x2572\a\xB2\x2\x2\x256F\x2570"+
		"\am\x2\x2\x2570\x2572\x5\x3FE\x200\x2\x2571\x256C\x3\x2\x2\x2\x2571\x256E"+
		"\x3\x2\x2\x2\x2571\x256F\x3\x2\x2\x2\x2572\x2574\x3\x2\x2\x2\x2573\x256B"+
		"\x3\x2\x2\x2\x2573\x2574\x3\x2\x2\x2\x2574\x2576\x3\x2\x2\x2\x2575\x2556"+
		"\x3\x2\x2\x2\x2575\x2563\x3\x2\x2\x2\x2576\x2578\x3\x2\x2\x2\x2577\x2579"+
		"\a\x370\x2\x2\x2578\x2577\x3\x2\x2\x2\x2578\x2579\x3\x2\x2\x2\x2579\x305"+
		"\x3\x2\x2\x2\x257A\x257C\x5\x308\x185\x2\x257B\x257A\x3\x2\x2\x2\x257C"+
		"\x257F\x3\x2\x2\x2\x257D\x257B\x3\x2\x2\x2\x257D\x257E\x3\x2\x2\x2\x257E"+
		"\x2580\x3\x2\x2\x2\x257F\x257D\x3\x2\x2\x2\x2580\x2581\aG\x2\x2\x2581"+
		"\x2582\x5\x1CA\xE6\x2\x2582\x307\x3\x2\x2\x2\x2583\x2589\tH\x2\x2\x2584"+
		"\x2589\tr\x2\x2\x2585\x2589\ts\x2\x2\x2586\x2589\tt\x2\x2\x2587\x2589"+
		"\a\x25B\x2\x2\x2588\x2583\x3\x2\x2\x2\x2588\x2584\x3\x2\x2\x2\x2588\x2585"+
		"\x3\x2\x2\x2\x2588\x2586\x3\x2\x2\x2\x2588\x2587\x3\x2\x2\x2\x2589\x309"+
		"\x3\x2\x2\x2\x258A\x2594\a\x44\x2\x2\x258B\x2592\a\x1B2\x2\x2\x258C\x2592"+
		"\a\x1DE\x2\x2\x258D\x2592\a\x14E\x2\x2\x258E\x2592\a\x17E\x2\x2\x258F"+
		"\x2590\tu\x2\x2\x2590\x2592\x5\x312\x18A\x2\x2591\x258B\x3\x2\x2\x2\x2591"+
		"\x258C\x3\x2\x2\x2\x2591\x258D\x3\x2\x2\x2\x2591\x258E\x3\x2\x2\x2\x2591"+
		"\x258F\x3\x2\x2\x2\x2591\x2592\x3\x2\x2\x2\x2592\x2593\x3\x2\x2\x2\x2593"+
		"\x2595\aK\x2\x2\x2594\x2591\x3\x2\x2\x2\x2594\x2595\x3\x2\x2\x2\x2595"+
		"\x2597\x3\x2\x2\x2\x2596\x2598\a\x15B\x2\x2\x2597\x2596\x3\x2\x2\x2\x2597"+
		"\x2598\x3\x2\x2\x2\x2598\x2599\x3\x2\x2\x2\x2599\x25A3\x5\x400\x201\x2"+
		"\x259A\x259B\a\\\x2\x2\x259B\x25A0\a\x354\x2\x2\x259C\x259D\a\x36F\x2"+
		"\x2\x259D\x259F\a\x354\x2\x2\x259E\x259C\x3\x2\x2\x2\x259F\x25A2\x3\x2"+
		"\x2\x2\x25A0\x259E\x3\x2\x2\x2\x25A0\x25A1\x3\x2\x2\x2\x25A1\x25A4\x3"+
		"\x2\x2\x2\x25A2\x25A0\x3\x2\x2\x2\x25A3\x259A\x3\x2\x2\x2\x25A3\x25A4"+
		"\x3\x2\x2\x2\x25A4\x25A6\x3\x2\x2\x2\x25A5\x25A7\a\x370\x2\x2\x25A6\x25A5"+
		"\x3\x2\x2\x2\x25A6\x25A7\x3\x2\x2\x2\x25A7\x30B\x3\x2\x2\x2\x25A8\x25A9"+
		"\a\x9E\x2\x2\x25A9\x25AD\x5\x428\x215\x2\x25AA\x25AE\x5\x428\x215\x2\x25AB"+
		"\x25AE\x5\x310\x189\x2\x25AC\x25AE\x5\x402\x202\x2\x25AD\x25AA\x3\x2\x2"+
		"\x2\x25AD\x25AB\x3\x2\x2\x2\x25AD\x25AC\x3\x2\x2\x2\x25AE\x25B0\x3\x2"+
		"\x2\x2\x25AF\x25B1\a\x370\x2\x2\x25B0\x25AF\x3\x2\x2\x2\x25B0\x25B1\x3"+
		"\x2\x2\x2\x25B1\x25E6\x3\x2\x2\x2\x25B2\x25B3\a\x9E\x2\x2\x25B3\x25B4"+
		"\a\xA2\x2\x2\x25B4\x25B5\tv\x2\x2\x25B5\x25B7\x5\x402\x202\x2\x25B6\x25B8"+
		"\a\x370\x2\x2\x25B7\x25B6\x3\x2\x2\x2\x25B7\x25B8\x3\x2\x2\x2\x25B8\x25E6"+
		"\x3\x2\x2\x2\x25B9\x25BA\a\x9E\x2\x2\x25BA\x25BB\a\x93\x2\x2\x25BB\x25BD"+
		"\t\x2\x2\x2\x25BC\x25BE\a\x370\x2\x2\x25BD\x25BC\x3\x2\x2\x2\x25BD\x25BE"+
		"\x3\x2\x2\x2\x25BE\x25E6\x3\x2\x2\x2\x25BF\x25C0\a\x9E\x2\x2\x25C0\x25C1"+
		"\a\xAB\x2\x2\x25C1\x25C2\a\x174\x2\x2\x25C2\x25CC\a\x181\x2\x2\x25C3\x25C4"+
		"\a\x87\x2\x2\x25C4\x25CD\a\x25D\x2\x2\x25C5\x25C6\a\x87\x2\x2\x25C6\x25CD"+
		"\a\x102\x2\x2\x25C7\x25C8\a\x201\x2\x2\x25C8\x25CD\a\x87\x2\x2\x25C9\x25CD"+
		"\a\x231\x2\x2\x25CA\x25CD\a\x227\x2\x2\x25CB\x25CD\a\x355\x2\x2\x25CC"+
		"\x25C3\x3\x2\x2\x2\x25CC\x25C5\x3\x2\x2\x2\x25CC\x25C7\x3\x2\x2\x2\x25CC"+
		"\x25C9\x3\x2\x2\x2\x25CC\x25CA\x3\x2\x2\x2\x25CC\x25CB\x3\x2\x2\x2\x25CD"+
		"\x25CF\x3\x2\x2\x2\x25CE\x25D0\a\x370\x2\x2\x25CF\x25CE\x3\x2\x2\x2\x25CF"+
		"\x25D0\x3\x2\x2\x2\x25D0\x25E6\x3\x2\x2\x2\x25D1\x25D2\a\x9E\x2\x2\x25D2"+
		"\x25D3\aT\x2\x2\x25D3\x25D4\x5\x3EA\x1F6\x2\x25D4\x25D6\x5\x402\x202\x2"+
		"\x25D5\x25D7\a\x370\x2\x2\x25D6\x25D5\x3\x2\x2\x2\x25D6\x25D7\x3\x2\x2"+
		"\x2\x25D7\x25E6\x3\x2\x2\x2\x25D8\x25D9\a\x9E\x2\x2\x25D9\x25DE\x5\x30E"+
		"\x188\x2\x25DA\x25DB\a\x36F\x2\x2\x25DB\x25DD\x5\x30E\x188\x2\x25DC\x25DA"+
		"\x3\x2\x2\x2\x25DD\x25E0\x3\x2\x2\x2\x25DE\x25DC\x3\x2\x2\x2\x25DE\x25DF"+
		"\x3\x2\x2\x2\x25DF\x25E1\x3\x2\x2\x2\x25E0\x25DE\x3\x2\x2\x2\x25E1\x25E2"+
		"\x5\x402\x202\x2\x25E2\x25E6\x3\x2\x2\x2\x25E3\x25E4\a\x9E\x2\x2\x25E4"+
		"\x25E6\x5\x3A4\x1D3\x2\x25E5\x25A8\x3\x2\x2\x2\x25E5\x25B2\x3\x2\x2\x2"+
		"\x25E5\x25B9\x3\x2\x2\x2\x25E5\x25BF\x3\x2\x2\x2\x25E5\x25D1\x3\x2\x2"+
		"\x2\x25E5\x25D8\x3\x2\x2\x2\x25E5\x25E3\x3\x2\x2\x2\x25E6\x30D\x3\x2\x2"+
		"\x2\x25E7\x25E8\tw\x2\x2\x25E8\x30F\x3\x2\x2\x2\x25E9\x25EC\x5\x422\x212"+
		"\x2\x25EA\x25EC\a\x354\x2\x2\x25EB\x25E9\x3\x2\x2\x2\x25EB\x25EA\x3\x2"+
		"\x2\x2\x25EC\x311\x3\x2\x2\x2\x25ED\x25EE\b\x18A\x1\x2\x25EE\x25F7\x5"+
		"\x316\x18C\x2\x25EF\x25F7\x5\x38C\x1C7\x2\x25F0\x25F7\x5\x318\x18D\x2"+
		"\x25F1\x25F7\x5\x3F6\x1FC\x2\x25F2\x25F7\x5\x31C\x18F\x2\x25F3\x25F7\x5"+
		"\x31A\x18E\x2\x25F4\x25F7\x5\x3CC\x1E7\x2\x25F5\x25F7\a\x276\x2\x2\x25F6"+
		"\x25ED\x3\x2\x2\x2\x25F6\x25EF\x3\x2\x2\x2\x25F6\x25F0\x3\x2\x2\x2\x25F6"+
		"\x25F1\x3\x2\x2\x2\x25F6\x25F2\x3\x2\x2\x2\x25F6\x25F3\x3\x2\x2\x2\x25F6"+
		"\x25F4\x3\x2\x2\x2\x25F6\x25F5\x3\x2\x2\x2\x25F7\x260D\x3\x2\x2\x2\x25F8"+
		"\x25F9\f\a\x2\x2\x25F9\x25FA\tx\x2\x2\x25FA\x260C\x5\x312\x18A\b\x25FB"+
		"\x25FC\f\x6\x2\x2\x25FC\x25FD\ty\x2\x2\x25FD\x260C\x5\x312\x18A\a\x25FE"+
		"\x25FF\f\r\x2\x2\x25FF\x2604\a\x368\x2\x2\x2600\x2605\x5\x39A\x1CE\x2"+
		"\x2601\x2605\x5\x39E\x1D0\x2\x2602\x2605\x5\x3A2\x1D2\x2\x2603\x2605\x5"+
		"\x3A6\x1D4\x2\x2604\x2600\x3\x2\x2\x2\x2604\x2601\x3\x2\x2\x2\x2604\x2602"+
		"\x3\x2\x2\x2\x2604\x2603\x3\x2\x2\x2\x2605\x260C\x3\x2\x2\x2\x2606\x2607"+
		"\f\f\x2\x2\x2607\x2608\a\x1A\x2\x2\x2608\x260C\x5\x428\x215\x2\x2609\x260A"+
		"\f\x5\x2\x2\x260A\x260C\x5\x314\x18B\x2\x260B\x25F8\x3\x2\x2\x2\x260B"+
		"\x25FB\x3\x2\x2\x2\x260B\x25FE\x3\x2\x2\x2\x260B\x2606\x3\x2\x2\x2\x260B"+
		"\x2609\x3\x2\x2\x2\x260C\x260F\x3\x2\x2\x2\x260D\x260B\x3\x2\x2\x2\x260D"+
		"\x260E\x3\x2\x2\x2\x260E\x313\x3\x2\x2\x2\x260F\x260D\x3\x2\x2\x2\x2610"+
		"\x2611\a\xC2\x2\x2\x2611\x2612\a\x24D\x2\x2\x2612\x2613\a\x275\x2\x2\x2613"+
		"\x2614\x5\x312\x18A\x2\x2614\x315\x3\x2\x2\x2\x2615\x261A\a/\x2\x2\x2616"+
		"\x261A\ak\x2\x2\x2617\x261A\a\x354\x2\x2\x2618\x261A\x5\x422\x212\x2\x2619"+
		"\x2615\x3\x2\x2\x2\x2619\x2616\x3\x2\x2\x2\x2619\x2617\x3\x2\x2\x2\x2619"+
		"\x2618\x3\x2\x2\x2\x261A\x317\x3\x2\x2\x2\x261B\x261C\a\x14\x2\x2\x261C"+
		"\x261E\x5\x312\x18A\x2\x261D\x261F\x5\x3AA\x1D6\x2\x261E\x261D\x3\x2\x2"+
		"\x2\x261F\x2620\x3\x2\x2\x2\x2620\x261E\x3\x2\x2\x2\x2620\x2621\x3\x2"+
		"\x2\x2\x2621\x2624\x3\x2\x2\x2\x2622\x2623\a;\x2\x2\x2623\x2625\x5\x312"+
		"\x18A\x2\x2624\x2622\x3\x2\x2\x2\x2624\x2625\x3\x2\x2\x2\x2625\x2626\x3"+
		"\x2\x2\x2\x2626\x2627\a<\x2\x2\x2627\x2635\x3\x2\x2\x2\x2628\x262A\a\x14"+
		"\x2\x2\x2629\x262B\x5\x3AC\x1D7\x2\x262A\x2629\x3\x2\x2\x2\x262B\x262C"+
		"\x3\x2\x2\x2\x262C\x262A\x3\x2\x2\x2\x262C\x262D\x3\x2\x2\x2\x262D\x2630"+
		"\x3\x2\x2\x2\x262E\x262F\a;\x2\x2\x262F\x2631\x5\x312\x18A\x2\x2630\x262E"+
		"\x3\x2\x2\x2\x2630\x2631\x3\x2\x2\x2\x2631\x2632\x3\x2\x2\x2\x2632\x2633"+
		"\a<\x2\x2\x2633\x2635\x3\x2\x2\x2\x2634\x261B\x3\x2\x2\x2\x2634\x2628"+
		"\x3\x2\x2\x2\x2635\x319\x3\x2\x2\x2\x2636\x2637\a\x378\x2\x2\x2637\x263B"+
		"\x5\x312\x18A\x2\x2638\x2639\tz\x2\x2\x2639\x263B\x5\x312\x18A\x2\x263A"+
		"\x2636\x3\x2\x2\x2\x263A\x2638\x3\x2\x2\x2\x263B\x31B\x3\x2\x2\x2\x263C"+
		"\x263D\a\x36D\x2\x2\x263D\x263E\x5\x312\x18A\x2\x263E\x263F\a\x36E\x2"+
		"\x2\x263F\x2645\x3\x2\x2\x2\x2640\x2641\a\x36D\x2\x2\x2641\x2642\x5\x320"+
		"\x191\x2\x2642\x2643\a\x36E\x2\x2\x2643\x2645\x3\x2\x2\x2\x2644\x263C"+
		"\x3\x2\x2\x2\x2644\x2640\x3\x2\x2\x2\x2645\x31D\x3\x2\x2\x2\x2646\x264F"+
		"\ak\x2\x2\x2647\x264F\x5\x422\x212\x2\x2648\x264F\x5\x38C\x1C7\x2\x2649"+
		"\x264F\a\x354\x2\x2\x264A\x264B\a\x36D\x2\x2\x264B\x264C\x5\x31E\x190"+
		"\x2\x264C\x264D\a\x36E\x2\x2\x264D\x264F\x3\x2\x2\x2\x264E\x2646\x3\x2"+
		"\x2\x2\x264E\x2647\x3\x2\x2\x2\x264E\x2648\x3\x2\x2\x2\x264E\x2649\x3"+
		"\x2\x2\x2\x264E\x264A\x3\x2\x2\x2\x264F\x31F\x3\x2\x2\x2\x2650\x2651\x5"+
		"\x1CC\xE7\x2\x2651\x321\x3\x2\x2\x2\x2652\x2653\a\xBD\x2\x2\x2653\x2658"+
		"\x5\x324\x193\x2\x2654\x2655\a\x36F\x2\x2\x2655\x2657\x5\x324\x193\x2"+
		"\x2656\x2654\x3\x2\x2\x2\x2657\x265A\x3\x2\x2\x2\x2658\x2656\x3\x2\x2"+
		"\x2\x2658\x2659\x3\x2\x2\x2\x2659\x323\x3\x2\x2\x2\x265A\x2658\x3\x2\x2"+
		"\x2\x265B\x2660\x5\x428\x215\x2\x265C\x265D\a\x36D\x2\x2\x265D\x265E\x5"+
		"\x3FE\x200\x2\x265E\x265F\a\x36E\x2\x2\x265F\x2661\x3\x2\x2\x2\x2660\x265C"+
		"\x3\x2\x2\x2\x2660\x2661\x3\x2\x2\x2\x2661\x2662\x3\x2\x2\x2\x2662\x2663"+
		"\a\b\x2\x2\x2663\x2664\a\x36D\x2\x2\x2664\x2665\x5\x1CC\xE7\x2\x2665\x2666"+
		"\a\x36E\x2\x2\x2666\x325\x3\x2\x2\x2\x2667\x2668\a\x354\x2\x2\x2668\x2669"+
		"\a\x35B\x2\x2\x2669\x266C\x5\x3F6\x1FC\x2\x266A\x266D\a\x35B\x2\x2\x266B"+
		"\x266D\x5\x430\x219\x2\x266C\x266A\x3\x2\x2\x2\x266C\x266B\x3\x2\x2\x2"+
		"\x266D\x266E\x3\x2\x2\x2\x266E\x266F\x5\x312\x18A\x2\x266F\x2681\x3\x2"+
		"\x2\x2\x2670\x2673\x5\x3F6\x1FC\x2\x2671\x2673\a\x354\x2\x2\x2672\x2670"+
		"\x3\x2\x2\x2\x2672\x2671\x3\x2\x2\x2\x2673\x2676\x3\x2\x2\x2\x2674\x2677"+
		"\a\x35B\x2\x2\x2675\x2677\x5\x430\x219\x2\x2676\x2674\x3\x2\x2\x2\x2676"+
		"\x2675\x3\x2\x2\x2\x2677\x2678\x3\x2\x2\x2\x2678\x2681\x5\x312\x18A\x2"+
		"\x2679\x267A\x5\x428\x215\x2\x267A\x267B\a\x368\x2\x2\x267B\x267C\x5\x428"+
		"\x215\x2\x267C\x267D\a\x36D\x2\x2\x267D\x267E\x5\x3C2\x1E2\x2\x267E\x267F"+
		"\a\x36E\x2\x2\x267F\x2681\x3\x2\x2\x2\x2680\x2667\x3\x2\x2\x2\x2680\x2672"+
		"\x3\x2\x2\x2\x2680\x2679\x3\x2\x2\x2\x2681\x327\x3\x2\x2\x2\x2682\x2685"+
		"\x5\x3F6\x1FC\x2\x2683\x2685\a\x354\x2\x2\x2684\x2682\x3\x2\x2\x2\x2684"+
		"\x2683\x3\x2\x2\x2\x2685\x2688\x3\x2\x2\x2\x2686\x2689\a\x35B\x2\x2\x2687"+
		"\x2689\x5\x430\x219\x2\x2688\x2686\x3\x2\x2\x2\x2688\x2687\x3\x2\x2\x2"+
		"\x2689\x268A\x3\x2\x2\x2\x268A\x2693\x5\x312\x18A\x2\x268B\x268C\x5\x428"+
		"\x215\x2\x268C\x268D\a\x368\x2\x2\x268D\x268E\x5\x428\x215\x2\x268E\x268F"+
		"\a\x36D\x2\x2\x268F\x2690\x5\x3C2\x1E2\x2\x2690\x2691\a\x36E\x2\x2\x2691"+
		"\x2693\x3\x2\x2\x2\x2692\x2684\x3\x2\x2\x2\x2692\x268B\x3\x2\x2\x2\x2693"+
		"\x329\x3\x2\x2\x2\x2694\x2698\b\x196\x1\x2\x2695\x2697\aj\x2\x2\x2696"+
		"\x2695\x3\x2\x2\x2\x2697\x269A\x3\x2\x2\x2\x2698\x2696\x3\x2\x2\x2\x2698"+
		"\x2699\x3\x2\x2\x2\x2699\x26A0\x3\x2\x2\x2\x269A\x2698\x3\x2\x2\x2\x269B"+
		"\x26A1\x5\x32C\x197\x2\x269C\x269D\a\x36D\x2\x2\x269D\x269E\x5\x32A\x196"+
		"\x2\x269E\x269F\a\x36E\x2\x2\x269F\x26A1\x3\x2\x2\x2\x26A0\x269B\x3\x2"+
		"\x2\x2\x26A0\x269C\x3\x2\x2\x2\x26A1\x26AA\x3\x2\x2\x2\x26A2\x26A3\f\x4"+
		"\x2\x2\x26A3\x26A4\a\x6\x2\x2\x26A4\x26A9\x5\x32A\x196\x5\x26A5\x26A6"+
		"\f\x3\x2\x2\x26A6\x26A7\ax\x2\x2\x26A7\x26A9\x5\x32A\x196\x4\x26A8\x26A2"+
		"\x3\x2\x2\x2\x26A8\x26A5\x3\x2\x2\x2\x26A9\x26AC\x3\x2\x2\x2\x26AA\x26A8"+
		"\x3\x2\x2\x2\x26AA\x26AB\x3\x2\x2\x2\x26AB\x32B\x3\x2\x2\x2\x26AC\x26AA"+
		"\x3\x2\x2\x2\x26AD\x26AE\a\x41\x2\x2\x26AE\x26AF\a\x36D\x2\x2\x26AF\x26B0"+
		"\x5\x320\x191\x2\x26B0\x26B1\a\x36E\x2\x2\x26B1\x26EB\x3\x2\x2\x2\x26B2"+
		"\x26EB\x5\x392\x1CA\x2\x26B3\x26B4\x5\x312\x18A\x2\x26B4\x26B5\x5\x42E"+
		"\x218\x2\x26B5\x26B6\x5\x312\x18A\x2\x26B6\x26EB\x3\x2\x2\x2\x26B7\x26B8"+
		"\x5\x312\x18A\x2\x26B8\x26B9\x5\x42E\x218\x2\x26B9\x26BA\t{\x2\x2\x26BA"+
		"\x26BB\a\x36D\x2\x2\x26BB\x26BC\x5\x320\x191\x2\x26BC\x26BD\a\x36E\x2"+
		"\x2\x26BD\x26EB\x3\x2\x2\x2\x26BE\x26C2\x5\x312\x18A\x2\x26BF\x26C1\a"+
		"j\x2\x2\x26C0\x26BF\x3\x2\x2\x2\x26C1\x26C4\x3\x2\x2\x2\x26C2\x26C0\x3"+
		"\x2\x2\x2\x26C2\x26C3\x3\x2\x2\x2\x26C3\x26C5\x3\x2\x2\x2\x26C4\x26C2"+
		"\x3\x2\x2\x2\x26C5\x26C6\a\xE\x2\x2\x26C6\x26C7\x5\x312\x18A\x2\x26C7"+
		"\x26C8\a\x6\x2\x2\x26C8\x26C9\x5\x312\x18A\x2\x26C9\x26EB\x3\x2\x2\x2"+
		"\x26CA\x26CE\x5\x312\x18A\x2\x26CB\x26CD\aj\x2\x2\x26CC\x26CB\x3\x2\x2"+
		"\x2\x26CD\x26D0\x3\x2\x2\x2\x26CE\x26CC\x3\x2\x2\x2\x26CE\x26CF\x3\x2"+
		"\x2\x2\x26CF\x26D1\x3\x2\x2\x2\x26D0\x26CE\x3\x2\x2\x2\x26D1\x26D2\aW"+
		"\x2\x2\x26D2\x26D5\a\x36D\x2\x2\x26D3\x26D6\x5\x320\x191\x2\x26D4\x26D6"+
		"\x5\x3C2\x1E2\x2\x26D5\x26D3\x3\x2\x2\x2\x26D5\x26D4\x3\x2\x2\x2\x26D6"+
		"\x26D7\x3\x2\x2\x2\x26D7\x26D8\a\x36E\x2\x2\x26D8\x26EB\x3\x2\x2\x2\x26D9"+
		"\x26DD\x5\x312\x18A\x2\x26DA\x26DC\aj\x2\x2\x26DB\x26DA\x3\x2\x2\x2\x26DC"+
		"\x26DF\x3\x2\x2\x2\x26DD\x26DB\x3\x2\x2\x2\x26DD\x26DE\x3\x2\x2\x2\x26DE"+
		"\x26E0\x3\x2\x2\x2\x26DF\x26DD\x3\x2\x2\x2\x26E0\x26E1\a\x62\x2\x2\x26E1"+
		"\x26E4\x5\x312\x18A\x2\x26E2\x26E3\a>\x2\x2\x26E3\x26E5\x5\x312\x18A\x2"+
		"\x26E4\x26E2\x3\x2\x2\x2\x26E4\x26E5\x3\x2\x2\x2\x26E5\x26EB\x3\x2\x2"+
		"\x2\x26E6\x26E7\x5\x312\x18A\x2\x26E7\x26E8\a]\x2\x2\x26E8\x26E9\x5\x406"+
		"\x204\x2\x26E9\x26EB\x3\x2\x2\x2\x26EA\x26AD\x3\x2\x2\x2\x26EA\x26B2\x3"+
		"\x2\x2\x2\x26EA\x26B3\x3\x2\x2\x2\x26EA\x26B7\x3\x2\x2\x2\x26EA\x26BE"+
		"\x3\x2\x2\x2\x26EA\x26CA\x3\x2\x2\x2\x26EA\x26D9\x3\x2\x2\x2\x26EA\x26E6"+
		"\x3\x2\x2\x2\x26EB\x32D\x3\x2\x2\x2\x26EC\x26F2\x5\x332\x19A\x2\x26ED"+
		"\x26EE\a\x36D\x2\x2\x26EE\x26EF\x5\x32E\x198\x2\x26EF\x26F0\a\x36E\x2"+
		"\x2\x26F0\x26F2\x3\x2\x2\x2\x26F1\x26EC\x3\x2\x2\x2\x26F1\x26ED\x3\x2"+
		"\x2\x2\x26F2\x26FD\x3\x2\x2\x2\x26F3\x26F5\x5\x332\x19A\x2\x26F4\x26F6"+
		"\x5\x33A\x19E\x2\x26F5\x26F4\x3\x2\x2\x2\x26F5\x26F6\x3\x2\x2\x2\x26F6"+
		"\x26F8\x3\x2\x2\x2\x26F7\x26F9\x5\x330\x199\x2\x26F8\x26F7\x3\x2\x2\x2"+
		"\x26F9\x26FA\x3\x2\x2\x2\x26FA\x26F8\x3\x2\x2\x2\x26FA\x26FB\x3\x2\x2"+
		"\x2\x26FB\x26FD\x3\x2\x2\x2\x26FC\x26F1\x3\x2\x2\x2\x26FC\x26F3\x3\x2"+
		"\x2\x2\x26FD\x32F\x3\x2\x2\x2\x26FE\x2700\a\xAF\x2\x2\x26FF\x2701\a\x4"+
		"\x2\x2\x2700\x26FF\x3\x2\x2\x2\x2700\x2701\x3\x2\x2\x2\x2701\x2705\x3"+
		"\x2\x2\x2\x2702\x2705\a?\x2\x2\x2703\x2705\a[\x2\x2\x2704\x26FE\x3\x2"+
		"\x2\x2\x2704\x2702\x3\x2\x2\x2\x2704\x2703\x3\x2\x2\x2\x2705\x270B\x3"+
		"\x2\x2\x2\x2706\x270C\x5\x332\x19A\x2\x2707\x2708\a\x36D\x2\x2\x2708\x2709"+
		"\x5\x32E\x198\x2\x2709\x270A\a\x36E\x2\x2\x270A\x270C\x3\x2\x2\x2\x270B"+
		"\x2706\x3\x2\x2\x2\x270B\x2707\x3\x2\x2\x2\x270C\x331\x3\x2\x2\x2\x270D"+
		"\x270F\a\x99\x2\x2\x270E\x2710\t|\x2\x2\x270F\x270E\x3\x2\x2\x2\x270F"+
		"\x2710\x3\x2\x2\x2\x2710\x2712\x3\x2\x2\x2\x2711\x2713\x5\x334\x19B\x2"+
		"\x2712\x2711\x3\x2\x2\x2\x2712\x2713\x3\x2\x2\x2\x2713\x2714\x3\x2\x2"+
		"\x2\x2714\x2717\x5\x34A\x1A6\x2\x2715\x2716\a\\\x2\x2\x2716\x2718\x5\x3EA"+
		"\x1F6\x2\x2717\x2715\x3\x2\x2\x2\x2717\x2718\x3\x2\x2\x2\x2718\x271B\x3"+
		"\x2\x2\x2\x2719\x271A\aK\x2\x2\x271A\x271C\x5\x358\x1AD\x2\x271B\x2719"+
		"\x3\x2\x2\x2\x271B\x271C\x3\x2\x2\x2\x271C\x271F\x3\x2\x2\x2\x271D\x271E"+
		"\a\xBB\x2\x2\x271E\x2720\x5\x32A\x196\x2\x271F\x271D\x3\x2\x2\x2\x271F"+
		"\x2720\x3\x2\x2\x2\x2720\x272E\x3\x2\x2\x2\x2721\x2722\aP\x2\x2\x2722"+
		"\x2724\a\x12\x2\x2\x2723\x2725\a\x4\x2\x2\x2724\x2723\x3\x2\x2\x2\x2724"+
		"\x2725\x3\x2\x2\x2\x2725\x2726\x3\x2\x2\x2\x2726\x272B\x5\x342\x1A2\x2"+
		"\x2727\x2728\a\x36F\x2\x2\x2728\x272A\x5\x342\x1A2\x2\x2729\x2727\x3\x2"+
		"\x2\x2\x272A\x272D\x3\x2\x2\x2\x272B\x2729\x3\x2\x2\x2\x272B\x272C\x3"+
		"\x2\x2\x2\x272C\x272F\x3\x2\x2\x2\x272D\x272B\x3\x2\x2\x2\x272E\x2721"+
		"\x3\x2\x2\x2\x272E\x272F\x3\x2\x2\x2\x272F\x2732\x3\x2\x2\x2\x2730\x2731"+
		"\aQ\x2\x2\x2731\x2733\x5\x32A\x196\x2\x2732\x2730\x3\x2\x2\x2\x2732\x2733"+
		"\x3\x2\x2\x2\x2733\x333\x3\x2\x2\x2\x2734\x2737\a\xA9\x2\x2\x2735\x2738"+
		"\x5\x336\x19C\x2\x2736\x2738\x5\x338\x19D\x2\x2737\x2735\x3\x2\x2\x2\x2737"+
		"\x2736\x3\x2\x2\x2\x2738\x273B\x3\x2\x2\x2\x2739\x273A\a\xBD\x2\x2\x273A"+
		"\x273C\a\x24C\x2\x2\x273B\x2739\x3\x2\x2\x2\x273B\x273C\x3\x2\x2\x2\x273C"+
		"\x335\x3\x2\x2\x2\x273D\x273E\t}\x2\x2\x273E\x2745\a|\x2\x2\x273F\x2740"+
		"\a\x36D\x2\x2\x2740\x2741\x5\x312\x18A\x2\x2741\x2742\a\x36E\x2\x2\x2742"+
		"\x2743\a|\x2\x2\x2743\x2745\x3\x2\x2\x2\x2744\x273D\x3\x2\x2\x2\x2744"+
		"\x273F\x3\x2\x2\x2\x2745\x337\x3\x2\x2\x2\x2746\x274C\a\x355\x2\x2\x2747"+
		"\x2748\a\x36D\x2\x2\x2748\x2749\x5\x312\x18A\x2\x2749\x274A\a\x36E\x2"+
		"\x2\x274A\x274C\x3\x2\x2\x2\x274B\x2746\x3\x2\x2\x2\x274B\x2747\x3\x2"+
		"\x2\x2\x274C\x339\x3\x2\x2\x2\x274D\x274E\ay\x2\x2\x274E\x274F\a\x12\x2"+
		"\x2\x274F\x2754\x5\x340\x1A1\x2\x2750\x2751\a\x36F\x2\x2\x2751\x2753\x5"+
		"\x340\x1A1\x2\x2752\x2750\x3\x2\x2\x2\x2753\x2756\x3\x2\x2\x2\x2754\x2752"+
		"\x3\x2\x2\x2\x2754\x2755\x3\x2\x2\x2\x2755\x2762\x3\x2\x2\x2\x2756\x2754"+
		"\x3\x2\x2\x2\x2757\x2758\a\x1C4\x2\x2\x2758\x2759\x5\x312\x18A\x2\x2759"+
		"\x2760\t~\x2\x2\x275A\x275B\a\x44\x2\x2\x275B\x275C\t\x7F\x2\x2\x275C"+
		"\x275D\x5\x312\x18A\x2\x275D\x275E\t~\x2\x2\x275E\x275F\a\x1C7\x2\x2\x275F"+
		"\x2761\x3\x2\x2\x2\x2760\x275A\x3\x2\x2\x2\x2760\x2761\x3\x2\x2\x2\x2761"+
		"\x2763\x3\x2\x2\x2\x2762\x2757\x3\x2\x2\x2\x2762\x2763\x3\x2\x2\x2\x2763"+
		"\x33B\x3\x2\x2\x2\x2764\x2765\aG\x2\x2\x2765\x27C1\a\x10\x2\x2\x2766\x2767"+
		"\aG\x2\x2\x2767\x276F\a\x270\x2\x2\x2768\x276C\a\x86\x2\x2\x2769\x276A"+
		"\a\x36D\x2\x2\x276A\x276B\a\x357\x2\x2\x276B\x276D\a\x36E\x2\x2\x276C"+
		"\x2769\x3\x2\x2\x2\x276C\x276D\x3\x2\x2\x2\x276D\x2770\x3\x2\x2\x2\x276E"+
		"\x2770\a\xDD\x2\x2\x276F\x2768\x3\x2\x2\x2\x276F\x276E\x3\x2\x2\x2\x2770"+
		"\x2774\x3\x2\x2\x2\x2771\x2773\x5\x33E\x1A0\x2\x2772\x2771\x3\x2\x2\x2"+
		"\x2773\x2776\x3\x2\x2\x2\x2774\x2772\x3\x2\x2\x2\x2774\x2775\x3\x2\x2"+
		"\x2\x2775\x2781\x3\x2\x2\x2\x2776\x2774\x3\x2\x2\x2\x2777\x277F\a\x36F"+
		"\x2\x2\x2778\x2780\a\x271\x2\x2\x2779\x277D\a\x273\x2\x2\x277A\x277B\a"+
		"\x36D\x2\x2\x277B\x277C\a\x357\x2\x2\x277C\x277E\a\x36E\x2\x2\x277D\x277A"+
		"\x3\x2\x2\x2\x277D\x277E\x3\x2\x2\x2\x277E\x2780\x3\x2\x2\x2\x277F\x2778"+
		"\x3\x2\x2\x2\x277F\x2779\x3\x2\x2\x2\x2780\x2782\x3\x2\x2\x2\x2781\x2777"+
		"\x3\x2\x2\x2\x2781\x2782\x3\x2\x2\x2\x2782\x2788\x3\x2\x2\x2\x2783\x2784"+
		"\a\x36F\x2\x2\x2784\x2786\a\x133\x2\x2\x2785\x2787\t\x80\x2\x2\x2786\x2785"+
		"\x3\x2\x2\x2\x2786\x2787\x3\x2\x2\x2\x2787\x2789\x3\x2\x2\x2\x2788\x2783"+
		"\x3\x2\x2\x2\x2788\x2789\x3\x2\x2\x2\x2789\x27C1\x3\x2\x2\x2\x278A\x278B"+
		"\aG\x2\x2\x278B\x278C\a\x270\x2\x2\x278C\x2790\a\x141\x2\x2\x278D\x278F"+
		"\x5\x33E\x1A0\x2\x278E\x278D\x3\x2\x2\x2\x278F\x2792\x3\x2\x2\x2\x2790"+
		"\x278E\x3\x2\x2\x2\x2790\x2791\x3\x2\x2\x2\x2791\x2795\x3\x2\x2\x2\x2792"+
		"\x2790\x3\x2\x2\x2\x2793\x2794\a\x36F\x2\x2\x2794\x2796\a\x271\x2\x2\x2795"+
		"\x2793\x3\x2\x2\x2\x2795\x2796\x3\x2\x2\x2\x2796\x27C1\x3\x2\x2\x2\x2797"+
		"\x2798\aG\x2\x2\x2798\x2799\a\x270\x2\x2\x2799\x279D\a\x1D5\x2\x2\x279A"+
		"\x279B\a\x36D\x2\x2\x279B\x279C\a\x357\x2\x2\x279C\x279E\a\x36E\x2\x2"+
		"\x279D\x279A\x3\x2\x2\x2\x279D\x279E\x3\x2\x2\x2\x279E\x27A2\x3\x2\x2"+
		"\x2\x279F\x27A1\x5\x33E\x1A0\x2\x27A0\x279F\x3\x2\x2\x2\x27A1\x27A4\x3"+
		"\x2\x2\x2\x27A2\x27A0\x3\x2\x2\x2\x27A2\x27A3\x3\x2\x2\x2\x27A3\x27AA"+
		"\x3\x2\x2\x2\x27A4\x27A2\x3\x2\x2\x2\x27A5\x27A6\a\x36F\x2\x2\x27A6\x27A8"+
		"\a\x133\x2\x2\x27A7\x27A9\t\x80\x2\x2\x27A8\x27A7\x3\x2\x2\x2\x27A8\x27A9"+
		"\x3\x2\x2\x2\x27A9\x27AB\x3\x2\x2\x2\x27AA\x27A5\x3\x2\x2\x2\x27AA\x27AB"+
		"\x3\x2\x2\x2\x27AB\x27C1\x3\x2\x2\x2\x27AC\x27AD\aG\x2\x2\x27AD\x27AE"+
		"\a\x176\x2\x2\x27AE\x27B6\t\x81\x2\x2\x27AF\x27B0\a\x36F\x2\x2\x27B0\x27B4"+
		"\a\x20D\x2\x2\x27B1\x27B2\a\x36D\x2\x2\x27B2\x27B3\a\x357\x2\x2\x27B3"+
		"\x27B5\a\x36E\x2\x2\x27B4\x27B1\x3\x2\x2\x2\x27B4\x27B5\x3\x2\x2\x2\x27B5"+
		"\x27B7\x3\x2\x2\x2\x27B6\x27AF\x3\x2\x2\x2\x27B6\x27B7\x3\x2\x2\x2\x27B7"+
		"\x27BA\x3\x2\x2\x2\x27B8\x27B9\a\x36F\x2\x2\x27B9\x27BB\a\x16C\x2\x2\x27BA"+
		"\x27B8\x3\x2\x2\x2\x27BA\x27BB\x3\x2\x2\x2\x27BB\x27BE\x3\x2\x2\x2\x27BC"+
		"\x27BD\a\x36F\x2\x2\x27BD\x27BF\a\x26D\x2\x2\x27BE\x27BC\x3\x2\x2\x2\x27BE"+
		"\x27BF\x3\x2\x2\x2\x27BF\x27C1\x3\x2\x2\x2\x27C0\x2764\x3\x2\x2\x2\x27C0"+
		"\x2766\x3\x2\x2\x2\x27C0\x278A\x3\x2\x2\x2\x27C0\x2797\x3\x2\x2\x2\x27C0"+
		"\x27AC\x3\x2\x2\x2\x27C1\x33D\x3\x2\x2\x2\x27C2\x27CB\a\x36F\x2\x2\x27C3"+
		"\x27CC\a\xEC\x2\x2\x27C4\x27CC\a\x25A\x2\x2\x27C5\x27C9\a\x20D\x2\x2\x27C6"+
		"\x27C7\a\x36D\x2\x2\x27C7\x27C8\a\x357\x2\x2\x27C8\x27CA\a\x36E\x2\x2"+
		"\x27C9\x27C6\x3\x2\x2\x2\x27C9\x27CA\x3\x2\x2\x2\x27CA\x27CC\x3\x2\x2"+
		"\x2\x27CB\x27C3\x3\x2\x2\x2\x27CB\x27C4\x3\x2\x2\x2\x27CB\x27C5\x3\x2"+
		"\x2\x2\x27CC\x33F\x3\x2\x2\x2\x27CD\x27D0\x5\x312\x18A\x2\x27CE\x27D1"+
		"\a\t\x2\x2\x27CF\x27D1\a\x32\x2\x2\x27D0\x27CE\x3\x2\x2\x2\x27D0\x27CF"+
		"\x3\x2\x2\x2\x27D0\x27D1\x3\x2\x2\x2\x27D1\x341\x3\x2\x2\x2\x27D2\x27D3"+
		"\x5\x312\x18A\x2\x27D3\x343\x3\x2\x2\x2\x27D4\x27D5\aw\x2\x2\x27D5\x27D6"+
		"\a\x36D\x2\x2\x27D6\x27DB\x5\x346\x1A4\x2\x27D7\x27D8\a\x36F\x2\x2\x27D8"+
		"\x27DA\x5\x346\x1A4\x2\x27D9\x27D7\x3\x2\x2\x2\x27DA\x27DD\x3\x2\x2\x2"+
		"\x27DB\x27D9\x3\x2\x2\x2\x27DB\x27DC\x3\x2\x2\x2\x27DC\x27DE\x3\x2\x2"+
		"\x2\x27DD\x27DB\x3\x2\x2\x2\x27DE\x27DF\a\x36E\x2\x2\x27DF\x345\x3\x2"+
		"\x2\x2\x27E0\x27E1\a\x146\x2\x2\x27E1\x280E\a\x355\x2\x2\x27E2\x27E3\t"+
		"\x82\x2\x2\x27E3\x280E\aP\x2\x2\x27E4\x27E5\t\x83\x2\x2\x27E5\x280E\a"+
		"\xAF\x2\x2\x27E6\x27E7\t\x84\x2\x2\x27E7\x280E\a^\x2\x2\x27E8\x27E9\a"+
		"\x13F\x2\x2\x27E9\x280E\a\x26A\x2\x2\x27EA\x27EB\a\x151\x2\x2\x27EB\x280E"+
		"\ay\x2\x2\x27EC\x280E\a\x168\x2\x2\x27ED\x27EE\a\x178\x2\x2\x27EE\x280E"+
		"\a~\x2\x2\x27EF\x27F0\a\x179\x2\x2\x27F0\x280E\a~\x2\x2\x27F1\x27F2\a"+
		"\x199\x2\x2\x27F2\x280E\a\x355\x2\x2\x27F3\x27F4\a\x19A\x2\x2\x27F4\x280E"+
		"\a\x355\x2\x2\x27F5\x27F6\a\x1CA\x2\x2\x27F6\x27F7\aG\x2\x2\x27F7\x27F8"+
		"\a\x36D\x2\x2\x27F8\x27FD\x5\x348\x1A5\x2\x27F9\x27FA\a\x36F\x2\x2\x27FA"+
		"\x27FC\x5\x348\x1A5\x2\x27FB\x27F9\x3\x2\x2\x2\x27FC\x27FF\x3\x2\x2\x2"+
		"\x27FD\x27FB\x3\x2\x2\x2\x27FD\x27FE\x3\x2\x2\x2\x27FE\x2800\x3\x2\x2"+
		"\x2\x27FF\x27FD\x3\x2\x2\x2\x2800\x2801\a\x36E\x2\x2\x2801\x280E\x3\x2"+
		"\x2\x2\x2802\x2803\a\x1CA\x2\x2\x2803\x2804\aG\x2\x2\x2804\x280E\a\x25E"+
		"\x2\x2\x2805\x2806\a\x1D1\x2\x2\x2806\x280E\tT\x2\x2\x2807\x280E\a\x1F9"+
		"\x2\x2\x2808\x2809\a\x20C\x2\x2\x2809\x280E\a~\x2\x2\x280A\x280B\a\xB4"+
		"\x2\x2\x280B\x280C\a~\x2\x2\x280C\x280E\a\x357\x2\x2\x280D\x27E0\x3\x2"+
		"\x2\x2\x280D\x27E2\x3\x2\x2\x2\x280D\x27E4\x3\x2\x2\x2\x280D\x27E6\x3"+
		"\x2\x2\x2\x280D\x27E8\x3\x2\x2\x2\x280D\x27EA\x3\x2\x2\x2\x280D\x27EC"+
		"\x3\x2\x2\x2\x280D\x27ED\x3\x2\x2\x2\x280D\x27EF\x3\x2\x2\x2\x280D\x27F1"+
		"\x3\x2\x2\x2\x280D\x27F3\x3\x2\x2\x2\x280D\x27F5\x3\x2\x2\x2\x280D\x2802"+
		"\x3\x2\x2\x2\x280D\x2805\x3\x2\x2\x2\x280D\x2807\x3\x2\x2\x2\x280D\x2808"+
		"\x3\x2\x2\x2\x280D\x280A\x3\x2\x2\x2\x280E\x347\x3\x2\x2\x2\x280F\x2816"+
		"\a\x354\x2\x2\x2810\x2817\a\x25E\x2\x2\x2811\x2814\a\x35B\x2\x2\x2812"+
		"\x2815\x5\x422\x212\x2\x2813\x2815\ak\x2\x2\x2814\x2812\x3\x2\x2\x2\x2814"+
		"\x2813\x3\x2\x2\x2\x2815\x2817\x3\x2\x2\x2\x2816\x2810\x3\x2\x2\x2\x2816"+
		"\x2811\x3\x2\x2\x2\x2817\x349\x3\x2\x2\x2\x2818\x281D\x5\x356\x1AC\x2"+
		"\x2819\x281A\a\x36F\x2\x2\x281A\x281C\x5\x356\x1AC\x2\x281B\x2819\x3\x2"+
		"\x2\x2\x281C\x281F\x3\x2\x2\x2\x281D\x281B\x3\x2\x2\x2\x281D\x281E\x3"+
		"\x2\x2\x2\x281E\x34B\x3\x2\x2\x2\x281F\x281D\x3\x2\x2\x2\x2820\x2821\a"+
		"\x36D\x2\x2\x2821\x2826\x5\x2AA\x156\x2\x2822\x2823\a\x36F\x2\x2\x2823"+
		"\x2825\x5\x2AA\x156\x2\x2824\x2822\x3\x2\x2\x2\x2825\x2828\x3\x2\x2\x2"+
		"\x2826\x2824\x3\x2\x2\x2\x2826\x2827\x3\x2\x2\x2\x2827\x2829\x3\x2\x2"+
		"\x2\x2828\x2826\x3\x2\x2\x2\x2829\x282A\a\x36E\x2\x2\x282A\x34D\x3\x2"+
		"\x2\x2\x282B\x282C\x5\x3EA\x1F6\x2\x282C\x282D\a\x368\x2\x2\x282D\x282F"+
		"\x3\x2\x2\x2\x282E\x282B\x3\x2\x2\x2\x282E\x282F\x3\x2\x2\x2\x282F\x2830"+
		"\x3\x2\x2\x2\x2830\x2835\a\x373\x2\x2\x2831\x2832\t\x85\x2\x2\x2832\x2833"+
		"\a\x368\x2\x2\x2833\x2835\a\x373\x2\x2\x2834\x282E\x3\x2\x2\x2\x2834\x2831"+
		"\x3\x2\x2\x2\x2835\x34F\x3\x2\x2\x2\x2836\x283D\x5\x3F6\x1FC\x2\x2837"+
		"\x2838\a\x36C\x2\x2\x2838\x283D\aS\x2\x2\x2839\x283A\a\x36C\x2\x2\x283A"+
		"\x283D\a\x211\x2\x2\x283B\x283D\ak\x2\x2\x283C\x2836\x3\x2\x2\x2\x283C"+
		"\x2837\x3\x2\x2\x2\x283C\x2839\x3\x2\x2\x2\x283C\x283B\x3\x2\x2\x2\x283D"+
		"\x283F\x3\x2\x2\x2\x283E\x2840\x5\x3AE\x1D8\x2\x283F\x283E\x3\x2\x2\x2"+
		"\x283F\x2840\x3\x2\x2\x2\x2840\x351\x3\x2\x2\x2\x2841\x2842\x5\x428\x215"+
		"\x2\x2842\x2843\a\x368\x2\x2\x2843\x2844\x5\x428\x215\x2\x2844\x2846\x5"+
		"\x34C\x1A7\x2\x2845\x2847\x5\x3AE\x1D8\x2\x2846\x2845\x3\x2\x2\x2\x2846"+
		"\x2847\x3\x2\x2\x2\x2847\x2852\x3\x2\x2\x2\x2848\x2849\x5\x428\x215\x2"+
		"\x2849\x284A\a\x372\x2\x2\x284A\x284C\x5\x428\x215\x2\x284B\x284D\x5\x34C"+
		"\x1A7\x2\x284C\x284B\x3\x2\x2\x2\x284C\x284D\x3\x2\x2\x2\x284D\x284F\x3"+
		"\x2\x2\x2\x284E\x2850\x5\x3AE\x1D8\x2\x284F\x284E\x3\x2\x2\x2\x284F\x2850"+
		"\x3\x2\x2\x2\x2850\x2852\x3\x2\x2\x2\x2851\x2841\x3\x2\x2\x2\x2851\x2848"+
		"\x3\x2\x2\x2\x2852\x353\x3\x2\x2\x2\x2853\x2854\x5\x3BE\x1E0\x2\x2854"+
		"\x2855\a\x35B\x2\x2\x2855\x2856\x5\x312\x18A\x2\x2856\x285C\x3\x2\x2\x2"+
		"\x2857\x2859\x5\x312\x18A\x2\x2858\x285A\x5\x3AE\x1D8\x2\x2859\x2858\x3"+
		"\x2\x2\x2\x2859\x285A\x3\x2\x2\x2\x285A\x285C\x3\x2\x2\x2\x285B\x2853"+
		"\x3\x2\x2\x2\x285B\x2857\x3\x2\x2\x2\x285C\x355\x3\x2\x2\x2\x285D\x2875"+
		"\x5\x34E\x1A8\x2\x285E\x2875\x5\x350\x1A9\x2\x285F\x2875\x5\x352\x1AA"+
		"\x2\x2860\x2863\a\x354\x2\x2\x2861\x2864\x5\x430\x219\x2\x2862\x2864\a"+
		"\x35B\x2\x2\x2863\x2861\x3\x2\x2\x2\x2863\x2862\x3\x2\x2\x2\x2864\x286A"+
		"\x3\x2\x2\x2\x2865\x286B\x5\x312\x18A\x2\x2866\x2867\a\x1B2\x2\x2\x2867"+
		"\x2868\a\x265\x2\x2\x2868\x2869\aG\x2\x2\x2869\x286B\x5\x3EA\x1F6\x2\x286A"+
		"\x2865\x3\x2\x2\x2\x286A\x2866\x3\x2\x2\x2\x286B\x2875\x3\x2\x2\x2\x286C"+
		"\x2875\x5\x354\x1AB\x2\x286D\x286E\a\x1B2\x2\x2\x286E\x286F\a\x265\x2"+
		"\x2\x286F\x2870\aG\x2\x2\x2870\x2872\x5\x3EA\x1F6\x2\x2871\x2873\x5\x3AE"+
		"\x1D8\x2\x2872\x2871\x3\x2\x2\x2\x2872\x2873\x3\x2\x2\x2\x2873\x2875\x3"+
		"\x2\x2\x2\x2874\x285D\x3\x2\x2\x2\x2874\x285E\x3\x2\x2\x2\x2874\x285F"+
		"\x3\x2\x2\x2\x2874\x2860\x3\x2\x2\x2\x2874\x286C\x3\x2\x2\x2\x2874\x286D"+
		"\x3\x2\x2\x2\x2875\x357\x3\x2\x2\x2\x2876\x287B\x5\x35A\x1AE\x2\x2877"+
		"\x2878\a\x36F\x2\x2\x2878\x287A\x5\x35A\x1AE\x2\x2879\x2877\x3\x2\x2\x2"+
		"\x287A\x287D\x3\x2\x2\x2\x287B\x2879\x3\x2\x2\x2\x287B\x287C\x3\x2\x2"+
		"\x2\x287C\x359\x3\x2\x2\x2\x287D\x287B\x3\x2\x2\x2\x287E\x2884\x5\x35C"+
		"\x1AF\x2\x287F\x2880\a\x36D\x2\x2\x2880\x2881\x5\x35A\x1AE\x2\x2881\x2882"+
		"\a\x36E\x2\x2\x2882\x2884\x3\x2\x2\x2\x2883\x287E\x3\x2\x2\x2\x2883\x287F"+
		"\x3\x2\x2\x2\x2884\x35B\x3\x2\x2\x2\x2885\x2889\x5\x35E\x1B0\x2\x2886"+
		"\x2888\x5\x372\x1BA\x2\x2887\x2886\x3\x2\x2\x2\x2888\x288B\x3\x2\x2\x2"+
		"\x2889\x2887\x3\x2\x2\x2\x2889\x288A\x3\x2\x2\x2\x288A\x2896\x3\x2\x2"+
		"\x2\x288B\x2889\x3\x2\x2\x2\x288C\x288D\a\x36D\x2\x2\x288D\x288E\x5\x35C"+
		"\x1AF\x2\x288E\x2892\a\x36E\x2\x2\x288F\x2891\x5\x372\x1BA\x2\x2890\x288F"+
		"\x3\x2\x2\x2\x2891\x2894\x3\x2\x2\x2\x2892\x2890\x3\x2\x2\x2\x2892\x2893"+
		"\x3\x2\x2\x2\x2893\x2896\x3\x2\x2\x2\x2894\x2892\x3\x2\x2\x2\x2895\x2885"+
		"\x3\x2\x2\x2\x2895\x288C\x3\x2\x2\x2\x2896\x35D\x3\x2\x2\x2\x2897\x2899"+
		"\x5\x384\x1C3\x2\x2898\x289A\x5\x3B0\x1D9\x2\x2899\x2898\x3\x2\x2\x2\x2899"+
		"\x289A\x3\x2\x2\x2\x289A\x28D3\x3\x2\x2\x2\x289B\x289D\x5\x3E8\x1F5\x2"+
		"\x289C\x289E\x5\x3B0\x1D9\x2\x289D\x289C\x3\x2\x2\x2\x289D\x289E\x3\x2"+
		"\x2\x2\x289E\x28D3\x3\x2\x2\x2\x289F\x28A1\x5\x386\x1C4\x2\x28A0\x28A2"+
		"\x5\x3B0\x1D9\x2\x28A1\x28A0\x3\x2\x2\x2\x28A1\x28A2\x3\x2\x2\x2\x28A2"+
		"\x28D3\x3\x2\x2\x2\x28A3\x28A4\a\x36D\x2\x2\x28A4\x28A5\x5\x38A\x1C6\x2"+
		"\x28A5\x28AA\a\x36E\x2\x2\x28A6\x28A8\x5\x3B0\x1D9\x2\x28A7\x28A9\x5\x3BC"+
		"\x1DF\x2\x28A8\x28A7\x3\x2\x2\x2\x28A8\x28A9\x3\x2\x2\x2\x28A9\x28AB\x3"+
		"\x2\x2\x2\x28AA\x28A6\x3\x2\x2\x2\x28AA\x28AB\x3\x2\x2\x2\x28AB\x28D3"+
		"\x3\x2\x2\x2\x28AC\x28AE\x5\x36C\x1B7\x2\x28AD\x28AF\x5\x3B0\x1D9\x2\x28AE"+
		"\x28AD\x3\x2\x2\x2\x28AE\x28AF\x3\x2\x2\x2\x28AF\x28D3\x3\x2\x2\x2\x28B0"+
		"\x28B5\x5\x38C\x1C7\x2\x28B1\x28B3\x5\x3B0\x1D9\x2\x28B2\x28B4\x5\x3BC"+
		"\x1DF\x2\x28B3\x28B2\x3\x2\x2\x2\x28B3\x28B4\x3\x2\x2\x2\x28B4\x28B6\x3"+
		"\x2\x2\x2\x28B5\x28B1\x3\x2\x2\x2\x28B5\x28B6\x3\x2\x2\x2\x28B6\x28D3"+
		"\x3\x2\x2\x2\x28B7\x28B9\a\x354\x2\x2\x28B8\x28BA\x5\x3B0\x1D9\x2\x28B9"+
		"\x28B8\x3\x2\x2\x2\x28B9\x28BA\x3\x2\x2\x2\x28BA\x28D3\x3\x2\x2\x2\x28BB"+
		"\x28C0\x5\x3A8\x1D5\x2\x28BC\x28BE\x5\x3B0\x1D9\x2\x28BD\x28BF\x5\x3BC"+
		"\x1DF\x2\x28BE\x28BD\x3\x2\x2\x2\x28BE\x28BF\x3\x2\x2\x2\x28BF\x28C1\x3"+
		"\x2\x2\x2\x28C0\x28BC\x3\x2\x2\x2\x28C0\x28C1\x3\x2\x2\x2\x28C1\x28D3"+
		"\x3\x2\x2\x2\x28C2\x28C3\a\x354\x2\x2\x28C3\x28C4\a\x368\x2\x2\x28C4\x28C9"+
		"\x5\x38C\x1C7\x2\x28C5\x28C7\x5\x3B0\x1D9\x2\x28C6\x28C8\x5\x3BC\x1DF"+
		"\x2\x28C7\x28C6\x3\x2\x2\x2\x28C7\x28C8\x3\x2\x2\x2\x28C8\x28CA\x3\x2"+
		"\x2\x2\x28C9\x28C5\x3\x2\x2\x2\x28C9\x28CA\x3\x2\x2\x2\x28CA\x28D3\x3"+
		"\x2\x2\x2\x28CB\x28D3\x5\x360\x1B1\x2\x28CC\x28D3\x5\x362\x1B2\x2\x28CD"+
		"\x28CE\a\x372\x2\x2\x28CE\x28D0\x5\x38C\x1C7\x2\x28CF\x28D1\x5\x3B0\x1D9"+
		"\x2\x28D0\x28CF\x3\x2\x2\x2\x28D0\x28D1\x3\x2\x2\x2\x28D1\x28D3\x3\x2"+
		"\x2\x2\x28D2\x2897\x3\x2\x2\x2\x28D2\x289B\x3\x2\x2\x2\x28D2\x289F\x3"+
		"\x2\x2\x2\x28D2\x28A3\x3\x2\x2\x2\x28D2\x28AC\x3\x2\x2\x2\x28D2\x28B0"+
		"\x3\x2\x2\x2\x28D2\x28B7\x3\x2\x2\x2\x28D2\x28BB\x3\x2\x2\x2\x28D2\x28C2"+
		"\x3\x2\x2\x2\x28D2\x28CB\x3\x2\x2\x2\x28D2\x28CC\x3\x2\x2\x2\x28D2\x28CD"+
		"\x3\x2\x2\x2\x28D3\x35F\x3\x2\x2\x2\x28D4\x28D5\av\x2\x2\x28D5\x28D6\a"+
		"\x36D\x2\x2\x28D6\x28D7\x5\x312\x18A\x2\x28D7\x28D8\a\x36F\x2\x2\x28D8"+
		"\x28DB\x5\x312\x18A\x2\x28D9\x28DA\a\x36F\x2\x2\x28DA\x28DC\x5\x312\x18A"+
		"\x2\x28DB\x28D9\x3\x2\x2\x2\x28DB\x28DC\x3\x2\x2\x2\x28DC\x28DD\x3\x2"+
		"\x2\x2\x28DD\x28E3\a\x36E\x2\x2\x28DE\x28DF\a\xBD\x2\x2\x28DF\x28E0\a"+
		"\x36D\x2\x2\x28E0\x28E1\x5\x368\x1B5\x2\x28E1\x28E2\a\x36E\x2\x2\x28E2"+
		"\x28E4\x3\x2\x2\x2\x28E3\x28DE\x3\x2\x2\x2\x28E3\x28E4\x3\x2\x2\x2\x28E4"+
		"\x28E6\x3\x2\x2\x2\x28E5\x28E7\x5\x3B0\x1D9\x2\x28E6\x28E5\x3\x2\x2\x2"+
		"\x28E6\x28E7\x3\x2\x2\x2\x28E7\x361\x3\x2\x2\x2\x28E8\x28E9\au\x2\x2\x28E9"+
		"\x28EA\a\x36D\x2\x2\x28EA\x28ED\x5\x312\x18A\x2\x28EB\x28EC\a\x36F\x2"+
		"\x2\x28EC\x28EE\x5\x312\x18A\x2\x28ED\x28EB\x3\x2\x2\x2\x28ED\x28EE\x3"+
		"\x2\x2\x2\x28EE\x28EF\x3\x2\x2\x2\x28EF\x28F5\a\x36E\x2\x2\x28F0\x28F1"+
		"\a\xBD\x2\x2\x28F1\x28F2\a\x36D\x2\x2\x28F2\x28F3\x5\x364\x1B3\x2\x28F3"+
		"\x28F4\a\x36E\x2\x2\x28F4\x28F6\x3\x2\x2\x2\x28F5\x28F0\x3\x2\x2\x2\x28F5"+
		"\x28F6\x3\x2\x2\x2\x28F6\x28F8\x3\x2\x2\x2\x28F7\x28F9\x5\x3B0\x1D9\x2"+
		"\x28F8\x28F7\x3\x2\x2\x2\x28F8\x28F9\x3\x2\x2\x2\x28F9\x363\x3\x2\x2\x2"+
		"\x28FA\x28FF\x5\x366\x1B4\x2\x28FB\x28FC\a\x36F\x2\x2\x28FC\x28FE\x5\x366"+
		"\x1B4\x2\x28FD\x28FB\x3\x2\x2\x2\x28FE\x2901\x3\x2\x2\x2\x28FF\x28FD\x3"+
		"\x2\x2\x2\x28FF\x2900\x3\x2\x2\x2\x2900\x365\x3\x2\x2\x2\x2901\x28FF\x3"+
		"\x2\x2\x2\x2902\x2905\x5\x36A\x1B6\x2\x2903\x2904\a\b\x2\x2\x2904\x2906"+
		"\a\x176\x2\x2\x2905\x2903\x3\x2\x2\x2\x2905\x2906\x3\x2\x2\x2\x2906\x367"+
		"\x3\x2\x2\x2\x2907\x290C\x5\x36A\x1B6\x2\x2908\x2909\a\x36F\x2\x2\x2909"+
		"\x290B\x5\x36A\x1B6\x2\x290A\x2908\x3\x2\x2\x2\x290B\x290E\x3\x2\x2\x2"+
		"\x290C\x290A\x3\x2\x2\x2\x290C\x290D\x3\x2\x2\x2\x290D\x369\x3\x2\x2\x2"+
		"\x290E\x290C\x3\x2\x2\x2\x290F\x2910\x5\x428\x215\x2\x2910\x2912\x5\x41E"+
		"\x210\x2\x2911\x2913\a\x357\x2\x2\x2912\x2911\x3\x2\x2\x2\x2912\x2913"+
		"\x3\x2\x2\x2\x2913\x36B\x3\x2\x2\x2\x2914\x2917\x5\x36E\x1B8\x2\x2915"+
		"\x2917\x5\x370\x1B9\x2\x2916\x2914\x3\x2\x2\x2\x2916\x2915\x3\x2\x2\x2"+
		"\x2917\x36D\x3\x2\x2\x2\x2918\x2919\a\x292\x2\x2\x2919\x291A\a\x36D\x2"+
		"\x2\x291A\x291B\a\x293\x2\x2\x291B\x291C\x5\x3EA\x1F6\x2\x291C\x291D\a"+
		"\x36F\x2\x2\x291D\x291E\t\x86\x2\x2\x291E\x291F\a\x36E\x2\x2\x291F\x36F"+
		"\x3\x2\x2\x2\x2920\x2921\a\x292\x2\x2\x2921\x2922\a\x36D\x2\x2\x2922\x2923"+
		"\a\x38B\x2\x2\x2923\x2924\x5\x3EA\x1F6\x2\x2924\x2925\a\x36F\x2\x2\x2925"+
		"\x2926\x5\x382\x1C2\x2\x2926\x2927\a\x36F\x2\x2\x2927\x2928\x5\x34A\x1A6"+
		"\x2\x2928\x2929\a\x36E\x2\x2\x2929\x371\x3\x2\x2\x2\x292A\x2930\x5\x374"+
		"\x1BB\x2\x292B\x2930\x5\x376\x1BC\x2\x292C\x2930\x5\x378\x1BD\x2\x292D"+
		"\x2930\x5\x37A\x1BE\x2\x292E\x2930\x5\x37C\x1BF\x2\x292F\x292A\x3\x2\x2"+
		"\x2\x292F\x292B\x3\x2\x2\x2\x292F\x292C\x3\x2\x2\x2\x292F\x292D\x3\x2"+
		"\x2\x2\x292F\x292E\x3\x2\x2\x2\x2930\x373\x3\x2\x2\x2\x2931\x2933\aY\x2"+
		"\x2\x2932\x2931\x3\x2\x2\x2\x2932\x2933\x3\x2\x2\x2\x2933\x2939\x3\x2"+
		"\x2\x2\x2934\x2936\t\x87\x2\x2\x2935\x2937\az\x2\x2\x2936\x2935\x3\x2"+
		"\x2\x2\x2936\x2937\x3\x2\x2\x2\x2937\x2939\x3\x2\x2\x2\x2938\x2932\x3"+
		"\x2\x2\x2\x2938\x2934\x3\x2\x2\x2\x2939\x293B\x3\x2\x2\x2\x293A\x293C"+
		"\t\x88\x2\x2\x293B\x293A\x3\x2\x2\x2\x293B\x293C\x3\x2\x2\x2\x293C\x293D"+
		"\x3\x2\x2\x2\x293D\x293E\a^\x2\x2\x293E\x293F\x5\x35A\x1AE\x2\x293F\x2940"+
		"\ap\x2\x2\x2940\x2941\x5\x32A\x196\x2\x2941\x375\x3\x2\x2\x2\x2942\x2943"+
		"\a$\x2\x2\x2943\x2944\a^\x2\x2\x2944\x2945\x5\x35A\x1AE\x2\x2945\x377"+
		"\x3\x2\x2\x2\x2946\x2947\t\x89\x2\x2\x2947\x2948\a\xD8\x2\x2\x2948\x2949"+
		"\x5\x35A\x1AE\x2\x2949\x379\x3\x2\x2\x2\x294A\x294B\a}\x2\x2\x294B\x294C"+
		"\x5\x37E\x1C0\x2\x294C\x294D\x5\x3B0\x1D9\x2\x294D\x37B\x3\x2\x2\x2\x294E"+
		"\x294F\a\xB1\x2\x2\x294F\x2950\x5\x380\x1C1\x2\x2950\x2951\x5\x3B0\x1D9"+
		"\x2\x2951\x37D\x3\x2\x2\x2\x2952\x2953\a\x36D\x2\x2\x2953\x2954\x5\x3C6"+
		"\x1E4\x2\x2954\x2955\aG\x2\x2\x2955\x2956\x5\x3F6\x1FC\x2\x2956\x2957"+
		"\aW\x2\x2\x2957\x2958\x5\x3BC\x1DF\x2\x2958\x2959\a\x36E\x2\x2\x2959\x37F"+
		"\x3\x2\x2\x2\x295A\x295B\a\x36D\x2\x2\x295B\x295C\x5\x312\x18A\x2\x295C"+
		"\x295D\aG\x2\x2\x295D\x295E\x5\x3F6\x1FC\x2\x295E\x295F\aW\x2\x2\x295F"+
		"\x2960\a\x36D\x2\x2\x2960\x2961\x5\x382\x1C2\x2\x2961\x2962\a\x36E\x2"+
		"\x2\x2962\x2963\a\x36E\x2\x2\x2963\x381\x3\x2\x2\x2\x2964\x2969\x5\x3F6"+
		"\x1FC\x2\x2965\x2966\a\x36F\x2\x2\x2966\x2968\x5\x3F6\x1FC\x2\x2967\x2965"+
		"\x3\x2\x2\x2\x2968\x296B\x3\x2\x2\x2\x2969\x2967\x3\x2\x2\x2\x2969\x296A"+
		"\x3\x2\x2\x2\x296A\x383\x3\x2\x2\x2\x296B\x2969\x3\x2\x2\x2\x296C\x296E"+
		"\x5\x3EA\x1F6\x2\x296D\x296F\x5\x3B4\x1DB\x2\x296E\x296D\x3\x2\x2\x2\x296E"+
		"\x296F\x3\x2\x2\x2\x296F\x385\x3\x2\x2\x2\x2970\x2971\at\x2\x2\x2971\x2972"+
		"\a\x36D\x2\x2\x2972\x2973\a\x357\x2\x2\x2973\x2974\a\x36F\x2\x2\x2974"+
		"\x2975\a\x357\x2\x2\x2975\x2976\a\x36F\x2\x2\x2976\x2977\a\x357\x2\x2"+
		"\x2977\x298B\a\x36E\x2\x2\x2978\x2979\at\x2\x2\x2979\x297A\a\x36D\x2\x2"+
		"\x297A\x297B\a\x11\x2\x2\x297B\x297C\a\x357\x2\x2\x297C\x2986\a\x36F\x2"+
		"\x2\x297D\x2982\x5\x388\x1C5\x2\x297E\x297F\a\x36F\x2\x2\x297F\x2981\x5"+
		"\x388\x1C5\x2\x2980\x297E\x3\x2\x2\x2\x2981\x2984\x3\x2\x2\x2\x2982\x2980"+
		"\x3\x2\x2\x2\x2982\x2983\x3\x2\x2\x2\x2983\x2987\x3\x2\x2\x2\x2984\x2982"+
		"\x3\x2\x2\x2\x2985\x2987\x5\x428\x215\x2\x2986\x297D\x3\x2\x2\x2\x2986"+
		"\x2985\x3\x2\x2\x2\x2987\x2988\x3\x2\x2\x2\x2988\x2989\a\x36E\x2\x2\x2989"+
		"\x298B\x3\x2\x2\x2\x298A\x2970\x3\x2\x2\x2\x298A\x2978\x3\x2\x2\x2\x298B"+
		"\x387\x3\x2\x2\x2\x298C\x298D\x5\x428\x215\x2\x298D\x298E\a\x35B\x2\x2"+
		"\x298E\x298F\t\x1C\x2\x2\x298F\x389\x3\x2\x2\x2\x2990\x299B\x5\x320\x191"+
		"\x2\x2991\x2992\a\x36D\x2\x2\x2992\x2993\x5\x320\x191\x2\x2993\x2994\a"+
		"\x36E\x2\x2\x2994\x299B\x3\x2\x2\x2\x2995\x299B\x5\x3C0\x1E1\x2\x2996"+
		"\x2997\a\x36D\x2\x2\x2997\x2998\x5\x3C0\x1E1\x2\x2998\x2999\a\x36E\x2"+
		"\x2\x2999\x299B\x3\x2\x2\x2\x299A\x2990\x3\x2\x2\x2\x299A\x2991\x3\x2"+
		"\x2\x2\x299A\x2995\x3\x2\x2\x2\x299A\x2996\x3\x2\x2\x2\x299B\x38B\x3\x2"+
		"\x2\x2\x299C\x29AA\x5\x3C4\x1E3\x2\x299D\x29AA\x5\x3C6\x1E4\x2\x299E\x29AA"+
		"\x5\x3C8\x1E5\x2\x299F\x29AA\x5\x394\x1CB\x2\x29A0\x29A1\x5\x40A\x206"+
		"\x2\x29A1\x29A3\a\x36D\x2\x2\x29A2\x29A4\x5\x3C2\x1E2\x2\x29A3\x29A2\x3"+
		"\x2\x2\x2\x29A3\x29A4\x3\x2\x2\x2\x29A4\x29A5\x3\x2\x2\x2\x29A5\x29A6"+
		"\a\x36E\x2\x2\x29A6\x29AA\x3\x2\x2\x2\x29A7\x29AA\x5\x390\x1C9\x2\x29A8"+
		"\x29AA\x5\x38E\x1C8\x2\x29A9\x299C\x3\x2\x2\x2\x29A9\x299D\x3\x2\x2\x2"+
		"\x29A9\x299E\x3\x2\x2\x2\x29A9\x299F\x3\x2\x2\x2\x29A9\x29A0\x3\x2\x2"+
		"\x2\x29A9\x29A7\x3\x2\x2\x2\x29A9\x29A8\x3\x2\x2\x2\x29AA\x38D\x3\x2\x2"+
		"\x2\x29AB\x29AC\x5\x428\x215\x2\x29AC\x29AD\a\x368\x2\x2\x29AD\x29AF\x3"+
		"\x2\x2\x2\x29AE\x29AB\x3\x2\x2\x2\x29AE\x29AF\x3\x2\x2\x2\x29AF\x29B0"+
		"\x3\x2\x2\x2\x29B0\x29B1\a\xC0\x2\x2\x29B1\x29B2\a\x368\x2\x2\x29B2\x29B3"+
		"\x5\x428\x215\x2\x29B3\x29B4\a\x36D\x2\x2\x29B4\x29B5\x5\x312\x18A\x2"+
		"\x29B5\x29B6\a\x36E\x2\x2\x29B6\x38F\x3\x2\x2\x2\x29B7\x29B8\t\x8A\x2"+
		"\x2\x29B8\x29B9\a\x36D\x2\x2\x29B9\x29BA\x5\x3EA\x1F6\x2\x29BA\x29C8\a"+
		"\x36F\x2\x2\x29BB\x29C9\x5\x3F6\x1FC\x2\x29BC\x29BD\a\x36D\x2\x2\x29BD"+
		"\x29C2\x5\x3F6\x1FC\x2\x29BE\x29BF\a\x36F\x2\x2\x29BF\x29C1\x5\x3F6\x1FC"+
		"\x2\x29C0\x29BE\x3\x2\x2\x2\x29C1\x29C4\x3\x2\x2\x2\x29C2\x29C0\x3\x2"+
		"\x2\x2\x29C2\x29C3\x3\x2\x2\x2\x29C3\x29C5\x3\x2\x2\x2\x29C4\x29C2\x3"+
		"\x2\x2\x2\x29C5\x29C6\a\x36E\x2\x2\x29C6\x29C9\x3\x2\x2\x2\x29C7\x29C9"+
		"\a\x373\x2\x2\x29C8\x29BB\x3\x2\x2\x2\x29C8\x29BC\x3\x2\x2\x2\x29C8\x29C7"+
		"\x3\x2\x2\x2\x29C9\x29CA\x3\x2\x2\x2\x29CA\x29CB\a\x36F\x2\x2\x29CB\x29CF"+
		"\x5\x312\x18A\x2\x29CC\x29CD\a\x36F\x2\x2\x29CD\x29CE\a\x2CD\x2\x2\x29CE"+
		"\x29D0\x5\x312\x18A\x2\x29CF\x29CC\x3\x2\x2\x2\x29CF\x29D0\x3\x2\x2\x2"+
		"\x29D0\x29D3\x3\x2\x2\x2\x29D1\x29D2\a\x36F\x2\x2\x29D2\x29D4\x5\x312"+
		"\x18A\x2\x29D3\x29D1\x3\x2\x2\x2\x29D3\x29D4\x3\x2\x2\x2\x29D4\x29D5\x3"+
		"\x2\x2\x2\x29D5\x29D6\a\x36E\x2\x2\x29D6\x29FC\x3\x2\x2\x2\x29D7\x29D8"+
		"\t\x8B\x2\x2\x29D8\x29D9\a\x36D\x2\x2\x29D9\x29DA\x5\x3EA\x1F6\x2\x29DA"+
		"\x29E8\a\x36F\x2\x2\x29DB\x29E9\x5\x3F6\x1FC\x2\x29DC\x29DD\a\x36D\x2"+
		"\x2\x29DD\x29E2\x5\x3F6\x1FC\x2\x29DE\x29DF\a\x36F\x2\x2\x29DF\x29E1\x5"+
		"\x3F6\x1FC\x2\x29E0\x29DE\x3\x2\x2\x2\x29E1\x29E4\x3\x2\x2\x2\x29E2\x29E0"+
		"\x3\x2\x2\x2\x29E2\x29E3\x3\x2\x2\x2\x29E3\x29E5\x3\x2\x2\x2\x29E4\x29E2"+
		"\x3\x2\x2\x2\x29E5\x29E6\a\x36E\x2\x2\x29E6\x29E9\x3\x2\x2\x2\x29E7\x29E9"+
		"\a\x373\x2\x2\x29E8\x29DB\x3\x2\x2\x2\x29E8\x29DC\x3\x2\x2\x2\x29E8\x29E7"+
		"\x3\x2\x2\x2\x29E9\x29EA\x3\x2\x2\x2\x29EA\x29EB\a\x36F\x2\x2\x29EB\x29EC"+
		"\x5\x312\x18A\x2\x29EC\x29ED\a\x36E\x2\x2\x29ED\x29FC\x3\x2\x2\x2\x29EE"+
		"\x29EF\a\x9B\x2\x2\x29EF\x29F0\a\x36D\x2\x2\x29F0\x29F1\x5\x3EA\x1F6\x2"+
		"\x29F1\x29F2\a\x36F\x2\x2\x29F2\x29F3\x5\x3F6\x1FC\x2\x29F3\x29F4\a\x36F"+
		"\x2\x2\x29F4\x29F5\x5\x312\x18A\x2\x29F5\x29F6\a\x36F\x2\x2\x29F6\x29F7"+
		"\x5\x3F6\x1FC\x2\x29F7\x29F8\a\x36F\x2\x2\x29F8\x29F9\x5\x312\x18A\x2"+
		"\x29F9\x29FA\a\x36E\x2\x2\x29FA\x29FC\x3\x2\x2\x2\x29FB\x29B7\x3\x2\x2"+
		"\x2\x29FB\x29D7\x3\x2\x2\x2\x29FB\x29EE\x3\x2\x2\x2\x29FC\x391\x3\x2\x2"+
		"\x2\x29FD\x29FE\a\x1F\x2\x2\x29FE\x2A13\a\x36D\x2\x2\x29FF\x2A14\x5\x3F6"+
		"\x1FC\x2\x2A00\x2A01\a\x36D\x2\x2\x2A01\x2A06\x5\x3F6\x1FC\x2\x2A02\x2A03"+
		"\a\x36F\x2\x2\x2A03\x2A05\x5\x3F6\x1FC\x2\x2A04\x2A02\x3\x2\x2\x2\x2A05"+
		"\x2A08\x3\x2\x2\x2\x2A06\x2A04\x3\x2\x2\x2\x2A06\x2A07\x3\x2\x2\x2\x2A07"+
		"\x2A09\x3\x2\x2\x2\x2A08\x2A06\x3\x2\x2\x2\x2A09\x2A0A\a\x36E\x2\x2\x2A0A"+
		"\x2A14\x3\x2\x2\x2\x2A0B\x2A14\a\x373\x2\x2\x2A0C\x2A0D\a\x1E5\x2\x2\x2A0D"+
		"\x2A0E\a\x36D\x2\x2\x2A0E\x2A0F\x5\x3F6\x1FC\x2\x2A0F\x2A10\a\x36F\x2"+
		"\x2\x2A10\x2A11\x5\x312\x18A\x2\x2A11\x2A12\a\x36E\x2\x2\x2A12\x2A14\x3"+
		"\x2\x2\x2\x2A13\x29FF\x3\x2\x2\x2\x2A13\x2A00\x3\x2\x2\x2\x2A13\x2A0B"+
		"\x3\x2\x2\x2\x2A13\x2A0C\x3\x2\x2\x2\x2A14\x2A15\x3\x2\x2\x2\x2A15\x2A16"+
		"\a\x36F\x2\x2\x2A16\x2A17\x5\x312\x18A\x2\x2A17\x2A18\a\x36E\x2\x2\x2A18"+
		"\x2A36\x3\x2\x2\x2\x2A19\x2A1A\aI\x2\x2\x2A1A\x2A1B\a\x36D\x2\x2\x2A1B"+
		"\x2A1C\x5\x3EA\x1F6\x2\x2A1C\x2A2A\a\x36F\x2\x2\x2A1D\x2A2B\x5\x3F6\x1FC"+
		"\x2\x2A1E\x2A1F\a\x36D\x2\x2\x2A1F\x2A24\x5\x3F6\x1FC\x2\x2A20\x2A21\a"+
		"\x36F\x2\x2\x2A21\x2A23\x5\x3F6\x1FC\x2\x2A22\x2A20\x3\x2\x2\x2\x2A23"+
		"\x2A26\x3\x2\x2\x2\x2A24\x2A22\x3\x2\x2\x2\x2A24\x2A25\x3\x2\x2\x2\x2A25"+
		"\x2A27\x3\x2\x2\x2\x2A26\x2A24\x3\x2\x2\x2\x2A27\x2A28\a\x36E\x2\x2\x2A28"+
		"\x2A2B\x3\x2\x2\x2\x2A29\x2A2B\a\x373\x2\x2\x2A2A\x2A1D\x3\x2\x2\x2\x2A2A"+
		"\x2A1E\x3\x2\x2\x2\x2A2A\x2A29\x3\x2\x2\x2\x2A2B\x2A2C\x3\x2\x2\x2\x2A2C"+
		"\x2A2D\a\x36F\x2\x2\x2A2D\x2A31\x5\x312\x18A\x2\x2A2E\x2A2F\a\x36F\x2"+
		"\x2\x2A2F\x2A30\a\x2CD\x2\x2\x2A30\x2A32\x5\x312\x18A\x2\x2A31\x2A2E\x3"+
		"\x2\x2\x2\x2A31\x2A32\x3\x2\x2\x2\x2A32\x2A33\x3\x2\x2\x2\x2A33\x2A34"+
		"\a\x36E\x2\x2\x2A34\x2A36\x3\x2\x2\x2\x2A35\x29FD\x3\x2\x2\x2\x2A35\x2A19"+
		"\x3\x2\x2\x2\x2A36\x393\x3\x2\x2\x2\x2A37\x2A38\a\xED\x2\x2\x2A38\x2A39"+
		"\a\x36D\x2\x2\x2A39\x2A3A\a\x373\x2\x2\x2A3A\x2ACA\a\x36E\x2\x2\x2A3B"+
		"\x2A3C\a\xF5\x2\x2\x2A3C\x2A3D\a\x36D\x2\x2\x2A3D\x2A3E\x5\x312\x18A\x2"+
		"\x2A3E\x2A3F\a\b\x2\x2\x2A3F\x2A40\x5\x41E\x210\x2\x2A40\x2A41\a\x36E"+
		"\x2\x2\x2A41\x2ACA\x3\x2\x2\x2\x2A42\x2A43\a\xF6\x2\x2\x2A43\x2A44\a\x36D"+
		"\x2\x2\x2A44\x2A45\x5\x312\x18A\x2\x2A45\x2A46\a\b\x2\x2\x2A46\x2A47\x5"+
		"\x41E\x210\x2\x2A47\x2A48\a\x36E\x2\x2\x2A48\x2ACA\x3\x2\x2\x2\x2A49\x2A4A"+
		"\a\"\x2\x2\x2A4A\x2A4B\a\x36D\x2\x2\x2A4B\x2A4C\x5\x41E\x210\x2\x2A4C"+
		"\x2A4D\a\x36F\x2\x2\x2A4D\x2A50\x5\x312\x18A\x2\x2A4E\x2A4F\a\x36F\x2"+
		"\x2\x2A4F\x2A51\x5\x312\x18A\x2\x2A50\x2A4E\x3\x2\x2\x2\x2A50\x2A51\x3"+
		"\x2\x2\x2\x2A51\x2A52\x3\x2\x2\x2\x2A52\x2A53\a\x36E\x2\x2\x2A53\x2ACA"+
		"\x3\x2\x2\x2\x2A54\x2A55\a\xFC\x2\x2\x2A55\x2A56\a\x36D\x2\x2\x2A56\x2A57"+
		"\a\x373\x2\x2\x2A57\x2ACA\a\x36E\x2\x2\x2A58\x2A59\a\x19\x2\x2\x2A59\x2A5A"+
		"\a\x36D\x2\x2\x2A5A\x2A5B\x5\x3C2\x1E2\x2\x2A5B\x2A5C\a\x36E\x2\x2\x2A5C"+
		"\x2ACA\x3\x2\x2\x2\x2A5D\x2ACA\a(\x2\x2\x2A5E\x2ACA\a)\x2\x2\x2A5F\x2A60"+
		"\a\x116\x2\x2\x2A60\x2A61\a\x36D\x2\x2\x2A61\x2A62\a\x356\x2\x2\x2A62"+
		"\x2A63\a\x36F\x2\x2\x2A63\x2A64\x5\x312\x18A\x2\x2A64\x2A65\a\x36F\x2"+
		"\x2\x2A65\x2A66\x5\x312\x18A\x2\x2A66\x2A67\a\x36E\x2\x2\x2A67\x2ACA\x3"+
		"\x2\x2\x2\x2A68\x2A69\a\x117\x2\x2\x2A69\x2A6A\a\x36D\x2\x2\x2A6A\x2A6B"+
		"\a\x356\x2\x2\x2A6B\x2A6C\a\x36F\x2\x2\x2A6C\x2A6D\x5\x312\x18A\x2\x2A6D"+
		"\x2A6E\a\x36F\x2\x2\x2A6E\x2A6F\x5\x312\x18A\x2\x2A6F\x2A70\a\x36E\x2"+
		"\x2\x2A70\x2ACA\x3\x2\x2\x2\x2A71\x2A72\a\x118\x2\x2\x2A72\x2A73\a\x36D"+
		"\x2\x2\x2A73\x2A74\a\x356\x2\x2\x2A74\x2A75\a\x36F\x2\x2\x2A75\x2A76\x5"+
		"\x312\x18A\x2\x2A76\x2A77\a\x36E\x2\x2\x2A77\x2ACA\x3\x2\x2\x2\x2A78\x2A79"+
		"\a\x119\x2\x2\x2A79\x2A7A\a\x36D\x2\x2\x2A7A\x2A7B\a\x356\x2\x2\x2A7B"+
		"\x2A7C\a\x36F\x2\x2\x2A7C\x2A7D\x5\x312\x18A\x2\x2A7D\x2A7E\a\x36E\x2"+
		"\x2\x2A7E\x2ACA\x3\x2\x2\x2\x2A7F\x2A80\a\x159\x2\x2\x2A80\x2A81\a\x36D"+
		"\x2\x2\x2A81\x2ACA\a\x36E\x2\x2\x2A82\x2A83\a\x15A\x2\x2\x2A83\x2A84\a"+
		"\x36D\x2\x2\x2A84\x2ACA\a\x36E\x2\x2\x2A85\x2A86\aS\x2\x2\x2A86\x2A87"+
		"\a\x36D\x2\x2\x2A87\x2A8A\x5\x41E\x210\x2\x2A88\x2A89\a\x36F\x2\x2\x2A89"+
		"\x2A8B\a\x355\x2\x2\x2A8A\x2A88\x3\x2\x2\x2\x2A8A\x2A8B\x3\x2\x2\x2\x2A8B"+
		"\x2A8E\x3\x2\x2\x2\x2A8C\x2A8D\a\x36F\x2\x2\x2A8D\x2A8F\a\x355\x2\x2\x2A8E"+
		"\x2A8C\x3\x2\x2\x2\x2A8E\x2A8F\x3\x2\x2\x2\x2A8F\x2A90\x3\x2\x2\x2\x2A90"+
		"\x2A91\a\x36E\x2\x2\x2A91\x2ACA\x3\x2\x2\x2\x2A92\x2A93\a\x1A1\x2\x2\x2A93"+
		"\x2A94\a\x36D\x2\x2\x2A94\x2ACA\a\x36E\x2\x2\x2A95\x2A96\al\x2\x2\x2A96"+
		"\x2A97\a\x36D\x2\x2\x2A97\x2A98\x5\x312\x18A\x2\x2A98\x2A99\a\x36F\x2"+
		"\x2\x2A99\x2A9A\x5\x312\x18A\x2\x2A9A\x2A9B\a\x36E\x2\x2\x2A9B\x2ACA\x3"+
		"\x2\x2\x2\x2A9C\x2A9D\a\x23D\x2\x2\x2A9D\x2A9E\a\x36D\x2\x2\x2A9E\x2A9F"+
		"\x5\x312\x18A\x2\x2A9F\x2AA0\a\x36F\x2\x2\x2AA0\x2AA1\a\x355\x2\x2\x2AA1"+
		"\x2AA2\a\x36F\x2\x2\x2AA2\x2AA3\a\x355\x2\x2\x2AA3\x2AA4\a\x36F\x2\x2"+
		"\x2AA4\x2AA5\x5\x312\x18A\x2\x2AA5\x2AA6\a\x36E\x2\x2\x2AA6\x2ACA\x3\x2"+
		"\x2\x2\x2AA7\x2ACA\a\x9D\x2\x2\x2AA8\x2ACA\a\xA3\x2\x2\x2AA9\x2ACA\a\xB5"+
		"\x2\x2\x2AAA\x2AAB\a\x2C9\x2\x2\x2AAB\x2AAC\a\x36D\x2\x2\x2AAC\x2AAD\x5"+
		"\x312\x18A\x2\x2AAD\x2AAE\a\x36F\x2\x2\x2AAE\x2AAF\x5\x312\x18A\x2\x2AAF"+
		"\x2AB0\a\x36E\x2\x2\x2AB0\x2ACA\x3\x2\x2\x2\x2AB1\x2ACA\x5\x396\x1CC\x2"+
		"\x2AB2\x2AB3\a\x2C2\x2\x2\x2AB3\x2AB4\a\x36D\x2\x2\x2AB4\x2AB5\x5\x32A"+
		"\x196\x2\x2AB5\x2AB6\a\x36F\x2\x2\x2AB6\x2AB7\x5\x312\x18A\x2\x2AB7\x2AB8"+
		"\a\x36F\x2\x2\x2AB8\x2AB9\x5\x312\x18A\x2\x2AB9\x2ABA\a\x36E\x2\x2\x2ABA"+
		"\x2ACA\x3\x2\x2\x2\x2ABB\x2ABC\a\x23C\x2\x2\x2ABC\x2ABD\a\x36D\x2\x2\x2ABD"+
		"\x2ABE\x5\x312\x18A\x2\x2ABE\x2ABF\a\x36F\x2\x2\x2ABF\x2AC0\x5\x312\x18A"+
		"\x2\x2AC0\x2AC7\a\x36E\x2\x2\x2AC1\x2AC2\a\xBE\x2\x2\x2AC2\x2AC3\aP\x2"+
		"\x2\x2AC3\x2AC4\a\x36D\x2\x2\x2AC4\x2AC5\x5\x33A\x19E\x2\x2AC5\x2AC6\a"+
		"\x36E\x2\x2\x2AC6\x2AC8\x3\x2\x2\x2\x2AC7\x2AC1\x3\x2\x2\x2\x2AC7\x2AC8"+
		"\x3\x2\x2\x2\x2AC8\x2ACA\x3\x2\x2\x2\x2AC9\x2A37\x3\x2\x2\x2\x2AC9\x2A3B"+
		"\x3\x2\x2\x2\x2AC9\x2A42\x3\x2\x2\x2\x2AC9\x2A49\x3\x2\x2\x2\x2AC9\x2A54"+
		"\x3\x2\x2\x2\x2AC9\x2A58\x3\x2\x2\x2\x2AC9\x2A5D\x3\x2\x2\x2\x2AC9\x2A5E"+
		"\x3\x2\x2\x2\x2AC9\x2A5F\x3\x2\x2\x2\x2AC9\x2A68\x3\x2\x2\x2\x2AC9\x2A71"+
		"\x3\x2\x2\x2\x2AC9\x2A78\x3\x2\x2\x2\x2AC9\x2A7F\x3\x2\x2\x2\x2AC9\x2A82"+
		"\x3\x2\x2\x2\x2AC9\x2A85\x3\x2\x2\x2\x2AC9\x2A92\x3\x2\x2\x2\x2AC9\x2A95"+
		"\x3\x2\x2\x2\x2AC9\x2A9C\x3\x2\x2\x2\x2AC9\x2AA7\x3\x2\x2\x2\x2AC9\x2AA8"+
		"\x3\x2\x2\x2\x2AC9\x2AA9\x3\x2\x2\x2\x2AC9\x2AAA\x3\x2\x2\x2\x2AC9\x2AB1"+
		"\x3\x2\x2\x2\x2AC9\x2AB2\x3\x2\x2\x2\x2AC9\x2ABB\x3\x2\x2\x2\x2ACA\x395"+
		"\x3\x2\x2\x2\x2ACB\x2AD0\x5\x398\x1CD\x2\x2ACC\x2AD0\x5\x39C\x1CF\x2\x2ACD"+
		"\x2AD0\x5\x3A0\x1D1\x2\x2ACE\x2AD0\x5\x3A4\x1D3\x2\x2ACF\x2ACB\x3\x2\x2"+
		"\x2\x2ACF\x2ACC\x3\x2\x2\x2\x2ACF\x2ACD\x3\x2\x2\x2\x2ACF\x2ACE\x3\x2"+
		"\x2\x2\x2AD0\x397\x3\x2\x2\x2\x2AD1\x2ADA\a\x354\x2\x2\x2AD2\x2ADA\x5"+
		"\x428\x215\x2\x2AD3\x2ADA\a\x2B2\x2\x2\x2AD4\x2ADA\x5\x39C\x1CF\x2\x2AD5"+
		"\x2AD6\a\x36D\x2\x2\x2AD6\x2AD7\x5\x320\x191\x2\x2AD7\x2AD8\a\x36E\x2"+
		"\x2\x2AD8\x2ADA\x3\x2\x2\x2\x2AD9\x2AD1\x3\x2\x2\x2\x2AD9\x2AD2\x3\x2"+
		"\x2\x2\x2AD9\x2AD3\x3\x2\x2\x2\x2AD9\x2AD4\x3\x2\x2\x2\x2AD9\x2AD5\x3"+
		"\x2\x2\x2\x2ADA\x2ADB\x3\x2\x2\x2\x2ADB\x2ADC\a\x368\x2\x2\x2ADC\x2ADD"+
		"\x5\x39A\x1CE\x2\x2ADD\x399\x3\x2\x2\x2\x2ADE\x2ADF\a\x265\x2\x2\x2ADF"+
		"\x2AE0\a\x36D\x2\x2\x2AE0\x2AE1\a\x357\x2\x2\x2AE1\x2AE2\a\x36F\x2\x2"+
		"\x2AE2\x2AE3\a\x357\x2\x2\x2AE3\x2AE4\a\x36E\x2\x2\x2AE4\x39B\x3\x2\x2"+
		"\x2\x2AE5\x2AED\a\x354\x2\x2\x2AE6\x2AED\x5\x428\x215\x2\x2AE7\x2AED\x5"+
		"\x3E8\x1F5\x2\x2AE8\x2AE9\a\x36D\x2\x2\x2AE9\x2AEA\x5\x320\x191\x2\x2AEA"+
		"\x2AEB\a\x36E\x2\x2\x2AEB\x2AED\x3\x2\x2\x2\x2AEC\x2AE5\x3\x2\x2\x2\x2AEC"+
		"\x2AE6\x3\x2\x2\x2\x2AEC\x2AE7\x3\x2\x2\x2\x2AEC\x2AE8\x3\x2\x2\x2\x2AED"+
		"\x2AEE\x3\x2\x2\x2\x2AEE\x2AEF\a\x368\x2\x2\x2AEF\x2AF0\x5\x39E\x1D0\x2"+
		"\x2AF0\x39D\x3\x2\x2\x2\x2AF1\x2AF2\a\x1E8\x2\x2\x2AF2\x2AF3\a\x36D\x2"+
		"\x2\x2AF3\x2AF4\a\x357\x2\x2\x2AF4\x2AF5\a\x36E\x2\x2\x2AF5\x39F\x3\x2"+
		"\x2\x2\x2AF6\x2AFD\a\x354\x2\x2\x2AF7\x2AFD\x5\x428\x215\x2\x2AF8\x2AF9"+
		"\a\x36D\x2\x2\x2AF9\x2AFA\x5\x320\x191\x2\x2AFA\x2AFB\a\x36E\x2\x2\x2AFB"+
		"\x2AFD\x3\x2\x2\x2\x2AFC\x2AF6\x3\x2\x2\x2\x2AFC\x2AF7\x3\x2\x2\x2\x2AFC"+
		"\x2AF8\x3\x2\x2\x2\x2AFD\x2AFE\x3\x2\x2\x2\x2AFE\x2AFF\a\x368\x2\x2\x2AFF"+
		"\x2B00\x5\x3A2\x1D2\x2\x2B00\x3A1\x3\x2\x2\x2\x2B01\x2B02\a\x13E\x2\x2"+
		"\x2B02\x2B03\a\x36D\x2\x2\x2B03\x2B04\a\x357\x2\x2\x2B04\x2B05\a\x36E"+
		"\x2\x2\x2B05\x3A3\x3\x2\x2\x2\x2B06\x2B0D\a\x354\x2\x2\x2B07\x2B0D\x5"+
		"\x428\x215\x2\x2B08\x2B09\a\x36D\x2\x2\x2B09\x2B0A\x5\x320\x191\x2\x2B0A"+
		"\x2B0B\a\x36E\x2\x2\x2B0B\x2B0D\x3\x2\x2\x2\x2B0C\x2B06\x3\x2\x2\x2\x2B0C"+
		"\x2B07\x3\x2\x2\x2\x2B0C\x2B08\x3\x2\x2\x2\x2B0D\x2B0E\x3\x2\x2\x2\x2B0E"+
		"\x2B0F\a\x368\x2\x2\x2B0F\x2B10\x5\x3A6\x1D4\x2\x2B10\x3A5\x3\x2\x2\x2"+
		"\x2B11\x2B12\a\x1A9\x2\x2\x2B12\x2B13\a\x36D\x2\x2\x2B13\x2B14\a\x357"+
		"\x2\x2\x2B14\x2B15\a\x36E\x2\x2\x2B15\x3A7\x3\x2\x2\x2\x2B16\x2B1D\a\x354"+
		"\x2\x2\x2B17\x2B1D\x5\x428\x215\x2\x2B18\x2B19\a\x36D\x2\x2\x2B19\x2B1A"+
		"\x5\x320\x191\x2\x2B1A\x2B1B\a\x36E\x2\x2\x2B1B\x2B1D\x3\x2\x2\x2\x2B1C"+
		"\x2B16\x3\x2\x2\x2\x2B1C\x2B17\x3\x2\x2\x2\x2B1C\x2B18\x3\x2\x2\x2\x2B1D"+
		"\x2B1E\x3\x2\x2\x2\x2B1E\x2B1F\a\x368\x2\x2\x2B1F\x2B20\a\x1B7\x2\x2\x2B20"+
		"\x2B21\a\x36D\x2\x2\x2B21\x2B22\a\x357\x2\x2\x2B22\x2B23\a\x36E\x2\x2"+
		"\x2B23\x3A9\x3\x2\x2\x2\x2B24\x2B25\a\xBA\x2\x2\x2B25\x2B26\x5\x312\x18A"+
		"\x2\x2B26\x2B27\a\xA7\x2\x2\x2B27\x2B28\x5\x312\x18A\x2\x2B28\x3AB\x3"+
		"\x2\x2\x2\x2B29\x2B2A\a\xBA\x2\x2\x2B2A\x2B2B\x5\x32A\x196\x2\x2B2B\x2B2C"+
		"\a\xA7\x2\x2\x2B2C\x2B2D\x5\x312\x18A\x2\x2B2D\x3AD\x3\x2\x2\x2\x2B2E"+
		"\x2B30\a\b\x2\x2\x2B2F\x2B2E\x3\x2\x2\x2\x2B2F\x2B30\x3\x2\x2\x2\x2B30"+
		"\x2B31\x3\x2\x2\x2\x2B31\x2B32\x5\x3BE\x1E0\x2\x2B32\x3AF\x3\x2\x2\x2"+
		"\x2B33\x2B35\a\b\x2\x2\x2B34\x2B33\x3\x2\x2\x2\x2B34\x2B35\x3\x2\x2\x2"+
		"\x2B35\x2B36\x3\x2\x2\x2\x2B36\x2B37\x5\x3B2\x1DA\x2\x2B37\x3B1\x3\x2"+
		"\x2\x2\x2B38\x2B3A\x5\x428\x215\x2\x2B39\x2B3B\x5\x3B4\x1DB\x2\x2B3A\x2B39"+
		"\x3\x2\x2\x2\x2B3A\x2B3B\x3\x2\x2\x2\x2B3B\x3B3\x3\x2\x2\x2\x2B3C\x2B3E"+
		"\a\xBD\x2\x2\x2B3D\x2B3C\x3\x2\x2\x2\x2B3D\x2B3E\x3\x2\x2\x2\x2B3E\x2B3F"+
		"\x3\x2\x2\x2\x2B3F\x2B40\a\x36D\x2\x2\x2B40\x2B47\x5\x3B8\x1DD\x2\x2B41"+
		"\x2B43\a\x36F\x2\x2\x2B42\x2B41\x3\x2\x2\x2\x2B42\x2B43\x3\x2\x2\x2\x2B43"+
		"\x2B44\x3\x2\x2\x2\x2B44\x2B46\x5\x3B8\x1DD\x2\x2B45\x2B42\x3\x2\x2\x2"+
		"\x2B46\x2B49\x3\x2\x2\x2\x2B47\x2B45\x3\x2\x2\x2\x2B47\x2B48\x3\x2\x2"+
		"\x2\x2B48\x2B4A\x3\x2\x2\x2\x2B49\x2B47\x3\x2\x2\x2\x2B4A\x2B4B\a\x36E"+
		"\x2\x2\x2B4B\x3B5\x3\x2\x2\x2\x2B4C\x2B4D\a\xBD\x2\x2\x2B4D\x2B4E\a\x36D"+
		"\x2\x2\x2B4E\x2B55\x5\x3B8\x1DD\x2\x2B4F\x2B51\a\x36F\x2\x2\x2B50\x2B4F"+
		"\x3\x2\x2\x2\x2B50\x2B51\x3\x2\x2\x2\x2B51\x2B52\x3\x2\x2\x2\x2B52\x2B54"+
		"\x5\x3B8\x1DD\x2\x2B53\x2B50\x3\x2\x2\x2\x2B54\x2B57\x3\x2\x2\x2\x2B55"+
		"\x2B53\x3\x2\x2\x2\x2B55\x2B56\x3\x2\x2\x2\x2B56\x2B58\x3\x2\x2\x2\x2B57"+
		"\x2B55\x3\x2\x2\x2\x2B58\x2B59\a\x36E\x2\x2\x2B59\x3B7\x3\x2\x2\x2\x2B5A"+
		"\x2B5C\a\x1B8\x2\x2\x2B5B\x2B5A\x3\x2\x2\x2\x2B5B\x2B5C\x3\x2\x2\x2\x2B5C"+
		"\x2B8E\x3\x2\x2\x2\x2B5D\x2B71\aX\x2\x2\x2B5E\x2B5F\a\x36D\x2\x2\x2B5F"+
		"\x2B64\x5\x3BA\x1DE\x2\x2B60\x2B61\a\x36F\x2\x2\x2B61\x2B63\x5\x3BA\x1DE"+
		"\x2\x2B62\x2B60\x3\x2\x2\x2\x2B63\x2B66\x3\x2\x2\x2\x2B64\x2B62\x3\x2"+
		"\x2\x2\x2B64\x2B65\x3\x2\x2\x2\x2B65\x2B67\x3\x2\x2\x2\x2B66\x2B64\x3"+
		"\x2\x2\x2\x2B67\x2B68\a\x36E\x2\x2\x2B68\x2B72\x3\x2\x2\x2\x2B69\x2B6E"+
		"\x5\x3BA\x1DE\x2\x2B6A\x2B6B\a\x36F\x2\x2\x2B6B\x2B6D\x5\x3BA\x1DE\x2"+
		"\x2B6C\x2B6A\x3\x2\x2\x2\x2B6D\x2B70\x3\x2\x2\x2\x2B6E\x2B6C\x3\x2\x2"+
		"\x2\x2B6E\x2B6F\x3\x2\x2\x2\x2B6F\x2B72\x3\x2\x2\x2\x2B70\x2B6E\x3\x2"+
		"\x2\x2\x2B71\x2B5E\x3\x2\x2\x2\x2B71\x2B69\x3\x2\x2\x2\x2B72\x2B8F\x3"+
		"\x2\x2\x2\x2B73\x2B74\aX\x2\x2\x2B74\x2B75\a\x35B\x2\x2\x2B75\x2B8F\x5"+
		"\x3BA\x1DE\x2\x2B76\x2B85\a\x2BC\x2\x2\x2B77\x2B78\a\x36D\x2\x2\x2B78"+
		"\x2B79\x5\x3BA\x1DE\x2\x2B79\x2B7A\a\x36D\x2\x2\x2B7A\x2B7F\a\x356\x2"+
		"\x2\x2B7B\x2B7C\a\x36F\x2\x2\x2B7C\x2B7E\a\x356\x2\x2\x2B7D\x2B7B\x3\x2"+
		"\x2\x2\x2B7E\x2B81\x3\x2\x2\x2\x2B7F\x2B7D\x3\x2\x2\x2\x2B7F\x2B80\x3"+
		"\x2\x2\x2\x2B80\x2B82\x3\x2\x2\x2\x2B81\x2B7F\x3\x2\x2\x2\x2B82\x2B83"+
		"\a\x36E\x2\x2\x2B83\x2B84\a\x36E\x2\x2\x2B84\x2B86\x3\x2\x2\x2\x2B85\x2B77"+
		"\x3\x2\x2\x2\x2B85\x2B86\x3\x2\x2\x2\x2B86\x2B8F\x3\x2\x2\x2\x2B87\x2B8F"+
		"\a\x227\x2\x2\x2B88\x2B8F\a\x231\x2\x2\x2B89\x2B8A\a\x232\x2\x2\x2B8A"+
		"\x2B8B\a\x35B\x2\x2\x2B8B\x2B8F\a\x355\x2\x2\x2B8C\x2B8F\aR\x2\x2\x2B8D"+
		"\x2B8F\a\x356\x2\x2\x2B8E\x2B5D\x3\x2\x2\x2\x2B8E\x2B73\x3\x2\x2\x2\x2B8E"+
		"\x2B76\x3\x2\x2\x2\x2B8E\x2B87\x3\x2\x2\x2\x2B8E\x2B88\x3\x2\x2\x2\x2B8E"+
		"\x2B89\x3\x2\x2\x2\x2B8E\x2B8C\x3\x2\x2\x2\x2B8E\x2B8D\x3\x2\x2\x2\x2B8F"+
		"\x3B9\x3\x2\x2\x2\x2B90\x2B93\x5\x428\x215\x2\x2B91\x2B93\a\x355\x2\x2"+
		"\x2B92\x2B90\x3\x2\x2\x2\x2B92\x2B91\x3\x2\x2\x2\x2B93\x3BB\x3\x2\x2\x2"+
		"\x2B94\x2B95\a\x36D\x2\x2\x2B95\x2B9A\x5\x3BE\x1E0\x2\x2B96\x2B97\a\x36F"+
		"\x2\x2\x2B97\x2B99\x5\x3BE\x1E0\x2\x2B98\x2B96\x3\x2\x2\x2\x2B99\x2B9C"+
		"\x3\x2\x2\x2\x2B9A\x2B98\x3\x2\x2\x2\x2B9A\x2B9B\x3\x2\x2\x2\x2B9B\x2B9D"+
		"\x3\x2\x2\x2\x2B9C\x2B9A\x3\x2\x2\x2\x2B9D\x2B9E\a\x36E\x2\x2\x2B9E\x3BD"+
		"\x3\x2\x2\x2\x2B9F\x2BA2\x5\x428\x215\x2\x2BA0\x2BA2\a\x357\x2\x2\x2BA1"+
		"\x2B9F\x3\x2\x2\x2\x2BA1\x2BA0\x3\x2\x2\x2\x2BA2\x3BF\x3\x2\x2\x2\x2BA3"+
		"\x2BA4\a\xB6\x2\x2\x2BA4\x2BA5\a\x36D\x2\x2\x2BA5\x2BA6\x5\x3C2\x1E2\x2"+
		"\x2BA6\x2BAE\a\x36E\x2\x2\x2BA7\x2BA8\a\x36F\x2\x2\x2BA8\x2BA9\a\x36D"+
		"\x2\x2\x2BA9\x2BAA\x5\x3C2\x1E2\x2\x2BAA\x2BAB\a\x36E\x2\x2\x2BAB\x2BAD"+
		"\x3\x2\x2\x2\x2BAC\x2BA7\x3\x2\x2\x2\x2BAD\x2BB0\x3\x2\x2\x2\x2BAE\x2BAC"+
		"\x3\x2\x2\x2\x2BAE\x2BAF\x3\x2\x2\x2\x2BAF\x3C1\x3\x2\x2\x2\x2BB0\x2BAE"+
		"\x3\x2\x2\x2\x2BB1\x2BB6\x5\x312\x18A\x2\x2BB2\x2BB3\a\x36F\x2\x2\x2BB3"+
		"\x2BB5\x5\x312\x18A\x2\x2BB4\x2BB2\x3\x2\x2\x2\x2BB5\x2BB8\x3\x2\x2\x2"+
		"\x2BB6\x2BB4\x3\x2\x2\x2\x2BB6\x2BB7\x3\x2\x2\x2\x2BB7\x3C3\x3\x2\x2\x2"+
		"\x2BB8\x2BB6\x3\x2\x2\x2\x2BB9\x2BBA\t\x8C\x2\x2\x2BBA\x2BBB\a\x36D\x2"+
		"\x2\x2BBB\x2BBC\a\x36E\x2\x2\x2BBC\x2BC4\x5\x3CC\x1E7\x2\x2BBD\x2BBE\a"+
		"\x1BE\x2\x2\x2BBE\x2BBF\a\x36D\x2\x2\x2BBF\x2BC0\x5\x312\x18A\x2\x2BC0"+
		"\x2BC1\a\x36E\x2\x2\x2BC1\x2BC2\x5\x3CC\x1E7\x2\x2BC2\x2BC4\x3\x2\x2\x2"+
		"\x2BC3\x2BB9\x3\x2\x2\x2\x2BC3\x2BBD\x3\x2\x2\x2\x2BC4\x3C5\x3\x2\x2\x2"+
		"\x2BC5\x2BC6\t\x8D\x2\x2\x2BC6\x2BC7\a\x36D\x2\x2\x2BC7\x2BC8\x5\x3CA"+
		"\x1E6\x2\x2BC8\x2BCA\a\x36E\x2\x2\x2BC9\x2BCB\x5\x3CC\x1E7\x2\x2BCA\x2BC9"+
		"\x3\x2\x2\x2\x2BCA\x2BCB\x3\x2\x2\x2\x2BCB\x2BE6\x3\x2\x2\x2\x2BCC\x2BCD"+
		"\t\x8E\x2\x2\x2BCD\x2BD0\a\x36D\x2\x2\x2BCE\x2BD1\a\x373\x2\x2\x2BCF\x2BD1"+
		"\x5\x3CA\x1E6\x2\x2BD0\x2BCE\x3\x2\x2\x2\x2BD0\x2BCF\x3\x2\x2\x2\x2BD1"+
		"\x2BD2\x3\x2\x2\x2\x2BD2\x2BD4\a\x36E\x2\x2\x2BD3\x2BD5\x5\x3CC\x1E7\x2"+
		"\x2BD4\x2BD3\x3\x2\x2\x2\x2BD4\x2BD5\x3\x2\x2\x2\x2BD5\x2BE6\x3\x2\x2"+
		"\x2\x2BD6\x2BD7\a\xFD\x2\x2\x2BD7\x2BD8\a\x36D\x2\x2\x2BD8\x2BD9\x5\x3CA"+
		"\x1E6\x2\x2BD9\x2BDA\a\x36E\x2\x2\x2BDA\x2BE6\x3\x2\x2\x2\x2BDB\x2BDC"+
		"\a\x15F\x2\x2\x2BDC\x2BDD\a\x36D\x2\x2\x2BDD\x2BDE\x5\x312\x18A\x2\x2BDE"+
		"\x2BDF\a\x36E\x2\x2\x2BDF\x2BE6\x3\x2\x2\x2\x2BE0\x2BE1\a\x160\x2\x2\x2BE1"+
		"\x2BE2\a\x36D\x2\x2\x2BE2\x2BE3\x5\x3C2\x1E2\x2\x2BE3\x2BE4\a\x36E\x2"+
		"\x2\x2BE4\x2BE6\x3\x2\x2\x2\x2BE5\x2BC5\x3\x2\x2\x2\x2BE5\x2BCC\x3\x2"+
		"\x2\x2\x2BE5\x2BD6\x3\x2\x2\x2\x2BE5\x2BDB\x3\x2\x2\x2\x2BE5\x2BE0\x3"+
		"\x2\x2\x2\x2BE6\x3C7\x3\x2\x2\x2\x2BE7\x2BE8\t\x8F\x2\x2\x2BE8\x2BE9\a"+
		"\x36D\x2\x2\x2BE9\x2BEA\x5\x312\x18A\x2\x2BEA\x2BEB\a\x36E\x2\x2\x2BEB"+
		"\x2BEC\x5\x3CC\x1E7\x2\x2BEC\x2C20\x3\x2\x2\x2\x2BED\x2BEE\t\x90\x2\x2"+
		"\x2BEE\x2BEF\a\x36D\x2\x2\x2BEF\x2BF6\x5\x312\x18A\x2\x2BF0\x2BF1\a\x36F"+
		"\x2\x2\x2BF1\x2BF4\x5\x312\x18A\x2\x2BF2\x2BF3\a\x36F\x2\x2\x2BF3\x2BF5"+
		"\x5\x312\x18A\x2\x2BF4\x2BF2\x3\x2\x2\x2\x2BF4\x2BF5\x3\x2\x2\x2\x2BF5"+
		"\x2BF7\x3\x2\x2\x2\x2BF6\x2BF0\x3\x2\x2\x2\x2BF6\x2BF7\x3\x2\x2\x2\x2BF7"+
		"\x2BF8\x3\x2\x2\x2\x2BF8\x2BF9\a\x36E\x2\x2\x2BF9\x2BFA\x5\x3CC\x1E7\x2"+
		"\x2BFA\x2C20\x3\x2\x2\x2\x2BFB\x2BFC\t\x91\x2\x2\x2BFC\x2BFD\a\x36D\x2"+
		"\x2\x2BFD\x2BFE\a\x36E\x2\x2\x2BFE\x2BFF\a{\x2\x2\x2BFF\x2C03\a\x36D\x2"+
		"\x2\x2C00\x2C01\a\x1D2\x2\x2\x2C01\x2C02\a\x12\x2\x2\x2C02\x2C04\x5\x3C2"+
		"\x1E2\x2\x2C03\x2C00\x3\x2\x2\x2\x2C03\x2C04\x3\x2\x2\x2\x2C04\x2C05\x3"+
		"\x2\x2\x2\x2C05\x2C06\x5\x33A\x19E\x2\x2C06\x2C07\a\x36E\x2\x2\x2C07\x2C20"+
		"\x3\x2\x2\x2\x2C08\x2C09\t\x92\x2\x2\x2C09\x2C0A\a\x36D\x2\x2\x2C0A\x2C0B"+
		"\x5\x312\x18A\x2\x2C0B\x2C0C\a\x36E\x2\x2\x2C0C\x2C0D\a\xBE\x2\x2\x2C0D"+
		"\x2C0E\aP\x2\x2\x2C0E\x2C0F\a\x36D\x2\x2\x2C0F\x2C10\ay\x2\x2\x2C10\x2C11"+
		"\a\x12\x2\x2\x2C11\x2C13\x5\x312\x18A\x2\x2C12\x2C14\t\x93\x2\x2\x2C13"+
		"\x2C12\x3\x2\x2\x2\x2C13\x2C14\x3\x2\x2\x2\x2C14\x2C15\x3\x2\x2\x2\x2C15"+
		"\x2C16\a\x36E\x2\x2\x2C16\x2C17\a{\x2\x2\x2C17\x2C1B\a\x36D\x2\x2\x2C18"+
		"\x2C19\a\x1D2\x2\x2\x2C19\x2C1A\a\x12\x2\x2\x2C1A\x2C1C\x5\x3C2\x1E2\x2"+
		"\x2C1B\x2C18\x3\x2\x2\x2\x2C1B\x2C1C\x3\x2\x2\x2\x2C1C\x2C1D\x3\x2\x2"+
		"\x2\x2C1D\x2C1E\a\x36E\x2\x2\x2C1E\x2C20\x3\x2\x2\x2\x2C1F\x2BE7\x3\x2"+
		"\x2\x2\x2C1F\x2BED\x3\x2\x2\x2\x2C1F\x2BFB\x3\x2\x2\x2\x2C1F\x2C08\x3"+
		"\x2\x2\x2\x2C20\x3C9\x3\x2\x2\x2\x2C21\x2C23\t|\x2\x2\x2C22\x2C21\x3\x2"+
		"\x2\x2\x2C22\x2C23\x3\x2\x2\x2\x2C23\x2C24\x3\x2\x2\x2\x2C24\x2C25\x5"+
		"\x312\x18A\x2\x2C25\x3CB\x3\x2\x2\x2\x2C26\x2C27\a{\x2\x2\x2C27\x2C2B"+
		"\a\x36D\x2\x2\x2C28\x2C29\a\x1D2\x2\x2\x2C29\x2C2A\a\x12\x2\x2\x2C2A\x2C2C"+
		"\x5\x3C2\x1E2\x2\x2C2B\x2C28\x3\x2\x2\x2\x2C2B\x2C2C\x3\x2\x2\x2\x2C2C"+
		"\x2C2E\x3\x2\x2\x2\x2C2D\x2C2F\x5\x33A\x19E\x2\x2C2E\x2C2D\x3\x2\x2\x2"+
		"\x2C2E\x2C2F\x3\x2\x2\x2\x2C2F\x2C31\x3\x2\x2\x2\x2C30\x2C32\x5\x3CE\x1E8"+
		"\x2\x2C31\x2C30\x3\x2\x2\x2\x2C31\x2C32\x3\x2\x2\x2\x2C32\x2C33\x3\x2"+
		"\x2\x2\x2C33\x2C34\a\x36E\x2\x2\x2C34\x3CD\x3\x2\x2\x2\x2C35\x2C36\t\x94"+
		"\x2\x2\x2C36\x2C37\x5\x3D0\x1E9\x2\x2C37\x3CF\x3\x2\x2\x2\x2C38\x2C3F"+
		"\x5\x3D4\x1EB\x2\x2C39\x2C3A\a\xE\x2\x2\x2C3A\x2C3B\x5\x3D2\x1EA\x2\x2C3B"+
		"\x2C3C\a\x6\x2\x2\x2C3C\x2C3D\x5\x3D2\x1EA\x2\x2C3D\x2C3F\x3\x2\x2\x2"+
		"\x2C3E\x2C38\x3\x2\x2\x2\x2C3E\x2C39\x3\x2\x2\x2\x2C3F\x3D1\x3\x2\x2\x2"+
		"\x2C40\x2C43\x5\x3D4\x1EB\x2\x2C41\x2C43\x5\x3D6\x1EC\x2\x2C42\x2C40\x3"+
		"\x2\x2\x2\x2C42\x2C41\x3\x2\x2\x2\x2C43\x3D3\x3\x2\x2\x2\x2C44\x2C45\a"+
		"\x25C\x2\x2\x2C45\x2C4B\a\x1DC\x2\x2\x2C46\x2C47\a\x355\x2\x2\x2C47\x2C4B"+
		"\a\x1DC\x2\x2\x2C48\x2C49\a%\x2\x2\x2C49\x2C4B\a\x20F\x2\x2\x2C4A\x2C44"+
		"\x3\x2\x2\x2\x2C4A\x2C46\x3\x2\x2\x2\x2C4A\x2C48\x3\x2\x2\x2\x2C4B\x3D5"+
		"\x3\x2\x2\x2\x2C4C\x2C4D\a\x25C\x2\x2\x2C4D\x2C51\a\x150\x2\x2\x2C4E\x2C4F"+
		"\a\x355\x2\x2\x2C4F\x2C51\a\x150\x2\x2\x2C50\x2C4C\x3\x2\x2\x2\x2C50\x2C4E"+
		"\x3\x2\x2\x2\x2C51\x3D7\x3\x2\x2\x2\x2C52\x2C53\a\x14C\x2\x2\x2C53\x2C58"+
		"\x5\x3DA\x1EE\x2\x2C54\x2C55\a\x36F\x2\x2\x2C55\x2C57\x5\x3DA\x1EE\x2"+
		"\x2C56\x2C54\x3\x2\x2\x2\x2C57\x2C5A\x3\x2\x2\x2\x2C58\x2C56\x3\x2\x2"+
		"\x2\x2C58\x2C59\x3\x2\x2\x2\x2C59\x2C75\x3\x2\x2\x2\x2C5A\x2C58\x3\x2"+
		"\x2\x2\x2C5B\x2C5C\a\x120\x2\x2\x2C5C\x2C5F\a\x35B\x2\x2\x2C5D\x2C60\x5"+
		"\x428\x215\x2\x2C5E\x2C60\a\x357\x2\x2\x2C5F\x2C5D\x3\x2\x2\x2\x2C5F\x2C5E"+
		"\x3\x2\x2\x2\x2C60\x2C75\x3\x2\x2\x2\x2C61\x2C62\a\x11F\x2\x2\x2C62\x2C65"+
		"\a\x35B\x2\x2\x2C63\x2C66\x5\x428\x215\x2\x2C64\x2C66\a\x357\x2\x2\x2C65"+
		"\x2C63\x3\x2\x2\x2\x2C65\x2C64\x3\x2\x2\x2\x2C66\x2C75\x3\x2\x2\x2\x2C67"+
		"\x2C68\a\x1AD\x2\x2\x2C68\x2C69\a\x35B\x2\x2\x2C69\x2C75\t\t\x2\x2\x2C6A"+
		"\x2C6B\a\x253\x2\x2\x2C6B\x2C6C\a\x35B\x2\x2\x2C6C\x2C75\t\t\x2\x2\x2C6D"+
		"\x2C6E\a\x259\x2\x2\x2C6E\x2C6F\a\x35B\x2\x2\x2C6F\x2C75\a\x355\x2\x2"+
		"\x2C70\x2C71\a\x11B\x2\x2\x2C71\x2C75\t\t\x2\x2\x2C72\x2C73\a\x256\x2"+
		"\x2\x2C73\x2C75\t\t\x2\x2\x2C74\x2C52\x3\x2\x2\x2\x2C74\x2C5B\x3\x2\x2"+
		"\x2\x2C74\x2C61\x3\x2\x2\x2\x2C74\x2C67\x3\x2\x2\x2\x2C74\x2C6A\x3\x2"+
		"\x2\x2\x2C74\x2C6D\x3\x2\x2\x2\x2C74\x2C70\x3\x2\x2\x2\x2C74\x2C72\x3"+
		"\x2\x2\x2\x2C75\x3D9\x3\x2\x2\x2\x2C76\x2C7D\a\x36D\x2\x2\x2C77\x2C78"+
		"\a\x1B9\x2\x2\x2C78\x2C79\a\x35B\x2\x2\x2C79\x2C7E\t\x95\x2\x2\x2C7A\x2C7B"+
		"\a\x12C\x2\x2\x2C7B\x2C7C\a\x35B\x2\x2\x2C7C\x2C7E\a\x357\x2\x2\x2C7D"+
		"\x2C77\x3\x2\x2\x2\x2C7D\x2C7A\x3\x2\x2\x2\x2C7E\x2C7F\x3\x2\x2\x2\x2C7F"+
		"\x2C80\a\x36E\x2\x2\x2C80\x3DB\x3\x2\x2\x2\x2C81\x2C84\x5\x3DE\x1F0\x2"+
		"\x2C82\x2C84\x5\x3E0\x1F1\x2\x2C83\x2C81\x3\x2\x2\x2\x2C83\x2C82\x3\x2"+
		"\x2\x2\x2C84\x3DD\x3\x2\x2\x2\x2C85\x2C86\a\x148\x2\x2\x2C86\x2C89\x5"+
		"\x428\x215\x2\x2C87\x2C88\a\x1F\x2\x2\x2C88\x2C8A\a\x14C\x2\x2\x2C89\x2C87"+
		"\x3\x2\x2\x2\x2C89\x2C8A\x3\x2\x2\x2\x2C8A\x2C8C\x3\x2\x2\x2\x2C8B\x2C8D"+
		"\a/\x2\x2\x2C8C\x2C8B\x3\x2\x2\x2\x2C8C\x2C8D\x3\x2\x2\x2\x2C8D\x2C90"+
		"\x3\x2\x2\x2\x2C8E\x2C8F\a\x1F\x2\x2\x2C8F\x2C91\a\x19E\x2\x2\x2C90\x2C8E"+
		"\x3\x2\x2\x2\x2C90\x2C91\x3\x2\x2\x2\x2C91\x2C92\x3\x2\x2\x2\x2C92\x2C97"+
		"\x5\x3E0\x1F1\x2\x2C93\x2C94\a\x36F\x2\x2\x2C94\x2C96\x5\x3E0\x1F1\x2"+
		"\x2C95\x2C93\x3\x2\x2\x2\x2C96\x2C99\x3\x2\x2\x2\x2C97\x2C95\x3\x2\x2"+
		"\x2\x2C97\x2C98\x3\x2\x2\x2\x2C98\x3DF\x3\x2\x2\x2\x2C99\x2C97\x3\x2\x2"+
		"\x2\x2C9A\x2C9B\a\x36D\x2\x2\x2C9B\x2C9C\a\x1AC\x2\x2\x2C9C\x2C9F\a\x35B"+
		"\x2\x2\x2C9D\x2CA0\x5\x428\x215\x2\x2C9E\x2CA0\a\x357\x2\x2\x2C9F\x2C9D"+
		"\x3\x2\x2\x2\x2C9F\x2C9E\x3\x2\x2\x2\x2CA0\x2CA2\x3\x2\x2\x2\x2CA1\x2CA3"+
		"\a\x36F\x2\x2\x2CA2\x2CA1\x3\x2\x2\x2\x2CA2\x2CA3\x3\x2\x2\x2\x2CA3\x2CA4"+
		"\x3\x2\x2\x2\x2CA4\x2CA5\a\x14A\x2\x2\x2CA5\x2CA6\a\x35B\x2\x2\x2CA6\x2CA8"+
		"\a\x357\x2\x2\x2CA7\x2CA9\a\x36F\x2\x2\x2CA8\x2CA7\x3\x2\x2\x2\x2CA8\x2CA9"+
		"\x3\x2\x2\x2\x2CA9\x2CB0\x3\x2\x2\x2\x2CAA\x2CAB\a\x22F\x2\x2\x2CAB\x2CAC"+
		"\a\x35B\x2\x2\x2CAC\x2CAE\x5\x432\x21A\x2\x2CAD\x2CAF\a\x36F\x2\x2\x2CAE"+
		"\x2CAD\x3\x2\x2\x2\x2CAE\x2CAF\x3\x2\x2\x2\x2CAF\x2CB1\x3\x2\x2\x2\x2CB0"+
		"\x2CAA\x3\x2\x2\x2\x2CB0\x2CB1\x3\x2\x2\x2\x2CB1\x2CBB\x3\x2\x2\x2\x2CB2"+
		"\x2CB3\a\x19B\x2\x2\x2CB3\x2CB6\a\x35B\x2\x2\x2CB4\x2CB7\x5\x432\x21A"+
		"\x2\x2CB5\x2CB7\a\x25F\x2\x2\x2CB6\x2CB4\x3\x2\x2\x2\x2CB6\x2CB5\x3\x2"+
		"\x2\x2\x2CB7\x2CB9\x3\x2\x2\x2\x2CB8\x2CBA\a\x36F\x2\x2\x2CB9\x2CB8\x3"+
		"\x2\x2\x2\x2CB9\x2CBA\x3\x2\x2\x2\x2CBA\x2CBC\x3\x2\x2\x2\x2CBB\x2CB2"+
		"\x3\x2\x2\x2\x2CBB\x2CBC\x3\x2\x2\x2\x2CBC\x2CC3\x3\x2\x2\x2\x2CBD\x2CBE"+
		"\a\x149\x2\x2\x2CBE\x2CBF\a\x35B\x2\x2\x2CBF\x2CC1\x5\x432\x21A\x2\x2CC0"+
		"\x2CC2\a\x36F\x2\x2\x2CC1\x2CC0\x3\x2\x2\x2\x2CC1\x2CC2\x3\x2\x2\x2\x2CC2"+
		"\x2CC4\x3\x2\x2\x2\x2CC3\x2CBD\x3\x2\x2\x2\x2CC3\x2CC4\x3\x2\x2\x2\x2CC4"+
		"\x2CC5\x3\x2\x2\x2\x2CC5\x2CC6\a\x36E\x2\x2\x2CC6\x3E1\x3\x2\x2\x2\x2CC7"+
		"\x2CC8\x5\x428\x215\x2\x2CC8\x2CC9\a\x368\x2\x2\x2CC9\x2CCA\x5\x428\x215"+
		"\x2\x2CCA\x2CCB\a\x368\x2\x2\x2CCB\x2CCC\x5\x428\x215\x2\x2CCC\x2CCD\a"+
		"\x368\x2\x2\x2CCD\x2CD9\x3\x2\x2\x2\x2CCE\x2CCF\x5\x428\x215\x2\x2CCF"+
		"\x2CD1\a\x368\x2\x2\x2CD0\x2CD2\x5\x428\x215\x2\x2CD1\x2CD0\x3\x2\x2\x2"+
		"\x2CD1\x2CD2\x3\x2\x2\x2\x2CD2\x2CD3\x3\x2\x2\x2\x2CD3\x2CD4\a\x368\x2"+
		"\x2\x2CD4\x2CD9\x3\x2\x2\x2\x2CD5\x2CD6\x5\x428\x215\x2\x2CD6\x2CD7\a"+
		"\x368\x2\x2\x2CD7\x2CD9\x3\x2\x2\x2\x2CD8\x2CC7\x3\x2\x2\x2\x2CD8\x2CCE"+
		"\x3\x2\x2\x2\x2CD8\x2CD5\x3\x2\x2\x2\x2CD8\x2CD9\x3\x2\x2\x2\x2CD9\x2CDA"+
		"\x3\x2\x2\x2\x2CDA\x2CDB\x5\x428\x215\x2\x2CDB\x3E3\x3\x2\x2\x2\x2CDC"+
		"\x2CE2\x5\x428\x215\x2\x2CDD\x2CDE\x5\x428\x215\x2\x2CDE\x2CDF\a\x368"+
		"\x2\x2\x2CDF\x2CE0\x5\x428\x215\x2\x2CE0\x2CE2\x3\x2\x2\x2\x2CE1\x2CDC"+
		"\x3\x2\x2\x2\x2CE1\x2CDD\x3\x2\x2\x2\x2CE2\x3E5\x3\x2\x2\x2\x2CE3\x2CE9"+
		"\x5\x428\x215\x2\x2CE4\x2CE5\x5\x428\x215\x2\x2CE5\x2CE6\a\x368\x2\x2"+
		"\x2CE6\x2CE7\x5\x428\x215\x2\x2CE7\x2CE9\x3\x2\x2\x2\x2CE8\x2CE3\x3\x2"+
		"\x2\x2\x2CE8\x2CE4\x3\x2\x2\x2\x2CE9\x3E7\x3\x2\x2\x2\x2CEA\x2CEB\x5\x428"+
		"\x215\x2\x2CEB\x2CEC\a\x368\x2\x2\x2CEC\x2CED\a\x368\x2\x2\x2CED\x2CEE"+
		"\x5\x428\x215\x2\x2CEE\x2CEF\a\x368\x2\x2\x2CEF\x2D02\x3\x2\x2\x2\x2CF0"+
		"\x2CF1\x5\x428\x215\x2\x2CF1\x2CF2\a\x368\x2\x2\x2CF2\x2CF3\x5\x428\x215"+
		"\x2\x2CF3\x2CF4\a\x368\x2\x2\x2CF4\x2CF5\x5\x428\x215\x2\x2CF5\x2CF6\a"+
		"\x368\x2\x2\x2CF6\x2D02\x3\x2\x2\x2\x2CF7\x2CF8\x5\x428\x215\x2\x2CF8"+
		"\x2CFA\a\x368\x2\x2\x2CF9\x2CFB\x5\x428\x215\x2\x2CFA\x2CF9\x3\x2\x2\x2"+
		"\x2CFA\x2CFB\x3\x2\x2\x2\x2CFB\x2CFC\x3\x2\x2\x2\x2CFC\x2CFD\a\x368\x2"+
		"\x2\x2CFD\x2D02\x3\x2\x2\x2\x2CFE\x2CFF\x5\x428\x215\x2\x2CFF\x2D00\a"+
		"\x368\x2\x2\x2D00\x2D02\x3\x2\x2\x2\x2D01\x2CEA\x3\x2\x2\x2\x2D01\x2CF0"+
		"\x3\x2\x2\x2\x2D01\x2CF7\x3\x2\x2\x2\x2D01\x2CFE\x3\x2\x2\x2\x2D01\x2D02"+
		"\x3\x2\x2\x2\x2D02\x2D03\x3\x2\x2\x2\x2D03\x2D04\x5\x428\x215\x2\x2D04"+
		"\x3E9\x3\x2\x2\x2\x2D05\x2D06\x5\x428\x215\x2\x2D06\x2D08\a\x368\x2\x2"+
		"\x2D07\x2D09\x5\x428\x215\x2\x2D08\x2D07\x3\x2\x2\x2\x2D08\x2D09\x3\x2"+
		"\x2\x2\x2D09\x2D0A\x3\x2\x2\x2\x2D0A\x2D0B\a\x368\x2\x2\x2D0B\x2D10\x3"+
		"\x2\x2\x2\x2D0C\x2D0D\x5\x428\x215\x2\x2D0D\x2D0E\a\x368\x2\x2\x2D0E\x2D10"+
		"\x3\x2\x2\x2\x2D0F\x2D05\x3\x2\x2\x2\x2D0F\x2D0C\x3\x2\x2\x2\x2D0F\x2D10"+
		"\x3\x2\x2\x2\x2D10\x2D11\x3\x2\x2\x2\x2D11\x2D20\x5\x428\x215\x2\x2D12"+
		"\x2D13\x5\x428\x215\x2\x2D13\x2D15\a\x368\x2\x2\x2D14\x2D16\x5\x428\x215"+
		"\x2\x2D15\x2D14\x3\x2\x2\x2\x2D15\x2D16\x3\x2\x2\x2\x2D16\x2D17\x3\x2"+
		"\x2\x2\x2D17\x2D18\a\x368\x2\x2\x2D18\x2D1D\x3\x2\x2\x2\x2D19\x2D1A\x5"+
		"\x428\x215\x2\x2D1A\x2D1B\a\x368\x2\x2\x2D1B\x2D1D\x3\x2\x2\x2\x2D1C\x2D12"+
		"\x3\x2\x2\x2\x2D1C\x2D19\x3\x2\x2\x2\x2D1C\x2D1D\x3\x2\x2\x2\x2D1D\x2D1E"+
		"\x3\x2\x2\x2\x2D1E\x2D20\a\x28C\x2\x2\x2D1F\x2D0F\x3\x2\x2\x2\x2D1F\x2D1C"+
		"\x3\x2\x2\x2\x2D20\x3EB\x3\x2\x2\x2\x2D21\x2D22\x5\x428\x215\x2\x2D22"+
		"\x2D23\a\x368\x2\x2\x2D23\x2D25\x3\x2\x2\x2\x2D24\x2D21\x3\x2\x2\x2\x2D24"+
		"\x2D25\x3\x2\x2\x2\x2D25\x2D26\x3\x2\x2\x2\x2D26\x2D27\x5\x428\x215\x2"+
		"\x2D27\x3ED\x3\x2\x2\x2\x2D28\x2D29\x5\x428\x215\x2\x2D29\x2D2A\a\x368"+
		"\x2\x2\x2D2A\x2D2C\x3\x2\x2\x2\x2D2B\x2D28\x3\x2\x2\x2\x2D2B\x2D2C\x3"+
		"\x2\x2\x2\x2D2C\x2D2D\x3\x2\x2\x2\x2D2D\x2D2E\x5\x428\x215\x2\x2D2E\x3EF"+
		"\x3\x2\x2\x2\x2D2F\x2D31\x5\x428\x215\x2\x2D30\x2D2F\x3\x2\x2\x2\x2D30"+
		"\x2D31\x3\x2\x2\x2\x2D31\x2D32\x3\x2\x2\x2\x2D32\x2D34\a\x368\x2\x2\x2D33"+
		"\x2D35\x5\x428\x215\x2\x2D34\x2D33\x3\x2\x2\x2\x2D34\x2D35\x3\x2\x2\x2"+
		"\x2D35\x2D36\x3\x2\x2\x2\x2D36\x2D37\a\x368\x2\x2\x2D37\x2D3A\x5\x428"+
		"\x215\x2\x2D38\x2D3A\x5\x3EE\x1F8\x2\x2D39\x2D30\x3\x2\x2\x2\x2D39\x2D38"+
		"\x3\x2\x2\x2\x2D3A\x3F1\x3\x2\x2\x2\x2D3B\x2D3D\x5\x428\x215\x2\x2D3C"+
		"\x2D3B\x3\x2\x2\x2\x2D3C\x2D3D\x3\x2\x2\x2\x2D3D\x2D3E\x3\x2\x2\x2\x2D3E"+
		"\x2D40\a\x368\x2\x2\x2D3F\x2D41\x5\x428\x215\x2\x2D40\x2D3F\x3\x2\x2\x2"+
		"\x2D40\x2D41\x3\x2\x2\x2\x2D41\x2D42\x3\x2\x2\x2\x2D42\x2D44\a\x368\x2"+
		"\x2\x2D43\x2D45\x5\x428\x215\x2\x2D44\x2D43\x3\x2\x2\x2\x2D44\x2D45\x3"+
		"\x2\x2\x2\x2D45\x2D46\x3\x2\x2\x2\x2D46\x2D47\a\x368\x2\x2\x2D47\x2D4A"+
		"\x5\x428\x215\x2\x2D48\x2D4A\x5\x3F0\x1F9\x2\x2D49\x2D3C\x3\x2\x2\x2\x2D49"+
		"\x2D48\x3\x2\x2\x2\x2D4A\x3F3\x3\x2\x2\x2\x2D4B\x2D4E\x5\x3E8\x1F5\x2"+
		"\x2D4C\x2D4E\a\x354\x2\x2\x2D4D\x2D4B\x3\x2\x2\x2\x2D4D\x2D4C\x3\x2\x2"+
		"\x2\x2D4E\x3F5\x3\x2\x2\x2\x2D4F\x2D50\t\x85\x2\x2\x2D50\x2D51\a\x368"+
		"\x2\x2\x2D51\x2D6F\x5\x428\x215\x2\x2D52\x2D54\x5\x428\x215\x2\x2D53\x2D52"+
		"\x3\x2\x2\x2\x2D53\x2D54\x3\x2\x2\x2\x2D54\x2D55\x3\x2\x2\x2\x2D55\x2D57"+
		"\a\x368\x2\x2\x2D56\x2D58\x5\x428\x215\x2\x2D57\x2D56\x3\x2\x2\x2\x2D57"+
		"\x2D58\x3\x2\x2\x2\x2D58\x2D59\x3\x2\x2\x2\x2D59\x2D5B\a\x368\x2\x2\x2D5A"+
		"\x2D5C\x5\x428\x215\x2\x2D5B\x2D5A\x3\x2\x2\x2\x2D5B\x2D5C\x3\x2\x2\x2"+
		"\x2D5C\x2D5D\x3\x2\x2\x2\x2D5D\x2D5E\a\x368\x2\x2\x2D5E\x2D6F\x5\x428"+
		"\x215\x2\x2D5F\x2D61\x5\x428\x215\x2\x2D60\x2D5F\x3\x2\x2\x2\x2D60\x2D61"+
		"\x3\x2\x2\x2\x2D61\x2D62\x3\x2\x2\x2\x2D62\x2D64\a\x368\x2\x2\x2D63\x2D65"+
		"\x5\x428\x215\x2\x2D64\x2D63\x3\x2\x2\x2\x2D64\x2D65\x3\x2\x2\x2\x2D65"+
		"\x2D66\x3\x2\x2\x2\x2D66\x2D67\a\x368\x2\x2\x2D67\x2D6F\x5\x428\x215\x2"+
		"\x2D68\x2D6A\x5\x428\x215\x2\x2D69\x2D68\x3\x2\x2\x2\x2D69\x2D6A\x3\x2"+
		"\x2\x2\x2D6A\x2D6B\x3\x2\x2\x2\x2D6B\x2D6C\a\x368\x2\x2\x2D6C\x2D6F\x5"+
		"\x428\x215\x2\x2D6D\x2D6F\x5\x428\x215\x2\x2D6E\x2D4F\x3\x2\x2\x2\x2D6E"+
		"\x2D53\x3\x2\x2\x2\x2D6E\x2D60\x3\x2\x2\x2\x2D6E\x2D69\x3\x2\x2\x2\x2D6E"+
		"\x2D6D\x3\x2\x2\x2\x2D6F\x3F7\x3\x2\x2\x2\x2D70\x2D72\x5\x428\x215\x2"+
		"\x2D71\x2D73\t\x93\x2\x2\x2D72\x2D71\x3\x2\x2\x2\x2D72\x2D73\x3\x2\x2"+
		"\x2\x2D73\x2D7B\x3\x2\x2\x2\x2D74\x2D75\a\x36F\x2\x2\x2D75\x2D77\x5\x428"+
		"\x215\x2\x2D76\x2D78\t\x93\x2\x2\x2D77\x2D76\x3\x2\x2\x2\x2D77\x2D78\x3"+
		"\x2\x2\x2\x2D78\x2D7A\x3\x2\x2\x2\x2D79\x2D74\x3\x2\x2\x2\x2D7A\x2D7D"+
		"\x3\x2\x2\x2\x2D7B\x2D79\x3\x2\x2\x2\x2D7B\x2D7C\x3\x2\x2\x2\x2D7C\x3F9"+
		"\x3\x2\x2\x2\x2D7D\x2D7B\x3\x2\x2\x2\x2D7E\x2D83\x5\x3FC\x1FF\x2\x2D7F"+
		"\x2D80\a\x36F\x2\x2\x2D80\x2D82\x5\x3FC\x1FF\x2\x2D81\x2D7F\x3\x2\x2\x2"+
		"\x2D82\x2D85\x3\x2\x2\x2\x2D83\x2D81\x3\x2\x2\x2\x2D83\x2D84\x3\x2\x2"+
		"\x2\x2D84\x3FB\x3\x2\x2\x2\x2D85\x2D83\x3\x2\x2\x2\x2D86\x2D88\x5\x428"+
		"\x215\x2\x2D87\x2D86\x3\x2\x2\x2\x2D87\x2D88\x3\x2\x2\x2\x2D88\x2D89\x3"+
		"\x2\x2\x2\x2D89\x2D8B\a\x368\x2\x2\x2D8A\x2D87\x3\x2\x2\x2\x2D8B\x2D8E"+
		"\x3\x2\x2\x2\x2D8C\x2D8A\x3\x2\x2\x2\x2D8C\x2D8D\x3\x2\x2\x2\x2D8D\x2D8F"+
		"\x3\x2\x2\x2\x2D8E\x2D8C\x3\x2\x2\x2\x2D8F\x2D90\x5\x428\x215\x2\x2D90"+
		"\x3FD\x3\x2\x2\x2\x2D91\x2D96\x5\x428\x215\x2\x2D92\x2D93\a\x36F\x2\x2"+
		"\x2D93\x2D95\x5\x428\x215\x2\x2D94\x2D92\x3\x2\x2\x2\x2D95\x2D98\x3\x2"+
		"\x2\x2\x2D96\x2D94\x3\x2\x2\x2\x2D96\x2D97\x3\x2\x2\x2\x2D97\x3FF\x3\x2"+
		"\x2\x2\x2D98\x2D96\x3\x2\x2\x2\x2D99\x2D9C\x5\x428\x215\x2\x2D9A\x2D9C"+
		"\a\x354\x2\x2\x2D9B\x2D99\x3\x2\x2\x2\x2D9B\x2D9A\x3\x2\x2\x2\x2D9C\x401"+
		"\x3\x2\x2\x2\x2D9D\x2D9E\t\t\x2\x2\x2D9E\x403\x3\x2\x2\x2\x2D9F\x2DA0"+
		"\tn\x2\x2\x2DA0\x405\x3\x2\x2\x2\x2DA1\x2DA3\aj\x2\x2\x2DA2\x2DA1\x3\x2"+
		"\x2\x2\x2DA2\x2DA3\x3\x2\x2\x2\x2DA3\x2DA4\x3\x2\x2\x2\x2DA4\x2DA5\ak"+
		"\x2\x2\x2DA5\x407\x3\x2\x2\x2\x2DA6\x2DB2\x5\x406\x204\x2\x2DA7\x2DA8"+
		"\a/\x2\x2\x2DA8\x2DAB\x5\x31E\x190\x2\x2DA9\x2DAA\a\x1A\x2\x2\x2DAA\x2DAC"+
		"\x5\x428\x215\x2\x2DAB\x2DA9\x3\x2\x2\x2\x2DAB\x2DAC\x3\x2\x2\x2\x2DAC"+
		"\x2DAF\x3\x2\x2\x2\x2DAD\x2DAE\a\xBD\x2\x2\x2DAE\x2DB0\a\xB6\x2\x2\x2DAF"+
		"\x2DAD\x3\x2\x2\x2\x2DAF\x2DB0\x3\x2\x2\x2\x2DB0\x2DB2\x3\x2\x2\x2\x2DB1"+
		"\x2DA6\x3\x2\x2\x2\x2DB1\x2DA7\x3\x2\x2\x2\x2DB2\x409\x3\x2\x2\x2\x2DB3"+
		"\x2DB9\x5\x3F2\x1FA\x2\x2DB4\x2DB9\a\x91\x2\x2\x2DB5\x2DB9\a\x61\x2\x2"+
		"\x2DB6\x2DB9\a\xED\x2\x2\x2DB7\x2DB9\a\xFC\x2\x2\x2DB8\x2DB3\x3\x2\x2"+
		"\x2\x2DB8\x2DB4\x3\x2\x2\x2\x2DB8\x2DB5\x3\x2\x2\x2\x2DB8\x2DB6\x3\x2"+
		"\x2\x2\x2DB8\x2DB7\x3\x2\x2\x2\x2DB9\x40B\x3\x2\x2\x2\x2DBA\x2DBB\a\r"+
		"\x2\x2\x2DBB\x2DBC\a\x2A1\x2\x2\x2DBC\x2DBD\a\x24F\x2\x2\x2DBD\x2DBE\a"+
		"\x36D\x2\x2\x2DBE\x2DBF\a\x354\x2\x2\x2DBF\x2DC0\a\x36E\x2\x2\x2DC0\x2DC1"+
		"\a\x24E\x2\x2\x2DC1\x2DC2\a\x35B\x2\x2\x2DC2\x2DC4\x5\x1CE\xE8\x2\x2DC3"+
		"\x2DC5\a\x370\x2\x2\x2DC4\x2DC3\x3\x2\x2\x2\x2DC4\x2DC5\x3\x2\x2\x2\x2DC5"+
		"\x40D\x3\x2\x2\x2\x2DC6\x2DC7\a\r\x2\x2\x2DC7\x2DC9\a\x12B\x2\x2\x2DC8"+
		"\x2DCA\a\x2A1\x2\x2\x2DC9\x2DC8\x3\x2\x2\x2\x2DC9\x2DCA\x3\x2\x2\x2\x2DCA"+
		"\x2DCB\x3\x2\x2\x2\x2DCB\x2DCC\a\x354\x2\x2\x2DCC\x2DCD\aK\x2\x2\x2DCD"+
		"\x2DCE\a\x320\x2\x2\x2DCE\x2DCF\x5\x412\x20A\x2\x2DCF\x2DD0\a\xA8\x2\x2"+
		"\x2DD0\x2DD1\a\x320\x2\x2\x2DD1\x2DD4\x5\x412\x20A\x2\x2DD2\x2DD3\a\x36F"+
		"\x2\x2\x2DD3\x2DD5\a\x357\x2\x2\x2DD4\x2DD2\x3\x2\x2\x2\x2DD4\x2DD5\x3"+
		"\x2\x2\x2\x2DD5\x2DD6\x3\x2\x2\x2\x2DD6\x2DD7\ap\x2\x2\x2DD7\x2DD8\a\x29F"+
		"\x2\x2\x2DD8\x2DEF\x5\x410\x209\x2\x2DD9\x2DE0\a\xBD\x2\x2\x2DDA\x2DDB"+
		"\t\x96\x2\x2\x2DDB\x2DDC\a\x35B\x2\x2\x2DDC\x2DDE\a\x354\x2\x2\x2DDD\x2DDF"+
		"\a\x36F\x2\x2\x2DDE\x2DDD\x3\x2\x2\x2\x2DDE\x2DDF\x3\x2\x2\x2\x2DDF\x2DE1"+
		"\x3\x2\x2\x2\x2DE0\x2DDA\x3\x2\x2\x2\x2DE0\x2DE1\x3\x2\x2\x2\x2DE1\x2DE8"+
		"\x3\x2\x2\x2\x2DE2\x2DE3\a\x2CF\x2\x2\x2DE3\x2DE4\a\x35B\x2\x2\x2DE4\x2DE6"+
		"\t\x2\x2\x2\x2DE5\x2DE7\a\x36F\x2\x2\x2DE6\x2DE5\x3\x2\x2\x2\x2DE6\x2DE7"+
		"\x3\x2\x2\x2\x2DE7\x2DE9\x3\x2\x2\x2\x2DE8\x2DE2\x3\x2\x2\x2\x2DE8\x2DE9"+
		"\x3\x2\x2\x2\x2DE9\x2DED\x3\x2\x2\x2\x2DEA\x2DEB\a\x139\x2\x2\x2DEB\x2DEC"+
		"\a\x35B\x2\x2\x2DEC\x2DEE\t\t\x2\x2\x2DED\x2DEA\x3\x2\x2\x2\x2DED\x2DEE"+
		"\x3\x2\x2\x2\x2DEE\x2DF0\x3\x2\x2\x2\x2DEF\x2DD9\x3\x2\x2\x2\x2DEF\x2DF0"+
		"\x3\x2\x2\x2\x2DF0\x2DF2\x3\x2\x2\x2\x2DF1\x2DF3\a\x370\x2\x2\x2DF2\x2DF1"+
		"\x3\x2\x2\x2\x2DF2\x2DF3\x3\x2\x2\x2\x2DF3\x40F\x3\x2\x2\x2\x2DF4\x2DF7"+
		"\x5\x428\x215\x2\x2DF5\x2DF7\x5\x312\x18A\x2\x2DF6\x2DF4\x3\x2\x2\x2\x2DF6"+
		"\x2DF5\x3\x2\x2\x2\x2DF7\x411\x3\x2\x2\x2\x2DF8\x2DFB\x5\x428\x215\x2"+
		"\x2DF9\x2DFB\x5\x312\x18A\x2\x2DFA\x2DF8\x3\x2\x2\x2\x2DFA\x2DF9\x3\x2"+
		"\x2\x2\x2DFB\x413\x3\x2\x2\x2\x2DFC\x2DFD\a<\x2\x2\x2DFD\x2DFE\a\x2A1"+
		"\x2\x2\x2DFE\x2E00\a\x354\x2\x2\x2DFF\x2E01\a\x370\x2\x2\x2E00\x2DFF\x3"+
		"\x2\x2\x2\x2E00\x2E01\x3\x2\x2\x2\x2E01\x2E0E\x3\x2\x2\x2\x2E02\x2E09"+
		"\a\xBD\x2\x2\x2E03\x2E04\a\x2B0\x2\x2\x2E04\x2E05\a\x35B\x2\x2\x2E05\x2E06"+
		"\t\x3\x2\x2\x2E06\x2E07\a\x128\x2\x2\x2E07\x2E08\a\x35B\x2\x2\x2E08\x2E0A"+
		"\t\x3\x2\x2\x2E09\x2E03\x3\x2\x2\x2\x2E09\x2E0A\x3\x2\x2\x2\x2E0A\x2E0C"+
		"\x3\x2\x2\x2\x2E0B\x2E0D\a\xFE\x2\x2\x2E0C\x2E0B\x3\x2\x2\x2\x2E0C\x2E0D"+
		"\x3\x2\x2\x2\x2E0D\x2E0F\x3\x2\x2\x2\x2E0E\x2E02\x3\x2\x2\x2\x2E0E\x2E0F"+
		"\x3\x2\x2\x2\x2E0F\x415\x3\x2\x2\x2\x2E10\x2E12\a\xB9\x2\x2\x2E11\x2E10"+
		"\x3\x2\x2\x2\x2E11\x2E12\x3\x2\x2\x2\x2E12\x2E13\x3\x2\x2\x2\x2E13\x2E14"+
		"\a\x36D\x2\x2\x2E14\x2E15\x5\x418\x20D\x2\x2E15\x2E1B\a\x36E\x2\x2\x2E16"+
		"\x2E18\a\x36F\x2\x2\x2E17\x2E16\x3\x2\x2\x2\x2E17\x2E18\x3\x2\x2\x2\x2E18"+
		"\x2E19\x3\x2\x2\x2\x2E19\x2E1A\a\x24E\x2\x2\x2E1A\x2E1C\x5\x1CE\xE8\x2"+
		"\x2E1B\x2E17\x3\x2\x2\x2\x2E1B\x2E1C\x3\x2\x2\x2\x2E1C\x2E1E\x3\x2\x2"+
		"\x2\x2E1D\x2E1F\a\x370\x2\x2\x2E1E\x2E1D\x3\x2\x2\x2\x2E1E\x2E1F\x3\x2"+
		"\x2\x2\x2E1F\x417\x3\x2\x2\x2\x2E20\x2E21\a\x2BE\x2\x2\x2E21\x2E22\a\x2A1"+
		"\x2\x2\x2E22\x2E23\aP\x2\x2\x2E23\x2E24\t\x3\x2\x2\x2E24\x2E25\aK\x2\x2"+
		"\x2E25\x2E27\x5\x41A\x20E\x2\x2E26\x2E28\a\x370\x2\x2\x2E27\x2E26\x3\x2"+
		"\x2\x2\x2E27\x2E28\x3\x2\x2\x2\x2E28\x419\x3\x2\x2\x2\x2E29\x2E2A\x5\x428"+
		"\x215\x2\x2E2A\x2E2B\a\x368\x2\x2\x2E2B\x2E2C\x5\x428\x215\x2\x2E2C\x2E2D"+
		"\a\x368\x2\x2\x2E2D\x2E2E\x5\x428\x215\x2\x2E2E\x2E31\x3\x2\x2\x2\x2E2F"+
		"\x2E31\x5\x428\x215\x2\x2E30\x2E29\x3\x2\x2\x2\x2E30\x2E2F\x3\x2\x2\x2"+
		"\x2E31\x41B\x3\x2\x2\x2\x2E32\x2E33\a\x224\x2\x2\x2E33\x2E34\ap\x2\x2"+
		"\x2E34\x2E35\a\x2A1\x2\x2\x2E35\x2E36\t\x3\x2\x2\x2E36\x2E37\a\x19F\x2"+
		"\x2\x2E37\x2E38\a\x25A\x2\x2\x2E38\x2E3C\x5\x312\x18A\x2\x2E39\x2E3A\a"+
		"\x36D\x2\x2\x2E3A\x2E3B\t\x3\x2\x2\x2E3B\x2E3D\a\x36E\x2\x2\x2E3C\x2E39"+
		"\x3\x2\x2\x2\x2E3C\x2E3D\x3\x2\x2\x2\x2E3D\x2E3F\x3\x2\x2\x2\x2E3E\x2E40"+
		"\a\x370\x2\x2\x2E3F\x2E3E\x3\x2\x2\x2\x2E3F\x2E40\x3\x2\x2\x2\x2E40\x41D"+
		"\x3\x2\x2\x2\x2E41\x2E42\t\x97\x2\x2\x2E42\x2E43\a\x36D\x2\x2\x2E43\x2E44"+
		"\a\x190\x2\x2\x2E44\x2E60\a\x36E\x2\x2\x2E45\x2E46\x5\x428\x215\x2\x2E46"+
		"\x2E47\a\x36D\x2\x2\x2E47\x2E48\a\x355\x2\x2\x2E48\x2E49\a\x36F\x2\x2"+
		"\x2E49\x2E4A\a\x355\x2\x2\x2E4A\x2E4B\a\x36E\x2\x2\x2E4B\x2E60\x3\x2\x2"+
		"\x2\x2E4C\x2E4D\x5\x428\x215\x2\x2E4D\x2E4E\a\x36D\x2\x2\x2E4E\x2E4F\a"+
		"\x355\x2\x2\x2E4F\x2E50\a\x36E\x2\x2\x2E50\x2E60\x3\x2\x2\x2\x2E51\x2E52"+
		"\x5\x428\x215\x2\x2E52\x2E58\aS\x2\x2\x2E53\x2E54\a\x36D\x2\x2\x2E54\x2E55"+
		"\a\x355\x2\x2\x2E55\x2E56\a\x36F\x2\x2\x2E56\x2E57\a\x355\x2\x2\x2E57"+
		"\x2E59\a\x36E\x2\x2\x2E58\x2E53\x3\x2\x2\x2\x2E58\x2E59\x3\x2\x2\x2\x2E59"+
		"\x2E60\x3\x2\x2\x2\x2E5A\x2E5C\a\x36\x2\x2\x2E5B\x2E5D\a\x7F\x2\x2\x2E5C"+
		"\x2E5B\x3\x2\x2\x2\x2E5C\x2E5D\x3\x2\x2\x2\x2E5D\x2E60\x3\x2\x2\x2\x2E5E"+
		"\x2E60\x5\x428\x215\x2\x2E5F\x2E41\x3\x2\x2\x2\x2E5F\x2E45\x3\x2\x2\x2"+
		"\x2E5F\x2E4C\x3\x2\x2\x2\x2E5F\x2E51\x3\x2\x2\x2\x2E5F\x2E5A\x3\x2\x2"+
		"\x2\x2E5F\x2E5E\x3\x2\x2\x2\x2E60\x41F\x3\x2\x2\x2\x2E61\x2E65\ak\x2\x2"+
		"\x2E62\x2E65\a/\x2\x2\x2E63\x2E65\x5\x422\x212\x2\x2E64\x2E61\x3\x2\x2"+
		"\x2\x2E64\x2E62\x3\x2\x2\x2\x2E64\x2E63\x3\x2\x2\x2\x2E65\x421\x3\x2\x2"+
		"\x2\x2E66\x2E76\a\x357\x2\x2\x2E67\x2E76\a\x358\x2\x2\x2E68\x2E6A\x5\x424"+
		"\x213\x2\x2E69\x2E68\x3\x2\x2\x2\x2E69\x2E6A\x3\x2\x2\x2\x2E6A\x2E6B\x3"+
		"\x2\x2\x2\x2E6B\x2E76\a\x355\x2\x2\x2E6C\x2E6E\x5\x424\x213\x2\x2E6D\x2E6C"+
		"\x3\x2\x2\x2\x2E6D\x2E6E\x3\x2\x2\x2\x2E6E\x2E6F\x3\x2\x2\x2\x2E6F\x2E76"+
		"\t\x98\x2\x2\x2E70\x2E72\x5\x424\x213\x2\x2E71\x2E70\x3\x2\x2\x2\x2E71"+
		"\x2E72\x3\x2\x2\x2\x2E72\x2E73\x3\x2\x2\x2\x2E73\x2E74\a\x36C\x2\x2\x2E74"+
		"\x2E76\t\x99\x2\x2\x2E75\x2E66\x3\x2\x2\x2\x2E75\x2E67\x3\x2\x2\x2\x2E75"+
		"\x2E69\x3\x2\x2\x2\x2E75\x2E6D\x3\x2\x2\x2\x2E75\x2E71\x3\x2\x2\x2\x2E76"+
		"\x423\x3\x2\x2\x2\x2E77\x2E78\tz\x2\x2\x2E78\x425\x3\x2\x2\x2\x2E79\x2E7A"+
		"\t\x9A\x2\x2\x2E7A\x427\x3\x2\x2\x2\x2E7B\x2E80\a\x356\x2\x2\x2E7C\x2E80"+
		"\a\x351\x2\x2\x2E7D\x2E80\a\x353\x2\x2\x2E7E\x2E80\x5\x426\x214\x2\x2E7F"+
		"\x2E7B\x3\x2\x2\x2\x2E7F\x2E7C\x3\x2\x2\x2\x2E7F\x2E7D\x3\x2\x2\x2\x2E7F"+
		"\x2E7E\x3\x2\x2\x2\x2E80\x429\x3\x2\x2\x2\x2E81\x2E82\a\x356\x2\x2\x2E82"+
		"\x42B\x3\x2\x2\x2\x2E83\x2E86\x5\x428\x215\x2\x2E84\x2E86\a\x357\x2\x2"+
		"\x2E85\x2E83\x3\x2\x2\x2\x2E85\x2E84\x3\x2\x2\x2\x2E86\x42D\x3\x2\x2\x2"+
		"\x2E87\x2E97\a\x35B\x2\x2\x2E88\x2E97\a\x35C\x2\x2\x2E89\x2E97\a\x35D"+
		"\x2\x2\x2E8A\x2E8B\a\x35D\x2\x2\x2E8B\x2E97\a\x35B\x2\x2\x2E8C\x2E8D\a"+
		"\x35C\x2\x2\x2E8D\x2E97\a\x35B\x2\x2\x2E8E\x2E8F\a\x35D\x2\x2\x2E8F\x2E97"+
		"\a\x35C\x2\x2\x2E90\x2E91\a\x35E\x2\x2\x2E91\x2E97\a\x35B\x2\x2\x2E92"+
		"\x2E93\a\x35E\x2\x2\x2E93\x2E97\a\x35C\x2\x2\x2E94\x2E95\a\x35E\x2\x2"+
		"\x2E95\x2E97\a\x35D\x2\x2\x2E96\x2E87\x3\x2\x2\x2\x2E96\x2E88\x3\x2\x2"+
		"\x2\x2E96\x2E89\x3\x2\x2\x2\x2E96\x2E8A\x3\x2\x2\x2\x2E96\x2E8C\x3\x2"+
		"\x2\x2\x2E96\x2E8E\x3\x2\x2\x2\x2E96\x2E90\x3\x2\x2\x2\x2E96\x2E92\x3"+
		"\x2\x2\x2\x2E96\x2E94\x3\x2\x2\x2\x2E97\x42F\x3\x2\x2\x2\x2E98\x2E99\t"+
		"\x9B\x2\x2\x2E99\x431\x3\x2\x2\x2\x2E9A\x2E9C\a\x355\x2\x2\x2E9B\x2E9D"+
		"\t\x9C\x2\x2\x2E9C\x2E9B\x3\x2\x2\x2\x2E9C\x2E9D\x3\x2\x2\x2\x2E9D\x433"+
		"\x3\x2\x2\x2\x67F\x437\x43F\x444\x448\x44E\x450\x455\x45C\x460\x466\x46A"+
		"\x46E\x472\x476\x47A\x47E\x482\x485\x48C\x52E\x535\x543\x547\x54C\x551"+
		"\x555\x559\x55E\x563\x565\x569\x56C\x573\x576\x57F\x582\x58D\x592\x597"+
		"\x59C\x5A1\x5A7\x5AB\x5AE\x5B2\x5B5\x5B8\x5BF\x5C3\x5C5\x5CA\x5D0\x5D4"+
		"\x5E1\x5E7\x5EA\x5F3\x5F6\x60B\x613\x618\x61B\x620\x623\x628\x630\x635"+
		"\x638\x63D\x643\x648\x659\x65C\x65F\x662\x667\x670\x67F\x690\x69B\x6A1"+
		"\x6B0\x6BF\x6C8\x6CC\x6D1\x6D7\x6DD\x6E0\x6E5\x6EA\x6F2\x6FC\x70F\x717"+
		"\x724\x726\x732\x734\x73B\x744\x74A\x753\x761\x76B\x775\x79D\x7B4\x7D8"+
		"\x7DA\x7EC\x804\x807\x815\x835\x847\x84A\x84F\x852\x857\x85A\x85F\x862"+
		"\x867\x86A\x872\x875\x87D\x88A\x895\x89A\x89E\x8A4\x8BB\x8C7\x8D2\x8D7"+
		"\x8DB\x8E1\x8E3\x8F0\x907\x90E\x917\x91C\x91F\x924\x927\x92C\x931\x94D"+
		"\x955\x95B\x962\x964\x971\x978\x987\x999\x99C\x99E\x9A3\x9A7\x9AA\x9AC"+
		"\x9B2\x9B5\x9B7\x9BD\x9BF\x9D5\x9DD\x9E5\x9E7\x9E9\x9F2\xA07\xA14\xA23"+
		"\xA27\xA4A\xA4D\xA52\xA69\xA6C\xA71\xA8B\xA99\xA9E\xAA6\xAAB\xAB2\xAC7"+
		"\xAEC\xAF1\xB04\xB10\xB13\xB18\xB1B\xB21\xB30\xB35\xB3D\xB40\xB45\xB4A"+
		"\xB4D\xB65\xB6C\xB71\xB76\xB7B\xB7D\xB84\xB91\xB97\xB9C\xBA4\xBB4\xBBB"+
		"\xBC0\xBC5\xBC8\xBCE\xBD4\xBD9\xBDE\xBE3\xBE6\xBEC\xBF2\xBFD\xC00\xC0A"+
		"\xC10\xC14\xC18\xC35\xC42\xC48\xC52\xC55\xC69\xC6D\xC71\xC76\xC85\xC8C"+
		"\xC95\xC9D\xCA0\xCA5\xCAA\xCB2\xCB8\xCBC\xCC2\xCC7\xCCB\xCD2\xCDA\xCE2"+
		"\xCEB\xCF0\xCF4\xCF7\xCFB\xD01\xD06\xD0E\xD16\xD1C\xD22\xD25\xD2A\xD2D"+
		"\xD34\xD36\xD39\xD3F\xD42\xD47\xD4A\xD4F\xD52\xD57\xD5A\xD5F\xD62\xD65"+
		"\xD68\xD6F\xD73\xD7A\xD81\xD87\xD94\xD98\xD9D\xDA7\xDB0\xDB4\xDC0\xDC6"+
		"\xDCB\xDCD\xDE1\xDE5\xDED\xDF6\xDFC\xE02\xE0A\xE0C\xE16\xE1A\xE1D\xE21"+
		"\xE26\xE2C\xE2F\xE33\xE3B\xE3D\xE40\xE48\xE50\xE57\xE5E\xE60\xE62\xE67"+
		"\xE6D\xE70\xE72\xE74\xE77\xE7C\xE7F\xE84\xE93\xE9A\xEA1\xEA3\xEA5\xEAA"+
		"\xEB0\xEB3\xEB5\xEB7\xEBA\xEBF\xEC2\xEC7\xED4\xED9\xEE2\xEE7\xEED\xEF1"+
		"\xEF5\xF06\xF08\xF12\xF17\xF19\xF1D\xF23\xF2B\xF30\xF33\xF3B\xF3E\xF43"+
		"\xF48\xF4D\xF52\xF57\xF5C\xF60\xF65\xF70\xF75\xF78\xF7B\xF80\xF83\xF88"+
		"\xF8B\xF90\xF93\xF98\xF9B\xFA0\xFA3\xFA8\xFAE\xFB3\xFB6\xFBB\xFC2\xFC4"+
		"\xFCA\xFD3\xFD8\xFDA\xFE6\xFEC\xFF8\xFFB\x1000\x1002\x100C\x1011\x1013"+
		"\x1017\x101D\x102F\x1031\x1040\x1052\x105A\x1064\x1074\x1089\x1094\x109A"+
		"\x10A3\x10AC\x10B2\x10BB\x10C0\x10C3\x10C8\x10CB\x10D0\x10D3\x10DB\x10E1"+
		"\x10E5\x10EC\x10F2\x10F6\x10F9\x10FB\x10FE\x1103\x1106\x110B\x110E\x1113"+
		"\x1116\x111B\x111E\x112D\x1138\x1144\x114B\x1152\x1156\x115B\x115E\x1163"+
		"\x1166\x116B\x116E\x1177\x117E\x118D\x1190\x1195\x11A0\x11A9\x11B4\x11BA"+
		"\x11BC\x11C4\x11CC\x11D1\x11DC\x11DF\x11E3\x11EB\x11EF\x11F3\x11FB\x1200"+
		"\x1208\x120D\x1211\x1213\x1218\x1221\x1224\x1229\x1230\x1236\x1238\x123D"+
		"\x1243\x1249\x124E\x1254\x125B\x1260\x1265\x126A\x126D\x1271\x1274\x1278"+
		"\x127C\x127F\x1283\x1288\x128C\x1290\x129A\x12A0\x12A7\x12AA\x12B0\x12B6"+
		"\x12BB\x12BD\x12C3\x12C5\x12CA\x12D0\x12D6\x12DB\x12DD\x12E1\x12E5\x12E8"+
		"\x12F6\x12FB\x12FF\x130C\x130F\x1311\x1319\x1323\x1329\x1330\x1333\x1339"+
		"\x133F\x1344\x1346\x134C\x134E\x1353\x1359\x135F\x1365\x136A\x136C\x1370"+
		"\x1374\x1377\x1385\x138A\x138E\x139B\x139E\x13A0\x13A8\x13B3\x13BC\x13C5"+
		"\x13D0\x13D9\x13E2\x13EE\x13F2\x13F7\x13F9\x13FB\x1400\x1404\x1409\x140B"+
		"\x140D\x141B\x1420\x1436\x144C\x1451\x145E\x1466\x147A\x147D\x1483\x148B"+
		"\x1492\x1497\x149B\x149F\x14A2\x14A9\x14BB\x14BD\x14D1\x14D8\x14DF\x14E4"+
		"\x14E9\x14EF\x14F4\x14F6\x14FD\x1503\x1509\x150C\x1512\x151C\x151F\x1526"+
		"\x1529\x152E\x1530\x1538\x153C\x1542\x1547\x1549\x154C\x1553\x1559\x1560"+
		"\x1563\x1569\x156E\x1570\x1573\x157B\x1581\x1588\x158B\x1591\x1596\x1598"+
		"\x15A0\x15A8\x15AE\x15B3\x15B5\x15BF\x15C4\x15CE\x15D4\x15E0\x15E2\x15E9"+
		"\x15EF\x15F5\x15FB\x1600\x1602\x1609\x1611\x1617\x1625\x1627\x162A\x162F"+
		"\x1631\x163D\x1643\x1651\x1653\x1656\x165B\x165E\x1663\x1665\x166E\x1675"+
		"\x1681\x1691\x169A\x16A3\x16A6\x16AB\x16B2\x16B4\x16BA\x16BC\x16C4\x16C6"+
		"\x16CC\x16CE\x16D4\x16D6\x16DD\x16E0\x16E2\x16E5\x16E9\x16EB\x16F4\x16FA"+
		"\x16FE\x1706\x170D\x1713\x1715\x1720\x1725\x172B\x172F\x1739\x1741\x174D"+
		"\x1750\x1758\x175A\x175D\x1761\x1764\x176D\x1770\x1773\x177B\x1781\x1788"+
		"\x178C\x1797\x179D\x179F\x17A8\x17AC\x17B3\x17B8\x17BB\x17C3\x17C7\x17CA"+
		"\x17CE\x17D1\x17D5\x17DC\x17E0\x17E2\x17E4\x17E7\x17EA\x17ED\x17F3\x17F6"+
		"\x17FE\x1800\x1803\x1807\x180A\x1810\x1813\x1817\x181A\x181D\x1824\x1827"+
		"\x182E\x1834\x1838\x1842\x1845\x1848\x184E\x1851\x1854\x1857\x185B\x185E"+
		"\x1866\x1868\x186C\x186F\x1877\x187B\x187F\x1886\x188A\x188C\x188E\x1891"+
		"\x1894\x1897\x189F\x18A5\x18AB\x18AD\x18B1\x18B4\x18BC\x18C0\x18C7\x18CA"+
		"\x18D3\x18D6\x18DA\x18E2\x18E5\x18E9\x18EC\x18FA\x18FE\x1901\x1905\x1908"+
		"\x190D\x190F\x1917\x191B\x191E\x1922\x192E\x1931\x1935\x1938\x193C\x194C"+
		"\x194E\x1950\x1953\x1956\x195B\x195E\x1964\x1967\x196E\x1972\x1974\x197C"+
		"\x197F\x1983\x198A\x198D\x1999\x199E\x19A1\x19AD\x19B0\x19B6\x19BD\x19C2"+
		"\x19C7\x19CD\x19D1\x19D8\x19DB\x19E3\x19EB\x19EE\x19F6\x19FD\x1A04\x1A07"+
		"\x1A11\x1A18\x1A1D\x1A20\x1A2A\x1A2D\x1A30\x1A38\x1A43\x1A46\x1A49\x1A4F"+
		"\x1A54\x1A58\x1A62\x1A65\x1A68\x1A6E\x1A74\x1A7A\x1A7F\x1A83\x1A87\x1A8A"+
		"\x1A8F\x1A9D\x1AAD\x1AB1\x1AB7\x1AB9\x1ABC\x1AC0\x1AC5\x1ACA\x1AD2\x1AD7"+
		"\x1ADB\x1AE0\x1AE5\x1AEB\x1AF0\x1AF3\x1AF8\x1AFE\x1B02\x1B0B\x1B15\x1B18"+
		"\x1B21\x1B29\x1B2C\x1B33\x1B36\x1B4F\x1B65\x1B68\x1B6F\x1B77\x1B7D\x1B80"+
		"\x1B83\x1B86\x1B8C\x1B90\x1B98\x1BA4\x1BB0\x1BB4\x1BB7\x1BC0\x1BC6\x1BD0"+
		"\x1BD9\x1BE3\x1BE9\x1BEF\x1BF6\x1BFC\x1C00\x1C0B\x1C1A\x1C1C\x1C37\x1C42"+
		"\x1C4A\x1C55\x1C5A\x1C5D\x1C65\x1C6F\x1C76\x1C7D\x1C7F\x1C8B\x1C96\x1C9A"+
		"\x1C9F\x1CA2\x1CA4\x1CA7\x1CB3\x1CB5\x1CB7\x1CBA\x1CBF\x1CC2\x1CC7\x1CD1"+
		"\x1CD5\x1CDA\x1CDD\x1CDF\x1CE2\x1CEE\x1CF0\x1CF2\x1CF5\x1CFB\x1D05\x1D19"+
		"\x1D1F\x1D38\x1D3A\x1D54\x1D5A\x1D65\x1D6D\x1D70\x1D7E\x1D86\x1D8D\x1DA4"+
		"\x1DB1\x1DB7\x1DBE\x1DC6\x1DC9\x1DCC\x1DD5\x1DDF\x1DE6\x1DEA\x1DEE\x1DF4"+
		"\x1DFB\x1DFF\x1E05\x1E0C\x1E13\x1E16\x1E1C\x1E23\x1E27\x1E2C\x1E31\x1E36"+
		"\x1E3E\x1E42\x1E48\x1E4F\x1E53\x1E5C\x1E64\x1E6A\x1E70\x1E81\x1E85\x1E8D"+
		"\x1E91\x1E94\x1E9C\x1EA0\x1EA5\x1EA9\x1EB3\x1EB8\x1EBA\x1EC1\x1EC5\x1EC9"+
		"\x1ECD\x1ED0\x1ED4\x1EDA\x1EDE\x1EE0\x1EE7\x1EEE\x1EF1\x1EF4\x1EFB\x1F00"+
		"\x1F05\x1F09\x1F0F\x1F13\x1F15\x1F1A\x1F1F\x1F23\x1F28\x1F2E\x1F32\x1F36"+
		"\x1F38\x1F3C\x1F40\x1F44\x1F48\x1F4E\x1F51\x1F57\x1F5B\x1F5F\x1F65\x1F6B"+
		"\x1F6D\x1F70\x1F74\x1F78\x1F7C\x1F82\x1F85\x1F8B\x1F91\x1F94\x1F9A\x1F9D"+
		"\x1FA3\x1FA6\x1FAA\x1FAE\x1FB2\x1FB7\x1FBA\x1FBE\x1FC2\x1FD3\x1FD5\x1FD7"+
		"\x1FDA\x1FE1\x1FE6\x1FEA\x1FF0\x1FF4\x1FF6\x1FFB\x2000\x2004\x2009\x200F"+
		"\x2013\x2017\x2019\x201D\x2021\x2025\x2029\x202F\x2032\x2038\x203C\x2040"+
		"\x2046\x204C\x204E\x2051\x2055\x2059\x205D\x2063\x2066\x206C\x2072\x2075"+
		"\x207B\x207E\x2084\x2087\x208B\x208F\x2093\x2098\x209B\x209F\x20A3\x20A9"+
		"\x20AC\x20B0\x20C1\x20C3\x20C5\x20C8\x20D6\x20DC\x20E4\x20EB\x20ED\x20F0"+
		"\x2111\x2115\x2119\x2120\x2129\x2131\x2134\x2137\x213B\x213F\x2142\x214A"+
		"\x214F\x2154\x2158\x215A\x2161\x2169\x216C\x2177\x217C\x2180\x2183\x2187"+
		"\x218C\x2193\x2195\x219B\x219E\x21A6\x21AC\x21B0\x21B3\x21BC\x21BF\x21C5"+
		"\x21CA\x21D1\x21D6\x21DE\x21E3\x21EF\x21F1\x21FC\x2203\x220D\x2224\x2231"+
		"\x2241\x2246\x224D\x2250\x2254\x2256\x2267\x2276\x227E\x2287\x228F\x2297"+
		"\x22A8\x22B5\x22C1\x22D9\x22E0\x22E4\x22EE\x22F2\x2303\x232A\x2331\x2339"+
		"\x2345\x235B\x2364\x2366\x236C\x2371\x2378\x2385\x2387\x2389\x238C\x238F"+
		"\x2396\x2399\x239F\x23A4\x23A6\x23A9\x23AF\x23B7\x23B9\x23BC\x23C0\x23C3"+
		"\x23CD\x23D0\x23D4\x23D7\x23DD\x23E0\x23E2\x23E6\x23EA\x23EF\x23F3\x23F8"+
		"\x23FD\x2401\x240B\x240E\x2411\x2419\x241D\x2420\x2424\x2429\x2431\x2436"+
		"\x243C\x2441\x244A\x244D\x2450\x245B\x2460\x246B\x2470\x2476\x247D\x247F"+
		"\x2483\x2486\x248A\x248E\x2496\x249B\x249D\x24A0\x24A5\x24AE\x24B2\x24B7"+
		"\x24BA\x24BD\x24C3\x24CB\x24D3\x24D6\x24D9\x24DD\x24E2\x24E5\x24EB\x24EF"+
		"\x24F5\x24FD\x2503\x2505\x250B\x250E\x251D\x2520\x2523\x2525\x2530\x253B"+
		"\x2544\x254B\x2552\x255C\x255E\x2560\x2563\x2566\x2571\x2573\x2575\x2578"+
		"\x257D\x2588\x2591\x2594\x2597\x25A0\x25A3\x25A6\x25AD\x25B0\x25B7\x25BD"+
		"\x25CC\x25CF\x25D6\x25DE\x25E5\x25EB\x25F6\x2604\x260B\x260D\x2619\x2620"+
		"\x2624\x262C\x2630\x2634\x263A\x2644\x264E\x2658\x2660\x266C\x2672\x2676"+
		"\x2680\x2684\x2688\x2692\x2698\x26A0\x26A8\x26AA\x26C2\x26CE\x26D5\x26DD"+
		"\x26E4\x26EA\x26F1\x26F5\x26FA\x26FC\x2700\x2704\x270B\x270F\x2712\x2717"+
		"\x271B\x271F\x2724\x272B\x272E\x2732\x2737\x273B\x2744\x274B\x2754\x2760"+
		"\x2762\x276C\x276F\x2774\x277D\x277F\x2781\x2786\x2788\x2790\x2795\x279D"+
		"\x27A2\x27A8\x27AA\x27B4\x27B6\x27BA\x27BE\x27C0\x27C9\x27CB\x27D0\x27DB"+
		"\x27FD\x280D\x2814\x2816\x281D\x2826\x282E\x2834\x283C\x283F\x2846\x284C"+
		"\x284F\x2851\x2859\x285B\x2863\x286A\x2872\x2874\x287B\x2883\x2889\x2892"+
		"\x2895\x2899\x289D\x28A1\x28A8\x28AA\x28AE\x28B3\x28B5\x28B9\x28BE\x28C0"+
		"\x28C7\x28C9\x28D0\x28D2\x28DB\x28E3\x28E6\x28ED\x28F5\x28F8\x28FF\x2905"+
		"\x290C\x2912\x2916\x292F\x2932\x2936\x2938\x293B\x2969\x296E\x2982\x2986"+
		"\x298A\x299A\x29A3\x29A9\x29AE\x29C2\x29C8\x29CF\x29D3\x29E2\x29E8\x29FB"+
		"\x2A06\x2A13\x2A24\x2A2A\x2A31\x2A35\x2A50\x2A8A\x2A8E\x2AC7\x2AC9\x2ACF"+
		"\x2AD9\x2AEC\x2AFC\x2B0C\x2B1C\x2B2F\x2B34\x2B3A\x2B3D\x2B42\x2B47\x2B50"+
		"\x2B55\x2B5B\x2B64\x2B6E\x2B71\x2B7F\x2B85\x2B8E\x2B92\x2B9A\x2BA1\x2BAE"+
		"\x2BB6\x2BC3\x2BCA\x2BD0\x2BD4\x2BE5\x2BF4\x2BF6\x2C03\x2C13\x2C1B\x2C1F"+
		"\x2C22\x2C2B\x2C2E\x2C31\x2C3E\x2C42\x2C4A\x2C50\x2C58\x2C5F\x2C65\x2C74"+
		"\x2C7D\x2C83\x2C89\x2C8C\x2C90\x2C97\x2C9F\x2CA2\x2CA8\x2CAE\x2CB0\x2CB6"+
		"\x2CB9\x2CBB\x2CC1\x2CC3\x2CD1\x2CD8\x2CE1\x2CE8\x2CFA\x2D01\x2D08\x2D0F"+
		"\x2D15\x2D1C\x2D1F\x2D24\x2D2B\x2D30\x2D34\x2D39\x2D3C\x2D40\x2D44\x2D49"+
		"\x2D4D\x2D53\x2D57\x2D5B\x2D60\x2D64\x2D69\x2D6E\x2D72\x2D77\x2D7B\x2D83"+
		"\x2D87\x2D8C\x2D96\x2D9B\x2DA2\x2DAB\x2DAF\x2DB1\x2DB8\x2DC4\x2DC9\x2DD4"+
		"\x2DDE\x2DE0\x2DE6\x2DE8\x2DED\x2DEF\x2DF2\x2DF6\x2DFA\x2E00\x2E09\x2E0C"+
		"\x2E0E\x2E11\x2E17\x2E1B\x2E1E\x2E27\x2E30\x2E3C\x2E3F\x2E58\x2E5C\x2E5F"+
		"\x2E64\x2E69\x2E6D\x2E71\x2E75\x2E7F\x2E85\x2E96\x2E9C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ConsoleAntlrSQL
